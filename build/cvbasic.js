
var Module;
if (typeof Module === 'undefined') Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {

  function runWithFS() {

function assert(check, msg) {
  if (!check) throw msg + new Error().stack;
}
fileData0 = [];
fileData0.push.apply(fileData0, [114, 111, 109, 95, 101, 110, 100, 58, 13, 10, 9, 116, 105, 109, 101, 115, 32, 36, 98, 102, 101, 56, 45, 36, 32, 100, 98, 32, 36, 102, 102, 13, 10, 13, 10, 9, 100, 119, 32, 83, 84, 65, 82, 84, 13, 10, 9, 100, 119, 32, 48, 9, 9, 59, 32, 73, 82, 81, 50, 32, 104, 97, 110, 100, 108, 101, 114, 46, 13, 10, 13, 10, 9, 100, 119, 32, 48, 13, 10, 9, 100, 119, 32, 48, 13, 10, 13, 10, 9, 59, 32, 73, 110, 105, 116, 105, 97, 108, 32, 86, 68, 80, 32, 114, 101, 103, 105, 115, 116, 101, 114, 115, 13, 10, 9, 100, 98, 32, 36, 48, 50, 13, 10, 9, 100, 98, 32, 36, 56, 50, 13, 10, 9, 100, 98, 32, 36, 48, 54, 13, 10, 9, 100, 98, 32, 36, 102, 102, 13, 10, 9, 100, 98, 32, 36, 48, 48, 13, 10, 9, 100, 98, 32, 36, 51, 54, 13, 10, 9, 100, 98, 32, 36, 48, 55, 13, 10, 9, 100, 98, 32, 36, 48, 49, 13, 10, 13, 10, 9, 100, 119, 32, 48, 13, 10, 9, 100, 119, 32, 48, 13, 10, 9, 100, 119, 32, 66, 73, 79, 83, 95, 78, 77, 73, 95, 82, 69, 83, 69, 84, 95, 65, 68, 68, 82, 9, 59, 32, 72, 97, 110, 100, 108, 101, 114, 32, 102, 111, 114, 32, 114, 101, 115, 101, 116, 46, 13, 10, 9, 100, 119, 32, 105, 110, 116, 95, 104, 97, 110, 100, 108, 101, 114, 9, 59, 32, 73, 82, 81, 49, 32, 104, 97, 110, 100, 108, 101, 114, 46, 13, 10]);
Module['FS_createDataFile']('/', 'cvbasic_6502_epilogue.asm', fileData0, true, true);
fileData1 = [];
fileData1.push.apply(fileData1, [9, 59, 13, 10, 9, 59, 32, 67, 86, 66, 97, 115, 105, 99, 32, 112, 114, 111, 108, 111, 103, 117, 101, 32, 40, 66, 65, 83, 73, 67, 32, 99, 111, 109, 112, 105, 108, 101, 114, 44, 32, 54, 53, 48, 50, 32, 116, 97, 114, 103, 101, 116, 41, 13, 10, 9, 59, 13, 10, 9, 59, 32, 98, 121, 32, 79, 115, 99, 97, 114, 32, 84, 111, 108, 101, 100, 111, 32, 71, 46, 13, 10, 9, 59, 32, 104, 116, 116, 112, 115, 58, 47, 47, 110, 97, 110, 111, 99, 104, 101, 115, 115, 46, 111, 114, 103, 47, 13, 10, 9, 59, 13, 10, 9, 59, 32, 67, 114, 101, 97, 116, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 65, 117, 103, 47, 48, 53, 47, 50, 48, 50, 52, 46, 13, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 65, 117, 103, 47, 48, 54, 47, 50, 48, 50, 52, 46, 32, 80, 111, 114, 116, 101, 100, 32, 109, 117, 115, 105, 99, 32, 112, 108, 97, 121, 101, 114, 32, 102, 114, 111, 109, 32, 90, 56, 48, 32, 67, 86, 66, 97, 115, 105, 99, 46, 13, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 65, 117, 103, 47, 48, 55, 47, 50, 48, 50, 52, 46, 32, 80, 111, 114, 116, 101, 100, 32, 80, 108, 101, 116, 116, 101, 114, 32, 100, 101, 99, 111, 109, 112, 114, 101, 115, 115, 111, 114, 32, 102, 114, 111, 109, 32, 90, 56, 48, 32, 67, 86, 66, 97, 115, 105, 99, 46, 13, 10, 9, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 65, 100, 100, 101, 100, 32, 86, 68, 80, 32, 100, 101, 108, 97, 121, 115, 46, 13, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 65, 117, 103, 47, 49, 54, 47, 50, 48, 50, 52, 46, 32, 67, 111, 114, 114, 101, 99, 116, 101, 100, 32, 98, 117, 103, 32, 105, 110, 32, 100, 101, 102, 105, 110, 101, 95, 99, 104, 97, 114, 95, 117, 110, 112, 97, 99, 107, 46, 13, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 65, 117, 103, 47, 50, 49, 47, 50, 48, 50, 52, 46, 32, 65, 100, 100, 101, 100, 32, 115, 117, 112, 112, 111, 114, 116, 32, 102, 111, 114, 32, 107, 101, 121, 112, 97, 100, 46, 13, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 65, 117, 103, 47, 51, 48, 47, 50, 48, 50, 52, 46, 32, 67, 104, 97, 110, 103, 101, 100, 32, 109, 111, 100, 101, 32, 98, 105, 116, 32, 116, 111, 32, 98, 105, 116, 32, 51, 32, 40, 97, 118, 111, 105, 100, 115, 32, 99, 111, 108, 108, 105, 115, 105, 111, 110, 13, 10, 9, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 32, 102, 108, 105, 99, 107, 101, 114, 32, 102, 108, 97, 103, 41, 46, 13, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 79, 99, 116, 47, 49, 53, 47, 50, 48, 50, 52, 46, 32, 65, 100, 100, 101, 100, 32, 76, 68, 73, 82, 77, 86, 46, 13, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 78, 111, 118, 47, 49, 50, 47, 50, 48, 50, 52, 46, 32, 83, 97, 118, 101, 115, 32, 116, 104, 101, 32, 86, 68, 80, 32, 115, 116, 97, 116, 117, 115, 46, 13, 10, 9, 59, 13, 10, 13, 10, 9, 67, 80, 85, 32, 54, 53, 48, 50, 13, 10, 13, 10, 66, 73, 79, 83, 95, 78, 77, 73, 95, 82, 69, 83, 69, 84, 95, 65, 68, 68, 82, 58, 9, 69, 81, 85, 32, 36, 70, 56, 48, 56, 13, 10, 66, 73, 79, 83, 95, 82, 69, 65, 68, 95, 67, 79, 78, 84, 82, 79, 76, 76, 69, 82, 83, 58, 9, 69, 81, 85, 32, 36, 70, 65, 48, 48, 13, 10, 66, 73, 79, 83, 95, 87, 82, 73, 84, 69, 95, 80, 83, 71, 58, 9, 9, 69, 81, 85, 32, 36, 70, 69, 55, 55, 13, 10, 13, 10, 9, 59, 13, 10, 9, 59, 32, 80, 108, 97, 116, 102, 111, 114, 109, 115, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 58, 13, 10, 9, 59, 32, 111, 32, 86, 116, 101, 99, 104, 32, 67, 114, 101, 97, 116, 105, 118, 105, 115, 105, 111, 110, 46, 13, 10, 9, 59, 32, 111, 32, 68, 105, 99, 107, 32, 83, 109, 105, 116, 104, 39, 115, 32, 87, 105, 122, 122, 97, 114, 100, 46, 13, 10, 9, 59, 13, 10, 13, 10, 9, 59, 13, 10, 9, 59, 32, 67, 86, 66, 97, 115, 105, 99, 32, 118, 97, 114, 105, 97, 98, 108, 101, 115, 32, 105, 110, 32, 122, 101, 114, 111, 32, 112, 97, 103, 101, 46, 13, 10, 9, 59, 13, 10, 13, 10, 9, 59, 32, 84, 104, 105, 115, 32, 105, 115, 32, 97, 32, 98, 108, 111, 99, 107, 32, 111, 102, 32, 56, 32, 98, 121, 116, 101, 115, 32, 116, 104, 97, 116, 32, 115, 104, 111, 117, 108, 100, 32, 115, 116, 97, 121, 32, 116, 111, 103, 101, 116, 104, 101, 114, 46, 13, 10, 116, 101, 109, 112, 58, 9, 9, 101, 113, 117, 32, 36, 48, 50, 13, 10, 116, 101, 109, 112, 50, 58, 9, 9, 101, 113, 117, 32, 36, 48, 52, 13, 10, 114, 101, 115, 117, 108, 116, 58, 9, 9, 101, 113, 117, 32, 36, 48, 54, 13, 10, 112, 111, 105, 110, 116, 101, 114, 58, 9, 101, 113, 117, 32, 36, 48, 56, 13, 10, 13, 10, 114, 101, 97, 100, 95, 112, 111, 105, 110, 116, 101, 114, 58, 9, 101, 113, 117, 32, 36, 48, 97, 13, 10, 99, 117, 114, 115, 111, 114, 58, 9, 9, 101, 113, 117, 32, 36, 48, 99, 13, 10, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 58, 9, 101, 113, 117, 32, 36, 48, 101, 9, 59, 32, 85, 115, 101, 100, 32, 98, 121, 32, 80, 108, 101, 116, 116, 101, 114, 13, 10, 13, 10, 9, 59, 32, 90, 101, 114, 111, 32, 112, 97, 103, 101, 32, 36, 48, 48, 45, 36, 48, 49, 32, 97, 110, 100, 32, 36, 49, 48, 45, 36, 49, 102, 32, 97, 114, 101, 32, 117, 115, 101, 100, 32, 98, 121, 13, 10, 9, 59, 32, 116, 104, 101, 32, 67, 114, 101, 97, 116, 105, 118, 105, 115, 105, 111, 110, 32, 66, 73, 79, 83, 32, 116, 111, 32, 114, 101, 97, 100, 32, 116, 104, 101, 32, 99, 111, 110, 116, 114, 111, 108, 108, 101, 114, 115, 46, 13, 10, 106, 111, 121, 49, 95, 100, 105, 114, 58, 9, 101, 113, 117, 32, 36, 49, 49, 13, 10, 106, 111, 121, 50, 95, 100, 105, 114, 58, 9, 101, 113, 117, 32, 36, 49, 51, 13, 10, 106, 111, 121, 49, 95, 98, 117, 116, 116, 111, 110, 115, 58, 9, 101, 113, 117, 32, 36, 49, 54, 13, 10, 106, 111, 121, 50, 95, 98, 117, 116, 116, 111, 110, 115, 58, 9, 101, 113, 117, 32, 36, 49, 55, 13, 10, 13, 10, 106, 111, 121, 49, 95, 100, 97, 116, 97, 58, 9, 101, 113, 117, 32, 36, 50, 48, 13, 10, 106, 111, 121, 50, 95, 100, 97, 116, 97, 58, 9, 101, 113, 117, 32, 36, 50, 49, 13, 10, 107, 101, 121, 49, 95, 100, 97, 116, 97, 58, 9, 101, 113, 117, 32, 36, 50, 50, 13, 10, 107, 101, 121, 50, 95, 100, 97, 116, 97, 58, 9, 101, 113, 117, 32, 36, 50, 51, 13, 10, 102, 114, 97, 109, 101, 58, 9, 9, 101, 113, 117, 32, 36, 50, 52, 13, 10, 108, 102, 115, 114, 58, 9, 9, 101, 113, 117, 32, 36, 50, 54, 13, 10, 109, 111, 100, 101, 58, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 113, 117, 32, 36, 50, 56, 13, 10, 102, 108, 105, 99, 107, 101, 114, 58, 9, 101, 113, 117, 32, 36, 50, 57, 13, 10, 115, 112, 114, 105, 116, 101, 95, 100, 97, 116, 97, 58, 9, 101, 113, 117, 32, 36, 50, 97, 13, 10, 110, 116, 115, 99, 58, 9, 9, 101, 113, 117, 32, 36, 50, 101, 13, 10, 112, 108, 101, 116, 116, 101, 114, 95, 98, 105, 116, 58, 9, 101, 113, 117, 32, 36, 50, 102, 13, 10, 118, 100, 112, 95, 115, 116, 97, 116, 117, 115, 58, 9, 101, 113, 117, 32, 36, 51, 48, 13, 10, 13, 10, 9, 73, 70, 32, 67, 86, 66, 65, 83, 73, 67, 95, 77, 85, 83, 73, 67, 95, 80, 76, 65, 89, 69, 82, 13, 10, 109, 117, 115, 105, 99, 95, 112, 108, 97, 121, 105, 110, 103, 58, 9, 9, 69, 81, 85, 32, 36, 52, 102, 13, 10, 109, 117, 115, 105, 99, 95, 116, 105, 109, 105, 110, 103, 58, 9, 9, 69, 81, 85, 32, 36, 51, 49, 13, 10, 109, 117, 115, 105, 99, 95, 115, 116, 97, 114, 116, 58, 9, 9, 69, 81, 85, 32, 36, 51, 50, 13, 10, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 58, 9, 9, 69, 81, 85, 32, 36, 51, 52, 13, 10, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 99, 111, 117, 110, 116, 101, 114, 58, 9, 69, 81, 85, 32, 36, 51, 54, 13, 10, 109, 117, 115, 105, 99, 95, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 49, 58, 9, 69, 81, 85, 32, 36, 51, 55, 13, 10, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 49, 58, 9, 9, 69, 81, 85, 32, 36, 51, 56, 13, 10, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 49, 58, 9, 69, 81, 85, 32, 36, 51, 57, 13, 10, 109, 117, 115, 105, 99, 95, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 50, 58, 9, 69, 81, 85, 32, 36, 51, 97, 13, 10, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 50, 58, 9, 9, 69, 81, 85, 32, 36, 51, 98, 13, 10, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 50, 58, 9, 69, 81, 85, 32, 36, 51, 99, 13, 10, 109, 117, 115, 105, 99, 95, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 51, 58, 9, 69, 81, 85, 32, 36, 51, 100, 13, 10, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 51, 58, 9, 9, 69, 81, 85, 32, 36, 51, 101, 13, 10, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 51, 58, 9, 69, 81, 85, 32, 36, 51, 102, 13, 10, 109, 117, 115, 105, 99, 95, 100, 114, 117, 109, 58, 9, 9, 69, 81, 85, 32, 36, 52, 48, 13, 10, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 52, 58, 9, 69, 81, 85, 32, 36, 52, 49, 13, 10, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 49, 58, 9, 9, 69, 81, 85, 32, 36, 52, 50, 13, 10, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 50, 58, 9, 9, 69, 81, 85, 32, 36, 52, 52, 13, 10, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 51, 58, 9, 9, 69, 81, 85, 32, 36, 52, 54, 13, 10, 97, 117, 100, 105, 111, 95, 118, 111, 108, 49, 58, 9, 9, 69, 81, 85, 32, 36, 52, 56, 13, 10, 97, 117, 100, 105, 111, 95, 118, 111, 108, 50, 58, 9, 9, 69, 81, 85, 32, 36, 52, 57, 13, 10, 97, 117, 100, 105, 111, 95, 118, 111, 108, 51, 58, 9, 9, 69, 81, 85, 32, 36, 52, 97, 13, 10, 97, 117, 100, 105, 111, 95, 118, 111, 108, 52, 104, 119, 58, 9, 9, 69, 81, 85, 32, 36, 52, 98, 13, 10, 97, 117, 100, 105, 111, 95, 110, 111, 105, 115, 101, 58, 9, 9, 69, 81, 85, 32, 36, 52, 99, 13, 10, 97, 117, 100, 105, 111, 95, 99, 111, 110, 116, 114, 111, 108, 58, 9, 9, 69, 81, 85, 32, 36, 52, 100, 13, 10, 109, 117, 115, 105, 99, 95, 109, 111, 100, 101, 58, 9, 9, 69, 81, 85, 32, 36, 52, 101, 13, 10, 9, 69, 78, 68, 73, 70, 13, 10, 13, 10, 115, 112, 114, 105, 116, 101, 115, 58, 9, 101, 113, 117, 32, 36, 48, 49, 56, 48, 13, 10, 13, 10, 9, 79, 82, 71, 32, 36, 52, 48, 48, 48, 43, 36, 52, 48, 48, 48, 42, 83, 77, 65, 76, 76, 95, 82, 79, 77, 13, 10, 9, 13, 10, 87, 82, 84, 86, 68, 80, 58, 13, 10, 9, 83, 84, 65, 32, 36, 51, 48, 48, 49, 13, 10, 9, 84, 88, 65, 13, 10, 9, 79, 82, 65, 32, 35, 36, 56, 48, 13, 10, 9, 83, 84, 65, 32, 36, 51, 48, 48, 49, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 83, 69, 84, 87, 82, 84, 58, 13, 10, 9, 83, 84, 65, 32, 36, 51, 48, 48, 49, 9, 59, 32, 52, 13, 10, 9, 84, 89, 65, 9, 9, 59, 32, 50, 13, 10, 9, 79, 82, 65, 32, 35, 36, 52, 48, 9, 59, 32, 50, 13, 10, 9, 83, 84, 65, 32, 36, 51, 48, 48, 49, 9, 59, 32, 52, 13, 10, 9, 82, 84, 83, 9, 9, 59, 32, 54, 13, 10, 13, 10, 83, 69, 84, 82, 68, 58, 13, 10, 9, 83, 84, 65, 32, 36, 51, 48, 48, 49, 9, 59, 32, 52, 13, 10, 9, 84, 89, 65, 9, 9, 59, 32, 50, 13, 10, 9, 65, 78, 68, 32, 35, 36, 51, 70, 9, 59, 32, 50, 13, 10, 9, 83, 84, 65, 32, 36, 51, 48, 48, 49, 9, 59, 32, 52, 13, 10, 9, 82, 84, 83, 9, 9, 59, 32, 54, 13, 10, 13, 10, 9, 59, 32, 86, 68, 80, 32, 100, 101, 108, 97, 121, 115, 32, 99, 97, 108, 99, 117, 108, 97, 116, 101, 100, 32, 102, 111, 114, 32, 54, 53, 48, 50, 32, 114, 117, 110, 110, 105, 110, 103, 32, 97, 116, 32, 50, 32, 109, 104, 122, 46, 13, 10, 87, 82, 84, 86, 82, 77, 58, 13, 10, 9, 74, 83, 82, 32, 83, 69, 84, 87, 82, 84, 9, 59, 32, 54, 13, 10, 9, 84, 88, 65, 9, 9, 59, 32, 50, 13, 10, 9, 78, 79, 80, 9, 9, 59, 32, 50, 13, 10, 9, 78, 79, 80, 9, 9, 59, 32, 50, 13, 10, 9, 78, 79, 80, 9, 9, 59, 32, 50, 32, 61, 32, 82, 84, 83, 32, 43, 32, 49, 52, 32, 61, 32, 77, 105, 110, 105, 109, 117, 109, 32, 99, 121, 99, 108, 101, 115, 13, 10, 9, 78, 79, 80, 9, 9, 59, 32, 50, 13, 10, 9, 83, 84, 65, 32, 36, 51, 48, 48, 48, 9, 59, 32, 52, 13, 10, 9, 82, 84, 83, 9, 9, 59, 32, 54, 13, 10, 13, 10, 82, 68, 86, 82, 77, 58, 13, 10, 9, 74, 83, 82, 32, 83, 69, 84, 82, 68, 9, 59, 32, 54, 13, 10, 9, 78, 79, 80, 9, 9, 59, 32, 50, 13, 10, 9, 78, 79, 80, 9, 9, 59, 32, 50, 13, 10, 9, 78, 79, 80, 9, 9, 59, 32, 50, 13, 10, 9, 78, 79, 80, 9, 9, 59, 32, 50, 13, 10, 9, 78, 79, 80, 9, 9, 59, 32, 50, 13, 10, 9, 78, 79, 80, 9, 9, 59, 32, 50, 13, 10, 9, 78, 79, 80, 9, 9, 59, 32, 50, 13, 10, 9, 78, 79, 80, 9, 9, 59, 32, 50, 13, 10, 9, 78, 79, 80, 9, 9, 59, 32, 50, 13, 10, 9, 78, 79, 80, 9, 9, 59, 32, 50, 13, 10, 9, 78, 79, 80, 9, 9, 59, 32, 50, 13, 10, 9, 76, 68, 65, 32, 36, 50, 48, 48, 48, 9, 59, 32, 52, 13, 10, 9, 82, 84, 83, 9, 9, 59, 32, 54, 13, 10, 13, 10, 70, 73, 76, 86, 82, 77, 58, 13, 10, 9, 76, 68, 65, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 76, 68, 89, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 74, 83, 82, 32, 83, 69, 84, 87, 82, 84, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 50, 13, 10, 9, 66, 69, 81, 32, 46, 49, 13, 10, 9, 73, 78, 67, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 46, 49, 58, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 9, 59, 32, 51, 13, 10, 9, 83, 84, 65, 32, 36, 51, 48, 48, 48, 9, 59, 32, 52, 13, 10, 9, 78, 79, 80, 9, 9, 59, 32, 50, 13, 10, 9, 78, 79, 80, 9, 9, 59, 32, 50, 13, 10, 9, 68, 69, 67, 32, 116, 101, 109, 112, 50, 9, 59, 32, 53, 13, 10, 9, 66, 78, 69, 32, 46, 49, 9, 9, 59, 32, 50, 47, 51, 47, 52, 13, 10, 9, 68, 69, 67, 32, 116, 101, 109, 112, 50, 43, 49, 9, 59, 32, 53, 13, 10, 9, 66, 78, 69, 32, 46, 49, 9, 9, 59, 32, 50, 47, 51, 47, 52, 13, 10, 9, 82, 84, 83, 9, 13, 10, 13, 10, 76, 68, 73, 82, 77, 86, 58, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 13, 10, 9, 76, 68, 89, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 74, 83, 82, 32, 83, 69, 84, 82, 68, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 50, 13, 10, 9, 66, 69, 81, 32, 46, 49, 13, 10, 9, 73, 78, 67, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 46, 49, 58, 13, 10, 9, 76, 68, 89, 32, 35, 48, 13, 10, 46, 50, 58, 13, 10, 9, 76, 68, 65, 32, 36, 51, 48, 48, 48, 9, 59, 32, 52, 13, 10, 9, 83, 84, 65, 32, 40, 112, 111, 105, 110, 116, 101, 114, 41, 44, 89, 9, 59, 32, 53, 47, 54, 13, 10, 9, 73, 78, 67, 32, 112, 111, 105, 110, 116, 101, 114, 9, 59, 32, 53, 13, 10, 9, 66, 78, 69, 32, 46, 51, 9, 9, 59, 32, 50, 47, 51, 47, 52, 13, 10, 9, 73, 78, 67, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 9, 59, 32, 53, 13, 10, 46, 51, 58, 13, 10, 9, 68, 69, 67, 32, 116, 101, 109, 112, 50, 9, 59, 32, 53, 13, 10, 9, 66, 78, 69, 32, 46, 50, 9, 9, 59, 32, 50, 47, 51, 47, 52, 13, 10, 9, 68, 69, 67, 32, 116, 101, 109, 112, 50, 43, 49, 9, 59, 32, 53, 13, 10, 9, 66, 78, 69, 32, 46, 50, 9, 9, 59, 32, 50, 47, 51, 47, 52, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 76, 68, 73, 82, 86, 77, 58, 13, 10, 9, 76, 68, 65, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 76, 68, 89, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 74, 83, 82, 32, 83, 69, 84, 87, 82, 84, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 50, 13, 10, 9, 66, 69, 81, 32, 46, 49, 13, 10, 9, 73, 78, 67, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 46, 49, 58, 13, 10, 9, 76, 68, 89, 32, 35, 48, 13, 10, 46, 50, 58, 13, 10, 9, 76, 68, 65, 32, 40, 116, 101, 109, 112, 41, 44, 89, 9, 59, 32, 53, 47, 54, 13, 10, 9, 83, 84, 65, 32, 36, 51, 48, 48, 48, 9, 59, 32, 52, 13, 10, 9, 73, 78, 67, 32, 116, 101, 109, 112, 9, 59, 32, 53, 13, 10, 9, 66, 78, 69, 32, 46, 51, 9, 9, 59, 32, 50, 47, 51, 47, 52, 13, 10, 9, 73, 78, 67, 32, 116, 101, 109, 112, 43, 49, 9, 59, 32, 53, 13, 10, 46, 51, 58, 13, 10, 9, 68, 69, 67, 32, 116, 101, 109, 112, 50, 9, 59, 32, 53, 13, 10, 9, 66, 78, 69, 32, 46, 50, 9, 9, 59, 32, 50, 47, 51, 47, 52, 13, 10, 9, 68, 69, 67, 32, 116, 101, 109, 112, 50, 43, 49, 9, 59, 32, 53, 13, 10, 9, 66, 78, 69, 32, 46, 50, 9, 9, 59, 32, 50, 47, 51, 47, 52, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 76, 68, 73, 82, 86, 77, 51, 58, 13, 10, 9, 74, 83, 82, 32, 46, 49, 13, 10, 9, 74, 83, 82, 32, 46, 49, 13, 10, 46, 49, 58, 9, 76, 68, 65, 32, 116, 101, 109, 112, 13, 10, 9, 80, 72, 65, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 80, 72, 65, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 50, 13, 10, 9, 80, 72, 65, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 80, 72, 65, 13, 10, 9, 74, 83, 82, 32, 76, 68, 73, 82, 86, 77, 13, 10, 9, 76, 68, 65, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 67, 76, 67, 13, 10, 9, 65, 68, 67, 32, 35, 56, 13, 10, 9, 83, 84, 65, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 68, 73, 83, 83, 67, 82, 58, 13, 10, 9, 83, 69, 73, 13, 10, 9, 76, 68, 65, 32, 35, 36, 65, 50, 13, 10, 9, 76, 68, 88, 32, 35, 36, 48, 49, 13, 10, 9, 74, 83, 82, 32, 87, 82, 84, 86, 68, 80, 13, 10, 9, 67, 76, 73, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 69, 78, 65, 83, 67, 82, 58, 13, 10, 9, 83, 69, 73, 13, 10, 9, 76, 68, 65, 32, 35, 36, 69, 50, 13, 10, 9, 76, 68, 88, 32, 35, 36, 48, 49, 13, 10, 9, 74, 83, 82, 32, 87, 82, 84, 86, 68, 80, 13, 10, 9, 67, 76, 73, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 67, 80, 89, 66, 76, 75, 58, 13, 10, 9, 83, 69, 73, 13, 10, 46, 49, 58, 9, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 50, 13, 10, 9, 80, 72, 65, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 80, 72, 65, 13, 10, 9, 84, 88, 65, 13, 10, 9, 80, 72, 65, 13, 10, 9, 84, 89, 65, 13, 10, 9, 80, 72, 65, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 13, 10, 9, 80, 72, 65, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 80, 72, 65, 13, 10, 9, 76, 68, 65, 32, 35, 48, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 74, 83, 82, 32, 76, 68, 73, 82, 86, 77, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 13, 10, 9, 67, 76, 67, 13, 10, 9, 65, 68, 67, 32, 116, 101, 109, 112, 50, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 65, 68, 67, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 76, 68, 88, 32, 116, 101, 109, 112, 50, 13, 10, 9, 76, 68, 89, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 13, 10, 9, 76, 68, 65, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 67, 76, 67, 13, 10, 9, 65, 68, 67, 32, 35, 36, 50, 48, 13, 10, 9, 83, 84, 65, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 76, 68, 65, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 65, 68, 67, 32, 35, 36, 48, 48, 13, 10, 9, 83, 84, 65, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 68, 69, 67, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 66, 78, 69, 32, 46, 49, 13, 10, 9, 67, 76, 73, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 99, 108, 115, 58, 13, 10, 9, 108, 100, 97, 32, 35, 36, 48, 48, 13, 10, 9, 108, 100, 121, 32, 35, 36, 49, 56, 13, 10, 9, 115, 116, 97, 32, 99, 117, 114, 115, 111, 114, 13, 10, 9, 115, 116, 121, 32, 99, 117, 114, 115, 111, 114, 43, 49, 13, 10, 9, 115, 116, 97, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 115, 116, 121, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 108, 100, 121, 32, 35, 36, 48, 51, 13, 10, 9, 115, 116, 97, 32, 116, 101, 109, 112, 50, 13, 10, 9, 115, 116, 121, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 108, 100, 97, 32, 35, 36, 50, 48, 13, 10, 9, 115, 116, 97, 32, 116, 101, 109, 112, 13, 10, 9, 115, 101, 105, 13, 10, 9, 106, 115, 114, 32, 70, 73, 76, 86, 82, 77, 13, 10, 9, 99, 108, 105, 13, 10, 9, 114, 116, 115, 13, 10, 13, 10, 112, 114, 105, 110, 116, 95, 115, 116, 114, 105, 110, 103, 95, 99, 117, 114, 115, 111, 114, 95, 99, 111, 110, 115, 116, 97, 110, 116, 58, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 76, 68, 89, 32, 35, 49, 13, 10, 9, 76, 68, 65, 32, 40, 116, 101, 109, 112, 41, 44, 89, 13, 10, 9, 83, 84, 65, 32, 99, 117, 114, 115, 111, 114, 13, 10, 9, 73, 78, 89, 13, 10, 9, 76, 68, 65, 32, 40, 116, 101, 109, 112, 41, 44, 89, 13, 10, 9, 83, 84, 65, 32, 99, 117, 114, 115, 111, 114, 43, 49, 13, 10, 9, 73, 78, 89, 13, 10, 9, 76, 68, 65, 32, 40, 116, 101, 109, 112, 41, 44, 89, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 13, 10, 9, 84, 89, 65, 13, 10, 9, 67, 76, 67, 13, 10, 9, 65, 68, 67, 32, 116, 101, 109, 112, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 13, 10, 9, 66, 67, 67, 32, 36, 43, 52, 13, 10, 9, 73, 78, 67, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 50, 13, 10, 9, 66, 78, 69, 32, 112, 114, 105, 110, 116, 95, 115, 116, 114, 105, 110, 103, 46, 50, 13, 10, 13, 10, 112, 114, 105, 110, 116, 95, 115, 116, 114, 105, 110, 103, 95, 99, 117, 114, 115, 111, 114, 58, 13, 10, 9, 83, 84, 65, 32, 99, 117, 114, 115, 111, 114, 13, 10, 9, 83, 84, 89, 32, 99, 117, 114, 115, 111, 114, 43, 49, 13, 10, 112, 114, 105, 110, 116, 95, 115, 116, 114, 105, 110, 103, 58, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 76, 68, 89, 32, 35, 49, 13, 10, 9, 76, 68, 65, 32, 40, 116, 101, 109, 112, 41, 44, 89, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 13, 10, 9, 73, 78, 67, 32, 116, 101, 109, 112, 13, 10, 9, 66, 78, 69, 32, 36, 43, 52, 13, 10, 9, 73, 78, 67, 32, 116, 101, 109, 112, 43, 49, 13, 10, 46, 50, 58, 9, 67, 76, 67, 13, 10, 9, 65, 68, 67, 32, 116, 101, 109, 112, 13, 10, 9, 84, 65, 89, 13, 10, 9, 76, 68, 65, 32, 35, 48, 13, 10, 9, 65, 68, 67, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 80, 72, 65, 13, 10, 9, 84, 89, 65, 13, 10, 9, 80, 72, 65, 13, 10, 9, 73, 78, 67, 32, 116, 101, 109, 112, 13, 10, 9, 66, 78, 69, 32, 36, 43, 52, 13, 10, 9, 73, 78, 67, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 50, 13, 10, 9, 80, 72, 65, 13, 10, 9, 76, 68, 65, 32, 35, 48, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 76, 68, 65, 32, 99, 117, 114, 115, 111, 114, 13, 10, 9, 83, 84, 65, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 76, 68, 65, 32, 99, 117, 114, 115, 111, 114, 43, 49, 13, 10, 9, 65, 78, 68, 32, 35, 36, 48, 55, 13, 10, 9, 79, 82, 65, 32, 35, 36, 49, 56, 13, 10, 9, 83, 84, 65, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 83, 69, 73, 13, 10, 9, 74, 83, 82, 32, 76, 68, 73, 82, 86, 77, 13, 10, 9, 67, 76, 73, 13, 10, 9, 80, 76, 65, 13, 10, 9, 67, 76, 67, 13, 10, 9, 65, 68, 67, 32, 99, 117, 114, 115, 111, 114, 13, 10, 9, 83, 84, 65, 32, 99, 117, 114, 115, 111, 114, 13, 10, 9, 66, 67, 67, 32, 46, 49, 13, 10, 9, 73, 78, 67, 32, 99, 117, 114, 115, 111, 114, 43, 49, 13, 10, 46, 49, 58, 9, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 112, 114, 105, 110, 116, 95, 110, 117, 109, 98, 101, 114, 58, 13, 10, 9, 76, 68, 88, 32, 35, 48, 13, 10, 9, 83, 84, 88, 32, 116, 101, 109, 112, 13, 10, 9, 83, 69, 73, 13, 10, 112, 114, 105, 110, 116, 95, 110, 117, 109, 98, 101, 114, 53, 58, 13, 10, 9, 76, 68, 88, 32, 35, 49, 48, 48, 48, 48, 13, 10, 9, 83, 84, 88, 32, 116, 101, 109, 112, 50, 13, 10, 9, 76, 68, 88, 32, 35, 49, 48, 48, 48, 48, 47, 50, 53, 54, 13, 10, 9, 83, 84, 88, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 74, 83, 82, 32, 112, 114, 105, 110, 116, 95, 100, 105, 103, 105, 116, 13, 10, 112, 114, 105, 110, 116, 95, 110, 117, 109, 98, 101, 114, 52, 58, 13, 10, 9, 76, 68, 88, 32, 35, 49, 48, 48, 48, 13, 10, 9, 83, 84, 88, 32, 116, 101, 109, 112, 50, 13, 10, 9, 76, 68, 88, 32, 35, 49, 48, 48, 48, 47, 50, 53, 54, 13, 10, 9, 83, 84, 88, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 74, 83, 82, 32, 112, 114, 105, 110, 116, 95, 100, 105, 103, 105, 116, 13, 10, 112, 114, 105, 110, 116, 95, 110, 117, 109, 98, 101, 114, 51, 58, 13, 10, 9, 76, 68, 88, 32, 35, 49, 48, 48, 13, 10, 9, 83, 84, 88, 32, 116, 101, 109, 112, 50, 13, 10, 9, 76, 68, 88, 32, 35, 48, 13, 10, 9, 83, 84, 88, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 74, 83, 82, 32, 112, 114, 105, 110, 116, 95, 100, 105, 103, 105, 116, 13, 10, 112, 114, 105, 110, 116, 95, 110, 117, 109, 98, 101, 114, 50, 58, 13, 10, 9, 76, 68, 88, 32, 35, 49, 48, 13, 10, 9, 83, 84, 88, 32, 116, 101, 109, 112, 50, 13, 10, 9, 76, 68, 88, 32, 35, 48, 13, 10, 9, 83, 84, 88, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 74, 83, 82, 32, 112, 114, 105, 110, 116, 95, 100, 105, 103, 105, 116, 13, 10, 112, 114, 105, 110, 116, 95, 110, 117, 109, 98, 101, 114, 49, 58, 13, 10, 9, 76, 68, 88, 32, 35, 49, 13, 10, 9, 83, 84, 88, 32, 116, 101, 109, 112, 50, 13, 10, 9, 83, 84, 88, 32, 116, 101, 109, 112, 13, 10, 9, 76, 68, 88, 32, 35, 48, 13, 10, 9, 83, 84, 88, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 74, 83, 82, 32, 112, 114, 105, 110, 116, 95, 100, 105, 103, 105, 116, 13, 10, 9, 67, 76, 73, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 112, 114, 105, 110, 116, 95, 100, 105, 103, 105, 116, 58, 13, 10, 9, 76, 68, 88, 32, 35, 36, 50, 70, 13, 10, 46, 50, 58, 13, 10, 9, 73, 78, 88, 13, 10, 9, 83, 69, 67, 13, 10, 9, 83, 66, 67, 32, 116, 101, 109, 112, 50, 13, 10, 9, 80, 72, 65, 13, 10, 9, 84, 89, 65, 13, 10, 9, 83, 66, 67, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 84, 65, 89, 13, 10, 9, 80, 76, 65, 13, 10, 9, 66, 67, 83, 32, 46, 50, 13, 10, 9, 67, 76, 67, 13, 10, 9, 65, 68, 67, 32, 116, 101, 109, 112, 50, 13, 10, 9, 80, 72, 65, 13, 10, 9, 84, 89, 65, 13, 10, 9, 65, 68, 67, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 84, 65, 89, 13, 10, 9, 80, 76, 65, 13, 10, 9, 67, 80, 88, 32, 35, 36, 51, 48, 13, 10, 9, 66, 78, 69, 32, 46, 51, 13, 10, 9, 76, 68, 88, 32, 116, 101, 109, 112, 13, 10, 9, 66, 78, 69, 32, 46, 52, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 46, 52, 58, 9, 68, 69, 88, 13, 10, 9, 66, 69, 81, 32, 46, 54, 13, 10, 9, 76, 68, 88, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 66, 78, 69, 32, 112, 114, 105, 110, 116, 95, 99, 104, 97, 114, 13, 10, 46, 54, 58, 13, 10, 9, 76, 68, 88, 32, 35, 36, 51, 48, 13, 10, 46, 51, 58, 9, 80, 72, 65, 13, 10, 9, 76, 68, 65, 32, 35, 49, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 13, 10, 9, 80, 76, 65, 13, 10, 13, 10, 112, 114, 105, 110, 116, 95, 99, 104, 97, 114, 58, 13, 10, 9, 80, 72, 65, 13, 10, 9, 84, 89, 65, 13, 10, 9, 80, 72, 65, 13, 10, 9, 76, 68, 65, 32, 99, 117, 114, 115, 111, 114, 43, 49, 13, 10, 9, 65, 78, 68, 32, 35, 36, 48, 55, 13, 10, 9, 79, 82, 65, 32, 35, 36, 49, 56, 13, 10, 9, 84, 65, 89, 13, 10, 9, 76, 68, 65, 32, 99, 117, 114, 115, 111, 114, 13, 10, 9, 74, 83, 82, 32, 87, 82, 84, 86, 82, 77, 13, 10, 9, 73, 78, 67, 32, 99, 117, 114, 115, 111, 114, 13, 10, 9, 66, 78, 69, 32, 46, 49, 13, 10, 9, 73, 78, 67, 32, 99, 117, 114, 115, 111, 114, 43, 49, 13, 10, 46, 49, 58, 13, 10, 9, 80, 76, 65, 13, 10, 9, 84, 65, 89, 13, 10, 9, 80, 76, 65, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 100, 101, 102, 105, 110, 101, 95, 115, 112, 114, 105, 116, 101, 58, 13, 10, 9, 115, 116, 97, 32, 116, 101, 109, 112, 50, 13, 10, 9, 108, 100, 97, 32, 35, 48, 13, 10, 9, 115, 116, 97, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 108, 100, 97, 32, 35, 55, 13, 10, 9, 115, 116, 97, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 108, 100, 97, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 114, 111, 108, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 114, 111, 108, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 114, 111, 108, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 115, 116, 97, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 108, 100, 97, 32, 116, 101, 109, 112, 50, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 114, 111, 108, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 114, 111, 108, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 114, 111, 108, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 114, 111, 108, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 114, 111, 108, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 115, 116, 97, 32, 116, 101, 109, 112, 50, 13, 10, 9, 115, 101, 105, 13, 10, 9, 106, 115, 114, 32, 76, 68, 73, 82, 86, 77, 13, 10, 9, 99, 108, 105, 13, 10, 9, 114, 116, 115, 13, 10, 13, 10, 100, 101, 102, 105, 110, 101, 95, 99, 104, 97, 114, 58, 13, 10, 9, 115, 116, 97, 32, 116, 101, 109, 112, 50, 13, 10, 9, 108, 100, 97, 32, 35, 48, 13, 10, 9, 115, 116, 97, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 115, 116, 97, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 108, 100, 97, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 114, 111, 108, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 114, 111, 108, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 114, 111, 108, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 115, 116, 97, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 108, 100, 97, 32, 116, 101, 109, 112, 50, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 114, 111, 108, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 114, 111, 108, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 114, 111, 108, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 115, 116, 97, 32, 116, 101, 109, 112, 50, 13, 10, 9, 115, 101, 105, 13, 10, 9, 108, 100, 97, 32, 109, 111, 100, 101, 13, 10, 9, 97, 110, 100, 32, 35, 36, 48, 56, 13, 10, 9, 98, 110, 101, 32, 46, 49, 13, 10, 9, 106, 115, 114, 32, 76, 68, 73, 82, 86, 77, 51, 13, 10, 9, 99, 108, 105, 13, 10, 9, 114, 116, 115, 13, 10, 13, 10, 46, 49, 58, 9, 106, 115, 114, 32, 76, 68, 73, 82, 86, 77, 13, 10, 9, 99, 108, 105, 13, 10, 9, 114, 116, 115, 13, 10, 13, 10, 100, 101, 102, 105, 110, 101, 95, 99, 111, 108, 111, 114, 58, 13, 10, 9, 115, 116, 97, 32, 116, 101, 109, 112, 50, 13, 10, 9, 108, 100, 97, 32, 35, 48, 13, 10, 9, 115, 116, 97, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 108, 100, 97, 32, 35, 36, 48, 52, 13, 10, 9, 115, 116, 97, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 108, 100, 97, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 114, 111, 108, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 114, 111, 108, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 114, 111, 108, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 115, 116, 97, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 108, 100, 97, 32, 116, 101, 109, 112, 50, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 114, 111, 108, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 114, 111, 108, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 114, 111, 108, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 115, 116, 97, 32, 116, 101, 109, 112, 50, 13, 10, 9, 115, 101, 105, 13, 10, 9, 106, 115, 114, 32, 76, 68, 73, 82, 86, 77, 51, 13, 10, 9, 99, 108, 105, 13, 10, 9, 114, 116, 115, 13, 10, 13, 10, 117, 112, 100, 97, 116, 101, 95, 115, 112, 114, 105, 116, 101, 58, 13, 10, 9, 65, 83, 76, 32, 65, 13, 10, 9, 65, 83, 76, 32, 65, 13, 10, 9, 79, 82, 65, 32, 35, 36, 56, 48, 13, 10, 9, 83, 84, 65, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 76, 68, 65, 32, 35, 36, 48, 49, 13, 10, 9, 83, 84, 65, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 76, 68, 89, 32, 35, 48, 13, 10, 9, 76, 68, 65, 32, 115, 112, 114, 105, 116, 101, 95, 100, 97, 116, 97, 43, 48, 13, 10, 9, 83, 84, 65, 32, 40, 112, 111, 105, 110, 116, 101, 114, 41, 44, 89, 13, 10, 9, 73, 78, 89, 13, 10, 9, 76, 68, 65, 32, 115, 112, 114, 105, 116, 101, 95, 100, 97, 116, 97, 43, 49, 13, 10, 9, 83, 84, 65, 32, 40, 112, 111, 105, 110, 116, 101, 114, 41, 44, 89, 13, 10, 9, 73, 78, 89, 13, 10, 9, 76, 68, 65, 32, 115, 112, 114, 105, 116, 101, 95, 100, 97, 116, 97, 43, 50, 13, 10, 9, 83, 84, 65, 32, 40, 112, 111, 105, 110, 116, 101, 114, 41, 44, 89, 13, 10, 9, 73, 78, 89, 13, 10, 9, 76, 68, 65, 32, 115, 112, 114, 105, 116, 101, 95, 100, 97, 116, 97, 43, 51, 13, 10, 9, 83, 84, 65, 32, 40, 112, 111, 105, 110, 116, 101, 114, 41, 44, 89, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 95, 97, 98, 115, 49, 54, 58, 13, 10, 9, 80, 72, 65, 13, 10, 9, 84, 89, 65, 13, 10, 9, 66, 80, 76, 32, 95, 110, 101, 103, 49, 54, 46, 49, 13, 10, 9, 80, 76, 65, 13, 10, 95, 110, 101, 103, 49, 54, 58, 13, 10, 9, 69, 79, 82, 32, 35, 36, 70, 70, 13, 10, 9, 67, 76, 67, 13, 10, 9, 65, 68, 67, 32, 35, 49, 13, 10, 9, 80, 72, 65, 13, 10, 9, 84, 89, 65, 13, 10, 9, 69, 79, 82, 32, 35, 36, 70, 70, 13, 10, 9, 65, 68, 67, 32, 35, 48, 13, 10, 9, 84, 65, 89, 13, 10, 46, 49, 58, 13, 10, 9, 80, 76, 65, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 95, 115, 103, 110, 49, 54, 58, 13, 10, 9, 83, 84, 89, 32, 116, 101, 109, 112, 13, 10, 9, 79, 82, 65, 32, 116, 101, 109, 112, 13, 10, 9, 66, 69, 81, 32, 46, 49, 13, 10, 9, 84, 89, 65, 13, 10, 9, 66, 77, 73, 32, 46, 50, 13, 10, 9, 76, 68, 65, 32, 35, 48, 13, 10, 9, 84, 65, 89, 13, 10, 9, 76, 68, 65, 32, 35, 49, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 46, 50, 58, 9, 76, 68, 65, 32, 35, 36, 70, 70, 13, 10, 46, 49, 58, 9, 84, 65, 89, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 95, 114, 101, 97, 100, 49, 54, 58, 13, 10, 9, 74, 83, 82, 32, 95, 114, 101, 97, 100, 56, 13, 10, 9, 80, 72, 65, 13, 10, 9, 74, 83, 82, 32, 95, 114, 101, 97, 100, 56, 13, 10, 9, 84, 65, 89, 13, 10, 9, 80, 76, 65, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 95, 114, 101, 97, 100, 56, 58, 13, 10, 9, 76, 68, 89, 32, 35, 48, 13, 10, 9, 76, 68, 65, 32, 40, 114, 101, 97, 100, 95, 112, 111, 105, 110, 116, 101, 114, 41, 44, 89, 13, 10, 9, 73, 78, 67, 32, 114, 101, 97, 100, 95, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 66, 78, 69, 32, 46, 49, 13, 10, 9, 73, 78, 67, 32, 114, 101, 97, 100, 95, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 46, 49, 58, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 95, 112, 101, 101, 107, 56, 58, 13, 10, 9, 83, 84, 65, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 83, 84, 89, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 76, 68, 89, 32, 35, 48, 13, 10, 9, 76, 68, 65, 32, 40, 112, 111, 105, 110, 116, 101, 114, 41, 44, 89, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 95, 112, 101, 101, 107, 49, 54, 58, 13, 10, 9, 83, 84, 65, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 83, 84, 89, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 76, 68, 89, 32, 35, 48, 13, 10, 9, 76, 68, 65, 32, 40, 112, 111, 105, 110, 116, 101, 114, 41, 44, 89, 13, 10, 9, 80, 72, 65, 13, 10, 9, 73, 78, 89, 13, 10, 9, 76, 68, 65, 32, 40, 112, 111, 105, 110, 116, 101, 114, 41, 44, 89, 13, 10, 9, 84, 65, 89, 13, 10, 9, 80, 76, 65, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 9, 59, 32, 116, 101, 109, 112, 50, 32, 99, 111, 110, 116, 97, 105, 110, 115, 32, 108, 101, 102, 116, 32, 115, 105, 100, 101, 32, 40, 100, 105, 118, 105, 100, 101, 110, 100, 41, 13, 10, 9, 59, 32, 116, 101, 109, 112, 32, 99, 111, 110, 116, 97, 105, 110, 115, 32, 114, 105, 103, 104, 116, 32, 115, 105, 100, 101, 32, 40, 100, 105, 118, 105, 115, 111, 114, 41, 13, 10, 13, 10, 9, 59, 32, 49, 54, 45, 98, 105, 116, 32, 109, 117, 108, 116, 105, 112, 108, 105, 99, 97, 116, 105, 111, 110, 46, 13, 10, 95, 109, 117, 108, 49, 54, 58, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 13, 10, 9, 76, 68, 65, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 9, 80, 72, 65, 13, 10, 9, 76, 68, 65, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 80, 72, 65, 13, 10, 9, 76, 68, 65, 32, 35, 48, 13, 10, 9, 83, 84, 65, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 83, 84, 65, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 9, 76, 68, 88, 32, 35, 49, 53, 13, 10, 46, 49, 58, 13, 10, 9, 76, 83, 82, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 82, 79, 82, 32, 116, 101, 109, 112, 50, 13, 10, 9, 66, 67, 67, 32, 46, 50, 13, 10, 9, 76, 68, 65, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 67, 76, 67, 13, 10, 9, 65, 68, 67, 32, 116, 101, 109, 112, 13, 10, 9, 83, 84, 65, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 76, 68, 65, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 9, 65, 68, 67, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 83, 84, 65, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 46, 50, 58, 9, 65, 83, 76, 32, 116, 101, 109, 112, 13, 10, 9, 82, 79, 76, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 68, 69, 88, 13, 10, 9, 66, 80, 76, 32, 46, 49, 13, 10, 9, 76, 68, 65, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 76, 68, 89, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 9, 59, 32, 49, 54, 45, 98, 105, 116, 32, 115, 105, 103, 110, 101, 100, 32, 109, 111, 100, 117, 108, 111, 46, 13, 10, 95, 109, 111, 100, 49, 54, 115, 58, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 13, 10, 9, 76, 68, 65, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 9, 80, 72, 65, 13, 10, 9, 76, 68, 65, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 80, 72, 65, 13, 10, 9, 76, 68, 89, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 80, 72, 80, 13, 10, 9, 66, 80, 76, 32, 46, 49, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 50, 13, 10, 9, 74, 83, 82, 32, 95, 110, 101, 103, 49, 54, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 13, 10, 9, 83, 84, 89, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 46, 49, 58, 13, 10, 9, 76, 68, 89, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 66, 80, 76, 32, 46, 50, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 13, 10, 9, 74, 83, 82, 32, 95, 110, 101, 103, 49, 54, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 13, 10, 9, 83, 84, 89, 32, 116, 101, 109, 112, 43, 49, 13, 10, 46, 50, 58, 13, 10, 9, 74, 83, 82, 32, 95, 109, 111, 100, 49, 54, 46, 49, 13, 10, 9, 80, 76, 80, 13, 10, 9, 66, 80, 76, 32, 46, 51, 13, 10, 9, 74, 77, 80, 32, 95, 110, 101, 103, 49, 54, 13, 10, 46, 51, 58, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 9, 59, 32, 49, 54, 45, 98, 105, 116, 32, 115, 105, 103, 110, 101, 100, 32, 100, 105, 118, 105, 115, 105, 111, 110, 46, 13, 10, 95, 100, 105, 118, 49, 54, 115, 58, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 13, 10, 9, 76, 68, 65, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 9, 80, 72, 65, 13, 10, 9, 76, 68, 65, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 80, 72, 65, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 69, 79, 82, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 80, 72, 80, 13, 10, 9, 76, 68, 89, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 66, 80, 76, 32, 46, 49, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 50, 13, 10, 9, 74, 83, 82, 32, 95, 110, 101, 103, 49, 54, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 13, 10, 9, 83, 84, 89, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 46, 49, 58, 13, 10, 9, 76, 68, 89, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 66, 80, 76, 32, 46, 50, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 13, 10, 9, 74, 83, 82, 32, 95, 110, 101, 103, 49, 54, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 13, 10, 9, 83, 84, 89, 32, 116, 101, 109, 112, 43, 49, 13, 10, 46, 50, 58, 13, 10, 9, 74, 83, 82, 32, 95, 100, 105, 118, 49, 54, 46, 49, 13, 10, 9, 80, 76, 80, 13, 10, 9, 66, 80, 76, 32, 46, 51, 13, 10, 9, 74, 77, 80, 32, 95, 110, 101, 103, 49, 54, 13, 10, 46, 51, 58, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 95, 100, 105, 118, 49, 54, 58, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 13, 10, 9, 76, 68, 65, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 9, 80, 72, 65, 13, 10, 9, 76, 68, 65, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 80, 72, 65, 13, 10, 46, 49, 58, 13, 10, 9, 76, 68, 65, 32, 35, 48, 13, 10, 9, 83, 84, 65, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 83, 84, 65, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 9, 76, 68, 88, 32, 35, 49, 53, 13, 10, 46, 50, 58, 13, 10, 9, 82, 79, 76, 32, 116, 101, 109, 112, 50, 13, 10, 9, 82, 79, 76, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 82, 79, 76, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 82, 79, 76, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 9, 76, 68, 65, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 83, 69, 67, 13, 10, 9, 83, 66, 67, 32, 116, 101, 109, 112, 13, 10, 9, 83, 84, 65, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 76, 68, 65, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 9, 83, 66, 67, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 83, 84, 65, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 9, 66, 67, 83, 32, 46, 51, 13, 10, 9, 76, 68, 65, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 65, 68, 67, 32, 116, 101, 109, 112, 13, 10, 9, 83, 84, 65, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 76, 68, 65, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 9, 65, 68, 67, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 83, 84, 65, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 9, 67, 76, 67, 13, 10, 46, 51, 58, 13, 10, 9, 68, 69, 88, 13, 10, 9, 66, 80, 76, 32, 46, 50, 13, 10, 9, 82, 79, 76, 32, 116, 101, 109, 112, 50, 13, 10, 9, 82, 79, 76, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 50, 13, 10, 9, 76, 68, 89, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 95, 109, 111, 100, 49, 54, 58, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 13, 10, 9, 76, 68, 65, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 9, 80, 72, 65, 13, 10, 9, 76, 68, 65, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 80, 72, 65, 13, 10, 46, 49, 58, 13, 10, 9, 76, 68, 65, 32, 35, 48, 13, 10, 9, 83, 84, 65, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 83, 84, 65, 32, 114, 101, 115]);
fileData1.push.apply(fileData1, [117, 108, 116, 43, 49, 13, 10, 9, 76, 68, 88, 32, 35, 49, 53, 13, 10, 46, 50, 58, 13, 10, 9, 82, 79, 76, 32, 116, 101, 109, 112, 50, 13, 10, 9, 82, 79, 76, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 82, 79, 76, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 82, 79, 76, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 9, 76, 68, 65, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 83, 69, 67, 13, 10, 9, 83, 66, 67, 32, 116, 101, 109, 112, 13, 10, 9, 83, 84, 65, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 76, 68, 65, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 9, 83, 66, 67, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 83, 84, 65, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 9, 66, 67, 83, 32, 46, 51, 13, 10, 9, 76, 68, 65, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 65, 68, 67, 32, 116, 101, 109, 112, 13, 10, 9, 83, 84, 65, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 76, 68, 65, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 9, 65, 68, 67, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 83, 84, 65, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 9, 67, 76, 67, 13, 10, 46, 51, 58, 13, 10, 9, 68, 69, 88, 13, 10, 9, 66, 80, 76, 32, 46, 50, 13, 10, 9, 76, 68, 65, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 76, 68, 89, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 9, 59, 32, 82, 97, 110, 100, 111, 109, 32, 110, 117, 109, 98, 101, 114, 32, 103, 101, 110, 101, 114, 97, 116, 111, 114, 46, 13, 10, 9, 59, 32, 70, 114, 111, 109, 32, 109, 121, 32, 103, 97, 109, 101, 32, 77, 101, 99, 104, 97, 32, 69, 105, 103, 104, 116, 46, 13, 10, 114, 97, 110, 100, 111, 109, 58, 13, 10, 9, 76, 68, 65, 32, 108, 102, 115, 114, 13, 10, 9, 79, 82, 65, 32, 108, 102, 115, 114, 43, 49, 13, 10, 9, 66, 78, 69, 32, 46, 48, 13, 10, 9, 76, 68, 65, 32, 35, 36, 49, 49, 13, 10, 9, 83, 84, 65, 32, 108, 102, 115, 114, 13, 10, 9, 76, 68, 65, 32, 35, 36, 55, 56, 13, 10, 9, 83, 84, 65, 32, 108, 102, 115, 114, 43, 49, 13, 10, 46, 48, 58, 9, 76, 68, 65, 32, 108, 102, 115, 114, 43, 49, 13, 10, 9, 82, 79, 82, 32, 65, 9, 13, 10, 9, 82, 79, 82, 32, 65, 9, 9, 13, 10, 9, 82, 79, 82, 32, 65, 9, 9, 13, 10, 9, 69, 79, 82, 32, 108, 102, 115, 114, 43, 49, 9, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 13, 10, 9, 76, 68, 65, 32, 108, 102, 115, 114, 43, 49, 13, 10, 9, 82, 79, 82, 32, 65, 13, 10, 9, 82, 79, 82, 32, 65, 13, 10, 9, 69, 79, 82, 32, 116, 101, 109, 112, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 13, 10, 9, 76, 68, 65, 32, 108, 102, 115, 114, 13, 10, 9, 65, 83, 76, 32, 65, 13, 10, 9, 65, 83, 76, 32, 65, 13, 10, 9, 69, 79, 82, 32, 116, 101, 109, 112, 13, 10, 9, 82, 79, 76, 32, 65, 13, 10, 9, 82, 79, 82, 32, 108, 102, 115, 114, 43, 49, 13, 10, 9, 82, 79, 82, 32, 108, 102, 115, 114, 13, 10, 9, 76, 68, 65, 32, 108, 102, 115, 114, 13, 10, 9, 76, 68, 89, 32, 108, 102, 115, 114, 43, 49, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 115, 110, 55, 54, 52, 56, 57, 95, 102, 114, 101, 113, 58, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 13, 10, 9, 83, 84, 89, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 83, 84, 88, 32, 116, 101, 109, 112, 50, 13, 10, 9, 65, 78, 68, 32, 35, 36, 48, 102, 13, 10, 9, 79, 82, 65, 32, 116, 101, 109, 112, 50, 13, 10, 9, 74, 83, 82, 32, 66, 73, 79, 83, 95, 87, 82, 73, 84, 69, 95, 80, 83, 71, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 65, 83, 76, 32, 116, 101, 109, 112, 13, 10, 9, 82, 79, 76, 32, 65, 13, 10, 9, 65, 83, 76, 32, 116, 101, 109, 112, 13, 10, 9, 82, 79, 76, 32, 65, 13, 10, 9, 65, 83, 76, 32, 116, 101, 109, 112, 13, 10, 9, 82, 79, 76, 32, 65, 13, 10, 9, 65, 83, 76, 32, 116, 101, 109, 112, 13, 10, 9, 82, 79, 76, 32, 65, 13, 10, 9, 65, 78, 68, 32, 35, 36, 51, 102, 9, 13, 10, 9, 74, 77, 80, 32, 66, 73, 79, 83, 95, 87, 82, 73, 84, 69, 95, 80, 83, 71, 13, 10, 9, 13, 10, 115, 110, 55, 54, 52, 56, 57, 95, 118, 111, 108, 58, 13, 10, 9, 83, 84, 88, 32, 116, 101, 109, 112, 50, 13, 10, 9, 69, 79, 82, 32, 35, 36, 102, 102, 13, 10, 9, 65, 78, 68, 32, 35, 36, 48, 102, 13, 10, 9, 79, 82, 65, 32, 116, 101, 109, 112, 50, 13, 10, 9, 74, 77, 80, 32, 66, 73, 79, 83, 95, 87, 82, 73, 84, 69, 95, 80, 83, 71, 13, 10, 13, 10, 115, 110, 55, 54, 52, 56, 57, 95, 99, 111, 110, 116, 114, 111, 108, 58, 13, 10, 9, 65, 78, 68, 32, 35, 36, 48, 102, 13, 10, 9, 79, 82, 65, 32, 35, 36, 101, 48, 13, 10, 9, 74, 77, 80, 32, 66, 73, 79, 83, 95, 87, 82, 73, 84, 69, 95, 80, 83, 71, 13, 10, 13, 10, 118, 100, 112, 95, 103, 101, 110, 101, 114, 105, 99, 95, 109, 111, 100, 101, 58, 13, 10, 9, 83, 69, 73, 13, 10, 9, 76, 68, 88, 32, 35, 36, 48, 48, 13, 10, 9, 74, 83, 82, 32, 87, 82, 84, 86, 68, 80, 13, 10, 9, 76, 68, 65, 32, 35, 36, 65, 50, 13, 10, 9, 73, 78, 88, 13, 10, 9, 74, 83, 82, 32, 87, 82, 84, 86, 68, 80, 13, 10, 9, 76, 68, 65, 32, 35, 36, 48, 54, 9, 59, 32, 36, 49, 56, 48, 48, 32, 102, 111, 114, 32, 112, 97, 116, 116, 101, 114, 110, 32, 116, 97, 98, 108, 101, 46, 13, 10, 9, 73, 78, 88, 13, 10, 9, 74, 83, 82, 32, 87, 82, 84, 86, 68, 80, 13, 10, 9, 84, 89, 65, 13, 10, 9, 73, 78, 88, 9, 9, 59, 32, 102, 111, 114, 32, 99, 111, 108, 111, 114, 32, 116, 97, 98, 108, 101, 46, 13, 10, 9, 74, 83, 82, 32, 87, 82, 84, 86, 68, 80, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 73, 78, 88, 9, 9, 59, 32, 102, 111, 114, 32, 98, 105, 116, 109, 97, 112, 32, 116, 97, 98, 108, 101, 46, 13, 10, 9, 74, 83, 82, 32, 87, 82, 84, 86, 68, 80, 13, 10, 9, 76, 68, 65, 32, 35, 36, 51, 54, 9, 59, 32, 36, 49, 98, 48, 48, 32, 102, 111, 114, 32, 115, 112, 114, 105, 116, 101, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 116, 97, 98, 108, 101, 46, 13, 10, 9, 73, 78, 88, 13, 10, 9, 74, 83, 82, 32, 87, 82, 84, 86, 68, 80, 13, 10, 9, 76, 68, 65, 32, 35, 36, 48, 55, 9, 59, 32, 36, 51, 56, 48, 48, 32, 102, 111, 114, 32, 115, 112, 114, 105, 116, 101, 115, 32, 98, 105, 116, 109, 97, 112, 115, 46, 13, 10, 9, 73, 78, 88, 13, 10, 9, 74, 83, 82, 32, 87, 82, 84, 86, 68, 80, 13, 10, 9, 76, 68, 65, 32, 35, 36, 48, 49, 13, 10, 9, 73, 78, 88, 13, 10, 9, 74, 83, 82, 32, 87, 82, 84, 86, 68, 80, 13, 10, 9, 76, 68, 65, 32, 35, 102, 111, 110, 116, 95, 98, 105, 116, 109, 97, 112, 115, 13, 10, 9, 76, 68, 89, 32, 35, 102, 111, 110, 116, 95, 98, 105, 116, 109, 97, 112, 115, 62, 62, 56, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 13, 10, 9, 83, 84, 89, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 76, 68, 65, 32, 35, 36, 48, 48, 13, 10, 9, 83, 84, 65, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 13, 10, 9, 76, 68, 65, 32, 35, 36, 48, 49, 13, 10, 9, 83, 84, 65, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 76, 68, 65, 32, 35, 36, 48, 51, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 109, 111, 100, 101, 95, 48, 58, 13, 10, 9, 76, 68, 65, 32, 109, 111, 100, 101, 13, 10, 9, 65, 78, 68, 32, 35, 36, 70, 55, 13, 10, 9, 83, 84, 65, 32, 109, 111, 100, 101, 13, 10, 9, 76, 68, 89, 32, 35, 36, 102, 102, 9, 59, 32, 36, 50, 48, 48, 48, 32, 102, 111, 114, 32, 99, 111, 108, 111, 114, 32, 116, 97, 98, 108, 101, 46, 13, 10, 9, 76, 68, 65, 32, 35, 36, 48, 51, 9, 59, 32, 36, 48, 48, 48, 48, 32, 102, 111, 114, 32, 98, 105, 116, 109, 97, 112, 115, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 76, 68, 65, 32, 35, 36, 48, 50, 13, 10, 9, 74, 83, 82, 32, 118, 100, 112, 95, 103, 101, 110, 101, 114, 105, 99, 95, 109, 111, 100, 101, 13, 10, 9, 74, 83, 82, 32, 76, 68, 73, 82, 86, 77, 51, 13, 10, 9, 83, 69, 73, 13, 10, 9, 76, 68, 65, 32, 35, 36, 102, 48, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 13, 10, 9, 76, 68, 65, 32, 35, 36, 48, 48, 13, 10, 9, 83, 84, 65, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 13, 10, 9, 76, 68, 89, 32, 35, 36, 50, 48, 48, 48, 62, 62, 56, 13, 10, 9, 83, 84, 89, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 76, 68, 89, 32, 35, 36, 49, 56, 48, 48, 62, 62, 56, 13, 10, 9, 83, 84, 89, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 74, 83, 82, 32, 70, 73, 76, 86, 82, 77, 13, 10, 9, 67, 76, 73, 13, 10, 9, 74, 83, 82, 32, 99, 108, 115, 13, 10, 118, 100, 112, 95, 103, 101, 110, 101, 114, 105, 99, 95, 115, 112, 114, 105, 116, 101, 115, 58, 13, 10, 9, 76, 68, 65, 32, 35, 36, 100, 49, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 13, 10, 9, 76, 68, 65, 32, 35, 36, 48, 48, 13, 10, 9, 83, 84, 65, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 76, 68, 89, 32, 35, 36, 49, 98, 48, 48, 62, 62, 56, 13, 10, 9, 83, 84, 89, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 76, 68, 65, 32, 35, 36, 56, 48, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 13, 10, 9, 83, 69, 73, 13, 10, 9, 74, 83, 82, 32, 70, 73, 76, 86, 82, 77, 13, 10, 9, 76, 68, 88, 32, 35, 36, 55, 70, 13, 10, 9, 76, 68, 65, 32, 35, 36, 68, 49, 13, 10, 46, 49, 58, 13, 10, 9, 83, 84, 65, 32, 115, 112, 114, 105, 116, 101, 115, 44, 88, 13, 10, 9, 68, 69, 88, 13, 10, 9, 66, 80, 76, 32, 46, 49, 13, 10, 9, 76, 68, 65, 32, 35, 36, 69, 50, 13, 10, 9, 76, 68, 88, 32, 35, 36, 48, 49, 13, 10, 9, 74, 83, 82, 32, 87, 82, 84, 86, 68, 80, 13, 10, 9, 67, 76, 73, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 109, 111, 100, 101, 95, 49, 58, 13, 10, 9, 76, 68, 65, 32, 109, 111, 100, 101, 13, 10, 9, 65, 78, 68, 32, 35, 36, 70, 55, 13, 10, 9, 83, 84, 65, 32, 109, 111, 100, 101, 13, 10, 9, 76, 68, 89, 32, 35, 36, 102, 102, 9, 59, 32, 36, 50, 48, 48, 48, 32, 102, 111, 114, 32, 99, 111, 108, 111, 114, 32, 116, 97, 98, 108, 101, 46, 13, 10, 9, 76, 68, 65, 32, 35, 36, 48, 51, 9, 59, 32, 36, 48, 48, 48, 48, 32, 102, 111, 114, 32, 98, 105, 116, 109, 97, 112, 115, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 76, 68, 65, 32, 35, 36, 48, 50, 13, 10, 9, 74, 83, 82, 32, 118, 100, 112, 95, 103, 101, 110, 101, 114, 105, 99, 95, 109, 111, 100, 101, 13, 10, 9, 76, 68, 65, 32, 35, 36, 48, 48, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 13, 10, 9, 83, 84, 65, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 83, 84, 65, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 13, 10, 9, 76, 68, 65, 32, 35, 36, 49, 56, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 74, 83, 82, 32, 70, 73, 76, 86, 82, 77, 13, 10, 9, 67, 76, 73, 13, 10, 9, 76, 68, 65, 32, 35, 36, 102, 48, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 13, 10, 9, 76, 68, 65, 32, 35, 36, 48, 48, 13, 10, 9, 83, 84, 65, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 13, 10, 9, 76, 68, 89, 32, 35, 36, 50, 48, 48, 48, 62, 62, 56, 13, 10, 9, 83, 84, 89, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 76, 68, 89, 32, 35, 36, 49, 56, 48, 48, 62, 62, 56, 13, 10, 9, 83, 84, 89, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 83, 69, 73, 13, 10, 9, 74, 83, 82, 32, 70, 73, 76, 86, 82, 77, 13, 10, 9, 67, 76, 73, 13, 10, 9, 76, 68, 65, 32, 35, 36, 49, 56, 48, 48, 13, 10, 9, 76, 68, 89, 32, 35, 36, 49, 56, 48, 48, 62, 62, 56, 13, 10, 9, 83, 84, 65, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 83, 84, 89, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 46, 49, 58, 9, 83, 69, 73, 13, 10, 9, 76, 68, 65, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 76, 68, 89, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 74, 83, 82, 32, 83, 69, 84, 87, 82, 84, 13, 10, 9, 76, 68, 88, 32, 35, 51, 50, 13, 10, 9, 76, 68, 89, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 46, 50, 58, 13, 10, 9, 84, 89, 65, 9, 9, 59, 32, 50, 13, 10, 9, 83, 84, 65, 32, 36, 51, 48, 48, 48, 9, 59, 32, 52, 13, 10, 9, 78, 79, 80, 9, 9, 59, 32, 50, 13, 10, 9, 78, 79, 80, 9, 9, 59, 32, 50, 13, 10, 9, 78, 79, 80, 9, 9, 59, 32, 50, 13, 10, 9, 73, 78, 89, 9, 9, 59, 32, 50, 13, 10, 9, 68, 69, 88, 9, 9, 59, 32, 50, 13, 10, 9, 66, 78, 69, 32, 46, 50, 9, 9, 59, 32, 50, 47, 51, 47, 52, 13, 10, 9, 67, 76, 73, 13, 10, 9, 76, 68, 65, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 67, 76, 67, 13, 10, 9, 65, 68, 67, 32, 35, 51, 50, 13, 10, 9, 83, 84, 65, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 66, 67, 67, 32, 46, 49, 13, 10, 9, 73, 78, 67, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 76, 68, 65, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 67, 77, 80, 32, 35, 36, 49, 66, 13, 10, 9, 66, 78, 69, 32, 46, 49, 13, 10, 9, 74, 77, 80, 32, 118, 100, 112, 95, 103, 101, 110, 101, 114, 105, 99, 95, 115, 112, 114, 105, 116, 101, 115, 13, 10, 13, 10, 109, 111, 100, 101, 95, 50, 58, 13, 10, 9, 76, 68, 65, 32, 109, 111, 100, 101, 13, 10, 9, 79, 82, 65, 32, 35, 36, 48, 56, 13, 10, 9, 83, 84, 65, 32, 109, 111, 100, 101, 13, 10, 9, 76, 68, 89, 32, 35, 36, 56, 48, 9, 59, 32, 36, 50, 48, 48, 48, 32, 102, 111, 114, 32, 99, 111, 108, 111, 114, 32, 116, 97, 98, 108, 101, 46, 13, 10, 9, 76, 68, 65, 32, 35, 36, 48, 48, 9, 59, 32, 36, 48, 48, 48, 48, 32, 102, 111, 114, 32, 98, 105, 116, 109, 97, 112, 115, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 74, 83, 82, 32, 118, 100, 112, 95, 103, 101, 110, 101, 114, 105, 99, 95, 109, 111, 100, 101, 13, 10, 9, 74, 83, 82, 32, 76, 68, 73, 82, 86, 77, 13, 10, 9, 83, 69, 73, 13, 10, 9, 76, 68, 65, 32, 35, 36, 102, 48, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 13, 10, 9, 76, 68, 65, 32, 35, 36, 48, 48, 13, 10, 9, 83, 84, 65, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 76, 68, 89, 32, 35, 36, 50, 48, 48, 48, 62, 62, 56, 13, 10, 9, 83, 84, 89, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 76, 68, 65, 32, 35, 36, 50, 48, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 50, 13, 10, 9, 74, 83, 82, 32, 70, 73, 76, 86, 82, 77, 13, 10, 9, 67, 76, 73, 13, 10, 9, 74, 83, 82, 32, 99, 108, 115, 13, 10, 9, 74, 77, 80, 32, 118, 100, 112, 95, 103, 101, 110, 101, 114, 105, 99, 95, 115, 112, 114, 105, 116, 101, 115, 13, 10, 13, 10, 105, 110, 116, 95, 104, 97, 110, 100, 108, 101, 114, 58, 13, 10, 9, 80, 72, 65, 13, 10, 9, 84, 88, 65, 13, 10, 9, 80, 72, 65, 13, 10, 9, 84, 89, 65, 13, 10, 9, 80, 72, 65, 13, 10, 9, 76, 68, 65, 32, 36, 50, 48, 48, 49, 9, 59, 32, 86, 68, 80, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 105, 111, 110, 32, 99, 108, 101, 97, 114, 46, 13, 10, 9, 83, 84, 65, 32, 118, 100, 112, 95, 115, 116, 97, 116, 117, 115, 13, 10, 9, 76, 68, 65, 32, 35, 36, 49, 66, 48, 48, 13, 10, 9, 76, 68, 89, 32, 35, 36, 49, 66, 48, 48, 62, 62, 56, 13, 10, 9, 74, 83, 82, 32, 83, 69, 84, 87, 82, 84, 13, 10, 9, 76, 68, 65, 32, 109, 111, 100, 101, 13, 10, 9, 65, 78, 68, 32, 35, 36, 48, 52, 13, 10, 9, 66, 69, 81, 32, 46, 52, 13, 10, 9, 76, 68, 88, 32, 35, 48, 13, 10, 46, 55, 58, 9, 76, 68, 65, 32, 115, 112, 114, 105, 116, 101, 115, 44, 88, 9, 59, 32, 52, 13, 10, 9, 83, 84, 65, 32, 36, 51, 48, 48, 48, 9, 59, 32, 52, 13, 10, 9, 78, 79, 80, 9, 9, 59, 32, 50, 13, 10, 9, 78, 79, 80, 9, 9, 59, 32, 50, 13, 10, 9, 73, 78, 88, 9, 9, 59, 32, 50, 13, 10, 9, 67, 80, 88, 32, 35, 36, 56, 48, 9, 59, 32, 50, 13, 10, 9, 66, 78, 69, 32, 46, 55, 9, 9, 59, 32, 50, 47, 51, 47, 52, 13, 10, 9, 74, 77, 80, 32, 46, 53, 13, 10, 13, 10, 46, 52, 58, 9, 76, 68, 65, 32, 102, 108, 105, 99, 107, 101, 114, 13, 10, 9, 67, 76, 67, 13, 10, 9, 65, 68, 67, 32, 35, 52, 13, 10, 9, 65, 78, 68, 32, 35, 36, 55, 102, 13, 10, 9, 83, 84, 65, 32, 102, 108, 105, 99, 107, 101, 114, 13, 10, 9, 84, 65, 88, 13, 10, 9, 76, 68, 89, 32, 35, 51, 49, 13, 10, 46, 54, 58, 13, 10, 9, 76, 68, 65, 32, 115, 112, 114, 105, 116, 101, 115, 44, 88, 13, 10, 9, 83, 84, 65, 32, 36, 51, 48, 48, 48, 9, 13, 10, 9, 78, 79, 80, 13, 10, 9, 78, 79, 80, 13, 10, 9, 78, 79, 80, 13, 10, 9, 78, 79, 80, 13, 10, 9, 78, 79, 80, 13, 10, 9, 73, 78, 88, 13, 10, 9, 76, 68, 65, 32, 115, 112, 114, 105, 116, 101, 115, 44, 88, 13, 10, 9, 83, 84, 65, 32, 36, 51, 48, 48, 48, 13, 10, 9, 78, 79, 80, 13, 10, 9, 78, 79, 80, 13, 10, 9, 78, 79, 80, 13, 10, 9, 78, 79, 80, 13, 10, 9, 78, 79, 80, 13, 10, 9, 73, 78, 88, 13, 10, 9, 76, 68, 65, 32, 115, 112, 114, 105, 116, 101, 115, 44, 88, 13, 10, 9, 83, 84, 65, 32, 36, 51, 48, 48, 48, 13, 10, 9, 78, 79, 80, 13, 10, 9, 78, 79, 80, 13, 10, 9, 78, 79, 80, 13, 10, 9, 78, 79, 80, 13, 10, 9, 78, 79, 80, 13, 10, 9, 73, 78, 88, 13, 10, 9, 76, 68, 65, 32, 115, 112, 114, 105, 116, 101, 115, 44, 88, 13, 10, 9, 83, 84, 65, 32, 36, 51, 48, 48, 48, 13, 10, 9, 84, 88, 65, 13, 10, 9, 67, 76, 67, 13, 10, 9, 65, 68, 67, 32, 35, 50, 53, 13, 10, 9, 65, 78, 68, 32, 35, 36, 55, 102, 13, 10, 9, 84, 65, 88, 13, 10, 9, 68, 69, 89, 13, 10, 9, 66, 80, 76, 32, 46, 54, 13, 10, 46, 53, 58, 13, 10, 9, 74, 83, 82, 32, 66, 73, 79, 83, 95, 82, 69, 65, 68, 95, 67, 79, 78, 84, 82, 79, 76, 76, 69, 82, 83, 13, 10, 13, 10, 9, 76, 68, 88, 32, 106, 111, 121, 49, 95, 100, 105, 114, 13, 10, 9, 76, 68, 65, 32, 106, 111, 121, 49, 95, 98, 117, 116, 116, 111, 110, 115, 13, 10, 9, 74, 83, 82, 32, 99, 111, 110, 118, 101, 114, 116, 95, 106, 111, 121, 115, 116, 105, 99, 107, 13, 10, 9, 83, 84, 65, 32, 106, 111, 121, 49, 95, 100, 97, 116, 97, 13, 10, 13, 10, 9, 76, 68, 88, 32, 106, 111, 121, 50, 95, 100, 105, 114, 13, 10, 9, 76, 68, 65, 32, 106, 111, 121, 50, 95, 98, 117, 116, 116, 111, 110, 115, 13, 10, 9, 76, 83, 82, 32, 65, 13, 10, 9, 76, 83, 82, 32, 65, 13, 10, 9, 74, 83, 82, 32, 99, 111, 110, 118, 101, 114, 116, 95, 106, 111, 121, 115, 116, 105, 99, 107, 13, 10, 9, 83, 84, 65, 32, 106, 111, 121, 50, 95, 100, 97, 116, 97, 13, 10, 13, 10, 9, 76, 68, 88, 32, 35, 49, 13, 10, 9, 76, 68, 65, 32, 36, 49, 56, 13, 10, 9, 67, 77, 80, 32, 35, 36, 48, 67, 13, 10, 9, 66, 69, 81, 32, 46, 49, 49, 13, 10, 9, 73, 78, 88, 13, 10, 9, 76, 68, 65, 32, 36, 49, 57, 13, 10, 9, 67, 77, 80, 32, 35, 36, 51, 48, 13, 10, 9, 66, 69, 81, 32, 46, 49, 49, 13, 10, 9, 73, 78, 88, 13, 10, 9, 67, 77, 80, 32, 35, 36, 54, 48, 13, 10, 9, 66, 69, 81, 32, 46, 49, 49, 13, 10, 9, 73, 78, 88, 13, 10, 9, 67, 77, 80, 32, 35, 36, 50, 56, 13, 10, 9, 66, 69, 81, 32, 46, 49, 49, 13, 10, 9, 73, 78, 88, 13, 10, 9, 67, 77, 80, 32, 35, 36, 52, 56, 13, 10, 9, 66, 69, 81, 32, 46, 49, 49, 13, 10, 9, 73, 78, 88, 13, 10, 9, 67, 77, 80, 32, 35, 36, 53, 48, 13, 10, 9, 66, 69, 81, 32, 46, 49, 49, 13, 10, 9, 73, 78, 88, 13, 10, 9, 76, 68, 65, 32, 36, 49, 66, 13, 10, 9, 67, 77, 80, 32, 35, 36, 48, 54, 13, 10, 9, 66, 69, 81, 32, 46, 49, 49, 13, 10, 9, 73, 78, 88, 13, 10, 9, 67, 77, 80, 32, 35, 36, 52, 50, 13, 10, 9, 66, 69, 81, 32, 46, 49, 49, 13, 10, 9, 73, 78, 88, 13, 10, 9, 67, 77, 80, 32, 35, 36, 50, 50, 13, 10, 9, 66, 69, 81, 32, 46, 49, 49, 13, 10, 9, 76, 68, 88, 32, 35, 48, 13, 10, 9, 67, 77, 80, 32, 35, 36, 49, 50, 13, 10, 9, 66, 69, 81, 32, 46, 49, 49, 13, 10, 9, 76, 68, 88, 32, 35, 49, 49, 13, 10, 9, 67, 77, 80, 32, 35, 36, 48, 57, 13, 10, 9, 66, 69, 81, 32, 46, 49, 49, 13, 10, 9, 76, 68, 65, 32, 36, 49, 57, 13, 10, 9, 76, 68, 88, 32, 35, 49, 48, 13, 10, 9, 67, 77, 80, 32, 35, 36, 48, 57, 13, 10, 9, 66, 69, 81, 32, 46, 49, 49, 13, 10, 9, 76, 68, 88, 32, 35, 36, 48, 102, 13, 10, 46, 49, 49, 58, 9, 83, 84, 88, 32, 107, 101, 121, 49, 95, 100, 97, 116, 97, 13, 10, 13, 10, 32, 32, 32, 32, 105, 102, 32, 67, 86, 66, 65, 83, 73, 67, 95, 77, 85, 83, 73, 67, 95, 80, 76, 65, 89, 69, 82, 13, 10, 9, 76, 68, 65, 32, 109, 117, 115, 105, 99, 95, 109, 111, 100, 101, 13, 10, 9, 66, 69, 81, 32, 46, 49, 48, 13, 10, 9, 74, 83, 82, 32, 109, 117, 115, 105, 99, 95, 104, 97, 114, 100, 119, 97, 114, 101, 13, 10, 46, 49, 48, 58, 13, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 13, 10, 9, 73, 78, 67, 32, 102, 114, 97, 109, 101, 13, 10, 9, 66, 78, 69, 32, 46, 56, 13, 10, 9, 73, 78, 67, 32, 102, 114, 97, 109, 101, 43, 49, 13, 10, 46, 56, 58, 13, 10, 9, 73, 78, 67, 32, 108, 102, 115, 114, 9, 59, 32, 77, 97, 107, 101, 32, 76, 70, 83, 82, 32, 109, 111, 114, 101, 32, 114, 97, 110, 100, 111, 109, 13, 10, 9, 73, 78, 67, 32, 108, 102, 115, 114, 13, 10, 9, 73, 78, 67, 32, 108, 102, 115, 114, 13, 10, 32, 32, 32, 32, 105, 102, 32, 67, 86, 66, 65, 83, 73, 67, 95, 77, 85, 83, 73, 67, 95, 80, 76, 65, 89, 69, 82, 13, 10, 9, 76, 68, 65, 32, 109, 117, 115, 105, 99, 95, 109, 111, 100, 101, 13, 10, 9, 66, 69, 81, 32, 46, 57, 13, 10, 9, 74, 83, 82, 32, 109, 117, 115, 105, 99, 95, 103, 101, 110, 101, 114, 97, 116, 101, 13, 10, 46, 57, 58, 13, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 13, 10, 9, 59, 32, 84, 104, 105, 115, 32, 105, 115, 32, 108, 105, 107, 101, 32, 115, 97, 118, 105, 110, 103, 32, 101, 120, 116, 114, 97, 32, 114, 101, 103, 105, 115, 116, 101, 114, 115, 44, 32, 98, 101, 99, 97, 117, 115, 101, 32, 116, 104, 101, 115, 101, 13, 10, 9, 59, 32, 97, 114, 101, 32, 117, 115, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 99, 111, 109, 112, 105, 108, 101, 100, 32, 99, 111, 100, 101, 44, 32, 97, 110, 100, 32, 119, 101, 32, 100, 111, 110, 39, 116, 32, 119, 97, 110, 116, 13, 10, 9, 59, 32, 97, 110, 121, 32, 114, 101, 101, 110, 116, 114, 97, 110, 99, 121, 46, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 43, 48, 13, 10, 9, 80, 72, 65, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 80, 72, 65, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 43, 50, 13, 10, 9, 80, 72, 65, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 43, 51, 13, 10, 9, 80, 72, 65, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 43, 52, 13, 10, 9, 80, 72, 65, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 43, 53, 13, 10, 9, 80, 72, 65, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 43, 54, 13, 10, 9, 80, 72, 65, 13, 10, 9, 76, 68, 65, 32, 116, 101, 109, 112, 43, 55, 13, 10, 9, 80, 72, 65, 13, 10, 9, 59, 67, 86, 66, 65, 83, 73, 67, 32, 77, 65, 82, 75, 32, 68, 79, 78, 39, 84, 32, 67, 72, 65, 78, 71, 69, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 43, 55, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 43, 54, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 43, 53, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 43, 52, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 43, 51, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 43, 50, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 80, 76, 65, 13, 10, 9, 83, 84, 65, 32, 116, 101, 109, 112, 43, 48, 13, 10, 13, 10, 9, 80, 76, 65, 13, 10, 9, 84, 65, 89, 13, 10, 9, 80, 76, 65, 13, 10, 9, 84, 65, 88, 13, 10, 9, 80, 76, 65, 13, 10, 9, 82, 84, 73, 13, 10, 13, 10, 99, 111, 110, 118, 101, 114, 116, 95, 106, 111, 121, 115, 116, 105, 99, 107, 58, 13, 10, 9, 82, 79, 82, 32, 65, 13, 10, 9, 82, 79, 82, 32, 65, 13, 10, 9, 82, 79, 82, 32, 65, 13, 10, 9, 65, 78, 68, 32, 35, 36, 67, 48, 13, 10, 9, 84, 65, 89, 13, 10, 9, 84, 88, 65, 13, 10, 9, 66, 69, 81, 32, 46, 49, 13, 10, 9, 65, 78, 68, 32, 35, 36, 48, 70, 13, 10, 9, 84, 65, 88, 13, 10, 59, 9, 76, 68, 65, 32, 70, 82, 65, 77, 69, 13, 10, 59, 9, 65, 78, 68, 32, 35, 49, 13, 10, 59, 9, 66, 69, 81, 32, 46, 50, 13, 10, 9, 84, 89, 65, 13, 10, 9, 79, 82, 65, 32, 106, 111, 121, 115, 116, 105, 99, 107, 95, 116, 97, 98, 108, 101, 44, 88, 13, 10, 9, 82, 84, 83, 13, 10, 59, 46, 50, 58, 13, 10, 59, 9, 84, 89, 65, 13, 10, 59, 9, 79, 82, 65, 32, 106, 111, 121, 115, 116, 105, 99, 107, 95, 116, 97, 98, 108, 101, 43, 49, 54, 44, 88, 13, 10, 59, 9, 82, 84, 83, 13, 10, 13, 10, 46, 49, 58, 9, 84, 89, 65, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 106, 111, 121, 115, 116, 105, 99, 107, 95, 116, 97, 98, 108, 101, 58, 13, 10, 9, 68, 66, 32, 36, 48, 52, 44, 36, 48, 52, 44, 36, 48, 54, 44, 36, 48, 54, 44, 36, 48, 50, 44, 36, 48, 50, 44, 36, 48, 51, 44, 36, 48, 51, 13, 10, 9, 68, 66, 32, 36, 48, 49, 44, 36, 48, 49, 44, 36, 48, 57, 44, 36, 48, 57, 44, 36, 48, 56, 44, 36, 48, 56, 44, 36, 48, 67, 44, 36, 48, 67, 13, 10, 13, 10, 59, 9, 68, 66, 32, 36, 48, 67, 44, 36, 48, 52, 44, 36, 48, 52, 44, 36, 48, 54, 44, 36, 48, 54, 44, 36, 48, 50, 44, 36, 48, 50, 44, 36, 48, 51, 13, 10, 59, 9, 68, 66, 32, 36, 48, 51, 44, 36, 48, 49, 44, 36, 48, 49, 44, 36, 48, 57, 44, 36, 48, 57, 44, 36, 48, 56, 44, 36, 48, 56, 44, 36, 48, 67, 13, 10, 13, 10, 119, 97, 105, 116, 58, 13, 10, 9, 76, 68, 65, 32, 102, 114, 97, 109, 101, 13, 10, 46, 49, 58, 9, 67, 77, 80, 32, 102, 114, 97, 109, 101, 13, 10, 9, 66, 69, 81, 32, 46, 49, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 109, 117, 115, 105, 99, 95, 105, 110, 105, 116, 58, 13, 10, 9, 76, 68, 65, 32, 35, 36, 57, 102, 13, 10, 9, 74, 83, 82, 32, 66, 73, 79, 83, 95, 87, 82, 73, 84, 69, 95, 80, 83, 71, 9, 13, 10, 9, 76, 68, 65, 32, 35, 36, 98, 102, 13, 10, 9, 74, 83, 82, 32, 66, 73, 79, 83, 95, 87, 82, 73, 84, 69, 95, 80, 83, 71, 9, 13, 10, 9, 76, 68, 65, 32, 35, 36, 100, 102, 13, 10, 9, 74, 83, 82, 32, 66, 73, 79, 83, 95, 87, 82, 73, 84, 69, 95, 80, 83, 71, 9, 13, 10, 9, 76, 68, 65, 32, 35, 36, 102, 102, 13, 10, 9, 74, 83, 82, 32, 66, 73, 79, 83, 95, 87, 82, 73, 84, 69, 95, 80, 83, 71, 13, 10, 32, 32, 32, 32, 105, 102, 32, 67, 86, 66, 65, 83, 73, 67, 95, 77, 85, 83, 73, 67, 95, 80, 76, 65, 89, 69, 82, 13, 10, 32, 32, 32, 32, 101, 108, 115, 101, 9, 13, 10, 9, 82, 84, 83, 13, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 13, 10, 13, 10, 32, 32, 32, 32, 105, 102, 32, 67, 86, 66, 65, 83, 73, 67, 95, 77, 85, 83, 73, 67, 95, 80, 76, 65, 89, 69, 82, 13, 10, 9, 76, 68, 65, 32, 35, 36, 102, 102, 13, 10, 9, 83, 84, 65, 32, 97, 117, 100, 105, 111, 95, 118, 111, 108, 52, 104, 119, 13, 10, 9, 76, 68, 65, 32, 35, 36, 48, 48, 13, 10, 9, 83, 84, 65, 32, 97, 117, 100, 105, 111, 95, 99, 111, 110, 116, 114, 111, 108, 13, 10, 9, 76, 68, 65, 32, 35, 109, 117, 115, 105, 99, 95, 115, 105, 108, 101, 110, 99, 101, 13, 10, 9, 76, 68, 89, 32, 35, 109, 117, 115, 105, 99, 95, 115, 105, 108, 101, 110, 99, 101, 62, 62, 56, 13, 10, 9, 59, 13, 10, 9, 59, 32, 80, 108, 97, 121, 32, 109, 117, 115, 105, 99, 46, 13, 10, 9, 59, 32, 89, 65, 32, 61, 32, 80, 111, 105, 110, 116, 101, 114, 32, 116, 111, 32, 109, 117, 115, 105, 99, 46, 13, 10, 9, 59, 13, 10, 109, 117, 115, 105, 99, 95, 112, 108, 97, 121, 58, 13, 10, 9, 83, 69, 73, 13, 10, 9, 83, 84, 65, 32, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 83, 84, 89, 32, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 76, 68, 89, 32, 35, 48, 13, 10, 9, 83, 84, 89, 32, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 99, 111, 117, 110, 116, 101, 114, 13, 10, 9, 76, 68, 65, 32, 40, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 41, 44, 89, 13, 10, 9, 83, 84, 65, 32, 109, 117, 115, 105, 99, 95, 116, 105, 109, 105, 110, 103, 13, 10, 9, 73, 78, 89, 13, 10, 9, 83, 84, 89, 32, 109, 117, 115, 105, 99, 95, 112, 108, 97, 121, 105, 110, 103, 13, 10, 9, 73, 78, 67, 32, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 66, 78, 69, 32, 36, 43, 52, 13, 10, 9, 73, 78, 67, 32, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 76, 68, 65, 32, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 76, 68, 89, 32, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 83, 84, 65, 32, 109, 117, 115, 105, 99, 95, 115, 116, 97, 114, 116, 13, 10, 9, 83, 84, 89, 32, 109, 117, 115, 105, 99, 95, 115, 116, 97, 114, 116, 43, 49, 13, 10, 9, 67, 76, 73, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 9, 59, 13, 10, 9, 59, 32, 71, 101, 110, 101, 114, 97, 116, 101, 115, 32, 109, 117, 115, 105, 99, 13, 10, 9, 59, 13, 10, 109, 117, 115, 105, 99, 95, 103, 101, 110, 101, 114, 97, 116, 101, 58, 13, 10, 9, 76, 68, 65, 32, 35, 48, 13, 10, 9, 83, 84, 65, 32, 97, 117, 100, 105, 111, 95, 118, 111, 108, 49, 13, 10, 9, 83, 84, 65, 32, 97, 117, 100, 105, 111, 95, 118, 111, 108, 50, 13, 10, 9, 83, 84, 65, 32, 97, 117, 100, 105, 111, 95, 118, 111, 108, 51, 13, 10, 9, 76, 68, 65, 32, 35, 36, 70, 70, 13, 10, 9, 83, 84, 65, 32, 97, 117, 100, 105, 111, 95, 118, 111, 108, 52, 104, 119, 13, 10, 9, 76, 68, 65, 32, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 99, 111, 117, 110, 116, 101, 114, 13, 10, 9, 66, 69, 81, 32, 46, 49, 13, 10, 9, 74, 77, 80, 32, 46, 50, 13, 10, 46, 49, 58, 13, 10, 9, 76, 68, 89, 32, 35, 48, 13, 10, 9, 76, 68, 65, 32, 40, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 41, 44, 89, 13, 10, 9, 67, 77, 80, 32, 35, 36, 102, 101, 9, 59, 32, 69, 110, 100, 32, 111, 102, 32, 109, 117, 115, 105, 99, 63, 13, 10, 9, 66, 78, 69, 32, 46, 51, 9, 9, 59, 32, 78, 111, 44, 32, 106, 117, 109, 112, 46, 13, 10, 9, 76, 68, 65, 32, 35, 48, 9, 9, 59, 32, 75, 101, 101, 112, 32, 97, 116, 32, 115, 97, 109, 101, 32, 112, 108, 97, 99, 101, 46, 13, 10, 9, 83, 84, 65, 32, 109, 117, 115, 105, 99, 95, 112, 108, 97, 121, 105, 110, 103, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 46, 51, 58, 9, 67, 77, 80, 32, 35, 36, 102, 100, 9, 59, 32, 82, 101, 112, 101, 97, 116, 32, 109, 117, 115, 105, 99, 63, 13, 10, 9, 66, 78, 69, 32, 46, 52, 13, 10, 9, 76, 68, 65, 32, 109, 117, 115, 105, 99, 95, 115, 116, 97, 114, 116, 13, 10, 9, 76, 68, 89, 32, 109, 117, 115, 105, 99, 95, 115, 116, 97, 114, 116, 43, 49, 13, 10, 9, 83, 84, 65, 32, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 83, 84, 89, 32, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 74, 77, 80, 32, 46, 49, 13, 10, 13, 10, 46, 52, 58, 9, 76, 68, 65, 32, 109, 117, 115, 105, 99, 95, 116, 105, 109, 105, 110, 103, 13, 10, 9, 65, 78, 68, 32, 35, 36, 51, 102, 9, 59, 32, 82, 101, 115, 116, 97, 114, 116, 32, 110, 111, 116, 101, 32, 116, 105, 109, 101, 46, 13, 10, 9, 83, 84, 65, 32, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 99, 111, 117, 110, 116, 101, 114, 13, 10, 13, 10, 9, 76, 68, 65, 32, 40, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 41, 44, 89, 13, 10, 9, 67, 77, 80, 32, 35, 36, 51, 70, 9, 59, 32, 83, 117, 115, 116, 97, 105, 110, 63, 13, 10, 9, 66, 69, 81, 32, 46, 53, 13, 10, 9, 65, 78, 68, 32, 35, 36, 67, 48, 13, 10, 9, 83, 84, 65, 32, 109, 117, 115, 105, 99, 95, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 49, 13, 10, 9, 76, 68, 65, 32, 40, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 41, 44, 89, 13, 10, 9, 65, 78, 68, 32, 35, 36, 51, 70, 13, 10, 9, 65, 83, 76, 32, 65, 13, 10, 9, 83, 84, 65, 32, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 49, 13, 10, 9, 76, 68, 65, 32, 35, 48, 13, 10, 9, 83, 84, 65, 32, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 49, 13, 10, 46, 53, 58, 13, 10, 9, 73, 78, 89, 13, 10, 9, 76, 68, 65, 32, 40, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 41, 44, 89, 13, 10, 9, 67, 77, 80, 32, 35, 36, 51, 70, 9, 59, 32, 83, 117, 115, 116, 97, 105, 110, 63, 13, 10, 9, 66, 69, 81, 32, 46, 54, 13, 10, 9, 65, 78, 68, 32, 35, 36, 67, 48, 13, 10, 9, 83, 84, 65, 32, 109, 117, 115, 105, 99, 95, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 50, 13, 10, 9, 76, 68, 65, 32, 40, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 41, 44, 89, 13, 10, 9, 65, 78, 68, 32, 35, 36, 51, 70, 13, 10, 9, 65, 83, 76, 32, 65, 13, 10, 9, 83, 84, 65, 32, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 50, 13, 10, 9, 76, 68, 65, 32, 35, 48, 13, 10, 9, 83, 84, 65, 32, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 50, 13, 10, 46, 54, 58, 13, 10, 9, 73, 78, 89, 13, 10, 9, 76, 68, 65, 32, 40, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 41, 44, 89, 13, 10, 9, 67, 77, 80, 32, 35, 36, 51, 70, 9, 59, 32, 83, 117, 115, 116, 97, 105, 110, 63, 13, 10, 9, 66, 69, 81, 32, 46, 55, 13, 10, 9, 65, 78, 68, 32, 35, 36, 67, 48, 13, 10, 9, 83, 84, 65, 32, 109, 117, 115, 105, 99, 95, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 51, 13, 10, 9, 76, 68, 65, 32, 40, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 41, 44, 89, 13, 10, 9, 65, 78, 68, 32, 35, 36, 51, 70, 13, 10, 9, 65, 83, 76, 32, 65, 13, 10, 9, 83, 84, 65, 32, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 51, 13, 10, 9, 76, 68, 65, 32, 35, 48, 13, 10, 9, 83, 84, 65, 32, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 51, 13, 10, 46, 55, 58, 13, 10, 9, 73, 78, 89, 13, 10, 9, 76, 68, 65, 32, 40, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 41, 44, 89, 13, 10, 9, 83, 84, 65, 32, 109, 117, 115, 105, 99, 95, 100, 114, 117, 109, 13, 10, 9, 76, 68, 65, 32, 35, 48, 9, 13, 10, 9, 83, 84, 65, 32, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 52, 13, 10, 9, 76, 68, 65, 32, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 67, 76, 67, 13, 10, 9, 65, 68, 67, 32, 35, 52, 13, 10, 9, 83, 84, 65, 32, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 76, 68, 65, 32, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 65, 68, 67, 32, 35, 48, 13, 10, 9, 83, 84, 65, 32, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 46, 50, 58, 13, 10, 9, 76, 68, 89, 32, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 49, 13, 10, 9, 66, 69, 81, 32, 46, 56, 13, 10, 9, 76, 68, 65, 32, 109, 117, 115, 105, 99, 95, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 49, 13, 10, 9, 76, 68, 88, 32, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 49, 13, 10, 9, 74, 83, 82, 32, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 50, 102, 114, 101, 113, 13, 10, 9, 83, 84, 65, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 49, 13, 10, 9, 83, 84, 89, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 49, 43, 49, 13, 10, 9, 83, 84, 88, 32, 97, 117, 100, 105, 111, 95, 118, 111, 108, 49, 13, 10, 46, 56, 58, 13, 10, 9, 76, 68, 89, 32, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 50, 13, 10, 9, 66, 69, 81, 32, 46, 57, 13, 10, 9, 76, 68, 65, 32, 109, 117, 115, 105, 99, 95, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 50, 13, 10, 9, 76, 68, 88, 32, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 50, 13, 10, 9, 74, 83, 82, 32, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 50, 102, 114, 101, 113, 13, 10, 9, 83, 84, 65, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 50, 13, 10, 9, 83, 84, 89, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 50, 43, 49, 13, 10, 9, 83, 84, 88, 32, 97, 117, 100, 105, 111, 95, 118, 111, 108, 50, 13, 10, 46, 57, 58, 13, 10, 9, 76, 68, 89, 32, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 51, 13, 10, 9, 66, 69, 81, 32, 46, 49, 48, 13, 10, 9, 76, 68, 65, 32, 109, 117, 115, 105, 99, 95, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 51, 13, 10, 9, 76, 68, 88, 32, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 51, 13, 10, 9, 74, 83, 82, 32, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 50, 102, 114, 101, 113, 13, 10, 9, 83, 84, 65, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 51, 13, 10, 9, 83, 84, 89, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 51, 43, 49, 13, 10, 9, 83, 84, 88, 32, 97, 117, 100, 105, 111, 95, 118, 111, 108, 51, 13, 10, 46, 49, 48, 58, 13, 10, 9, 76, 68, 65, 32, 109, 117, 115, 105, 99, 95, 100, 114, 117, 109, 13, 10, 9, 66, 69, 81, 32, 46, 49, 49, 13, 10, 9, 67, 77, 80, 32, 35, 49, 9, 9, 59, 32, 49, 32, 45, 32, 76, 111, 110, 103, 32, 100, 114, 117, 109, 46, 13, 10, 9, 66, 78, 69, 32, 46, 49, 50, 13, 10, 9, 76, 68, 65, 32, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 52, 13, 10, 9, 67, 77, 80, 32, 35, 51, 13, 10, 9, 66, 67, 83, 32, 46, 49, 49, 13, 10, 46, 49, 53, 58, 13, 10, 9, 76, 68, 65, 32, 35, 36, 101, 99, 13, 10, 9, 83, 84, 65, 32, 97, 117, 100, 105, 111, 95, 110, 111, 105, 115, 101, 13, 10, 9, 76, 68, 65, 32, 35, 36, 102, 53, 13, 10, 9, 83, 84, 65, 32, 97, 117, 100, 105, 111, 95, 118, 111, 108, 52, 104, 119, 13, 10, 9, 74, 77, 80, 32, 46, 49, 49, 13, 10, 13, 10, 46, 49, 50, 58, 9, 67, 77, 80, 32, 35, 50, 9, 9, 59, 32, 50, 32, 45, 32, 83, 104, 111, 114, 116, 32, 100, 114, 117, 109, 46, 13, 10, 9, 66, 78, 69, 32, 46, 49, 52, 13, 10, 9, 76, 68, 65, 32, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 52, 13, 10, 9, 67, 77, 80, 32, 35, 48, 13, 10, 9, 66, 78, 69, 32, 46, 49, 49, 13, 10, 9, 76, 68, 65, 32, 35, 36, 101, 100, 13, 10, 9, 83, 84, 65, 32, 97, 117, 100, 105, 111, 95, 110, 111, 105, 115, 101, 13, 10, 9, 76, 68, 65, 32, 35, 36, 70, 53, 13, 10, 9, 83, 84, 65, 32, 97, 117, 100, 105, 111, 95, 118, 111, 108, 52, 104, 119, 13, 10, 9, 74, 77, 80, 32, 46, 49, 49, 13, 10, 13, 10, 46, 49, 52, 58, 9, 59, 67, 77, 80, 32, 35, 51, 9, 9, 59, 32, 51, 32, 45, 32, 82, 111, 108, 108, 46, 13, 10, 9, 59, 66, 78, 69, 13, 10, 9, 76, 68, 65, 32, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 52, 13, 10, 9, 67, 77, 80, 32, 35, 50, 13, 10, 9, 66, 67, 67, 32, 46, 49, 53, 13, 10, 9, 65, 83, 76, 32, 65, 13, 10, 9, 83, 69, 67, 13, 10, 9, 83, 66, 67, 32, 109, 117, 115, 105, 99, 95, 116, 105, 109, 105, 110, 103, 13, 10, 9, 66, 67, 67, 32, 46, 49, 49, 13, 10, 9, 67, 77, 80, 32, 35, 52, 13, 10, 9, 66, 67, 67, 32, 46, 49, 53, 13, 10, 46, 49, 49, 58, 13, 10, 9, 76, 68, 88, 32, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 49, 13, 10, 9, 73, 78, 88, 13, 10, 9, 67, 80, 88, 32, 35, 36, 49, 56, 13, 10, 9, 66, 78, 69, 32, 36, 43, 52, 13, 10, 9, 76, 68, 88, 32, 35, 36, 49, 48, 13, 10, 9, 83, 84, 88, 32, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 49, 13, 10, 13, 10, 9, 76, 68, 88, 32, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 50, 13, 10, 9, 73, 78, 88, 13, 10, 9, 67, 80, 88, 32, 35, 36, 49, 56, 13, 10, 9, 66, 78, 69, 32, 36, 43, 52, 13, 10, 9, 76, 68, 88, 32, 35, 36, 49, 48, 13, 10, 9, 83, 84, 88, 32, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 50, 13, 10, 13, 10, 9, 76, 68, 88, 32, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 51, 13, 10, 9, 73, 78, 88, 13, 10, 9, 67, 80, 88, 32, 35, 36, 49, 56, 13, 10, 9, 66, 78, 69, 32, 36, 43, 52, 13, 10, 9, 76, 68, 88, 32, 35, 36, 49, 48, 13, 10, 9, 83, 84, 88, 32, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 51, 13, 10, 13, 10, 9, 73, 78, 67, 32, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 52, 13, 10, 9, 68, 69, 67, 32, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 99, 111, 117, 110, 116, 101, 114, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 109, 117, 115, 105, 99, 95, 102, 108, 117, 116, 101, 58, 13, 10, 9, 76, 68, 65, 32, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 115, 95, 116, 97, 98, 108, 101, 44, 89, 13, 10, 9, 67, 76, 67, 13, 10, 9, 65, 68, 67, 32, 46, 50, 44, 88, 13, 10, 9, 80, 72, 65, 13, 10, 9, 76, 68, 65, 32, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 115, 95, 116, 97, 98, 108, 101, 43, 49, 44, 89, 13, 10, 9, 65, 68, 67, 32, 35, 48, 13, 10, 9, 84, 65, 89, 13, 10, 9, 76, 68, 65, 32, 46, 49, 44, 88, 13, 10, 9, 84, 65, 88, 13, 10, 9, 80, 76, 65, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 46, 49, 58, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 49, 48, 44, 49, 50, 44, 49, 51, 44, 49, 51, 44, 49, 50, 44, 49, 50, 44, 49, 50, 44, 49, 50, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 49, 49, 44, 49, 49, 44, 49, 49, 44, 49, 49, 44, 49, 48, 44, 49, 48, 44, 49, 48, 44, 49, 48, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 49, 49, 44, 49, 49, 44, 49, 49, 44, 49, 49, 44, 49, 48, 44, 49, 48, 44, 49, 48, 44, 49, 48, 13, 10, 13, 10, 46, 50, 58, 13, 10, 9, 100, 98, 32, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 49, 44, 49, 44, 49, 13, 10, 9, 100, 98, 32, 48, 44, 49, 44, 49, 44, 49, 44, 48, 44, 49, 44, 49, 44, 49, 13, 10, 9, 100, 98, 32, 48, 44, 49, 44, 49, 44, 49, 44, 48, 44, 49, 44, 49, 44, 49, 13, 10, 13, 10, 9, 59, 13, 10, 9, 59, 32, 67, 111, 110, 118, 101, 114, 116, 115, 32, 110, 111, 116, 101, 32, 116, 111, 32, 102, 114, 101, 113, 117, 101, 110, 99, 121, 46, 13, 10, 9, 59, 32, 73, 110, 112, 117, 116, 58, 13, 10, 9, 59, 32, 32, 32, 65, 32, 61, 32, 73, 110, 115, 116, 114, 117, 109, 101, 110, 116, 46, 13, 10, 9, 59, 32, 32, 32, 89, 32, 61, 32, 78, 111, 116, 101, 32, 40, 49, 45, 54, 50, 41, 13, 10, 9, 59, 32, 32, 32, 88, 32, 61, 32, 73, 110, 115, 116, 114, 117, 109, 101, 110, 116, 32, 99, 111, 117, 110, 116, 101, 114, 46, 13, 10, 9, 59, 32, 79, 117, 116, 112, 117, 116, 58, 13, 10, 9, 59, 32, 32, 32, 89, 65, 32, 61, 32, 70, 114, 101, 113, 117, 101, 110, 99, 121, 46, 13, 10, 9, 59, 32, 32, 32, 88, 32, 61, 32, 86, 111, 108, 117, 109, 101, 46, 13, 10, 9, 59, 13, 10, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 50, 102, 114, 101, 113, 58, 13, 10, 9, 67, 77, 80, 32, 35, 36, 52, 48, 13, 10, 9, 66, 67, 67, 32, 109, 117, 115, 105, 99, 95, 112, 105, 97, 110, 111, 13, 10, 9, 66, 69, 81, 32, 109, 117, 115, 105, 99, 95, 99, 108, 97, 114, 105, 110, 101, 116, 13, 10, 9, 67, 77, 80, 32, 35, 36, 56, 48, 13, 10, 9, 66, 69, 81, 32, 109, 117, 115, 105, 99, 95, 102, 108, 117, 116, 101, 13, 10, 9, 59, 13, 10, 9, 59, 32, 66, 97, 115, 115, 32, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 13, 10, 9, 59, 32, 13, 10, 109, 117, 115, 105, 99, 95, 98, 97, 115, 115, 58, 13, 10, 9, 76, 68, 65, 32, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 115, 95, 116, 97, 98, 108, 101, 44, 89, 13, 10, 9, 65, 83, 76, 32, 65, 13, 10, 9, 80, 72, 65, 13, 10, 9, 76, 68, 65, 32, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 115, 95, 116, 97, 98, 108, 101, 43, 49, 44, 89, 13, 10, 9, 82, 79, 76, 32, 65, 13, 10, 9, 84, 65, 89, 13, 10, 9, 76, 68, 65, 32, 46, 49, 44, 88, 13, 10, 9, 84, 65, 88, 13, 10, 9, 80, 76, 65, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 46, 49, 58, 13, 10, 9, 100, 98, 32, 49, 51, 44, 49, 51, 44, 49, 50, 44, 49, 50, 44, 49, 49, 44, 49, 49, 44, 49, 48, 44, 49, 48, 13, 10, 9, 100, 98, 32, 57, 44, 57, 44, 56, 44, 56, 44, 55, 44, 55, 44, 54, 44, 54, 13, 10, 9, 100, 98, 32, 53, 44, 53, 44, 52, 44, 52, 44, 51, 44, 51, 44, 50, 44, 50, 13, 10, 13, 10, 109, 117, 115, 105, 99, 95, 112, 105, 97, 110, 111, 58, 13, 10, 9, 76, 68, 65, 32, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 115, 95, 116, 97, 98, 108, 101, 44, 89, 13, 10, 9, 80, 72, 65, 13, 10, 9, 76, 68, 65, 32, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 115, 95, 116, 97, 98, 108, 101, 43, 49, 44, 89, 13, 10, 9, 84, 65, 89, 13, 10, 9, 76, 68, 65, 32, 46, 49, 44, 88, 13, 10, 9, 84, 65, 88, 13, 10, 9, 80, 76, 65, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 46, 49, 58, 9, 100, 98, 32, 49, 50, 44, 49, 49, 44, 49, 49, 44, 49, 48, 44, 49, 48, 44, 57, 44, 57, 44, 56, 13, 10, 9, 100, 98, 32, 56, 44, 55, 44, 55, 44, 54, 44, 54, 44, 53, 44, 53, 44, 52, 13, 10, 9, 100, 98, 32, 52, 44, 52, 44, 53, 44, 53, 44, 52, 44, 52, 44, 51, 44, 51, 13, 10, 13, 10, 109, 117, 115, 105, 99, 95, 99, 108, 97, 114, 105, 110, 101, 116, 58, 13, 10, 9, 76, 68, 65, 32, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 115, 95, 116, 97, 98, 108, 101, 44, 89, 13, 10, 9, 67, 76, 67, 13, 10, 9, 65, 68, 67, 32, 46, 50, 44, 88, 13, 10, 9, 80, 72, 65, 13, 10, 9, 76, 68, 65, 32, 46, 50, 44, 88, 13, 10, 9, 66, 77, 73, 32, 46, 51, 13, 10, 9, 76, 68, 65, 32, 35, 36, 48, 48, 13, 10, 9, 68, 66, 32, 36, 50, 67, 13, 10, 46, 51, 58, 9, 76, 68, 65, 32, 35, 36, 102, 102, 13, 10, 9, 65, 68, 67, 32, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 115, 95, 116, 97, 98, 108, 101, 43, 49, 44, 89, 13, 10, 9, 76]);
fileData1.push.apply(fileData1, [83, 82, 32, 65, 13, 10, 9, 84, 65, 89, 13, 10, 9, 76, 68, 65, 32, 46, 49, 44, 88, 13, 10, 9, 84, 65, 88, 13, 10, 9, 80, 76, 65, 13, 10, 9, 82, 79, 82, 32, 65, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 46, 49, 58, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 49, 51, 44, 49, 52, 44, 49, 52, 44, 49, 51, 44, 49, 51, 44, 49, 50, 44, 49, 50, 44, 49, 50, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 49, 49, 44, 49, 49, 44, 49, 49, 44, 49, 49, 44, 49, 50, 44, 49, 50, 44, 49, 50, 44, 49, 50, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 49, 49, 44, 49, 49, 44, 49, 49, 44, 49, 49, 44, 49, 50, 44, 49, 50, 44, 49, 50, 44, 49, 50, 13, 10, 13, 10, 46, 50, 58, 13, 10, 9, 100, 98, 32, 48, 44, 48, 44, 48, 44, 48, 44, 45, 49, 44, 45, 50, 44, 45, 49, 44, 48, 13, 10, 9, 100, 98, 32, 49, 44, 50, 44, 49, 44, 48, 44, 45, 49, 44, 45, 50, 44, 45, 49, 44, 48, 13, 10, 9, 100, 98, 32, 49, 44, 50, 44, 49, 44, 48, 44, 45, 49, 44, 45, 50, 44, 45, 49, 44, 48, 13, 10, 13, 10, 9, 59, 13, 10, 9, 59, 32, 77, 117, 115, 105, 99, 97, 108, 32, 110, 111, 116, 101, 115, 32, 116, 97, 98, 108, 101, 46, 13, 10, 9, 59, 13, 10, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 115, 95, 116, 97, 98, 108, 101, 58, 13, 10, 9, 59, 32, 83, 105, 108, 101, 110, 99, 101, 32, 45, 32, 48, 13, 10, 9, 100, 119, 32, 48, 13, 10, 9, 59, 32, 86, 97, 108, 117, 101, 115, 32, 102, 111, 114, 32, 50, 46, 48, 48, 32, 109, 104, 122, 46, 13, 10, 9, 59, 32, 50, 110, 100, 32, 111, 99, 116, 97, 118, 101, 32, 45, 32, 73, 110, 100, 101, 120, 32, 49, 13, 10, 9, 100, 119, 32, 57, 53, 54, 44, 57, 48, 50, 44, 56, 53, 49, 44, 56, 48, 52, 44, 55, 53, 56, 44, 55, 49, 54, 44, 54, 55, 54, 44, 54, 51, 56, 44, 54, 48, 50, 44, 53, 54, 56, 44, 53, 51, 54, 44, 53, 48, 54, 13, 10, 9, 59, 32, 51, 114, 100, 32, 111, 99, 116, 97, 118, 101, 32, 45, 32, 73, 110, 100, 101, 120, 32, 49, 51, 13, 10, 9, 100, 119, 32, 52, 55, 56, 44, 52, 53, 49, 44, 52, 50, 54, 44, 52, 48, 50, 44, 51, 55, 57, 44, 51, 53, 56, 44, 51, 51, 56, 44, 51, 49, 57, 44, 51, 48, 49, 44, 50, 56, 52, 44, 50, 54, 56, 44, 50, 53, 51, 13, 10, 9, 59, 32, 52, 116, 104, 32, 111, 99, 116, 97, 118, 101, 32, 45, 32, 73, 110, 100, 101, 120, 32, 50, 53, 13, 10, 9, 100, 119, 32, 50, 51, 57, 44, 50, 50, 53, 44, 50, 49, 51, 44, 50, 48, 49, 44, 49, 57, 48, 44, 49, 55, 57, 44, 49, 54, 57, 44, 49, 53, 57, 44, 49, 53, 48, 44, 49, 52, 50, 44, 49, 51, 52, 44, 49, 50, 55, 13, 10, 9, 59, 32, 53, 116, 104, 32, 111, 99, 116, 97, 118, 101, 32, 45, 32, 73, 110, 100, 101, 120, 32, 51, 55, 13, 10, 9, 100, 119, 32, 49, 49, 57, 44, 49, 49, 51, 44, 49, 48, 54, 44, 49, 48, 48, 44, 57, 53, 44, 56, 57, 44, 56, 52, 44, 56, 48, 44, 55, 53, 44, 55, 49, 44, 54, 55, 44, 54, 51, 13, 10, 9, 59, 32, 54, 116, 104, 32, 111, 99, 116, 97, 118, 101, 32, 45, 32, 73, 110, 100, 101, 120, 32, 52, 57, 13, 10, 9, 100, 119, 32, 54, 48, 44, 53, 54, 44, 53, 51, 44, 53, 48, 44, 52, 55, 44, 52, 53, 44, 52, 50, 44, 52, 48, 44, 51, 56, 44, 51, 54, 44, 51, 52, 44, 51, 50, 13, 10, 9, 59, 32, 55, 116, 104, 32, 111, 99, 116, 97, 118, 101, 32, 45, 32, 73, 110, 100, 101, 120, 32, 54, 49, 13, 10, 9, 100, 119, 32, 51, 48, 44, 50, 56, 44, 50, 55, 13, 10, 13, 10, 109, 117, 115, 105, 99, 95, 104, 97, 114, 100, 119, 97, 114, 101, 58, 13, 10, 9, 76, 68, 65, 32, 109, 117, 115, 105, 99, 95, 109, 111, 100, 101, 13, 10, 9, 67, 77, 80, 32, 35, 52, 9, 9, 59, 32, 80, 76, 65, 89, 32, 83, 73, 77, 80, 76, 69, 63, 13, 10, 9, 66, 67, 67, 32, 46, 55, 9, 9, 59, 32, 89, 101, 115, 44, 32, 106, 117, 109, 112, 46, 13, 10, 9, 76, 68, 65, 32, 97, 117, 100, 105, 111, 95, 118, 111, 108, 50, 13, 10, 9, 66, 78, 69, 32, 46, 55, 13, 10, 9, 76, 68, 65, 32, 97, 117, 100, 105, 111, 95, 118, 111, 108, 51, 13, 10, 9, 66, 69, 81, 32, 46, 55, 13, 10, 9, 83, 84, 65, 32, 97, 117, 100, 105, 111, 95, 118, 111, 108, 50, 13, 10, 9, 76, 68, 65, 32, 35, 48, 13, 10, 9, 83, 84, 65, 32, 97, 117, 100, 105, 111, 95, 118, 111, 108, 51, 13, 10, 9, 76, 68, 65, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 51, 13, 10, 9, 76, 68, 89, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 51, 43, 49, 13, 10, 9, 83, 84, 65, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 50, 13, 10, 9, 83, 84, 89, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 50, 43, 49, 13, 10, 46, 55, 58, 13, 10, 9, 76, 68, 65, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 49, 43, 49, 13, 10, 9, 67, 77, 80, 32, 35, 36, 48, 52, 13, 10, 9, 76, 68, 65, 32, 35, 36, 57, 70, 13, 10, 9, 66, 67, 83, 32, 46, 49, 13, 10, 9, 76, 68, 65, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 49, 13, 10, 9, 65, 78, 68, 32, 35, 36, 48, 70, 13, 10, 9, 79, 82, 65, 32, 35, 36, 56, 48, 13, 10, 9, 74, 83, 82, 32, 66, 73, 79, 83, 95, 87, 82, 73, 84, 69, 95, 80, 83, 71, 13, 10, 9, 76, 68, 65, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 49, 43, 49, 13, 10, 9, 65, 83, 76, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 49, 13, 10, 9, 82, 79, 76, 32, 65, 13, 10, 9, 65, 83, 76, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 49, 13, 10, 9, 82, 79, 76, 32, 65, 13, 10, 9, 65, 83, 76, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 49, 13, 10, 9, 82, 79, 76, 32, 65, 13, 10, 9, 65, 83, 76, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 49, 13, 10, 9, 82, 79, 76, 32, 65, 13, 10, 9, 74, 83, 82, 32, 66, 73, 79, 83, 95, 87, 82, 73, 84, 69, 95, 80, 83, 71, 13, 10, 9, 76, 68, 88, 32, 97, 117, 100, 105, 111, 95, 118, 111, 108, 49, 13, 10, 9, 76, 68, 65, 32, 97, 121, 50, 115, 110, 44, 88, 13, 10, 9, 79, 82, 65, 32, 35, 36, 57, 48, 13, 10, 46, 49, 58, 9, 74, 83, 82, 32, 66, 73, 79, 83, 95, 87, 82, 73, 84, 69, 95, 80, 83, 71, 13, 10, 13, 10, 9, 76, 68, 65, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 50, 43, 49, 13, 10, 9, 67, 77, 80, 32, 35, 36, 48, 52, 13, 10, 9, 76, 68, 65, 32, 35, 36, 66, 70, 13, 10, 9, 66, 67, 83, 32, 46, 50, 13, 10, 9, 76, 68, 65, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 50, 13, 10, 9, 65, 78, 68, 32, 35, 36, 48, 70, 13, 10, 9, 79, 82, 65, 32, 35, 36, 65, 48, 13, 10, 9, 74, 83, 82, 32, 66, 73, 79, 83, 95, 87, 82, 73, 84, 69, 95, 80, 83, 71, 13, 10, 9, 76, 68, 65, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 50, 43, 49, 13, 10, 9, 65, 83, 76, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 50, 13, 10, 9, 82, 79, 76, 32, 65, 13, 10, 9, 65, 83, 76, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 50, 13, 10, 9, 82, 79, 76, 32, 65, 13, 10, 9, 65, 83, 76, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 50, 13, 10, 9, 82, 79, 76, 32, 65, 13, 10, 9, 65, 83, 76, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 50, 13, 10, 9, 82, 79, 76, 32, 65, 13, 10, 9, 74, 83, 82, 32, 66, 73, 79, 83, 95, 87, 82, 73, 84, 69, 95, 80, 83, 71, 13, 10, 9, 76, 68, 88, 32, 97, 117, 100, 105, 111, 95, 118, 111, 108, 50, 13, 10, 9, 76, 68, 65, 32, 97, 121, 50, 115, 110, 44, 88, 13, 10, 9, 79, 82, 65, 32, 35, 36, 98, 48, 13, 10, 46, 50, 58, 9, 74, 83, 82, 32, 66, 73, 79, 83, 95, 87, 82, 73, 84, 69, 95, 80, 83, 71, 13, 10, 13, 10, 9, 76, 68, 65, 32, 109, 117, 115, 105, 99, 95, 109, 111, 100, 101, 13, 10, 9, 67, 77, 80, 32, 35, 52, 9, 9, 59, 32, 80, 76, 65, 89, 32, 83, 73, 77, 80, 76, 69, 63, 13, 10, 9, 66, 67, 67, 32, 46, 54, 9, 9, 59, 32, 89, 101, 115, 44, 32, 106, 117, 109, 112, 46, 13, 10, 13, 10, 9, 76, 68, 65, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 51, 43, 49, 13, 10, 9, 67, 77, 80, 32, 35, 36, 48, 52, 13, 10, 9, 76, 68, 65, 32, 35, 36, 68, 70, 13, 10, 9, 66, 67, 83, 32, 46, 51, 13, 10, 9, 76, 68, 65, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 51, 13, 10, 9, 65, 78, 68, 32, 35, 36, 48, 70, 13, 10, 9, 79, 82, 65, 32, 35, 36, 67, 48, 13, 10, 9, 74, 83, 82, 32, 66, 73, 79, 83, 95, 87, 82, 73, 84, 69, 95, 80, 83, 71, 13, 10, 9, 76, 68, 65, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 51, 43, 49, 13, 10, 9, 65, 83, 76, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 51, 13, 10, 9, 82, 79, 76, 32, 65, 13, 10, 9, 65, 83, 76, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 51, 13, 10, 9, 82, 79, 76, 32, 65, 13, 10, 9, 65, 83, 76, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 51, 13, 10, 9, 82, 79, 76, 32, 65, 13, 10, 9, 65, 83, 76, 32, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 51, 13, 10, 9, 82, 79, 76, 32, 65, 13, 10, 9, 74, 83, 82, 32, 66, 73, 79, 83, 95, 87, 82, 73, 84, 69, 95, 80, 83, 71, 13, 10, 9, 76, 68, 88, 32, 97, 117, 100, 105, 111, 95, 118, 111, 108, 51, 13, 10, 9, 76, 68, 65, 32, 97, 121, 50, 115, 110, 44, 88, 13, 10, 9, 79, 82, 65, 32, 35, 36, 68, 48, 13, 10, 46, 51, 58, 9, 74, 83, 82, 32, 66, 73, 79, 83, 95, 87, 82, 73, 84, 69, 95, 80, 83, 71, 13, 10, 13, 10, 46, 54, 58, 9, 76, 68, 65, 32, 109, 117, 115, 105, 99, 95, 109, 111, 100, 101, 13, 10, 9, 76, 83, 82, 32, 65, 9, 9, 59, 32, 78, 79, 32, 68, 82, 85, 77, 83, 63, 13, 10, 9, 66, 67, 67, 32, 46, 56, 13, 10, 9, 76, 68, 65, 32, 97, 117, 100, 105, 111, 95, 118, 111, 108, 52, 104, 119, 13, 10, 9, 67, 77, 80, 32, 35, 36, 102, 102, 13, 10, 9, 66, 69, 81, 32, 46, 52, 13, 10, 9, 76, 68, 65, 32, 97, 117, 100, 105, 111, 95, 110, 111, 105, 115, 101, 13, 10, 9, 67, 77, 80, 32, 97, 117, 100, 105, 111, 95, 99, 111, 110, 116, 114, 111, 108, 13, 10, 9, 66, 69, 81, 32, 46, 52, 13, 10, 9, 83, 84, 65, 32, 97, 117, 100, 105, 111, 95, 99, 111, 110, 116, 114, 111, 108, 13, 10, 9, 74, 83, 82, 32, 66, 73, 79, 83, 95, 87, 82, 73, 84, 69, 95, 80, 83, 71, 13, 10, 46, 52, 58, 9, 76, 68, 65, 32, 97, 117, 100, 105, 111, 95, 118, 111, 108, 52, 104, 119, 13, 10, 9, 74, 83, 82, 32, 66, 73, 79, 83, 95, 87, 82, 73, 84, 69, 95, 80, 83, 71, 13, 10, 46, 56, 58, 13, 10, 9, 82, 84, 83, 13, 10, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 67, 111, 110, 118, 101, 114, 116, 115, 32, 65, 89, 45, 51, 45, 56, 57, 49, 48, 32, 118, 111, 108, 117, 109, 101, 32, 116, 111, 32, 83, 78, 55, 54, 52, 56, 57, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 13, 10, 97, 121, 50, 115, 110, 58, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 102, 44, 36, 48, 102, 44, 36, 48, 102, 44, 36, 48, 101, 44, 36, 48, 101, 44, 36, 48, 101, 44, 36, 48, 100, 44, 36, 48, 98, 44, 36, 48, 97, 44, 36, 48, 56, 44, 36, 48, 55, 44, 36, 48, 53, 44, 36, 48, 52, 44, 36, 48, 51, 44, 36, 48, 49, 44, 36, 48, 48, 13, 10, 13, 10, 109, 117, 115, 105, 99, 95, 115, 105, 108, 101, 110, 99, 101, 58, 13, 10, 9, 100, 98, 32, 56, 13, 10, 9, 100, 98, 32, 48, 44, 48, 44, 48, 44, 48, 13, 10, 9, 100, 98, 32, 45, 50, 13, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 13, 10, 13, 10, 32, 32, 32, 32, 105, 102, 32, 67, 86, 66, 65, 83, 73, 67, 95, 67, 79, 77, 80, 82, 69, 83, 83, 73, 79, 78, 13, 10, 100, 101, 102, 105, 110, 101, 95, 99, 104, 97, 114, 95, 117, 110, 112, 97, 99, 107, 58, 13, 10, 9, 108, 100, 97, 32, 35, 48, 13, 10, 9, 115, 116, 97, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 108, 100, 97, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 114, 111, 108, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 114, 111, 108, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 114, 111, 108, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 115, 116, 97, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 108, 100, 97, 32, 109, 111, 100, 101, 13, 10, 9, 97, 110, 100, 32, 35, 36, 48, 56, 13, 10, 9, 98, 101, 113, 32, 117, 110, 112, 97, 99, 107, 51, 13, 10, 9, 98, 110, 101, 32, 117, 110, 112, 97, 99, 107, 13, 10, 13, 10, 100, 101, 102, 105, 110, 101, 95, 99, 111, 108, 111, 114, 95, 117, 110, 112, 97, 99, 107, 58, 13, 10, 9, 108, 100, 97, 32, 35, 52, 13, 10, 9, 115, 116, 97, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 108, 100, 97, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 114, 111, 108, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 114, 111, 108, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 114, 111, 108, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 115, 116, 97, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 117, 110, 112, 97, 99, 107, 51, 58, 13, 10, 9, 106, 115, 114, 32, 46, 49, 13, 10, 9, 106, 115, 114, 32, 46, 49, 13, 10, 46, 49, 58, 9, 108, 100, 97, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 112, 104, 97, 13, 10, 9, 108, 100, 97, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 112, 104, 97, 13, 10, 9, 108, 100, 97, 32, 116, 101, 109, 112, 13, 10, 9, 112, 104, 97, 13, 10, 9, 108, 100, 97, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 112, 104, 97, 13, 10, 9, 106, 115, 114, 32, 117, 110, 112, 97, 99, 107, 13, 10, 9, 112, 108, 97, 13, 10, 9, 115, 116, 97, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 112, 108, 97, 13, 10, 9, 115, 116, 97, 32, 116, 101, 109, 112, 13, 10, 9, 112, 108, 97, 13, 10, 9, 99, 108, 99, 13, 10, 9, 97, 100, 99, 32, 35, 56, 13, 10, 9, 115, 116, 97, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 112, 108, 97, 13, 10, 9, 115, 116, 97, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 114, 116, 115, 13, 10, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 80, 108, 101, 116, 116, 101, 114, 45, 48, 46, 53, 99, 32, 100, 101, 99, 111, 109, 112, 114, 101, 115, 115, 111, 114, 32, 40, 88, 76, 50, 83, 32, 69, 110, 116, 101, 114, 116, 97, 105, 110, 109, 101, 110, 116, 32, 38, 32, 84, 101, 97, 109, 32, 66, 111, 109, 98, 97, 41, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 80, 111, 114, 116, 101, 100, 32, 102, 114, 111, 109, 32, 90, 56, 48, 32, 111, 114, 105, 103, 105, 110, 97, 108, 13, 10, 9, 59, 32, 116, 101, 109, 112, 32, 61, 32, 80, 111, 105, 110, 116, 101, 114, 32, 116, 111, 32, 115, 111, 117, 114, 99, 101, 32, 100, 97, 116, 97, 13, 10, 9, 59, 32, 112, 111, 105, 110, 116, 101, 114, 32, 61, 32, 80, 111, 105, 110, 116, 101, 114, 32, 116, 111, 32, 116, 97, 114, 103, 101, 116, 32, 86, 82, 65, 77, 13, 10, 9, 59, 32, 116, 101, 109, 112, 50, 13, 10, 9, 59, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 59, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 59, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 9, 59, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 13, 10, 9, 59, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 43, 49, 13, 10, 9, 59, 13, 10, 117, 110, 112, 97, 99, 107, 58, 13, 10, 9, 59, 32, 73, 110, 105, 116, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 13, 10, 9, 108, 100, 121, 32, 35, 48, 13, 10, 9, 115, 116, 121, 32, 116, 101, 109, 112, 50, 13, 10, 9, 108, 100, 97, 32, 40, 116, 101, 109, 112, 41, 44, 121, 13, 10, 9, 105, 110, 99, 32, 116, 101, 109, 112, 13, 10, 9, 98, 110, 101, 32, 36, 43, 52, 13, 10, 9, 105, 110, 99, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 114, 111, 108, 32, 116, 101, 109, 112, 50, 13, 10, 9, 97, 100, 99, 32, 35, 49, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 114, 111, 108, 32, 116, 101, 109, 112, 50, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 115, 116, 97, 32, 112, 108, 101, 116, 116, 101, 114, 95, 98, 105, 116, 13, 10, 9, 114, 111, 108, 32, 116, 101, 109, 112, 50, 13, 10, 9, 114, 111, 108, 32, 116, 101, 109, 112, 50, 13, 10, 9, 108, 100, 97, 32, 35, 46, 109, 111, 100, 101, 115, 13, 10, 9, 97, 100, 99, 32, 116, 101, 109, 112, 50, 13, 10, 9, 115, 116, 97, 32, 116, 101, 109, 112, 50, 13, 10, 9, 108, 100, 97, 32, 35, 46, 109, 111, 100, 101, 115, 62, 62, 56, 13, 10, 9, 97, 100, 99, 32, 35, 48, 13, 10, 9, 115, 116, 97, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 108, 100, 97, 32, 40, 116, 101, 109, 112, 50, 41, 44, 121, 13, 10, 9, 116, 97, 120, 13, 10, 9, 105, 110, 121, 13, 10, 9, 108, 100, 97, 32, 40, 116, 101, 109, 112, 50, 41, 44, 121, 13, 10, 9, 115, 116, 120, 32, 116, 101, 109, 112, 50, 9, 59, 32, 73, 88, 32, 40, 116, 101, 109, 112, 50, 41, 13, 10, 9, 115, 116, 97, 32, 116, 101, 109, 112, 50, 43, 49, 13, 10, 9, 108, 100, 97, 32, 112, 108, 101, 116, 116, 101, 114, 95, 98, 105, 116, 13, 10, 46, 108, 105, 116, 101, 114, 97, 108, 58, 13, 10, 9, 115, 116, 97, 32, 112, 108, 101, 116, 116, 101, 114, 95, 98, 105, 116, 13, 10, 9, 108, 100, 121, 32, 35, 48, 13, 10, 9, 108, 100, 97, 32, 40, 116, 101, 109, 112, 41, 44, 121, 13, 10, 9, 105, 110, 99, 32, 116, 101, 109, 112, 13, 10, 9, 98, 110, 101, 32, 36, 43, 52, 13, 10, 9, 105, 110, 99, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 116, 97, 120, 13, 10, 9, 108, 100, 97, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 108, 100, 121, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 115, 101, 105, 13, 10, 9, 106, 115, 114, 32, 87, 82, 84, 86, 82, 77, 13, 10, 9, 99, 108, 105, 13, 10, 9, 105, 110, 99, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 98, 110, 101, 32, 36, 43, 52, 13, 10, 9, 105, 110, 99, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 108, 100, 97, 32, 112, 108, 101, 116, 116, 101, 114, 95, 98, 105, 116, 13, 10, 46, 108, 111, 111, 112, 58, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 98, 110, 101, 32, 36, 43, 53, 13, 10, 9, 106, 115, 114, 32, 46, 103, 101, 116, 98, 105, 116, 13, 10, 9, 98, 99, 99, 32, 46, 108, 105, 116, 101, 114, 97, 108, 13, 10, 13, 10, 9, 59, 32, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 32, 100, 97, 116, 97, 13, 10, 9, 108, 100, 120, 32, 35, 49, 13, 10, 9, 115, 116, 120, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 100, 101, 120, 13, 10, 9, 115, 116, 120, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 46, 103, 101, 116, 108, 101, 110, 58, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 98, 110, 101, 32, 36, 43, 53, 13, 10, 9, 106, 115, 114, 32, 46, 103, 101, 116, 98, 105, 116, 13, 10, 9, 98, 99, 99, 32, 46, 108, 101, 110, 111, 107, 13, 10, 46, 108, 117, 115, 58, 9, 97, 115, 108, 32, 97, 13, 10, 9, 98, 110, 101, 32, 36, 43, 53, 13, 10, 9, 106, 115, 114, 32, 46, 103, 101, 116, 98, 105, 116, 13, 10, 9, 114, 111, 108, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 114, 111, 108, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 9, 98, 99, 99, 32, 36, 43, 51, 13, 10, 9, 114, 116, 115, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 98, 110, 101, 32, 36, 43, 53, 13, 10, 9, 106, 115, 114, 32, 46, 103, 101, 116, 98, 105, 116, 13, 10, 9, 98, 99, 99, 32, 46, 108, 101, 110, 111, 107, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 98, 110, 101, 32, 36, 43, 53, 13, 10, 9, 106, 115, 114, 32, 46, 103, 101, 116, 98, 105, 116, 13, 10, 9, 114, 111, 108, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 114, 111, 108, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 9, 98, 99, 99, 32, 36, 43, 51, 13, 10, 9, 114, 116, 115, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 98, 110, 101, 32, 36, 43, 53, 13, 10, 9, 106, 115, 114, 32, 46, 103, 101, 116, 98, 105, 116, 13, 10, 9, 98, 99, 115, 32, 46, 108, 117, 115, 13, 10, 46, 108, 101, 110, 111, 107, 58, 13, 10, 9, 105, 110, 99, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 98, 110, 101, 32, 36, 43, 52, 13, 10, 9, 105, 110, 99, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 9, 115, 116, 97, 32, 112, 108, 101, 116, 116, 101, 114, 95, 98, 105, 116, 13, 10, 9, 108, 100, 121, 32, 35, 48, 13, 10, 9, 115, 116, 121, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 43, 49, 13, 10, 9, 108, 100, 97, 32, 40, 116, 101, 109, 112, 41, 44, 121, 13, 10, 9, 105, 110, 99, 32, 116, 101, 109, 112, 13, 10, 9, 98, 110, 101, 32, 36, 43, 52, 13, 10, 9, 105, 110, 99, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 115, 116, 97, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 13, 10, 9, 108, 100, 97, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 13, 10, 9, 98, 112, 108, 32, 46, 111, 102, 102, 115, 111, 107, 13, 10, 9, 108, 100, 97, 32, 112, 108, 101, 116, 116, 101, 114, 95, 98, 105, 116, 13, 10, 9, 106, 109, 112, 32, 40, 116, 101, 109, 112, 50, 41, 13, 10, 9, 13, 10, 46, 109, 111, 100, 101, 54, 58, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 98, 110, 101, 32, 36, 43, 53, 13, 10, 9, 106, 115, 114, 32, 46, 103, 101, 116, 98, 105, 116, 13, 10, 9, 114, 111, 108, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 43, 49, 13, 10, 46, 109, 111, 100, 101, 53, 58, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 98, 110, 101, 32, 36, 43, 53, 13, 10, 9, 106, 115, 114, 32, 46, 103, 101, 116, 98, 105, 116, 13, 10, 9, 114, 111, 108, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 43, 49, 13, 10, 46, 109, 111, 100, 101, 52, 58, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 98, 110, 101, 32, 36, 43, 53, 13, 10, 9, 106, 115, 114, 32, 46, 103, 101, 116, 98, 105, 116, 13, 10, 9, 114, 111, 108, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 43, 49, 13, 10, 46, 109, 111, 100, 101, 51, 58, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 98, 110, 101, 32, 36, 43, 53, 13, 10, 9, 106, 115, 114, 32, 46, 103, 101, 116, 98, 105, 116, 13, 10, 9, 114, 111, 108, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 43, 49, 13, 10, 46, 109, 111, 100, 101, 50, 58, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 98, 110, 101, 32, 36, 43, 53, 13, 10, 9, 106, 115, 114, 32, 46, 103, 101, 116, 98, 105, 116, 13, 10, 9, 114, 111, 108, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 43, 49, 13, 10, 9, 97, 115, 108, 32, 97, 13, 10, 9, 98, 110, 101, 32, 36, 43, 53, 13, 10, 9, 106, 115, 114, 32, 46, 103, 101, 116, 98, 105, 116, 13, 10, 9, 115, 116, 97, 32, 112, 108, 101, 116, 116, 101, 114, 95, 98, 105, 116, 13, 10, 9, 98, 99, 99, 32, 46, 111, 102, 102, 115, 111, 107, 13, 10, 9, 105, 110, 99, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 43, 49, 13, 10, 9, 108, 100, 97, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 13, 10, 9, 97, 110, 100, 32, 35, 36, 55, 102, 13, 10, 9, 115, 116, 97, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 13, 10, 46, 111, 102, 102, 115, 111, 107, 58, 13, 10, 9, 105, 110, 99, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 13, 10, 9, 98, 110, 101, 32, 36, 43, 52, 13, 10, 9, 105, 110, 99, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 43, 49, 13, 10, 13, 10, 9, 108, 100, 97, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 98, 101, 113, 32, 36, 43, 52, 13, 10, 9, 105, 110, 99, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 13, 10, 9, 108, 100, 97, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 115, 101, 99, 13, 10, 9, 115, 98, 99, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 13, 10, 9, 115, 116, 97, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 13, 10, 9, 108, 100, 97, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 115, 98, 99, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 43, 49, 13, 10, 9, 115, 116, 97, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 43, 49, 13, 10, 46, 108, 111, 111, 112, 50, 58, 13, 10, 9, 115, 101, 105, 13, 10, 9, 108, 100, 97, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 13, 10, 9, 108, 100, 121, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 43, 49, 13, 10, 9, 106, 115, 114, 32, 82, 68, 86, 82, 77, 13, 10, 9, 116, 97, 120, 13, 10, 9, 108, 100, 97, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 108, 100, 121, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 106, 115, 114, 32, 87, 82, 84, 86, 82, 77, 13, 10, 9, 99, 108, 105, 13, 10, 9, 105, 110, 99, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 13, 10, 9, 98, 110, 101, 32, 36, 43, 52, 13, 10, 9, 105, 110, 99, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 43, 49, 13, 10, 9, 105, 110, 99, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 9, 98, 110, 101, 32, 36, 43, 52, 13, 10, 9, 105, 110, 99, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 9, 100, 101, 99, 32, 114, 101, 115, 117, 108, 116, 13, 10, 9, 98, 110, 101, 32, 46, 108, 111, 111, 112, 50, 13, 10, 9, 100, 101, 99, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 9, 98, 110, 101, 32, 46, 108, 111, 111, 112, 50, 13, 10, 13, 10, 9, 108, 100, 97, 32, 112, 108, 101, 116, 116, 101, 114, 95, 98, 105, 116, 13, 10, 9, 106, 109, 112, 32, 46, 108, 111, 111, 112, 13, 10, 13, 10, 46, 103, 101, 116, 98, 105, 116, 58, 13, 10, 9, 108, 100, 121, 32, 35, 48, 13, 10, 9, 108, 100, 97, 32, 40, 116, 101, 109, 112, 41, 44, 121, 13, 10, 9, 105, 110, 99, 32, 116, 101, 109, 112, 13, 10, 9, 98, 110, 101, 32, 36, 43, 52, 13, 10, 9, 105, 110, 99, 32, 116, 101, 109, 112, 43, 49, 13, 10, 9, 114, 111, 108, 32, 97, 13, 10, 9, 114, 116, 115, 13, 10, 13, 10, 46, 109, 111, 100, 101, 115, 58, 13, 10, 9, 100, 119, 32, 46, 111, 102, 102, 115, 111, 107, 13, 10, 9, 100, 119, 32, 46, 109, 111, 100, 101, 50, 13, 10, 9, 100, 119, 32, 46, 109, 111, 100, 101, 51, 13, 10, 9, 100, 119, 32, 46, 109, 111, 100, 101, 52, 13, 10, 9, 100, 119, 32, 46, 109, 111, 100, 101, 53, 13, 10, 9, 100, 119, 32, 46, 109, 111, 100, 101, 54, 13, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 13, 10, 13, 10, 9, 59, 32, 82, 101, 113, 117, 105, 114, 101, 100, 32, 102, 111, 114, 32, 67, 114, 101, 97, 116, 105, 118, 105, 115, 105, 111, 110, 32, 98, 101, 99, 97, 117, 115, 101, 32, 105, 116, 32, 100, 111, 101, 115, 110, 39, 116, 32, 112, 114, 111, 118, 105, 100, 101, 32, 97, 110, 32, 65, 83, 67, 73, 73, 32, 99, 104, 97, 114, 115, 101, 116, 46, 13, 10, 9, 59, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 77, 121, 32, 112, 101, 114, 115, 111, 110, 97, 108, 32, 102, 111, 110, 116, 32, 102, 111, 114, 32, 84, 77, 83, 57, 57, 50, 56, 46, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 80, 97, 116, 116, 101, 114, 110, 101, 100, 32, 97, 102, 116, 101, 114, 32, 116, 104, 101, 32, 84, 77, 83, 57, 57, 50, 56, 32, 112, 114, 111, 103, 114, 97, 109, 109, 105, 110, 103, 32, 109, 97, 110, 117, 97, 108, 32, 54, 120, 56, 32, 108, 101, 116, 116, 101, 114, 115, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 119, 105, 116, 104, 32, 98, 101, 116, 116, 101, 114, 32, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 108, 101, 116, 116, 101, 114, 115, 44, 32, 97, 108, 115, 111, 32, 73, 32, 109, 97, 100, 101, 32, 97, 32, 112, 114, 111, 112, 101, 114, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 65, 84, 32, 115, 105, 103, 110, 46, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 13, 10, 102, 111, 110, 116, 95, 98, 105, 116, 109, 97, 112, 115, 58, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 48, 32, 115, 112, 97, 99, 101, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 48, 48, 44, 36, 50, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 49, 32, 33, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 53, 48, 44, 36, 53, 48, 44, 36, 53, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 50, 32, 34, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 53, 48, 44, 36, 53, 48, 44, 36, 102, 56, 44, 36, 53, 48, 44, 36, 102, 56, 44, 36, 53, 48, 44, 36, 53, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 51, 32, 35, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 50, 48, 44, 36, 55, 56, 44, 36, 97, 48, 44, 36, 55, 48, 44, 36, 50, 56, 44, 36, 102, 48, 44, 36, 50, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 52, 32, 36, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 99, 48, 44, 36, 99, 56, 44, 36, 49, 48, 44, 36, 50, 48, 44, 36, 52, 48, 44, 36, 57, 56, 44, 36, 49, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 53, 32, 37, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 52, 48, 44, 36, 97, 48, 44, 36, 52, 48, 44, 36, 97, 48, 44, 36, 97, 56, 44, 36, 57, 48, 44, 36, 54, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 54, 32, 38, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 54, 48, 44, 36, 50, 48, 44, 36, 52, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 55, 32, 39, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 49, 48, 44, 36, 50, 48, 44, 36, 52, 48, 44, 36, 52, 48, 44, 36, 52, 48, 44, 36, 50, 48, 44, 36, 49, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 56, 32, 40, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 52, 48, 44, 36, 50, 48, 44, 36, 49, 48, 44, 36, 49, 48, 44, 36, 49, 48, 44, 36, 50, 48, 44, 36, 52, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 57, 32, 41, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 97, 56, 44, 36, 55, 48, 44, 36, 50, 48, 44, 36, 55, 48, 44, 36, 97, 56, 44, 36, 48, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 97, 32, 42, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 102, 56, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 48, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 98, 32, 43, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 54, 48, 44, 36, 50, 48, 44, 36, 52, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 99, 32, 44, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 102, 99, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 100, 32, 45, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 54, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 101, 32, 46, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 56, 44, 36, 49, 48, 44, 36, 50, 48, 44, 36, 52, 48, 44, 36, 56, 48, 44, 36, 48, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 102, 32, 47, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 55, 48, 44, 36, 56, 56, 44, 36, 57, 56, 44, 36, 97, 56, 44, 36, 99, 56, 44, 36, 56, 56, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 48, 32, 48, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 50, 48, 44, 36, 54, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 102, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 49, 32, 49, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 55, 48, 44, 36, 56, 56, 44, 36, 48, 56, 44, 36, 49, 48, 44, 36, 54, 48, 44, 36, 56, 48, 44, 36, 102, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 50, 32, 50, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 55, 48, 44, 36, 56, 56, 44, 36, 48, 56, 44, 36, 51, 48, 44, 36, 48, 56, 44, 36, 56, 56, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 51, 32, 51, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 51, 48, 44, 36, 53, 48, 44, 36, 57, 48, 44, 36, 57, 48, 44, 36, 102, 56, 44, 36, 49, 48, 44, 36, 49, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 52, 32, 52, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 102, 56, 44, 36, 56, 48, 44, 36, 102, 48, 44, 36, 48, 56, 44, 36, 48, 56, 44, 36, 48, 56, 44, 36, 102, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 53, 32, 53, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 51, 48, 44, 36, 52, 48, 44, 36, 56, 48, 44, 36, 102, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 54, 32, 54, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 102, 56, 44, 36, 48, 56, 44, 36, 49, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 55, 32, 55, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 55, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 55, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 56, 32, 56, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 55, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 55, 56, 44, 36, 48, 56, 44, 36, 49, 48, 44, 36, 54, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 57, 32, 57, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 54, 48, 44, 36, 48, 48, 44, 36, 54, 48, 44, 36, 48, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 97, 32, 58, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 54, 48, 44, 36, 48, 48, 44, 36, 54, 48, 44, 36, 50, 48, 44, 36, 52, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 98, 32, 59, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 49, 48, 44, 36, 50, 48, 44, 36, 52, 48, 44, 36, 56, 48, 44, 36, 52, 48, 44, 36, 50, 48, 44, 36, 49, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 99, 32, 60, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 102, 56, 44, 36, 48, 48, 44, 36, 102, 56, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 100, 32, 61, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 56, 44, 36, 48, 52, 44, 36, 48, 50, 44, 36, 48, 49, 44, 36, 48, 50, 44, 36, 48, 52, 44, 36, 48, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 101, 32, 62, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 55, 48, 44, 36, 56, 56, 44, 36, 48, 56, 44, 36, 49, 48, 44, 36, 50, 48, 44, 36, 48, 48, 44, 36, 50, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 102, 32, 63, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 55, 48, 44, 36, 56, 56, 44, 36, 57, 56, 44, 36, 97, 56, 44, 36, 57, 56, 44, 36, 56, 48, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 48, 32, 64, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 50, 48, 44, 36, 53, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 102, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 49, 32, 65, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 102, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 102, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 102, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 50, 32, 66, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 55, 48, 44, 36, 56, 56, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 56, 56, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 51, 32, 67, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 102, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 102, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 52, 32, 68, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 102, 56, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 102, 48, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 102, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 53, 32, 69, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 102, 56, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 102, 48, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 54, 32, 70, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 55, 48, 44, 36, 56, 56, 44, 36, 56, 48, 44, 36, 98, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 55, 32, 71, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 102, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 56, 32, 72, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 55, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 57, 32, 73, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 56, 44, 36, 48, 56, 44, 36, 48, 56, 44, 36, 48, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 65, 32, 74, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 56, 56, 44, 36, 57, 48, 44, 36, 97, 48, 44, 36, 99, 48, 44, 36, 97, 48, 44, 36, 57, 48, 44, 36, 56, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 66, 32, 75, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 56, 48, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 102, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 67, 32, 76, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 56, 56, 44, 36, 100, 56, 44, 36, 97, 56, 44, 36, 97, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 68, 32, 77, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 56, 56, 44, 36, 99, 56, 44, 36, 99, 56, 44, 36, 97, 56, 44, 36, 57, 56, 44, 36, 57, 56, 44, 36, 56, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 69, 32, 78, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 55, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 70, 32, 79, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 102, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 102, 48, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 48, 32, 80, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 55, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 97, 56, 44, 36, 57, 48, 44, 36, 54, 56, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 49, 32, 81, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 102, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 102, 48, 44, 36, 97, 48, 44, 36, 57, 48, 44, 36, 56, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 50, 32, 82, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 55, 48, 44, 36, 56, 56, 44, 36, 56, 48, 44, 36, 55, 48, 44, 36, 48, 56, 44, 36, 56, 56, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 51, 32, 83, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 102, 56, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 52, 32, 84, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 53, 32, 85, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 53, 48, 44, 36, 53, 48, 44, 36, 50, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 54, 32, 86, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 97, 56, 44, 36, 97, 56, 44, 36, 100, 56, 44, 36, 56, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 55, 32, 87, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 56, 56, 44, 36, 56, 56, 44, 36, 53, 48, 44, 36, 50, 48, 44, 36, 53, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 56, 32, 88, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 55, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 57, 32, 89, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 102, 56, 44, 36, 48, 56, 44, 36, 49, 48, 44, 36, 50, 48, 44, 36, 52, 48, 44, 36, 56, 48, 44, 36, 102, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 65, 32, 90, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 55, 56, 44, 36, 54, 48, 44, 36, 54, 48, 44, 36, 54, 48, 44, 36, 54, 48, 44, 36, 54, 48, 44, 36, 55, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 66, 32, 91, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 56, 48, 44, 36, 52, 48, 44, 36, 50, 48, 44, 36, 49, 48, 44, 36, 48, 56, 44, 36, 48, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 67, 32, 92, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 70, 48, 44, 36, 51, 48, 44, 36, 51, 48, 44, 36, 51, 48, 44, 36, 51, 48, 44, 36, 51, 48, 44, 36, 70, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 68, 32, 93, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 50, 48, 44, 36, 53, 48, 44, 36, 56, 56, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 69, 32, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 102, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 70, 32, 95, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 52, 48, 44, 36, 50, 48, 44, 36, 49, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 48, 32, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 54, 56, 44, 36, 57, 56, 44, 36, 56, 56, 44, 36, 57, 56, 44, 36, 54, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 49, 32, 97, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 56, 48, 44, 36, 56, 48, 44, 36, 102, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 102, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 50, 32, 98, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 55, 56, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 55, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 51, 32, 99, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 56, 44, 36, 48, 56, 44, 36, 54, 56, 44, 36, 57, 56, 44, 36, 56, 56, 44, 36, 57, 56, 44, 36, 54, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 52, 32, 100, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 55, 48, 44, 36, 56, 56, 44, 36, 102, 56, 44, 36, 56, 48, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 53, 32, 101, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 51, 48, 44, 36, 52, 56, 44, 36, 52, 48, 44, 36, 101, 48, 44, 36, 52, 48, 44, 36, 52, 48, 44, 36, 52, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 54, 32, 102, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 55, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 55, 56, 44, 36, 48, 56, 44, 36, 55, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 55, 32, 103, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 56, 48, 44, 36, 56, 48, 44, 36, 102, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 56, 32, 104, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 50, 48, 44, 36, 48, 48, 44, 36, 54, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 55, 48]);
fileData1.push.apply(fileData1, [44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 57, 32, 105, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 56, 44, 36, 48, 48, 44, 36, 49, 56, 44, 36, 48, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 97, 32, 106, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 56, 48, 44, 36, 56, 48, 44, 36, 56, 56, 44, 36, 57, 48, 44, 36, 101, 48, 44, 36, 57, 48, 44, 36, 56, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 98, 32, 107, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 54, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 99, 32, 108, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 100, 48, 44, 36, 97, 56, 44, 36, 97, 56, 44, 36, 97, 56, 44, 36, 97, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 100, 32, 109, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 98, 48, 44, 36, 99, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 101, 32, 110, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 55, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 102, 32, 111, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 102, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 102, 48, 44, 36, 56, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 48, 32, 112, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 55, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 55, 56, 44, 36, 48, 56, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 49, 32, 113, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 98, 56, 44, 36, 99, 48, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 50, 32, 114, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 55, 56, 44, 36, 56, 48, 44, 36, 55, 48, 44, 36, 48, 56, 44, 36, 102, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 51, 32, 115, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 50, 48, 44, 36, 50, 48, 44, 36, 102, 56, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 52, 32, 116, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 57, 56, 44, 36, 54, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 53, 32, 117, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 53, 48, 44, 36, 50, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 54, 32, 118, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 56, 56, 44, 36, 97, 56, 44, 36, 97, 56, 44, 36, 97, 56, 44, 36, 53, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 55, 32, 119, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 56, 56, 44, 36, 53, 48, 44, 36, 50, 48, 44, 36, 53, 48, 44, 36, 56, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 56, 32, 120, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 57, 56, 44, 36, 54, 56, 44, 36, 48, 56, 44, 36, 55, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 57, 32, 121, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 102, 56, 44, 36, 49, 48, 44, 36, 50, 48, 44, 36, 52, 48, 44, 36, 102, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 97, 32, 122, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 49, 56, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 52, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 49, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 98, 32, 123, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 99, 32, 124, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 99, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 49, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 99, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 100, 32, 125, 32, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 52, 48, 44, 36, 97, 56, 44, 36, 49, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 101, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 55, 48, 44, 36, 55, 48, 44, 36, 50, 48, 44, 36, 102, 56, 44, 36, 50, 48, 44, 36, 55, 48, 44, 36, 53, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 102, 13, 10, 13, 10, 83, 84, 65, 82, 84, 58, 13, 10, 9, 83, 69, 73, 13, 10, 9, 67, 76, 68, 13, 10, 13, 10, 9, 76, 68, 65, 32, 35, 36, 48, 48, 13, 10, 9, 84, 65, 88, 13, 10, 46, 49, 58, 9, 83, 84, 65, 32, 36, 48, 49, 48, 48, 44, 88, 13, 10, 9, 83, 84, 65, 32, 36, 48, 50, 48, 48, 44, 88, 13, 10, 9, 83, 84, 65, 32, 36, 48, 51, 48, 48, 44, 88, 13, 10, 9, 73, 78, 88, 13, 10, 9, 66, 78, 69, 32, 46, 49, 13, 10, 13, 10, 9, 76, 68, 88, 32, 35, 83, 84, 65, 67, 75, 13, 10, 9, 84, 88, 83, 13, 10, 9, 76, 68, 65, 32, 36, 50, 48, 48, 49, 13, 10, 9, 76, 68, 65, 32, 35, 36, 56, 50, 13, 10, 9, 76, 68, 88, 32, 35, 36, 48, 49, 13, 10, 9, 74, 83, 82, 32, 87, 82, 84, 86, 68, 80, 13, 10, 9, 76, 68, 65, 32, 36, 50, 48, 48, 49, 13, 10, 9, 76, 68, 65, 32, 35, 36, 56, 50, 13, 10, 9, 76, 68, 88, 32, 35, 36, 48, 49, 13, 10, 9, 74, 83, 82, 32, 87, 82, 84, 86, 68, 80, 13, 10, 13, 10, 9, 74, 83, 82, 32, 109, 117, 115, 105, 99, 95, 105, 110, 105, 116, 13, 10, 13, 10, 9, 74, 83, 82, 32, 109, 111, 100, 101, 95, 48, 13, 10, 13, 10, 9, 76, 68, 65, 32, 35, 36, 48, 48, 13, 10, 9, 83, 84, 65, 32, 106, 111, 121, 49, 95, 100, 97, 116, 97, 13, 10, 9, 83, 84, 65, 32, 106, 111, 121, 50, 95, 100, 97, 116, 97, 13, 10, 9, 76, 68, 65, 32, 35, 36, 48, 70, 13, 10, 9, 83, 84, 65, 32, 107, 101, 121, 49, 95, 100, 97, 116, 97, 13, 10, 9, 83, 84, 65, 32, 107, 101, 121, 50, 95, 100, 97, 116, 97, 13, 10, 13, 10]);
Module['FS_createDataFile']('/', 'cvbasic_6502_prologue.asm', fileData1, true, true);
fileData2 = [];
fileData2.push.apply(fileData2, [83, 76, 65, 83, 84, 13, 10, 13, 10, 59, 59, 59, 32, 67, 86, 32, 66, 65, 83, 73, 67, 32, 69, 112, 105, 108, 111, 103, 117, 101, 13, 10, 13, 10, 59, 32, 100, 97, 116, 97, 32, 105, 110, 32, 108, 111, 119, 32, 82, 65, 77, 13, 10, 32, 32, 32, 32, 100, 111, 114, 103, 32, 62, 50, 48, 48, 48, 13, 10, 13, 10, 59, 32, 109, 117, 115, 116, 32, 98, 101, 32, 101, 118, 101, 110, 32, 97, 108, 105, 103, 110, 101, 100, 13, 10, 59, 32, 109, 105, 114, 114, 111, 114, 32, 102, 111, 114, 32, 115, 112, 114, 105, 116, 101, 32, 116, 97, 98, 108, 101, 13, 10, 115, 112, 114, 105, 116, 101, 115, 9, 32, 32, 32, 32, 98, 115, 115, 32, 49, 50, 56, 13, 10, 13, 10, 59, 32, 86, 97, 114, 115, 32, 99, 97, 110, 32, 115, 116, 97, 114, 116, 32, 97, 116, 32, 62, 50, 48, 56, 48, 13, 10, 32, 32, 32, 32, 100, 111, 114, 103, 32, 62, 50, 48, 56, 48, 13, 10, 13, 10]);
Module['FS_createDataFile']('/', 'cvbasic_9900_epilogue.asm', fileData2, true, true);
fileData3 = [];
fileData3.push.apply(fileData3, [59, 13, 10, 59, 32, 67, 86, 66, 97, 115, 105, 99, 32, 112, 114, 111, 108, 111, 103, 117, 101, 32, 40, 66, 65, 83, 73, 67, 32, 99, 111, 109, 112, 105, 108, 101, 114, 44, 32, 57, 57, 48, 48, 32, 116, 97, 114, 103, 101, 116, 41, 13, 10, 59, 13, 10, 59, 32, 98, 121, 32, 84, 117, 114, 115, 105, 13, 10, 59, 32, 104, 116, 116, 112, 115, 47, 47, 104, 97, 114, 109, 108, 101, 115, 115, 108, 105, 111, 110, 46, 99, 111, 109, 13, 10, 59, 13, 10, 59, 32, 98, 97, 115, 101, 100, 32, 111, 110, 32, 99, 111, 100, 101, 32, 98, 121, 13, 10, 59, 13, 10, 59, 32, 98, 121, 32, 79, 115, 99, 97, 114, 32, 84, 111, 108, 101, 100, 111, 32, 71, 46, 13, 10, 59, 32, 104, 116, 116, 112, 115, 47, 47, 110, 97, 110, 111, 99, 104, 101, 115, 115, 46, 111, 114, 103, 47, 13, 10, 59, 13, 10, 59, 32, 67, 114, 101, 97, 116, 105, 111, 110, 32, 100, 97, 116, 101, 32, 65, 117, 103, 47, 48, 53, 47, 50, 48, 50, 52, 46, 13, 10, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 32, 65, 117, 103, 47, 48, 54, 47, 50, 48, 50, 52, 46, 32, 80, 111, 114, 116, 101, 100, 32, 109, 117, 115, 105, 99, 32, 112, 108, 97, 121, 101, 114, 32, 102, 114, 111, 109, 32, 90, 56, 48, 32, 67, 86, 66, 97, 115, 105, 99, 46, 13, 10, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 32, 65, 117, 103, 47, 48, 55, 47, 50, 48, 50, 52, 46, 32, 80, 111, 114, 116, 101, 100, 32, 80, 108, 101, 116, 116, 101, 114, 32, 100, 101, 99, 111, 109, 112, 114, 101, 115, 115, 111, 114, 32, 102, 114, 111, 109, 32, 90, 56, 48, 32, 67, 86, 66, 97, 115, 105, 99, 46, 13, 10, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 65, 100, 100, 101, 100, 32, 86, 68, 80, 32, 100, 101, 108, 97, 121, 115, 46, 13, 10, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 32, 65, 117, 103, 47, 49, 50, 47, 50, 48, 50, 52, 46, 32, 82, 101, 119, 114, 105, 116, 101, 32, 115, 116, 97, 114, 116, 101, 100, 32, 102, 111, 114, 32, 84, 77, 83, 57, 57, 48, 48, 32, 99, 112, 117, 13, 10, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 32, 65, 117, 103, 47, 49, 54, 47, 50, 48, 50, 52, 46, 32, 67, 111, 114, 114, 101, 99, 116, 101, 100, 32, 98, 117, 103, 32, 105, 110, 32, 100, 101, 102, 105, 110, 101, 95, 99, 104, 97, 114, 95, 117, 110, 112, 97, 99, 107, 46, 13, 10, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 32, 65, 117, 103, 47, 49, 56, 47, 50, 48, 50, 52, 46, 32, 80, 111, 114, 116, 101, 100, 32, 98, 117, 103, 102, 105, 120, 101, 115, 32, 116, 111, 32, 84, 77, 83, 57, 57, 48, 48, 32, 118, 101, 114, 115, 105, 111, 110, 13, 10, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 32, 65, 117, 103, 47, 51, 48, 47, 50, 48, 50, 52, 46, 32, 65, 108, 108, 32, 115, 97, 109, 112, 108, 101, 115, 32, 101, 120, 99, 101, 112, 116, 32, 112, 108, 101, 116, 116, 101, 114, 32, 97, 110, 100, 32, 98, 97, 110, 107, 105, 110, 103, 32, 119, 111, 114, 107, 105, 110, 103, 32, 111, 110, 32, 84, 77, 83, 57, 57, 48, 48, 32, 118, 101, 114, 115, 105, 111, 110, 13, 10, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 32, 79, 99, 116, 47, 49, 53, 47, 50, 48, 50, 52, 46, 32, 65, 100, 100, 101, 100, 32, 76, 68, 73, 82, 77, 86, 46, 13, 10, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 32, 77, 97, 121, 47, 48, 51, 47, 50, 48, 50, 53, 46, 32, 70, 105, 120, 32, 102, 111, 114, 32, 117, 110, 112, 97, 99, 107, 51, 32, 119, 104, 105, 99, 104, 32, 119, 97, 115, 32, 117, 115, 105, 110, 103, 32, 116, 104, 101, 32, 115, 116, 97, 99, 107, 32, 112, 111, 105, 110, 116, 101, 114, 32, 97, 115, 32, 97, 32, 116, 101, 109, 112, 32, 114, 101, 103, 105, 115, 116, 101, 114, 13, 10, 13, 10, 59, 13, 10, 59, 32, 80, 108, 97, 116, 102, 111, 114, 109, 115, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 58, 13, 10, 59, 32, 111, 32, 84, 73, 45, 57, 57, 47, 52, 65, 32, 119, 105, 116, 104, 32, 51, 50, 107, 32, 77, 101, 109, 111, 114, 121, 32, 69, 120, 112, 97, 110, 115, 105, 111, 110, 13, 10, 13, 10, 59, 32, 116, 104, 105, 115, 32, 105, 115, 32, 105, 110, 116, 101, 110, 100, 101, 100, 32, 116, 111, 32, 98, 101, 32, 97, 115, 115, 101, 109, 98, 108, 101, 100, 32, 98, 121, 32, 120, 100, 116, 57, 57, 44, 32, 110, 111, 32, 99, 111, 110, 115, 111, 108, 101, 32, 82, 79, 77, 32, 100, 101, 112, 101, 110, 100, 101, 110, 99, 105, 101, 115, 13, 10, 59, 32, 32, 32, 99, 118, 98, 97, 115, 105, 99, 32, 45, 45, 116, 105, 57, 57, 52, 97, 32, 116, 101, 115, 116, 49, 46, 98, 97, 115, 32, 116, 101, 115, 116, 49, 46, 97, 57, 57, 13, 10, 59, 32, 32, 32, 120, 97, 115, 57, 57, 46, 112, 121, 32, 45, 82, 32, 116, 101, 115, 116, 49, 46, 97, 57, 57, 13, 10, 13, 10, 59, 32, 87, 104, 101, 110, 32, 108, 111, 111, 107, 105, 110, 103, 32, 97, 116, 32, 116, 104, 105, 115, 32, 45, 32, 114, 101, 109, 101, 109, 98, 101, 114, 32, 116, 104, 97, 116, 32, 74, 85, 77, 80, 32, 97, 110, 100, 32, 66, 82, 65, 78, 67, 72, 32, 104, 97, 118, 101, 32, 116, 104, 101, 32, 47, 111, 112, 112, 111, 115, 105, 116, 101, 47, 13, 10, 59, 32, 109, 101, 97, 110, 105, 110, 103, 115, 32, 116, 111, 32, 116, 104, 101, 32, 54, 53, 48, 50, 32, 45, 32, 74, 85, 77, 80, 32, 105, 115, 32, 116, 104, 101, 32, 115, 104, 111, 114, 116, 32, 114, 101, 108, 97, 116, 105, 118, 101, 32, 111, 110, 101, 44, 32, 97, 110, 100, 32, 66, 82, 65, 78, 67, 72, 32, 105, 115, 32, 97, 98, 115, 111, 108, 117, 116, 101, 46, 13, 10, 13, 10, 59, 13, 10, 59, 32, 67, 86, 66, 97, 115, 105, 99, 32, 118, 97, 114, 105, 97, 98, 108, 101, 115, 32, 105, 110, 32, 115, 99, 114, 97, 116, 99, 104, 112, 97, 100, 46, 13, 10, 59, 13, 10, 13, 10, 59, 32, 100, 111, 110, 39, 116, 32, 119, 97, 114, 110, 32, 111, 110, 32, 98, 114, 97, 110, 99, 104, 47, 106, 117, 109, 112, 32, 111, 112, 116, 105, 109, 105, 122, 97, 116, 105, 111, 110, 115, 32, 111, 114, 32, 117, 110, 117, 115, 101, 100, 32, 118, 97, 114, 105, 97, 98, 108, 101, 115, 13, 10, 59, 58, 32, 119, 97, 114, 110, 45, 111, 112, 116, 115, 32, 61, 32, 111, 102, 102, 13, 10, 59, 58, 32, 119, 97, 114, 110, 45, 115, 121, 109, 98, 111, 108, 115, 32, 61, 32, 111, 102, 102, 13, 10, 13, 10, 59, 32, 117, 115, 101, 32, 111, 114, 105, 103, 105, 110, 97, 108, 32, 40, 112, 111, 115, 115, 105, 98, 108, 121, 32, 105, 110, 99, 111, 114, 114, 101, 99, 116, 108, 121, 32, 112, 111, 114, 116, 101, 100, 41, 32, 114, 97, 110, 100, 111, 109, 13, 10, 79, 76, 68, 95, 82, 78, 68, 32, 101, 113, 117, 32, 48, 13, 10, 13, 10, 59, 32, 87, 101, 32, 104, 97, 118, 101, 32, 116, 111, 32, 117, 115, 101, 32, 111, 117, 114, 32, 111, 119, 110, 32, 119, 111, 114, 107, 115, 112, 97, 99, 101, 44, 32, 110, 111, 116, 32, 71, 80, 76, 87, 83, 44, 32, 98, 101, 99, 97, 117, 115, 101, 32, 116, 104, 101, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 32, 114, 111, 117, 116, 105, 110, 101, 32, 109, 97, 107, 101, 115, 32, 105, 116, 32, 117, 110, 115, 97, 102, 101, 32, 116, 111, 13, 10, 59, 32, 117, 115, 101, 32, 114, 49, 49, 44, 32, 119, 104, 105, 99, 104, 32, 119, 101, 32, 107, 105, 110, 100, 32, 111, 102, 32, 110, 101, 101, 100, 33, 32, 83, 111, 32, 116, 104, 97, 116, 32, 101, 97, 116, 115, 32, 51, 50, 32, 98, 121, 116, 101, 115, 32, 111, 102, 32, 82, 65, 77, 32, 98, 117, 116, 32, 109, 101, 97, 110, 115, 32, 109, 111, 115, 116, 32, 111, 102, 32, 116, 104, 101, 32, 114, 101, 103, 105, 115, 116, 101, 114, 13, 10, 59, 32, 114, 101, 115, 116, 114, 105, 99, 116, 105, 111, 110, 115, 32, 73, 32, 119, 114, 111, 116, 101, 32, 116, 104, 105, 115, 32, 99, 111, 100, 101, 32, 111, 110, 32, 40, 97, 118, 111, 105, 100, 32, 82, 49, 44, 32, 97, 118, 111, 105, 100, 32, 82, 54, 44, 32, 97, 118, 111, 105, 100, 32, 82, 49, 51, 45, 82, 49, 53, 41, 32, 97, 114, 101, 32, 108, 105, 102, 116, 101, 100, 46, 13, 10, 109, 121, 119, 112, 32, 32, 32, 32, 32, 32, 101, 113, 117, 32, 62, 56, 51, 48, 48, 13, 10, 109, 121, 105, 110, 116, 119, 112, 32, 32, 32, 101, 113, 117, 32, 62, 56, 51, 50, 48, 13, 10, 13, 10, 59, 32, 100, 97, 116, 97, 32, 115, 116, 111, 114, 97, 103, 101, 32, 105, 110, 32, 115, 99, 114, 97, 116, 99, 104, 112, 97, 100, 13, 10, 32, 32, 32, 32, 100, 111, 114, 103, 32, 62, 56, 51, 52, 48, 13, 10, 13, 10, 59, 32, 117, 115, 101, 100, 32, 116, 111, 32, 116, 114, 97, 99, 107, 32, 115, 99, 114, 97, 116, 99, 104, 112, 97, 100, 32, 118, 97, 114, 105, 97, 98, 108, 101, 115, 13, 10, 102, 105, 114, 115, 116, 115, 112, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 113, 117, 32, 36, 13, 10, 13, 10, 114, 101, 97, 100, 95, 112, 111, 105, 110, 116, 101, 114, 32, 32, 32, 32, 98, 115, 115, 32, 50, 32, 32, 32, 32, 32, 32, 32, 59, 32, 102, 111, 114, 32, 100, 97, 116, 97, 47, 114, 101, 97, 100, 32, 115, 116, 97, 116, 101, 109, 101, 110, 116, 115, 13, 10, 99, 117, 114, 115, 111, 114, 9, 9, 32, 32, 32, 32, 98, 115, 115, 32, 50, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 99, 114, 101, 101, 110, 32, 112, 111, 115, 105, 116, 105, 111, 110, 13, 10, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 9, 32, 32, 32, 32, 98, 115, 115, 32, 50, 32, 32, 32, 32, 32, 32, 32, 59, 32, 85, 115, 101, 100, 32, 98, 121, 32, 80, 108, 101, 116, 116, 101, 114, 13, 10, 13, 10, 59, 32, 106, 111, 121, 115, 116, 105, 99, 107, 32, 98, 121, 116, 101, 115, 13, 10, 106, 111, 121, 49, 95, 100, 97, 116, 97, 9, 32, 32, 32, 32, 98, 115, 115, 32, 49, 32, 32, 32, 32, 32, 32, 32, 59, 32, 107, 101, 101, 112, 32, 116, 104, 101, 115, 101, 32, 98, 121, 116, 101, 115, 32, 116, 111, 103, 101, 116, 104, 101, 114, 32, 97, 110, 100, 32, 101, 118, 101, 110, 32, 97, 108, 105, 103, 110, 101, 100, 13, 10, 106, 111, 121, 50, 95, 100, 97, 116, 97, 9, 32, 32, 32, 32, 98, 115, 115, 32, 49, 13, 10, 13, 10, 107, 101, 121, 49, 95, 100, 97, 116, 97, 9, 32, 32, 32, 32, 98, 115, 115, 32, 49, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 121, 116, 101, 32, 45, 32, 107, 101, 121, 98, 111, 97, 114, 100, 32, 45, 32, 107, 101, 101, 112, 32, 116, 104, 101, 115, 101, 32, 98, 121, 116, 101, 115, 32, 116, 111, 103, 101, 116, 104, 101, 114, 32, 97, 110, 100, 32, 101, 118, 101, 110, 32, 97, 108, 105, 103, 110, 101, 100, 13, 10, 107, 101, 121, 50, 95, 100, 97, 116, 97, 9, 32, 32, 32, 32, 98, 115, 115, 32, 49, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 121, 116, 101, 32, 45, 32, 107, 101, 121, 98, 111, 97, 114, 100, 32, 40, 110, 111, 116, 32, 117, 115, 101, 100, 41, 13, 10, 13, 10, 102, 114, 97, 109, 101, 9, 32, 32, 32, 32, 32, 32, 32, 32, 98, 115, 115, 32, 50, 32, 32, 32, 32, 32, 32, 32, 59, 32, 119, 111, 114, 100, 13, 10, 108, 102, 115, 114, 9, 9, 32, 32, 32, 32, 98, 115, 115, 32, 50, 32, 32, 32, 32, 32, 32, 32, 59, 32, 119, 111, 114, 100, 32, 77, 85, 83, 84, 32, 66, 69, 32, 69, 86, 69, 78, 32, 65, 76, 73, 71, 78, 69, 68, 13, 10, 13, 10, 109, 111, 100, 101, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 115, 115, 32, 49, 13, 10, 102, 108, 105, 99, 107, 101, 114, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 115, 115, 32, 49, 13, 10, 13, 10, 110, 116, 115, 99, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 115, 115, 32, 49, 13, 10, 13, 10, 32, 32, 32, 32, 46, 105, 102, 110, 101, 32, 67, 86, 66, 65, 83, 73, 67, 95, 77, 85, 83, 73, 67, 95, 80, 76, 65, 89, 69, 82, 13, 10, 109, 117, 115, 105, 99, 95, 112, 108, 97, 121, 105, 110, 103, 9, 9, 98, 115, 115, 32, 49, 13, 10, 13, 10, 109, 117, 115, 105, 99, 95, 115, 116, 97, 114, 116, 9, 9, 32, 32, 32, 32, 98, 115, 115, 32, 50, 32, 32, 32, 59, 32, 119, 111, 114, 100, 32, 77, 85, 83, 84, 32, 66, 69, 32, 69, 86, 69, 78, 32, 65, 76, 73, 71, 78, 69, 68, 13, 10, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 9, 9, 98, 115, 115, 32, 50, 32, 32, 32, 59, 32, 119, 111, 114, 100, 32, 77, 85, 83, 84, 32, 66, 69, 32, 69, 86, 69, 78, 32, 65, 76, 73, 71, 78, 69, 68, 13, 10, 13, 10, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 49, 9, 9, 32, 32, 32, 32, 98, 115, 115, 32, 50, 32, 32, 32, 59, 32, 119, 111, 114, 100, 32, 77, 85, 83, 84, 32, 66, 69, 32, 69, 86, 69, 78, 32, 65, 76, 73, 71, 78, 69, 68, 13, 10, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 50, 9, 9, 32, 32, 32, 32, 98, 115, 115, 32, 50, 32, 32, 32, 59, 32, 119, 111, 114, 100, 32, 77, 85, 83, 84, 32, 66, 69, 32, 69, 86, 69, 78, 32, 65, 76, 73, 71, 78, 69, 68, 13, 10, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 51, 9, 9, 32, 32, 32, 32, 98, 115, 115, 32, 50, 32, 32, 32, 59, 32, 119, 111, 114, 100, 32, 77, 85, 83, 84, 32, 66, 69, 32, 69, 86, 69, 78, 32, 65, 76, 73, 71, 78, 69, 68, 13, 10, 13, 10, 109, 117, 115, 105, 99, 95, 116, 105, 109, 105, 110, 103, 9, 9, 98, 115, 115, 32, 49, 32, 32, 32, 32, 32, 32, 32, 13, 10, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 99, 111, 117, 110, 116, 101, 114, 9, 98, 115, 115, 32, 49, 13, 10, 109, 117, 115, 105, 99, 95, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 49, 9, 98, 115, 115, 32, 49, 13, 10, 13, 10, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 49, 9, 9, 98, 115, 115, 32, 49, 13, 10, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 49, 9, 32, 32, 32, 32, 98, 115, 115, 32, 49, 13, 10, 13, 10, 109, 117, 115, 105, 99, 95, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 50, 9, 98, 115, 115, 32, 49, 13, 10, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 50, 9, 9, 98, 115, 115, 32, 49, 13, 10, 13, 10, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 50, 9, 32, 32, 32, 32, 98, 115, 115, 32, 49, 13, 10, 109, 117, 115, 105, 99, 95, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 51, 9, 98, 115, 115, 32, 49, 13, 10, 13, 10, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 51, 9, 9, 98, 115, 115, 32, 49, 13, 10, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 51, 9, 32, 32, 32, 32, 98, 115, 115, 32, 49, 13, 10, 13, 10, 109, 117, 115, 105, 99, 95, 100, 114, 117, 109, 9, 9, 32, 32, 32, 32, 98, 115, 115, 32, 49, 13, 10, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 52, 9, 32, 32, 32, 32, 98, 115, 115, 32, 49, 13, 10, 13, 10, 97, 117, 100, 105, 111, 95, 118, 111, 108, 49, 32, 32, 9, 9, 98, 115, 115, 32, 49, 13, 10, 97, 117, 100, 105, 111, 95, 118, 111, 108, 50, 9, 32, 32, 32, 32, 9, 98, 115, 115, 32, 49, 13, 10, 97, 117, 100, 105, 111, 95, 118, 111, 108, 51, 9, 9, 32, 32, 32, 32, 98, 115, 115, 32, 49, 13, 10, 97, 117, 100, 105, 111, 95, 118, 111, 108, 52, 104, 119, 9, 9, 98, 115, 115, 32, 49, 13, 10, 13, 10, 97, 117, 100, 105, 111, 95, 110, 111, 105, 115, 101, 32, 9, 9, 98, 115, 115, 32, 49, 13, 10, 97, 117, 100, 105, 111, 95, 99, 111, 110, 116, 114, 111, 108, 9, 9, 98, 115, 115, 32, 49, 13, 10, 13, 10, 109, 117, 115, 105, 99, 95, 109, 111, 100, 101, 9, 32, 32, 32, 32, 9, 98, 115, 115, 32, 49, 13, 10, 109, 117, 115, 105, 99, 95, 102, 114, 97, 109, 101, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 115, 115, 32, 49, 13, 10, 32, 32, 32, 32, 46, 101, 110, 100, 105, 102, 13, 10, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 46, 105, 102, 110, 101, 32, 67, 86, 66, 65, 83, 73, 67, 95, 66, 65, 78, 75, 95, 83, 87, 73, 84, 67, 72, 73, 78, 71, 13, 10, 32, 32, 32, 32, 101, 118, 101, 110, 13, 10, 115, 97, 118, 101, 100, 95, 98, 97, 110, 107, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 115, 115, 32, 50, 13, 10, 109, 117, 115, 105, 99, 95, 98, 97, 110, 107, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 115, 115, 32, 50, 13, 10, 32, 32, 32, 32, 46, 101, 110, 100, 105, 102, 13, 10, 13, 10, 59, 32, 117, 115, 101, 100, 32, 116, 111, 32, 116, 114, 97, 99, 107, 32, 115, 99, 114, 97, 116, 99, 104, 112, 97, 100, 32, 118, 97, 114, 105, 97, 98, 108, 101, 115, 13, 10, 32, 32, 32, 32, 101, 118, 101, 110, 13, 10, 108, 97, 115, 116, 115, 112, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 113, 117, 32, 36, 13, 10, 13, 10, 59, 32, 87, 104, 105, 108, 101, 32, 119, 101, 32, 100, 111, 110, 39, 116, 32, 109, 101, 97, 110, 32, 116, 111, 32, 85, 83, 69, 32, 116, 104, 101, 32, 99, 111, 110, 115, 111, 108, 101, 32, 82, 79, 77, 44, 32, 102, 111, 114, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 115, 32, 119, 101, 13, 10, 59, 32, 97, 114, 101, 32, 102, 111, 114, 99, 101, 100, 32, 116, 111, 32, 105, 110, 116, 101, 114, 102, 97, 99, 101, 32, 119, 105, 116, 104, 32, 115, 111, 109, 101, 32, 111, 102, 32, 105, 116, 46, 32, 87, 101, 32, 110, 101, 101, 100, 32, 116, 104, 101, 115, 101, 32, 97, 100, 100, 114, 101, 115, 115, 101, 115, 13, 10, 59, 32, 116, 111, 32, 109, 105, 110, 105, 109, 105, 122, 101, 32, 119, 104, 97, 116, 32, 105, 116, 32, 100, 111, 101, 115, 32, 115, 111, 32, 119, 101, 32, 99, 97, 110, 32, 109, 97, 120, 105, 109, 105, 122, 101, 32, 111, 117, 114, 32, 117, 115, 101, 32, 111, 102, 32, 115, 99, 114, 97, 116, 99, 104, 112, 97, 100, 46, 13, 10, 59, 32, 87, 104, 105, 108, 101, 32, 73, 39, 100, 32, 108, 105, 107, 101, 32, 116, 111, 32, 117, 115, 101, 32, 116, 104, 101, 32, 99, 97, 115, 115, 101, 116, 116, 101, 32, 104, 111, 111, 107, 32, 45, 32, 114, 101, 113, 117, 105, 114, 101, 115, 32, 111, 110, 108, 121, 32, 49, 48, 32, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 115, 13, 10, 59, 32, 97, 110, 100, 32, 111, 110, 108, 121, 32, 117, 115, 101, 115, 32, 54, 32, 119, 111, 114, 100, 115, 32, 111, 102, 32, 115, 99, 114, 97, 116, 99, 104, 112, 97, 100, 44, 32, 119, 101, 32, 99, 97, 110, 39, 116, 32, 104, 101, 114, 101, 32, 98, 101, 99, 97, 117, 115, 101, 32, 105, 116, 13, 10, 59, 32, 108, 111, 115, 101, 115, 32, 116, 104, 101, 32, 114, 101, 116, 117, 114, 110, 32, 97, 100, 100, 114, 101, 115, 115, 44, 32, 109, 101, 97, 110, 105, 110, 103, 32, 121, 111, 117, 32, 99, 97, 110, 32, 111, 110, 108, 121, 32, 117, 115, 101, 32, 105, 116, 32, 105, 102, 32, 121, 111, 117, 13, 10, 59, 32, 107, 110, 111, 119, 32, 119, 104, 101, 114, 101, 32, 121, 111, 117, 114, 32, 76, 73, 77, 73, 32, 50, 32, 105, 115, 32, 97, 110, 100, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 115, 32, 97, 114, 101, 32, 111, 116, 104, 101, 114, 119, 105, 115, 101, 32, 100, 105, 115, 97, 98, 108, 101, 100, 46, 32, 83, 111, 13, 10, 59, 32, 119, 101, 32, 104, 97, 118, 101, 32, 116, 111, 32, 117, 115, 101, 32, 116, 104, 101, 32, 108, 111, 110, 103, 101, 114, 32, 98, 117, 116, 32, 109, 111, 114, 101, 32, 115, 116, 97, 110, 100, 97, 114, 100, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 32, 104, 111, 111, 107, 44, 32, 119, 104, 105, 99, 104, 32, 97, 108, 115, 111, 13, 10, 59, 32, 114, 101, 97, 100, 115, 32, 86, 68, 80, 32, 115, 116, 97, 116, 117, 115, 32, 102, 111, 114, 32, 117, 115, 32, 40, 110, 111, 32, 99, 104, 111, 105, 99, 101, 41, 46, 13, 10, 13, 10, 105, 110, 116, 99, 110, 116, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 113, 117, 32, 62, 56, 51, 55, 57, 32, 32, 32, 59, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 32, 99, 111, 117, 110, 116, 101, 114, 32, 98, 121, 116, 101, 44, 32, 97, 100, 100, 115, 32, 49, 32, 40, 102, 114, 111, 109, 32, 71, 80, 76, 87, 83, 32, 114, 49, 52, 41, 32, 101, 118, 101, 114, 121, 32, 102, 114, 97, 109, 101, 13, 10, 118, 100, 112, 95, 115, 116, 97, 116, 117, 115, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 113, 117, 32, 62, 56, 51, 55, 66, 32, 32, 32, 59, 32, 86, 68, 80, 32, 115, 116, 97, 116, 117, 115, 32, 98, 121, 116, 101, 32, 109, 105, 114, 114, 111, 114, 13, 10, 105, 110, 116, 119, 115, 114, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 113, 117, 32, 62, 56, 51, 99, 50, 32, 32, 32, 59, 32, 73, 78, 84, 32, 87, 83, 32, 82, 49, 32, 32, 45, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 32, 99, 111, 110, 116, 114, 111, 108, 32, 102, 108, 97, 103, 115, 32, 45, 32, 109, 117, 115, 116, 32, 98, 101, 32, 62, 56, 48, 48, 48, 13, 10, 105, 110, 116, 119, 115, 114, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 113, 117, 32, 62, 56, 51, 99, 52, 32, 32, 32, 59, 32, 73, 78, 84, 32, 87, 83, 32, 82, 50, 32, 32, 45, 32, 97, 100, 100, 114, 101, 115, 115, 32, 111, 102, 32, 117, 115, 101, 114, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 32, 114, 111, 117, 116, 105, 110, 101, 32, 40, 112, 111, 105, 110, 116, 32, 116, 111, 32, 105, 110, 116, 95, 104, 97, 110, 100, 108, 101, 114, 41, 13, 10, 105, 110, 116, 119, 115, 114, 49, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 113, 117, 32, 62, 56, 51, 100, 54, 32, 32, 32, 59, 32, 115, 99, 114, 101, 101, 110, 32, 116, 105, 109, 101, 111, 117, 116, 32, 99, 111, 117, 110, 116, 101, 114, 32, 45, 32, 109, 117, 115, 116, 32, 98, 101, 32, 111, 100, 100, 32, 40, 105, 110, 105, 116, 32, 116, 111, 32, 49, 44, 32, 105, 115, 32, 105, 110, 99, 116, 32, 101, 118, 101, 114, 121, 32, 102, 114, 97, 109, 101, 41, 13, 10, 105, 110, 116, 119, 115, 114, 49, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 113, 117, 32, 62, 56, 51, 100, 97, 32, 32, 32, 59, 32, 73, 78, 84, 32, 87, 83, 32, 82, 49, 51, 32, 45, 32, 117, 115, 101, 100, 32, 102, 111, 114, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 32, 99, 97, 108, 108, 32, 40, 119, 111, 114, 100, 41, 13, 10, 105, 110, 116, 119, 115, 114, 49, 52, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 113, 117, 32, 62, 56, 51, 100, 99, 32, 32, 32, 59, 32, 73, 78, 84, 32, 87, 83, 32, 82, 49, 52, 32, 45, 32, 117, 115, 101, 100, 32, 102, 111, 114, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 32, 99, 97, 108, 108, 32, 40, 119, 111, 114, 100, 41, 13, 10, 105, 110, 116, 119, 115, 114, 49, 53, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 113, 117, 32, 62, 56, 51, 100, 101, 32, 32, 32, 59, 32, 73, 78, 84, 32, 87, 83, 32, 82, 49, 53, 32, 45, 32, 117, 115, 101, 100, 32, 102, 111, 114, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 32, 99, 97, 108, 108, 32, 40, 119, 111, 114, 100, 41, 13, 10, 103, 112, 108, 119, 115, 114, 49, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 113, 117, 32, 62, 56, 51, 102, 54, 32, 32, 32, 59, 32, 71, 80, 76, 32, 87, 83, 32, 82, 49, 49, 32, 45, 32, 114, 101, 116, 117, 114, 110, 32, 97, 100, 100, 114, 101, 115, 115, 32, 116, 111, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 32, 82, 79, 77, 32, 40, 110, 111, 116, 32, 117, 115, 101, 100, 44, 32, 98, 117, 116, 32, 111, 118, 101, 114, 119, 114, 105, 116, 116, 101, 110, 32, 101, 97, 99, 104, 32, 105, 110, 116, 41, 13, 10, 103, 112, 108, 119, 115, 114, 49, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 113, 117, 32, 62, 56, 51, 102, 56, 32, 32, 32, 59, 32, 71, 80, 76, 32, 87, 83, 32, 82, 49, 50, 32, 45, 32, 117, 115, 101, 100, 32, 102, 111, 114, 32, 99, 97, 115, 115, 101, 116, 116, 101, 32, 116, 101, 115, 116, 32, 97, 110, 100, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 32, 104, 111, 111, 107, 32, 116, 101, 115, 116, 32, 40, 122, 101, 114, 111, 101, 100, 32, 101, 97, 99, 104, 32, 105, 110, 116, 41, 13, 10, 103, 112, 108, 119, 115, 114, 49, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 113, 117, 32, 62, 56, 51, 102, 97, 32, 32, 32, 59, 32, 71, 80, 76, 32, 87, 83, 32, 82, 49, 51, 32, 45, 32, 117, 115, 101, 100, 32, 105, 110, 32, 109, 121, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 32, 104, 97, 110, 100, 108, 101, 114, 13, 10, 103, 112, 108, 119, 115, 114, 49, 52, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 113, 117, 32, 62, 56, 51, 102, 99, 32, 32, 32, 59, 32, 71, 80, 76, 32, 87, 83, 32, 82, 49, 52, 32, 45, 32, 102, 108, 97, 103, 115, 32, 117, 115, 101, 100, 32, 116, 111, 32, 100, 101, 116, 101, 99, 116, 32, 99, 97, 115, 115, 101, 116, 116, 101, 32, 45, 32, 109, 117, 115, 116, 32, 98, 101, 32, 62, 48, 49, 48, 56, 32, 40, 111, 114, 32, 97, 116, 32, 108, 101, 97, 115, 116, 32, 62, 48, 48, 50, 48, 32, 99, 108, 101, 97, 114, 41, 13, 10, 103, 112, 108, 119, 115, 114, 49, 53, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 113, 117, 32, 62, 56, 51, 102, 101, 32, 32, 32, 59, 32, 71, 80, 76, 32, 87, 83, 32, 82, 49, 53, 32, 45, 32, 98, 97, 115, 101, 32, 97, 100, 100, 114, 101, 115, 115, 32, 111, 102, 32, 86, 68, 80, 32, 102, 111, 114, 32, 115, 116, 97, 116, 117, 115, 32, 114, 101, 97, 100, 32, 45, 32, 109, 117, 115, 116, 32, 98, 101, 32, 62, 56, 67, 48, 50, 13, 10, 13, 10, 59, 32, 83, 111, 109, 101, 32, 104, 97, 114, 100, 119, 97, 114, 101, 32, 101, 113, 117, 97, 116, 101, 115, 13, 10, 73, 78, 84, 87, 83, 32, 32, 32, 32, 32, 101, 113, 117, 32, 62, 56, 51, 67, 48, 32, 32, 32, 32, 32, 59, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 32, 99, 97, 108, 108, 105, 110, 103, 32, 87, 111, 114, 107, 115, 112, 97, 99, 101, 13, 10, 71, 80, 76, 87, 80, 32, 32, 32, 32, 32, 101, 113, 117, 32, 62, 56, 51, 69, 48, 32, 32, 32, 32, 32, 59, 32, 119, 101, 32, 117, 115, 101, 32, 116, 104, 105, 115, 32, 111, 110, 101, 13, 10, 83, 79, 85, 78, 68, 32, 32, 32, 32, 32, 101, 113, 117, 32, 62, 56, 52, 48, 48, 13, 10, 86, 68, 80, 68, 65, 84, 65, 32, 32, 32, 101, 113, 117, 32, 62, 56, 56, 48, 48, 13, 10, 86, 68, 80, 83, 84, 65, 84, 85, 83, 32, 101, 113, 117, 32, 62, 56, 56, 48, 50, 13, 10, 86, 68, 80, 87, 68, 65, 84, 65, 32, 32, 101, 113, 117, 32, 62, 56, 99, 48, 48, 13, 10, 86, 68, 80, 87, 65, 68, 82, 32, 32, 32, 101, 113, 117, 32, 62, 56, 99, 48, 50, 13, 10, 13, 10, 59, 32, 99, 97, 114, 116, 114, 105, 100, 103, 101, 32, 104, 101, 97, 100, 101, 114, 32, 102, 111, 114, 32, 97, 108, 108, 32, 82, 79, 77, 32, 112, 97, 103, 101, 115, 13, 10, 59, 32, 116, 104, 105, 115, 32, 109, 105, 103, 104, 116, 32, 100, 111, 32, 119, 101, 105, 114, 100, 32, 116, 104, 105, 110, 103, 115, 32, 116, 111, 32, 98, 97, 110, 107, 32, 48, 32, 98, 117, 116, 32, 119, 101, 32, 104, 97, 118, 101, 32, 116, 111, 32, 99, 104, 111, 112, 32, 105, 116, 32, 117, 112, 32, 97, 110, 121, 119, 97, 121, 46, 46, 46, 13, 10, 32, 32, 32, 32, 98, 97, 110, 107, 32, 97, 108, 108, 44, 62, 54, 48, 48, 48, 13, 10, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 100, 97, 116, 97, 32, 62, 97, 97, 48, 49, 44, 62, 48, 49, 48, 48, 44, 62, 48, 48, 48, 48, 44, 112, 114, 111, 103, 108, 105, 115, 116, 44, 62, 48, 48, 48, 48, 44, 62, 48, 48, 48, 48, 13, 10, 112, 114, 111, 103, 108, 105, 115, 116, 13, 10, 32, 32, 32, 32, 100, 97, 116, 97, 32, 62, 48, 48, 48, 48, 44, 83, 70, 73, 82, 83, 84, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 50, 48, 13, 10, 32, 32, 32, 32, 116, 101, 120, 116, 32, 39, 67, 86, 66, 65, 83, 73, 67, 32, 71, 65, 77, 69, 32, 32, 32, 32, 32, 32, 32, 32, 42, 39, 32, 32, 32, 32, 59, 32, 50, 48, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 115, 32, 116, 111, 32, 97, 108, 108, 111, 119, 32, 110, 97, 109, 101, 32, 116, 111, 32, 98, 101, 32, 104, 101, 120, 32, 101, 100, 105, 116, 101, 100, 13, 10, 32, 32, 32, 32, 13, 10, 59, 32, 115, 116, 97, 114, 116, 117, 112, 32, 99, 111, 100, 101, 32, 99, 111, 112, 105, 101, 115, 32, 116, 104, 101, 32, 102, 105, 114, 115, 116, 32, 116, 104, 114, 101, 101, 32, 98, 97, 110, 107, 115, 32, 116, 111, 32, 50, 52, 107, 32, 82, 65, 77, 32, 40, 97, 108, 119, 97, 121, 115, 41, 32, 97, 110, 100, 32, 106, 117, 109, 112, 115, 32, 116, 104, 101, 114, 101, 32, 32, 32, 32, 13, 10, 83, 70, 73, 82, 83, 84, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 64, 62, 54, 48, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 115, 101, 116, 32, 98, 97, 110, 107, 32, 48, 32, 45, 32, 108, 97, 115, 116, 32, 115, 104, 97, 114, 101, 100, 32, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 13, 10, 13, 10, 32, 32, 32, 32, 98, 97, 110, 107, 32, 48, 13, 10, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 51, 44, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 104, 111, 119, 32, 109, 97, 110, 121, 32, 98, 97, 110, 107, 115, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 52, 44, 62, 54, 48, 48, 48, 32, 32, 32, 32, 32, 59, 32, 102, 114, 111, 109, 32, 98, 97, 110, 107, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 97, 48, 48, 48, 32, 32, 32, 32, 32, 59, 32, 116, 97, 114, 103, 101, 116, 32, 105, 110, 32, 82, 65, 77, 13, 10, 83, 70, 76, 80, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 42, 114, 52, 43, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 101, 116, 32, 116, 104, 101, 32, 98, 97, 110, 107, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 44, 62, 54, 48, 53, 48, 32, 32, 32, 32, 32, 59, 32, 102, 114, 111, 109, 32, 97, 100, 100, 114, 101, 115, 115, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 50, 44, 62, 49, 70, 66, 48, 32, 32, 32, 32, 32, 59, 32, 99, 111, 117, 110, 116, 13, 10, 83, 70, 76, 80, 50, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 42, 114, 49, 43, 44, 42, 114, 48, 43, 32, 32, 32, 59, 32, 109, 111, 118, 101, 32, 119, 111, 114, 100, 115, 13, 10, 32, 32, 32, 32, 100, 101, 99, 116, 32, 114, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 99, 111, 117, 110, 116, 32, 100, 111, 119, 110, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 83, 70, 76, 80, 50, 13, 10, 32, 32, 32, 32, 100, 101, 99, 32, 114, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 99, 111, 117, 110, 116, 32, 100, 111, 119, 110, 32, 112, 97, 103, 101, 115, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 83, 70, 76, 80, 13, 10, 67, 79, 68, 69, 83, 84, 13, 10, 32, 32, 32, 32, 98, 32, 64, 83, 84, 65, 82, 84, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 106, 117, 109, 112, 32, 116, 111, 32, 115, 116, 97, 114, 116, 117, 112, 32, 99, 111, 100, 101, 32, 105, 110, 32, 82, 65, 77, 13, 10, 13, 10, 59, 32, 102, 105, 120, 101, 100, 32, 112, 114, 111, 103, 114, 97, 109, 32, 105, 110, 32, 104, 105, 103, 104, 32, 82, 65, 77, 32, 45, 32, 109, 97, 103, 105, 99, 32, 98, 97, 110, 107, 32, 110, 117, 109, 98, 101, 114, 32, 104, 105, 103, 104, 101, 114, 32, 116, 104, 97, 110, 32, 110, 111, 114, 109, 97, 108, 108, 121, 32, 108, 101, 103, 97, 108, 13, 10, 59, 32, 116, 104, 105, 115, 32, 119, 105, 108, 108, 32, 98, 101, 32, 99, 104, 111, 112, 112, 101, 100, 32, 117, 112, 32, 97, 110, 100, 32, 105, 110, 115, 101, 114, 116, 101, 100, 32, 105, 110, 116, 111, 32, 116, 104, 101, 32, 102, 105, 114, 115, 116, 32, 116, 104, 114, 101, 101, 32, 98, 97, 110, 107, 115, 13, 10, 59, 32, 119, 101, 39, 114, 101, 32, 115, 116, 105, 108, 108, 32, 105, 110, 32, 98, 97, 110, 107, 32, 48, 32, 45, 32, 116, 104, 105, 115, 32, 119, 105, 108, 108, 32, 114, 101, 115, 117, 108, 116, 32, 105, 110, 32, 97, 32, 103, 97, 112, 32, 105, 110, 32, 116, 104, 101, 32, 111, 117, 116, 112, 117, 116, 32, 98, 105, 110, 97, 114, 121, 13, 10, 59, 32, 116, 104, 97, 116, 32, 119, 101, 32, 99, 97, 110, 32, 117, 115, 101, 32, 116, 111, 32, 112, 117, 116, 32, 116, 104, 101, 32, 112, 105, 101, 99, 101, 115, 32, 116, 111, 103, 101, 116, 104, 101, 114, 32, 109, 111, 114, 101, 32, 101, 97, 115, 105, 108, 121, 46, 13, 10, 32, 32, 32, 32, 97, 111, 114, 103, 32, 62, 97, 48, 48, 48, 13, 10, 13, 10, 59, 32, 85, 116, 105, 108, 105, 116, 121, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 13, 10, 13, 10, 59, 32, 87, 114, 105, 116, 101, 32, 114, 101, 103, 105, 115, 116, 101, 114, 32, 116, 111, 32, 86, 68, 80, 32, 45, 32, 82, 48, 32, 61, 32, 114, 101, 103, 32, 105, 110, 32, 77, 83, 66, 44, 32, 100, 97, 116, 97, 32, 105, 110, 32, 76, 83, 66, 13, 10, 87, 82, 84, 86, 68, 80, 13, 10, 32, 32, 32, 32, 111, 114, 105, 32, 114, 48, 44, 62, 56, 48, 48, 48, 13, 10, 32, 32, 32, 32, 106, 109, 112, 32, 83, 69, 84, 82, 68, 13, 10, 13, 10, 59, 32, 83, 101, 116, 32, 86, 68, 80, 32, 102, 111, 114, 32, 119, 114, 105, 116, 101, 32, 97, 100, 100, 114, 101, 115, 115, 32, 45, 32, 97, 100, 100, 114, 101, 115, 115, 32, 105, 110, 32, 82, 48, 13, 10, 83, 69, 84, 87, 82, 84, 13, 10, 32, 32, 32, 32, 111, 114, 105, 32, 114, 48, 44, 62, 52, 48, 48, 48, 13, 10, 59, 32, 102, 97, 108, 108, 32, 116, 104, 114, 111, 117, 103, 104, 13, 10, 13, 10, 59, 32, 83, 101, 116, 32, 86, 68, 80, 32, 102, 111, 114, 32, 114, 101, 97, 100, 32, 97, 100, 100, 114, 101, 115, 115, 32, 45, 32, 97, 100, 100, 114, 101, 115, 115, 32, 105, 110, 32, 82, 48, 13, 10, 83, 69, 84, 82, 68, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 86, 68, 80, 87, 65, 68, 82, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 86, 68, 80, 87, 65, 68, 82, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 49, 13, 10, 13, 10, 59, 32, 87, 114, 105, 116, 101, 32, 98, 121, 116, 101, 32, 116, 111, 32, 86, 68, 80, 32, 45, 32, 97, 100, 100, 114, 101, 115, 115, 32, 105, 110, 32, 82, 48, 44, 32, 100, 97, 116, 97, 32, 105, 110, 32, 77, 83, 66, 32, 82, 50, 13, 10, 59, 32, 73, 110, 108, 105, 110, 101, 32, 97, 100, 100, 114, 101, 115, 115, 32, 115, 101, 116, 32, 116, 111, 32, 97, 118, 111, 105, 100, 32, 110, 101, 101, 100, 105, 110, 103, 32, 116, 111, 32, 99, 97, 99, 104, 101, 32, 114, 49, 49, 13, 10, 87, 82, 84, 86, 82, 77, 13, 10, 32, 32, 32, 32, 111, 114, 105, 32, 114, 48, 44, 62, 52, 48, 48, 48, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 86, 68, 80, 87, 65, 68, 82, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 86, 68, 80, 87, 65, 68, 82, 13, 10, 59, 32, 78, 111, 32, 110, 101, 101, 100, 32, 116, 111, 32, 100, 101, 108, 97, 121, 32, 97, 102, 116, 101, 114, 32, 115, 101, 116, 116, 105, 110, 103, 32, 97, 32, 119, 114, 105, 116, 101, 32, 97, 100, 100, 114, 101, 115, 115, 32, 45, 32, 116, 104, 101, 114, 101, 39, 115, 32, 110, 111, 32, 86, 82, 65, 77, 32, 97, 99, 99, 101, 115, 115, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 50, 44, 64, 86, 68, 80, 87, 68, 65, 84, 65, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 49, 13, 10, 13, 10, 59, 32, 82, 101, 97, 100, 32, 98, 121, 116, 101, 32, 102, 114, 111, 109, 32, 86, 68, 80, 32, 45, 32, 97, 100, 100, 114, 101, 115, 115, 32, 105, 110, 32, 82, 48, 44, 32, 100, 97, 116, 97, 32, 114, 101, 116, 117, 114, 110, 101, 100, 32, 105, 110, 32, 77, 83, 66, 32, 82, 48, 13, 10, 59, 32, 73, 110, 108, 105, 110, 101, 32, 97, 100, 100, 114, 101, 115, 115, 32, 115, 101, 116, 32, 116, 111, 32, 97, 118, 111, 105, 100, 32, 110, 101, 101, 100, 105, 110, 103, 32, 116, 111, 32, 99, 97, 99, 104, 101, 32, 114, 49, 49, 13, 10, 82, 68, 86, 82, 77, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 86, 68, 80, 87, 65, 68, 82, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 86, 68, 80, 87, 65, 68, 82, 13, 10, 32, 32, 32, 32, 110, 111, 112, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 86, 68, 80, 68, 65, 84, 65, 44, 114, 48, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 49, 13, 10, 13, 10, 59, 32, 70, 105, 108, 108, 32, 86, 82, 65, 77, 32, 45, 32, 97, 100, 100, 114, 101, 115, 115, 32, 105, 110, 32, 82, 48, 44, 32, 98, 121, 116, 101, 32, 105, 110, 32, 82, 50, 44, 32, 99, 111, 117, 110, 116, 32, 105, 110, 32, 82, 51, 13, 10, 59, 32, 79, 114, 105, 103, 105, 110, 97, 108, 58, 32, 97, 100, 100, 114, 101, 115, 115, 32, 105, 110, 32, 112, 111, 105, 110, 116, 101, 114, 44, 32, 98, 121, 116, 101, 32, 105, 110, 32, 116, 101, 109, 112, 44, 32, 99, 111, 117, 110, 116, 32, 105, 110, 32, 116, 101, 109, 112, 50, 32, 40, 90, 80, 41, 13, 10, 59, 32, 73, 110, 108, 105, 110, 101, 32, 97, 100, 100, 114, 101, 115, 115, 32, 115, 101, 116, 32, 116, 111, 32, 97, 118, 111, 105, 100, 32, 110, 101, 101, 100, 105, 110, 103, 32, 116, 111, 32, 99, 97, 99, 104, 101, 32, 114, 49, 49, 13, 10, 70, 73, 76, 86, 82, 77, 13, 10, 32, 32, 32, 32, 111, 114, 105, 32, 114, 48, 44, 62, 52, 48, 48, 48, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 86, 68, 80, 87, 65, 68, 82, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 86, 68, 80, 87, 65, 68, 82, 13, 10, 59, 32, 78, 111, 32, 110, 101, 101, 100, 32, 116, 111, 32, 100, 101, 108, 97, 121, 32, 97, 102, 116, 101, 114, 32, 115, 101, 116, 116, 105, 110, 103, 32, 97, 32, 119, 114, 105, 116, 101, 32, 97, 100, 100, 114, 101, 115, 115, 32, 45, 32, 116, 104, 101, 114, 101, 39, 115, 32, 110, 111, 32, 86, 82, 65, 77, 32, 97, 99, 99, 101, 115, 115, 13, 10, 33, 49, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 50, 44, 64, 86, 68, 80, 87, 68, 65, 84, 65, 13, 10, 32, 32, 32, 32, 100, 101, 99, 32, 114, 51, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 45, 33, 49, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 49, 13, 10, 13, 10, 59, 32, 82, 101, 97, 100, 32, 86, 82, 65, 77, 32, 45, 32, 97, 100, 100, 114, 101, 115, 115, 32, 105, 110, 32, 82, 48, 44, 32, 67, 80, 85, 32, 100, 97, 116, 97, 32, 97, 116, 32, 82, 50, 44, 32, 99, 111, 117, 110, 116, 32, 105, 110, 32, 82, 51, 13, 10, 59, 32, 73, 110, 108, 105, 110, 101, 32, 97, 100, 100, 114, 101, 115, 115, 32, 115, 101, 116, 32, 116, 111, 32, 97, 118, 111, 105, 100, 32, 110, 101, 101, 100, 105, 110, 103, 32, 116, 111, 32, 99, 97, 99, 104, 101, 32, 114, 49, 49, 13, 10, 76, 68, 73, 82, 77, 86, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 86, 68, 80, 87, 65, 68, 82, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 86, 68, 80, 87, 65, 68, 82, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 48, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 48, 13, 10, 33, 49, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 86, 68, 80, 68, 65, 84, 65, 44, 42, 114, 50, 43, 13, 10, 32, 32, 32, 32, 100, 101, 99, 32, 114, 51, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 45, 33, 49, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 49, 13, 10, 13, 10, 59, 32, 76, 111, 97, 100, 32, 86, 82, 65, 77, 32, 45, 32, 97, 100, 100, 114, 101, 115, 115, 32, 105, 110, 32, 82, 48, 44, 32, 67, 80, 85, 32, 100, 97, 116, 97, 32, 97, 116, 32, 82, 50, 44, 32, 99, 111, 117, 110, 116, 32, 105, 110, 32, 82, 51, 13, 10, 59, 32, 79, 114, 105, 103, 105, 110, 97, 108, 58, 32, 97, 100, 100, 114, 101, 115, 115, 32, 105, 110, 32, 112, 111, 105, 110, 116, 101, 114, 44, 32, 67, 80, 85, 32, 97, 100, 100, 114, 101, 115, 115, 32, 97, 116, 32, 116, 101, 109, 112, 44, 32, 99, 111, 117, 110, 116, 32, 105, 110, 32, 116, 101, 109, 112, 50, 13, 10, 59, 32, 73, 110, 108, 105, 110, 101, 32, 97, 100, 100, 114, 101, 115, 115, 32, 115, 101, 116, 32, 116, 111, 32, 97, 118, 111, 105, 100, 32, 110, 101, 101, 100, 105, 110, 103, 32, 116, 111, 32, 99, 97, 99, 104, 101, 32, 114, 49, 49, 13, 10, 76, 68, 73, 82, 86, 77, 13, 10, 32, 32, 32, 32, 111, 114, 105, 32, 114, 48, 44, 62, 52, 48, 48, 48, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 86, 68, 80, 87, 65, 68, 82, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 86, 68, 80, 87, 65, 68, 82, 13, 10, 59, 32, 78, 111, 32, 110, 101, 101, 100, 32, 116, 111, 32, 100, 101, 108, 97, 121, 32, 97, 102, 116, 101, 114, 32, 115, 101, 116, 116, 105, 110, 103, 32, 97, 32, 119, 114, 105, 116, 101, 32, 97, 100, 100, 114, 101, 115, 115, 32, 45, 32, 116, 104, 101, 114, 101, 39, 115, 32, 110, 111, 32, 86, 82, 65, 77, 32, 97, 99, 99, 101, 115, 115, 13, 10, 33, 49, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 42, 114, 50, 43, 44, 64, 86, 68, 80, 87, 68, 65, 84, 65, 13, 10, 32, 32, 32, 32, 100, 101, 99, 32, 114, 51, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 45, 33, 49, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 49, 13, 10, 13, 10, 59, 32, 68, 101, 102, 105, 110, 101, 32, 97, 32, 112, 97, 116, 116, 101, 114, 110, 32, 116, 104, 114, 101, 101, 32, 116, 105, 109, 101, 115, 32, 119, 105, 116, 104, 32, 50, 107, 32, 111, 102, 102, 115, 101, 116, 115, 32, 45, 32, 117, 115, 101, 100, 32, 102, 111, 114, 32, 98, 105, 116, 109, 97, 112, 32, 99, 111, 108, 111, 114, 32, 97, 110, 100, 32, 112, 97, 116, 116, 101, 114, 110, 32, 116, 97, 98, 108, 101, 115, 13, 10, 59, 32, 76, 111, 97, 100, 32, 86, 82, 65, 77, 32, 51, 32, 116, 105, 109, 101, 115, 32, 119, 105, 116, 104, 32, 111, 102, 102, 115, 101, 116, 32, 45, 32, 97, 100, 100, 114, 101, 115, 115, 32, 105, 110, 32, 82, 48, 44, 32, 67, 80, 85, 32, 100, 97, 116, 97, 32, 97, 116, 32, 82, 50, 44, 32, 99, 111, 117, 110, 116, 32, 105, 110, 32, 82, 51, 13, 10, 59, 32, 79, 114, 105, 103, 105, 110, 97, 108, 58, 32, 97, 100, 100, 114, 101, 115, 115, 32, 105, 110, 32, 112, 111, 105, 110, 116, 101, 114, 44, 32, 67, 80, 85, 32, 97, 100, 100, 114, 101, 115, 115, 32, 97, 116, 32, 116, 101, 109, 112, 44, 32, 99, 111, 117, 110, 116, 32, 105, 110, 32, 116, 101, 109, 112, 50, 13, 10, 76, 68, 73, 82, 86, 77, 51, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 49, 44, 114, 52, 32, 32, 32, 32, 32, 32, 59, 32, 115, 97, 118, 101, 32, 114, 101, 116, 117, 114, 110, 32, 97, 100, 100, 114, 101, 115, 115, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 50, 44, 114, 53, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 97, 118, 101, 32, 67, 80, 85, 32, 97, 100, 100, 114, 101, 115, 115, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 51, 44, 114, 55, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 97, 118, 101, 32, 99, 111, 117, 110, 116, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 76, 68, 73, 82, 86, 77, 13, 10, 32, 32, 32, 32, 97, 105, 32, 114, 48, 44, 62, 48, 56, 48, 48, 32, 32, 32, 32, 32, 59, 32, 116, 104, 101, 32, 79, 82, 39, 100, 32, 109, 97, 115, 107, 32, 100, 111, 101, 115, 110, 39, 116, 32, 109, 97, 116, 116, 101, 114, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 53, 44, 114, 50, 32, 32, 32, 32, 32, 32, 32, 59, 32, 114, 101, 115, 116, 111, 114, 101, 32, 67, 80, 85, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 55, 44, 114, 51, 32, 32, 32, 32, 32, 32, 32, 59, 32, 114, 101, 115, 116, 111, 114, 101, 32, 99, 111, 117, 110, 116, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 76, 68, 73, 82, 86, 77, 13, 10, 32, 32, 32, 32, 97, 105, 32, 114, 48, 44, 62, 48, 56, 48, 48, 32, 32, 32, 32, 32, 59, 32, 116, 104, 101, 32, 79, 82, 39, 100, 32, 109, 97, 115, 107, 32, 100, 111, 101, 115, 110, 39, 116, 32, 109, 97, 116, 116, 101, 114, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 53, 44, 114, 50, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 55, 44, 114, 51, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 52, 44, 114, 49, 49, 32, 32, 32, 32, 32, 32, 59, 32, 102, 111, 114, 32, 116, 97, 105, 108, 32, 114, 101, 99, 117, 114, 115, 105, 111, 110, 13, 10, 32, 32, 32, 32, 106, 109, 112, 32, 76, 68, 73, 82, 86, 77, 13, 10, 13, 10, 59, 32, 68, 105, 115, 97, 98, 108, 101, 32, 115, 99, 114, 101, 101, 110, 32, 98, 121, 32, 115, 101, 116, 116, 105, 110, 103, 32, 86, 68, 80, 32, 114, 101, 103, 105, 115, 116, 101, 114, 32, 49, 32, 116, 111, 32, 62, 97, 50, 13, 10, 68, 73, 83, 83, 67, 82, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 48, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 56, 49, 97, 50, 13, 10, 68, 73, 83, 83, 67, 82, 50, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 86, 68, 80, 87, 65, 68, 82, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 86, 68, 80, 87, 65, 68, 82, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 50, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 49, 13, 10, 13, 10, 59, 32, 101, 110, 97, 98, 108, 101, 32, 115, 99, 114, 101, 101, 110, 32, 98, 121, 32, 115, 101, 116, 116, 105, 110, 103, 32, 86, 68, 80, 32, 114, 101, 103, 105, 115, 116, 101, 114, 32, 49, 32, 116, 111, 32, 62, 69, 50, 13, 10, 69, 78, 65, 83, 67, 82, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 48, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 56, 49, 101, 50, 13, 10, 32, 32, 32, 32, 106, 109, 112, 32, 68, 73, 83, 83, 67, 82, 50, 13, 10, 13, 10, 59, 32, 99, 111, 112, 121, 32, 97, 32, 115, 101, 116, 32, 111, 102, 32, 98, 108, 111, 99, 107, 115, 32, 111, 102, 32, 100, 97, 116, 97, 32, 116, 111, 32, 86, 68, 80, 44, 32, 111, 102, 102, 115, 101, 116, 32, 98, 121, 32, 51, 50, 32, 98, 121, 116, 101, 115, 32, 101, 97, 99, 104, 13, 10, 59, 32, 97, 100, 100, 114, 101, 115, 115, 32, 105, 110, 32, 82, 56, 44, 32, 67, 80, 85, 32, 100, 97, 116, 97, 32, 97, 116, 32, 82, 57, 44, 32, 99, 111, 117, 110, 116, 32, 112, 101, 114, 32, 114, 111, 119, 32, 105, 110, 32, 82, 54, 32, 40, 77, 83, 66, 41, 44, 32, 110, 117, 109, 98, 101, 114, 32, 114, 111, 119, 115, 32, 105, 110, 32, 82, 52, 32, 40, 77, 83, 66, 41, 44, 32, 67, 80, 85, 32, 115, 116, 114, 105, 100, 101, 32, 105, 110, 32, 82, 53, 32, 40, 77, 83, 66, 41, 32, 40, 86, 68, 80, 32, 115, 116, 114, 105, 100, 101, 32, 102, 105, 120, 101, 100, 32, 97, 116, 32, 51, 50, 41, 13, 10, 59, 32, 111, 114, 105, 103, 105, 110, 97, 108, 58, 32, 97, 100, 100, 114, 101, 115, 115, 32, 105, 110, 32, 112, 111, 105, 110, 116, 101, 114, 44, 32, 67, 80, 85, 32, 97, 100, 100, 114, 101, 115, 115, 32, 97, 116, 32, 116, 101, 109, 112, 44, 32, 99, 111, 117, 110, 116, 32, 112, 101, 114, 32, 114, 111, 119, 32, 105, 110, 32, 116, 101, 109, 112, 50, 44, 32, 110, 117, 109, 32, 114, 111, 119, 115, 32, 105, 110, 32, 116, 101, 109, 112, 50, 43, 49, 44, 32, 115, 116, 114, 105, 100, 101, 32, 105, 110, 32, 89, 89, 88, 88, 13, 10, 67, 80, 89, 66, 76, 75, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 49, 44, 114, 55, 32, 32, 32, 32, 32, 32, 59, 32, 115, 97, 118, 101, 32, 114, 101, 116, 117, 114, 110, 13, 10, 32, 32, 32, 32, 115, 114, 108, 32, 114, 54, 44, 56, 13, 10, 32, 32, 32, 32, 115, 114, 108, 32, 114, 52, 44, 56, 13, 10, 32, 32, 32, 32, 115, 114, 108, 32, 114, 53, 44, 56, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 121, 116, 101, 115, 32, 116, 111, 32, 119, 111, 114, 100, 115, 13, 10, 33, 49, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 56, 44, 114, 48, 32, 32, 32, 32, 32, 32, 32, 59, 32, 103, 101, 116, 32, 118, 100, 112, 32, 97, 100, 100, 114, 101, 115, 115, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 57, 44, 114, 50, 32, 32, 32, 32, 32, 32, 32, 59, 32, 103, 101, 116, 32, 99, 112, 117, 32, 97, 100, 100, 114, 101, 115, 115, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 54, 44, 114, 51, 32, 32, 32, 32, 32, 32, 32, 59, 32, 103, 101, 116, 32, 99]);
fileData3.push.apply(fileData3, [111, 117, 110, 116, 13, 10, 33, 50, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 76, 68, 73, 82, 86, 77, 32, 32, 32, 32, 32, 32, 59, 32, 99, 111, 112, 121, 32, 111, 110, 101, 32, 114, 111, 119, 13, 10, 32, 32, 32, 32, 97, 32, 114, 53, 44, 114, 57, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 97, 100, 100, 32, 115, 116, 114, 105, 100, 101, 32, 116, 111, 32, 67, 80, 85, 32, 97, 100, 100, 114, 101, 115, 115, 13, 10, 32, 32, 32, 32, 97, 105, 32, 114, 56, 44, 51, 50, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 97, 100, 100, 32, 51, 50, 32, 116, 111, 32, 86, 68, 80, 13, 10, 32, 32, 32, 32, 100, 101, 99, 32, 114, 52, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 99, 111, 117, 110, 116, 32, 100, 111, 119, 110, 32, 114, 111, 119, 115, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 45, 33, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 108, 111, 111, 112, 32, 116, 105, 108, 108, 32, 100, 111, 110, 101, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 50, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 97, 99, 107, 32, 116, 111, 32, 99, 97, 108, 108, 101, 114, 13, 10, 13, 10, 59, 32, 99, 108, 101, 97, 114, 32, 115, 99, 114, 101, 101, 110, 32, 97, 110, 100, 32, 114, 101, 115, 101, 116, 32, 99, 117, 114, 115, 111, 114, 32, 116, 111, 32, 62, 49, 56, 48, 48, 13, 10, 99, 108, 115, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 49, 44, 114, 52, 32, 32, 32, 32, 32, 32, 59, 32, 115, 97, 118, 101, 32, 114, 101, 116, 117, 114, 110, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 49, 56, 48, 48, 32, 32, 32, 32, 32, 59, 32, 83, 73, 84, 32, 97, 100, 100, 114, 101, 115, 115, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 48, 44, 64, 99, 117, 114, 115, 111, 114, 32, 32, 59, 32, 115, 97, 118, 101, 32, 99, 117, 114, 115, 111, 114, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 50, 44, 62, 50, 48, 48, 48, 32, 32, 32, 32, 32, 59, 32, 98, 121, 116, 101, 32, 116, 111, 32, 119, 114, 105, 116, 101, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 51, 44, 55, 54, 56, 32, 32, 32, 32, 32, 32, 32, 59, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 98, 121, 116, 101, 115, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 105, 110, 116, 115, 32, 111, 102, 102, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 70, 73, 76, 86, 82, 77, 32, 32, 32, 32, 32, 32, 59, 32, 119, 114, 105, 116, 101, 32, 116, 104, 101, 109, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 105, 110, 116, 115, 32, 98, 97, 99, 107, 32, 111, 110, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 52, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 97, 99, 107, 32, 116, 111, 32, 99, 97, 108, 108, 101, 114, 13, 10, 13, 10, 59, 32, 99, 111, 112, 121, 32, 97, 32, 115, 116, 114, 105, 110, 103, 32, 116, 111, 32, 115, 99, 114, 101, 101, 110, 32, 97, 116, 32, 99, 117, 114, 115, 111, 114, 32, 45, 32, 97, 100, 100, 114, 101, 115, 115, 32, 101, 110, 102, 111, 114, 99, 101, 100, 13, 10, 59, 32, 67, 80, 85, 32, 97, 100, 100, 114, 101, 115, 115, 32, 105, 110, 32, 82, 50, 44, 32, 108, 101, 110, 103, 116, 104, 32, 105, 110, 32, 82, 51, 13, 10, 112, 114, 105, 110, 116, 95, 115, 116, 114, 105, 110, 103, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 49, 44, 114, 52, 32, 32, 32, 32, 32, 32, 59, 32, 115, 97, 118, 101, 32, 114, 101, 116, 117, 114, 110, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 64, 99, 117, 114, 115, 111, 114, 44, 114, 48, 32, 32, 59, 32, 103, 101, 116, 32, 99, 117, 114, 115, 111, 114, 32, 112, 111, 115, 13, 10, 32, 32, 32, 32, 97, 110, 100, 105, 32, 114, 48, 44, 62, 48, 55, 102, 102, 32, 32, 32, 59, 32, 101, 110, 102, 111, 114, 99, 101, 32, 112, 111, 115, 105, 116, 105, 111, 110, 32, 45, 32, 112, 114, 101, 116, 116, 121, 32, 108, 97, 114, 103, 101, 32, 114, 97, 110, 103, 101, 32, 116, 104, 111, 117, 103, 104, 63, 32, 56, 48, 32, 99, 111, 108, 117, 109, 110, 32, 115, 117, 112, 112, 111, 114, 116, 32, 109, 97, 121, 98, 101, 63, 13, 10, 32, 32, 32, 32, 97, 105, 32, 114, 48, 44, 62, 49, 56, 48, 48, 32, 32, 32, 32, 32, 59, 32, 97, 100, 100, 32, 105, 115, 32, 115, 97, 102, 101, 114, 32, 116, 104, 97, 110, 32, 79, 82, 44, 32, 97, 110, 100, 32, 119, 101, 32, 104, 97, 118, 101, 32, 116, 104, 97, 116, 32, 111, 112, 116, 105, 111, 110, 13, 10, 32, 32, 32, 32, 97, 32, 114, 51, 44, 64, 99, 117, 114, 115, 111, 114, 32, 32, 32, 32, 59, 32, 97, 100, 100, 32, 116, 104, 101, 32, 99, 111, 117, 110, 116, 32, 116, 111, 32, 99, 117, 114, 115, 111, 114, 32, 40, 109, 105, 103, 104, 116, 32, 97, 115, 32, 119, 101, 108, 108, 32, 100, 111, 32, 105, 116, 32, 110, 111, 119, 33, 41, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 48, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 76, 68, 73, 82, 86, 77, 32, 32, 32, 32, 32, 32, 59, 32, 100, 111, 32, 116, 104, 101, 32, 119, 114, 105, 116, 101, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 50, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 52, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 97, 99, 107, 32, 116, 111, 32, 99, 97, 108, 108, 101, 114, 13, 10, 13, 10, 59, 32, 101, 109, 105, 116, 32, 97, 32, 49, 54, 45, 98, 105, 116, 32, 110, 117, 109, 98, 101, 114, 32, 97, 115, 32, 100, 101, 99, 105, 109, 97, 108, 32, 119, 105, 116, 104, 32, 108, 101, 97, 100, 105, 110, 103, 32, 122, 101, 114, 111, 32, 109, 97, 115, 107, 105, 110, 103, 32, 97, 116, 32, 99, 117, 114, 115, 111, 114, 13, 10, 59, 32, 82, 48, 32, 45, 32, 110, 117, 109, 98, 101, 114, 32, 116, 111, 32, 112, 114, 105, 110, 116, 13, 10, 59, 32, 111, 114, 105, 103, 105, 110, 97, 108, 32, 110, 117, 109, 98, 101, 114, 32, 105, 110, 32, 89, 89, 65, 65, 63, 13, 10, 112, 114, 105, 110, 116, 95, 110, 117, 109, 98, 101, 114, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 115, 32, 111, 102, 102, 32, 115, 111, 32, 119, 101, 32, 99, 97, 110, 32, 104, 111, 108, 100, 32, 116, 104, 101, 32, 86, 68, 80, 32, 97, 100, 100, 114, 101, 115, 115, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 114, 53, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 108, 101, 97, 100, 105, 110, 103, 32, 122, 101, 114, 111, 32, 102, 108, 97, 103, 13, 10, 112, 114, 105, 110, 116, 95, 110, 117, 109, 98, 101, 114, 53, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 44, 49, 48, 48, 48, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 100, 105, 118, 105, 115, 111, 114, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 49, 44, 114, 52, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 112, 114, 105, 110, 116, 95, 100, 105, 103, 105, 116, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 52, 44, 114, 49, 49, 13, 10, 112, 114, 105, 110, 116, 95, 110, 117, 109, 98, 101, 114, 52, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 44, 49, 48, 48, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 100, 105, 118, 105, 115, 111, 114, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 49, 44, 114, 52, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 112, 114, 105, 110, 116, 95, 100, 105, 103, 105, 116, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 52, 44, 114, 49, 49, 13, 10, 112, 114, 105, 110, 116, 95, 110, 117, 109, 98, 101, 114, 51, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 44, 49, 48, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 100, 105, 118, 105, 115, 111, 114, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 49, 44, 114, 52, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 112, 114, 105, 110, 116, 95, 100, 105, 103, 105, 116, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 52, 44, 114, 49, 49, 13, 10, 112, 114, 105, 110, 116, 95, 110, 117, 109, 98, 101, 114, 50, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 44, 49, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 49, 44, 114, 52, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 112, 114, 105, 110, 116, 95, 100, 105, 103, 105, 116, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 52, 44, 114, 49, 49, 13, 10, 112, 114, 105, 110, 116, 95, 110, 117, 109, 98, 101, 114, 49, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 44, 49, 13, 10, 32, 32, 32, 32, 97, 110, 100, 105, 32, 114, 53, 44, 62, 48, 48, 102, 102, 13, 10, 32, 32, 32, 32, 111, 114, 105, 32, 114, 53, 44, 62, 48, 49, 48, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 49, 44, 114, 52, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 112, 114, 105, 110, 116, 95, 100, 105, 103, 105, 116, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 105, 110, 116, 115, 32, 111, 110, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 52, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 97, 99, 107, 32, 116, 111, 32, 99, 97, 108, 108, 101, 114, 13, 10, 13, 10, 112, 114, 105, 110, 116, 95, 100, 105, 103, 105, 116, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 49, 44, 114, 54, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 114, 50, 13, 10, 32, 32, 32, 32, 100, 105, 118, 32, 114, 49, 44, 114, 50, 13, 10, 32, 32, 32, 32, 97, 105, 32, 114, 50, 44, 62, 51, 48, 13, 10, 32, 32, 32, 32, 99, 105, 32, 114, 50, 44, 62, 51, 48, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 33, 51, 13, 10, 32, 32, 32, 32, 99, 105, 32, 114, 53, 44, 62, 48, 49, 48, 48, 13, 10, 32, 32, 32, 32, 106, 104, 101, 32, 33, 52, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 54, 13, 10, 33, 52, 13, 10, 32, 32, 32, 32, 99, 105, 32, 114, 53, 44, 62, 48, 50, 48, 48, 13, 10, 32, 32, 32, 32, 106, 108, 32, 33, 54, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 53, 44, 114, 50, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 112, 114, 105, 110, 116, 95, 99, 104, 97, 114, 50, 13, 10, 33, 54, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 50, 44, 62, 51, 48, 13, 10, 33, 51, 13, 10, 32, 32, 32, 32, 97, 110, 100, 105, 32, 114, 53, 44, 62, 48, 48, 102, 102, 13, 10, 32, 32, 32, 32, 111, 114, 105, 32, 114, 53, 44, 62, 48, 49, 48, 48, 13, 10, 112, 114, 105, 110, 116, 95, 99, 104, 97, 114, 50, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 64, 99, 117, 114, 115, 111, 114, 44, 114, 48, 32, 32, 32, 32, 32, 32, 59, 32, 103, 101, 116, 32, 99, 117, 114, 115, 111, 114, 13, 10, 32, 32, 32, 32, 97, 110, 100, 105, 32, 114, 48, 44, 62, 48, 55, 102, 102, 32, 32, 32, 32, 32, 32, 32, 59, 32, 101, 110, 102, 111, 114, 99, 101, 32, 112, 111, 115, 105, 116, 105, 111, 110, 32, 45, 32, 108, 97, 114, 103, 101, 32, 114, 97, 110, 103, 101, 32, 102, 111, 114, 32, 116, 119, 111, 32, 115, 99, 114, 101, 101, 110, 32, 112, 97, 103, 101, 115, 13, 10, 32, 32, 32, 32, 97, 105, 32, 114, 48, 44, 62, 49, 56, 48, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 97, 100, 100, 32, 105, 115, 32, 115, 97, 102, 101, 114, 32, 116, 104, 97, 110, 32, 79, 82, 44, 32, 97, 110, 100, 32, 119, 101, 32, 104, 97, 118, 101, 32, 116, 104, 97, 116, 32, 111, 112, 116, 105, 111, 110, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 83, 69, 84, 87, 82, 84, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 101, 116, 32, 119, 114, 105, 116, 101, 32, 97, 100, 100, 114, 101, 115, 115, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 50, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 50, 44, 64, 86, 68, 80, 87, 68, 65, 84, 65, 13, 10, 32, 32, 32, 32, 105, 110, 99, 32, 64, 99, 117, 114, 115, 111, 114, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 116, 114, 97, 99, 107, 32, 105, 116, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 54, 13, 10, 112, 114, 105, 110, 116, 95, 99, 104, 97, 114, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 49, 44, 114, 54, 13, 10, 32, 32, 32, 32, 98, 32, 64, 112, 114, 105, 110, 116, 95, 99, 104, 97, 114, 50, 13, 10, 13, 10, 59, 32, 76, 111, 97, 100, 32, 115, 112, 114, 105, 116, 101, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 115, 58, 32, 83, 112, 114, 105, 116, 101, 32, 110, 117, 109, 98, 101, 114, 32, 105, 110, 32, 82, 52, 44, 32, 67, 80, 85, 32, 100, 97, 116, 97, 32, 105, 110, 32, 82, 48, 44, 32, 99, 111, 117, 110, 116, 32, 111, 102, 32, 115, 112, 114, 105, 116, 101, 115, 32, 105, 110, 32, 82, 53, 32, 40, 77, 83, 66, 41, 13, 10, 59, 32, 79, 114, 105, 103, 105, 110, 97, 108, 58, 32, 112, 111, 105, 110, 116, 101, 114, 32, 61, 32, 115, 112, 114, 105, 116, 101, 32, 110, 117, 109, 98, 101, 114, 44, 32, 116, 101, 109, 112, 32, 61, 32, 67, 80, 85, 32, 97, 100, 100, 114, 101, 115, 115, 44, 32, 97, 32, 61, 32, 110, 117, 109, 98, 101, 114, 32, 115, 112, 114, 105, 116, 101, 115, 13, 10, 59, 32, 78, 111, 116, 101, 58, 32, 115, 112, 114, 105, 116, 101, 115, 32, 97, 114, 101, 32, 97, 108, 108, 32, 101, 120, 112, 101, 99, 116, 101, 100, 32, 116, 111, 32, 98, 101, 32, 100, 111, 117, 98, 108, 101, 45, 115, 105, 122, 101, 32, 49, 54, 120, 49, 54, 44, 32, 51, 50, 32, 98, 121, 116, 101, 115, 32, 101, 97, 99, 104, 44, 32, 115, 111, 32, 115, 112, 114, 105, 116, 101, 32, 99, 104, 97, 114, 32, 49, 32, 105, 115, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 32, 52, 13, 10, 59, 32, 83, 112, 114, 105, 116, 101, 32, 112, 97, 116, 116, 101, 114, 110, 32, 116, 97, 98, 108, 101, 32, 97, 116, 32, 62, 51, 56, 48, 48, 13, 10, 100, 101, 102, 105, 110, 101, 95, 115, 112, 114, 105, 116, 101, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 49, 44, 114, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 97, 118, 101, 32, 114, 101, 116, 117, 114, 110, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 48, 44, 114, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 83, 111, 117, 114, 99, 101, 32, 100, 97, 116, 97, 46, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 52, 44, 114, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 86, 82, 65, 77, 32, 116, 97, 114, 103, 101, 116, 46, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 48, 44, 53, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 112, 114, 105, 116, 101, 32, 110, 117, 109, 98, 101, 114, 32, 116, 105, 109, 101, 115, 32, 51, 50, 32, 102, 111, 114, 32, 98, 121, 116, 101, 115, 13, 10, 32, 32, 32, 32, 97, 105, 32, 114, 48, 44, 62, 51, 56, 48, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 97, 100, 100, 32, 86, 68, 80, 32, 98, 97, 115, 101, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 53, 44, 114, 51, 9, 9, 59, 32, 76, 101, 110, 103, 116, 104, 46, 13, 10, 32, 32, 32, 32, 115, 114, 108, 32, 114, 51, 44, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 109, 97, 107, 101, 32, 105, 110, 116, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 51, 44, 53, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 99, 111, 117, 110, 116, 32, 116, 105, 109, 101, 115, 32, 51, 50, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 105, 110, 116, 115, 32, 111, 102, 102, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 76, 68, 73, 82, 86, 77, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 100, 111, 32, 116, 104, 101, 32, 99, 111, 112, 121, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 105, 110, 116, 115, 32, 111, 110, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 97, 99, 107, 32, 116, 111, 32, 99, 97, 108, 108, 101, 114, 13, 10, 13, 10, 59, 32, 76, 111, 97, 100, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 115, 58, 32, 67, 104, 97, 114, 32, 110, 117, 109, 98, 101, 114, 32, 105, 110, 32, 82, 49, 44, 32, 67, 80, 85, 32, 100, 97, 116, 97, 32, 105, 110, 32, 82, 50, 44, 32, 99, 111, 117, 110, 116, 32, 105, 110, 32, 82, 51, 32, 40, 77, 83, 66, 41, 13, 10, 59, 32, 79, 114, 105, 103, 105, 110, 97, 108, 58, 32, 112, 111, 105, 110, 116, 101, 114, 32, 61, 32, 99, 104, 97, 114, 32, 110, 117, 109, 98, 101, 114, 44, 32, 116, 101, 109, 112, 32, 61, 32, 67, 80, 85, 32, 97, 100, 100, 114, 101, 115, 115, 44, 32, 97, 32, 61, 32, 110, 117, 109, 98, 101, 114, 32, 99, 104, 97, 114, 115, 13, 10, 59, 32, 78, 111, 116, 101, 32, 116, 104, 105, 115, 32, 108, 111, 97, 100, 115, 32, 116, 104, 101, 32, 112, 97, 116, 116, 101, 114, 110, 32, 116, 104, 114, 101, 101, 32, 116, 105, 109, 101, 115, 32, 105, 102, 32, 105, 110, 32, 98, 105, 116, 109, 97, 112, 32, 109, 111, 100, 101, 32, 40, 77, 79, 68, 69, 38, 48, 120, 48, 52, 41, 13, 10, 59, 32, 80, 97, 116, 116, 101, 114, 110, 32, 116, 97, 98, 108, 101, 32, 97, 116, 32, 62, 48, 48, 48, 48, 13, 10, 100, 101, 102, 105, 110, 101, 95, 99, 104, 97, 114, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 49, 44, 114, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 97, 118, 101, 32, 114, 101, 116, 117, 114, 110, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 48, 44, 114, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 111, 117, 114, 99, 101, 32, 100, 97, 116, 97, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 52, 44, 114, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 109, 111, 118, 101, 32, 105, 110, 112, 117, 116, 32, 116, 111, 32, 115, 99, 114, 97, 116, 99, 104, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 48, 44, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 99, 104, 97, 114, 32, 110, 117, 109, 98, 101, 114, 32, 116, 105, 109, 101, 115, 32, 56, 32, 40, 86, 68, 80, 32, 98, 97, 115, 101, 32, 105, 115, 32, 48, 44, 32, 115, 111, 32, 97, 108, 114, 101, 97, 100, 121, 32, 116, 104, 101, 114, 101, 41, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 53, 44, 114, 51, 13, 10, 32, 32, 32, 32, 115, 114, 108, 32, 114, 51, 44, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 109, 97, 107, 101, 32, 119, 111, 114, 100, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 51, 44, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 99, 111, 117, 110, 116, 32, 116, 105, 109, 101, 115, 32, 56, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 109, 111, 100, 101, 44, 114, 53, 32, 32, 32, 32, 32, 32, 32, 59, 32, 103, 101, 116, 32, 109, 111, 100, 101, 32, 102, 108, 97, 103, 115, 13, 10, 32, 32, 32, 32, 97, 110, 100, 105, 32, 114, 53, 44, 62, 48, 56, 48, 48, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 33, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 110, 111, 116, 32, 105, 110, 32, 98, 105, 116, 109, 97, 112, 32, 109, 111, 100, 101, 44, 32, 100, 111, 32, 97, 32, 115, 105, 110, 103, 108, 101, 32, 99, 111, 112, 121, 13, 10, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 105, 110, 116, 115, 32, 111, 102, 102, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 76, 68, 73, 82, 86, 77, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 100, 111, 32, 116, 104, 101, 32, 116, 114, 105, 112, 108, 101, 32, 99, 111, 112, 121, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 105, 110, 116, 115, 32, 111, 110, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 97, 99, 107, 32, 116, 111, 32, 99, 97, 108, 108, 101, 114, 13, 10, 13, 10, 33, 49, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 105, 110, 116, 115, 32, 111, 102, 102, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 76, 68, 73, 82, 86, 77, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 100, 111, 32, 116, 104, 101, 32, 115, 105, 110, 103, 108, 101, 32, 99, 111, 112, 121, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 105, 110, 116, 115, 32, 111, 110, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 97, 99, 107, 32, 116, 111, 32, 99, 97, 108, 108, 101, 114, 13, 10, 13, 10, 59, 32, 76, 111, 97, 100, 32, 98, 105, 116, 109, 97, 112, 32, 99, 111, 108, 111, 114, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 115, 58, 32, 67, 104, 97, 114, 32, 110, 117, 109, 98, 101, 114, 32, 105, 110, 32, 82, 49, 44, 32, 67, 80, 85, 32, 100, 97, 116, 97, 32, 105, 110, 32, 82, 50, 44, 32, 99, 111, 117, 110, 116, 32, 105, 110, 32, 82, 51, 32, 40, 77, 83, 66, 41, 13, 10, 59, 32, 79, 114, 105, 103, 105, 110, 97, 108, 58, 32, 112, 111, 105, 110, 116, 101, 114, 32, 61, 32, 99, 104, 97, 114, 32, 110, 117, 109, 98, 101, 114, 44, 32, 116, 101, 109, 112, 32, 61, 32, 67, 80, 85, 32, 97, 100, 100, 114, 101, 115, 115, 44, 32, 97, 32, 61, 32, 110, 117, 109, 98, 101, 114, 32, 99, 104, 97, 114, 115, 13, 10, 59, 32, 78, 111, 116, 101, 58, 32, 97, 108, 119, 97, 121, 115, 32, 100, 111, 101, 115, 32, 116, 104, 101, 32, 116, 114, 105, 112, 108, 101, 32, 99, 111, 112, 121, 46, 32, 67, 111, 108, 111, 114, 32, 116, 97, 98, 108, 101, 32, 97, 116, 32, 62, 50, 48, 48, 48, 13, 10, 100, 101, 102, 105, 110, 101, 95, 99, 111, 108, 111, 114, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 49, 44, 114, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 97, 118, 101, 32, 114, 101, 116, 117, 114, 110, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 48, 44, 114, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 111, 117, 114, 99, 101, 32, 100, 97, 116, 97, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 52, 44, 114, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 109, 111, 118, 101, 32, 105, 110, 112, 117, 116, 32, 116, 111, 32, 115, 99, 114, 97, 116, 99, 104, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 48, 44, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 99, 104, 97, 114, 32, 110, 117, 109, 98, 101, 114, 32, 116, 105, 109, 101, 115, 32, 56, 13, 10, 32, 32, 32, 32, 97, 105, 32, 114, 48, 44, 62, 50, 48, 48, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 97, 100, 100, 32, 98, 97, 115, 101, 32, 97, 100, 100, 114, 101, 115, 115, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 53, 44, 114, 51, 13, 10, 32, 32, 32, 32, 115, 114, 108, 32, 114, 51, 44, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 109, 97, 107, 101, 32, 119, 111, 114, 100, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 51, 44, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 99, 111, 117, 110, 116, 32, 116, 105, 109, 101, 115, 32, 56, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 105, 110, 116, 115, 32, 111, 102, 102, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 76, 68, 73, 82, 86, 77, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 100, 111, 32, 116, 104, 101, 32, 116, 114, 105, 112, 108, 101, 32, 99, 111, 112, 121, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 105, 110, 116, 115, 32, 111, 110, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 97, 99, 107, 32, 116, 111, 32, 99, 97, 108, 108, 101, 114, 13, 10, 13, 10, 59, 32, 85, 112, 100, 97, 116, 101, 32, 115, 112, 114, 105, 116, 101, 32, 101, 110, 116, 114, 121, 32, 45, 32, 99, 111, 112, 121, 32, 100, 97, 116, 97, 32, 40, 52, 32, 98, 121, 116, 101, 115, 41, 32, 116, 111, 32, 115, 112, 114, 105, 116, 101, 32, 116, 97, 98, 108, 101, 32, 109, 105, 114, 114, 111, 114, 32, 97, 116, 32, 115, 112, 114, 105, 116, 101, 115, 13, 10, 59, 32, 82, 52, 32, 61, 32, 115, 112, 114, 105, 116, 101, 32, 110, 117, 109, 98, 101, 114, 44, 32, 82, 53, 32, 61, 32, 98, 121, 116, 101, 32, 49, 44, 32, 114, 54, 32, 61, 32, 98, 121, 116, 101, 32, 50, 44, 32, 114, 55, 32, 61, 32, 98, 121, 116, 101, 32, 51, 44, 32, 114, 48, 32, 61, 32, 98, 121, 116, 101, 32, 52, 32, 40, 97, 108, 108, 32, 77, 83, 66, 41, 13, 10, 59, 32, 79, 114, 105, 103, 105, 110, 97, 108, 58, 32, 65, 32, 61, 32, 115, 112, 114, 105, 116, 101, 32, 110, 117, 109, 98, 101, 114, 44, 32, 115, 111, 117, 114, 99, 101, 32, 100, 97, 116, 97, 32, 97, 116, 32, 115, 112, 114, 105, 116, 101, 95, 100, 97, 116, 97, 13, 10, 117, 112, 100, 97, 116, 101, 95, 115, 112, 114, 105, 116, 101, 13, 10, 32, 32, 32, 32, 115, 114, 108, 32, 114, 52, 44, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 109, 97, 107, 101, 32, 119, 111, 114, 100, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 52, 44, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 120, 52, 32, 102, 111, 114, 32, 97, 100, 100, 114, 101, 115, 115, 13, 10, 32, 32, 32, 32, 97, 105, 32, 114, 52, 44, 115, 112, 114, 105, 116, 101, 115, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 112, 114, 105, 116, 101, 32, 109, 105, 114, 114, 111, 114, 32, 97, 100, 100, 114, 101, 115, 115, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 53, 44, 42, 114, 52, 43, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 109, 111, 118, 101, 32, 98, 121, 116, 101, 115, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 54, 44, 42, 114, 52, 43, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 109, 111, 118, 101, 32, 98, 121, 116, 101, 115, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 55, 44, 42, 114, 52, 43, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 109, 111, 118, 101, 32, 98, 121, 116, 101, 115, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 42, 114, 52, 43, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 109, 111, 118, 101, 32, 98, 121, 116, 101, 115, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 49, 13, 10, 13, 10, 59, 32, 83, 71, 78, 32, 82, 48, 32, 45, 32, 114, 101, 116, 117, 114, 110, 32, 49, 44, 32, 45, 49, 32, 111, 114, 32, 48, 32, 97, 115, 32, 49, 54, 32, 98, 105, 116, 13, 10, 95, 115, 103, 110, 49, 54, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 48, 44, 114, 48, 32, 32, 32, 32, 32, 32, 32, 59, 32, 99, 104, 101, 99, 107, 32, 102, 111, 114, 32, 122, 101, 114, 111, 13, 10, 32, 32, 32, 32, 106, 101, 113, 32, 33, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 105, 102, 32, 121, 101, 115, 44, 32, 119, 101, 39, 114, 101, 32, 100, 111, 110, 101, 13, 10, 32, 32, 32, 32, 97, 110, 100, 105, 32, 114, 48, 44, 62, 56, 48, 48, 48, 32, 32, 32, 59, 32, 99, 104, 101, 99, 107, 32, 102, 111, 114, 32, 110, 101, 103, 97, 116, 105, 118, 101, 13, 10, 32, 32, 32, 32, 106, 101, 113, 32, 33, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 119, 97, 115, 32, 110, 111, 116, 13, 10, 32, 32, 32, 32, 115, 101, 116, 111, 32, 114, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 119, 97, 115, 32, 110, 101, 103, 97, 116, 105, 118, 101, 44, 32, 109, 97, 107, 101, 32, 105, 116, 32, 45, 49, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 97, 99, 107, 32, 116, 111, 32, 99, 97, 108, 108, 101, 114, 13, 10, 33, 50, 13, 10, 32, 32, 32, 32, 105, 110, 99, 32, 114, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 119, 101, 32, 107, 110, 111, 119, 32, 105, 116, 32, 119, 97, 115, 32, 122, 101, 114, 111, 44, 32, 97, 110, 100, 32, 119, 101, 32, 119, 97, 110, 116, 32, 49, 13, 10, 33, 49, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 97, 99, 107, 32, 116, 111, 32, 99, 97, 108, 108, 101, 114, 13, 10, 13, 10, 59, 32, 49, 54, 45, 98, 105, 116, 32, 115, 105, 103, 110, 101, 100, 32, 109, 111, 100, 117, 108, 111, 46, 32, 82, 49, 32, 37, 32, 82, 50, 32, 61, 32, 82, 48, 32, 45, 32, 57, 57, 48, 48, 32, 100, 111, 101, 115, 110, 39, 116, 32, 100, 111, 32, 115, 105, 103, 110, 101, 100, 32, 100, 105, 118, 105, 100, 101, 13, 10, 59, 32, 111, 114, 105, 103, 105, 110, 97, 108, 32, 119, 97, 115, 32, 115, 116, 97, 99, 107, 37, 115, 116, 97, 99, 107, 61, 89, 89, 65, 65, 13, 10, 59, 32, 82, 101, 109, 97, 105, 110, 100, 101, 114, 32, 105, 115, 32, 110, 101, 103, 97, 116, 105, 118, 101, 32, 105, 102, 32, 116, 104, 101, 32, 100, 105, 118, 105, 100, 101, 110, 100, 32, 119, 97, 115, 32, 110, 101, 103, 97, 116, 105, 118, 101, 13, 10, 95, 109, 111, 100, 49, 54, 115, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 114, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 109, 97, 107, 101, 32, 100, 105, 118, 105, 100, 101, 110, 100, 32, 51, 50, 45, 98, 105, 116, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 50, 44, 114, 50, 32, 32, 32, 32, 32, 32, 32, 59, 32, 99, 104, 101, 99, 107, 32, 100, 105, 118, 105, 115, 111, 114, 32, 102, 111, 114, 32, 122, 101, 114, 111, 13, 10, 32, 32, 32, 32, 106, 101, 113, 32, 33, 49, 13, 10, 32, 32, 32, 32, 97, 98, 115, 32, 114, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 109, 97, 107, 101, 32, 115, 117, 114, 101, 32, 100, 105, 118, 105, 115, 111, 114, 32, 105, 115, 32, 112, 111, 115, 105, 116, 105, 118, 101, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 44, 114, 49, 32, 32, 32, 32, 32, 32, 32, 59, 32, 99, 104, 101, 99, 107, 32, 115, 105, 103, 110, 32, 111, 102, 32, 100, 105, 118, 105, 100, 101, 110, 100, 13, 10, 32, 32, 32, 32, 106, 103, 116, 32, 33, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 103, 111, 32, 100, 111, 32, 116, 104, 101, 32, 102, 97, 115, 116, 101, 114, 32, 112, 111, 115, 105, 116, 105, 118, 101, 32, 118, 101, 114, 115, 105, 111, 110, 13, 10, 13, 10, 32, 32, 32, 32, 97, 98, 115, 32, 114, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 119, 97, 115, 32, 110, 101, 103, 97, 116, 105, 118, 101, 44, 32, 109, 97, 107, 101, 32, 105, 116, 32, 112, 111, 115, 105, 116, 105, 118, 101, 13, 10, 32, 32, 32, 32, 100, 105, 118, 32, 114, 50, 44, 114, 48, 32, 32, 32, 32, 32, 32, 32, 59, 32, 100, 111, 32, 116, 104, 101, 32, 100, 105, 118, 105, 115, 105, 111, 110, 32, 61, 62, 32, 114, 50, 61, 113, 117, 111, 116, 105, 101, 110, 116, 44, 32, 114, 51, 61, 114, 101, 109, 97, 105, 110, 100, 101, 114, 13, 10, 32, 32, 32, 32, 110, 101, 103, 32, 114, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 109, 97, 107, 101, 32, 114, 101, 109, 97, 105, 110, 100, 101, 114, 32, 110, 101, 103, 97, 116, 105, 118, 101, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 44, 114, 48, 32, 32, 32, 32, 32, 32, 32, 59, 32, 105, 110, 116, 111, 32, 114, 48, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 49, 13, 10, 13, 10, 33, 50, 13, 10, 32, 32, 32, 32, 100, 105, 118, 32, 114, 50, 44, 114, 48, 32, 32, 32, 32, 32, 32, 32, 59, 32, 100, 111, 32, 116, 104, 101, 32, 100, 105, 118, 105, 115, 105, 111, 110, 32, 61, 62, 32, 114, 50, 61, 113, 117, 111, 116, 105, 101, 110, 116, 44, 32, 114, 51, 61, 114, 101, 109, 97, 105, 110, 100, 101, 114, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 44, 114, 48, 32, 32, 32, 32, 32, 32, 32, 59, 32, 105, 110, 116, 111, 32, 114, 48, 13, 10, 33, 49, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 49, 13, 10, 13, 10, 59, 32, 49, 54, 45, 98, 105, 116, 32, 115, 105, 103, 110, 101, 100, 32, 100, 105, 118, 105, 100, 101, 46, 32, 82, 49, 32, 47, 32, 82, 50, 32, 61, 32, 82, 48, 32, 45, 32, 57, 57, 48, 48, 32, 100, 111, 101, 115, 110, 39, 116, 32, 100, 111, 32, 115, 105, 103, 110, 101, 100, 32, 100, 105, 118, 105, 100, 101, 13, 10, 59, 32, 111, 114, 105, 103, 105, 110, 97, 108, 32, 119, 97, 115, 32, 115, 116, 97, 99, 107, 47, 115, 116, 97, 99, 107, 61, 89, 89, 65, 65, 13, 10, 59, 32, 82, 101, 109, 97, 105, 110, 100, 101, 114, 32, 105, 115, 32, 110, 101, 103, 97, 116, 105, 118, 101, 32, 105, 102, 32, 116, 104, 101, 32, 115, 105, 103, 110, 115, 32, 100, 105, 102, 102, 101, 114, 13, 10, 95, 100, 105, 118, 49, 54, 115, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 114, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 109, 97, 107, 101, 32, 100, 105, 118, 105, 100, 101, 110, 100, 32, 51, 50, 45, 98, 105, 116, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 50, 44, 114, 51, 32, 32, 32, 32, 32, 32, 32, 59, 32, 99, 104, 101, 99, 107, 32, 100, 105, 118, 105, 115, 111, 114, 32, 102, 111, 114, 32, 122, 101, 114, 111, 13, 10, 32, 32, 32, 32, 106, 101, 113, 32, 33, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 13, 10, 32, 32, 32, 32, 120, 111, 114, 32, 114, 49, 44, 114, 51, 13, 10, 32, 32, 32, 32, 97, 98, 115, 32, 114, 50, 13, 10, 32, 32, 32, 32, 97, 98, 115, 32, 114, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 109, 105, 103, 104, 116, 32, 97, 115, 32, 119, 101, 108, 108, 32, 109, 97, 107, 101, 32, 116, 104, 101, 109, 32, 112, 111, 115, 105, 116, 105, 118, 101, 32, 110, 111, 119, 32, 116, 104, 97, 116, 32, 119, 101, 32, 104, 97, 118, 101, 32, 99, 111, 112, 105, 101, 115, 13, 10, 32, 32, 32, 32, 100, 105, 118, 32, 114, 50, 44, 114, 48, 32, 32, 32, 32, 32, 32, 32, 59, 32, 100, 111, 32, 116, 104, 101, 32, 100, 105, 118, 105, 100, 101, 32, 61, 62, 32, 114, 48, 61, 113, 117, 111, 116, 105, 101, 110, 116, 44, 32, 114, 49, 61, 114, 101, 109, 97, 105, 110, 100, 101, 114, 13, 10, 32, 32, 32, 32, 97, 110, 100, 105, 32, 114, 51, 44, 62, 56, 48, 48, 48, 32, 32, 32, 59, 32, 109, 97, 115, 107, 32, 111, 117, 116, 32, 115, 105, 103, 110, 32, 98, 105, 116, 13, 10, 32, 32, 32, 32, 106, 101, 113, 32, 33, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 107, 105, 112, 32, 97, 104, 101, 97, 100, 32, 116, 111, 32, 112, 111, 115, 105, 116, 105, 118, 101, 32, 118, 101, 114, 115, 105, 111, 110, 13, 10, 13, 10, 32, 32, 32, 32, 110, 101, 103, 32, 114, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 110, 101, 103, 97, 116, 101, 32, 116, 104, 101, 32, 114, 101, 115, 117, 108, 116, 13, 10, 33, 49, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 49, 13, 10, 13, 10, 59, 32, 82, 97, 110, 100, 111, 109, 32, 110, 117, 109, 98, 101, 114, 32, 103, 101, 110, 101, 114, 97, 116, 111, 114, 32, 45, 32, 114, 101, 116, 117, 114, 110, 32, 105, 110, 32, 82, 48, 44, 32, 40, 99, 111, 109, 112, 108, 101, 120, 32, 111, 110, 101, 32, 117, 115, 101, 115, 32, 82, 51, 44, 82, 52, 44, 32, 115, 105, 109, 112, 108, 101, 114, 32, 111, 110, 101, 32, 111, 110, 108, 121, 32, 82, 48, 41, 13, 10, 59, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 111, 117, 116, 112, 117, 116, 32, 105, 110, 116, 111, 32, 89, 89, 65, 65, 13, 10, 114, 97, 110, 100, 111, 109, 13, 10, 32, 32, 32, 32, 46, 105, 102, 110, 101, 32, 79, 76, 68, 95, 82, 78, 68, 13, 10, 59, 32, 84, 79, 68, 79, 58, 32, 78, 111, 116, 32, 49, 48, 48, 37, 32, 115, 117, 114, 101, 32, 73, 32, 112, 111, 114, 116, 101, 100, 32, 116, 104, 105, 115, 32, 111, 110, 101, 32, 114, 105, 103, 104, 116, 46, 46, 46, 32, 112, 114, 111, 98, 97, 98, 108, 121, 32, 99, 111, 117, 108, 100, 32, 98, 101, 32, 115, 105, 109, 112, 108, 101, 114, 32, 119, 105, 116, 104, 32, 49, 54, 45, 98, 105, 116, 32, 109, 97, 110, 105, 112, 115, 46, 46, 46, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 64, 108, 102, 115, 114, 44, 114, 48, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 102, 101, 116, 99, 104, 32, 99, 117, 114, 114, 101, 110, 116, 32, 115, 116, 97, 116, 101, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 33, 48, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 55, 56, 49, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 114, 101, 115, 101, 116, 32, 118, 97, 108, 117, 101, 32, 105, 102, 32, 122, 101, 114, 111, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 48, 44, 64, 108, 102, 115, 114, 13, 10, 33, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 108, 102, 115, 114, 43, 49, 44, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 109, 121, 119, 112, 44, 64, 109, 121, 119, 112, 43, 49, 32, 32, 59, 32, 116, 114, 105, 99, 107, 44, 32, 99, 111, 112, 121, 32, 109, 115, 98, 32, 116, 111, 32, 108, 115, 98, 32, 40, 115, 111, 32, 116, 104, 101, 32, 49, 54, 45, 98, 105, 116, 32, 114, 111, 116, 97, 116, 101, 32, 119, 111, 114, 107, 115, 41, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 48, 44, 114, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 119, 101, 32, 117, 115, 101, 32, 116, 104, 105, 115, 32, 97, 103, 97, 105, 110, 13, 10, 32, 32, 32, 32, 115, 114, 99, 32, 114, 48, 44, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 99, 105, 114, 99, 117, 108, 97, 114, 32, 114, 111, 116, 97, 116, 101, 32, 116, 119, 105, 99, 101, 32, 40, 114, 111, 116, 97, 116, 101, 115, 32, 100, 105, 114, 101, 99, 116, 108, 121, 32, 108, 105, 107, 101, 32, 122, 56, 48, 41, 13, 10, 32, 32, 32, 32, 120, 111, 114, 32, 64, 108, 102, 115, 114, 43, 49, 44, 114, 48, 32, 32, 32, 32, 32, 32, 59, 32, 98, 101, 99, 97, 117, 115, 101, 32, 111, 102, 32, 49, 54, 32, 98, 105, 116, 32, 97, 100, 100, 114, 101, 115, 115, 105, 110, 103, 44, 32, 111, 110, 108, 121, 32, 116, 104, 101, 32, 76, 83, 66, 32, 105, 115, 32, 99, 111, 114, 114, 101, 99, 116, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 109, 121, 119, 112, 43, 49, 44, 64, 109, 121, 119, 112, 32, 32, 59, 32, 102, 105, 120, 32, 117, 112, 32, 45, 32, 99, 111, 112, 121, 32, 76, 83, 66, 32, 116, 111, 32, 77, 83, 66, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 48, 44, 114, 52, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 97, 118, 101, 32, 105, 116, 32, 40, 116, 101, 109, 112, 41, 13, 10, 32, 32, 32, 32, 115, 114, 99, 32, 114, 51, 44, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 114, 111, 116, 97, 116, 101, 32, 116, 104, 101, 32, 115, 101, 99, 111, 110, 100, 32, 114, 101, 97, 100, 32, 111, 110, 99, 101, 13, 10, 32, 32, 32, 32, 120, 111, 114, 32, 114, 51, 44, 114, 52, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 120, 111, 114, 32, 105, 110, 116, 111, 32, 116, 104, 101, 32, 116, 101, 109, 112, 32, 99, 111, 112, 121, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 108, 102, 115, 114, 44, 114, 48, 32, 32, 32, 32, 32, 32, 32, 59, 32, 103, 101, 116, 32, 116, 104, 101, 32, 108, 115, 98, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 48, 44, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 106, 117, 115, 116, 32, 97, 32, 115, 116, 114, 97, 105, 103, 104, 116, 32, 115, 104, 105, 102, 116, 13, 10, 32, 32, 32, 32, 120, 111, 114, 32, 114, 52, 44, 114, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 120, 111, 114, 32, 116, 104, 101, 32, 116, 101, 109, 112, 32, 99, 111, 112, 121, 32, 105, 110, 32, 40, 98, 111, 116, 104, 32, 98, 121, 116, 101, 115, 32, 111, 102, 32, 114, 52, 32, 119, 101, 114, 101, 32, 118, 97, 108, 105, 100, 41, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 64, 108, 102, 115, 114, 44, 114, 52, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 103, 101, 116, 32, 119, 111, 114, 100, 32, 102, 111, 114, 32, 115, 104, 105, 102, 116, 105, 110, 103, 13, 10, 32, 32, 32, 32, 115, 114, 108, 32, 114, 52, 44, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 104, 105, 102, 116, 32, 111, 110, 99, 101, 13, 10, 32, 32, 32, 32, 115, 111, 99, 98, 32, 114, 48, 44, 114, 52, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 109, 101, 114, 103, 101, 32, 105, 110, 32, 116, 104, 101, 32, 109, 115, 98, 32, 119, 101, 32, 106, 117, 115, 116, 32, 103, 101, 110, 101, 114, 97, 116, 101, 100, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 52, 44, 64, 108, 102, 115, 114, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 119, 114, 105, 116, 101, 32, 105, 116, 32, 98, 97, 99, 107, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 52, 44, 114, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 102, 111, 114, 32, 114, 101, 116, 117, 114, 110, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 49, 13, 10, 32, 32, 32, 32, 46, 101, 108, 115, 101, 13, 10, 59, 32, 115, 105, 109, 112, 108, 101, 114, 32, 111, 110, 101, 32, 102, 114, 111, 109, 32, 100, 114, 101, 97, 109, 99, 97, 115, 116, 32, 100, 97, 121, 115, 46, 46, 46, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 64, 108, 102, 115, 114, 44, 114, 48, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 103, 101, 116, 32, 115, 101, 101, 100, 13, 10, 32, 32, 32, 32, 115, 114, 108, 32, 114, 48, 44, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 104, 105, 102, 116, 13, 10, 32, 32, 32, 32, 106, 110, 99, 32, 46, 114, 97, 110, 100, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 106, 117, 109, 112, 32, 105, 102, 32, 110, 111, 32, 49, 13, 10, 32, 32, 32, 32, 120, 111, 114, 32, 64, 114, 109, 97, 115, 107, 44, 114, 48, 32, 32, 32, 32, 32, 32, 32, 59, 32, 120, 111, 114, 32, 110, 101, 119, 32, 98, 105, 116, 115, 13, 10, 46, 114, 97, 110, 100, 49, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 48, 44, 64, 108, 102, 115, 114, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 97, 118, 101, 32, 116, 104, 101, 32, 111, 117, 116, 112, 117, 116, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 49, 13, 10, 114, 109, 97, 115, 107, 13, 10, 32, 32, 32, 32, 100, 97, 116, 97, 32, 62, 98, 52, 48, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 109, 97, 115, 107, 32, 102, 111, 114, 32, 49, 54, 32, 98, 105, 116, 13, 10, 32, 32, 32, 32, 46, 101, 110, 100, 105, 102, 32, 32, 32, 32, 13, 10, 13, 10, 59, 32, 83, 101, 116, 32, 83, 78, 32, 70, 114, 101, 113, 117, 101, 110, 99, 121, 58, 32, 82, 48, 61, 102, 114, 101, 113, 101, 110, 99, 121, 32, 99, 111, 100, 101, 44, 32, 82, 50, 61, 99, 104, 97, 110, 110, 101, 108, 32, 99, 111, 109, 109, 97, 110, 100, 32, 40, 77, 83, 66, 41, 13, 10, 59, 32, 79, 114, 105, 103, 105, 110, 97, 108, 58, 32, 65, 61, 108, 101, 97, 115, 116, 32, 115, 105, 103, 110, 105, 102, 105, 99, 97, 110, 116, 32, 98, 121, 116, 101, 32, 32, 88, 61, 99, 104, 97, 110, 110, 101, 108, 32, 99, 111, 109, 109, 97, 110, 100, 32, 32, 89, 61, 109, 111, 115, 116, 32, 115, 105, 103, 110, 105, 102, 105, 99, 97, 110, 116, 32, 98, 121, 116, 101, 13, 10, 115, 110, 55, 54, 52, 56, 57, 95, 102, 114, 101, 113, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 48, 44, 114, 51, 13, 10, 32, 32, 32, 32, 97, 110, 100, 105, 32, 114, 51, 44, 62, 48, 48, 48, 102, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 51, 13, 10, 32, 32, 32, 32, 115, 111, 99, 98, 32, 114, 51, 44, 114, 50, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 50, 44, 64, 83, 79, 85, 78, 68, 32, 32, 59, 32, 99, 109, 100, 32, 97, 110, 100, 32, 108, 101, 97, 115, 116, 32, 115, 105, 103, 110, 105, 102, 105, 99, 97, 110, 116, 32, 110, 105, 98, 98, 108, 101, 13, 10, 32, 32, 32, 32, 115, 114, 108, 32, 114, 48, 44, 52, 13, 10, 32, 32, 32, 32, 97, 110, 100, 105, 32, 114, 48, 44, 62, 48, 48, 51, 102, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 83, 79, 85, 78, 68, 32, 32, 59, 32, 109, 111, 115, 116, 32, 115, 105, 103, 110, 105, 102, 105, 99, 97, 110, 116, 32, 98, 121, 116, 101, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 49, 13, 10, 13, 10, 59, 32, 83, 101, 116, 32, 83, 78, 32, 118, 111, 108, 117, 109, 101, 58, 32, 82, 48, 61, 118, 111, 108, 117, 109, 101, 32, 40, 77, 83, 66, 44, 32, 105, 110, 118, 101, 114, 115, 101, 32, 111, 102, 32, 97, 116, 116, 101, 110, 117, 97, 116, 105, 111, 110, 41, 44, 32, 82, 50, 61, 99, 104, 97, 110, 110, 101, 108, 32, 99, 111, 109, 109, 97, 110, 100, 32, 40, 77, 83, 66, 41, 13, 10, 59, 32, 79, 114, 105, 103, 105, 110, 97, 108, 58, 32, 65, 61, 118, 111, 108, 117, 109, 101, 32, 40, 105, 110, 118, 101, 114, 115, 101, 32, 111, 102, 32, 97, 116, 116, 101, 110, 117, 97, 116, 105, 111, 110, 41, 44, 32, 88, 61, 99, 104, 97, 110, 110, 101, 108, 32, 99, 111, 109, 109, 97, 110, 100, 13, 10, 115, 110, 55, 54, 52, 56, 57, 95, 118, 111, 108, 13, 10, 32, 32, 32, 32, 105, 110, 118, 32, 114, 48, 13, 10, 32, 32, 32, 32, 97, 110, 100, 105, 32, 114, 48, 44, 62, 48, 102, 48, 48, 13, 10, 32, 32, 32, 32, 115, 111, 99, 98, 32, 114, 50, 44, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 83, 79, 85, 78, 68, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 49, 13, 10, 13, 10, 59, 32, 83, 101, 116, 32, 110, 111, 105, 115, 101, 32, 116, 121, 112, 101, 58, 32, 82, 48, 61, 78, 111, 105, 115, 101, 32, 116, 121, 112, 101, 32, 40, 77, 83, 66, 41, 13, 10, 59, 32, 111, 114, 105, 103, 105, 110, 97, 108, 58, 32, 65, 61, 110, 111, 105, 115, 101, 32, 99, 111, 109, 109, 97, 110, 100, 13, 10, 115, 110, 55, 54, 52, 56, 57, 95, 99, 111, 110, 116, 114, 111, 108, 13, 10, 32, 32, 32, 32, 97, 110, 100, 105, 32, 114, 48, 44, 62, 48, 102, 48, 48, 13, 10, 32, 32, 32, 32, 111, 114, 105, 32, 114, 48, 44, 62, 101, 48, 48, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 83, 79, 85, 78, 68, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 49, 13, 10, 13, 10, 59, 32, 83, 101, 116, 32, 117, 112, 32, 118, 100, 112, 32, 103, 101, 110, 101, 114, 105, 99, 32, 115, 101, 116, 116, 105, 110, 103, 115, 32, 45, 32, 82, 48, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 112, 114, 101, 108, 111, 97, 100, 101, 100, 32, 119, 105, 116, 104, 32, 97, 32, 114, 101, 103, 105, 115, 116, 101, 114, 32, 105, 110, 32, 77, 83, 66, 44, 32, 100, 97, 116, 97, 32, 105, 110, 32, 76, 83, 66, 13, 10, 59, 32, 82, 50, 32, 115, 104, 111, 117, 108, 100, 32, 99, 111, 110, 116, 97, 105, 110, 32, 116, 104, 101, 32, 99, 111, 108, 111, 114, 32, 116, 97, 98, 108, 101, 32, 101, 110, 116, 114, 121, 32, 40, 105, 110, 32, 77, 83, 66, 41, 44, 32, 82, 51, 32, 116, 104, 101, 32, 98, 105, 116, 109, 97, 112, 32, 116, 97, 98, 108, 101, 32, 40, 105, 110, 32, 77, 83, 66, 41, 46, 32, 82, 101, 115, 116, 32, 105, 115, 13, 10, 59, 32, 104, 97, 114, 100, 32, 99, 111, 100, 101, 100, 46, 32, 87, 65, 82, 78, 73, 78, 71, 58, 32, 68, 105, 115, 97, 98, 108, 101, 115, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 115, 32, 98, 117, 116, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 114, 101, 45, 101, 110, 97, 98, 108, 101, 32, 116, 104, 101, 109, 46, 13, 10, 118, 100, 112, 95, 103, 101, 110, 101, 114, 105, 99, 95, 109, 111, 100, 101, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 49, 44, 114, 52, 32, 32, 32, 32, 32, 32, 59, 32, 115, 97, 118, 101, 32, 114, 101, 116, 117, 114, 110, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 105, 110, 116, 115, 32, 111, 102, 102, 13, 10, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 87, 82, 84, 86, 68, 80, 32, 32, 32, 32, 32, 32, 59, 32, 99, 97, 108, 108, 101, 114, 32, 109, 117, 115, 116, 32, 115, 101, 116, 32, 117, 112, 32, 116, 104, 105, 115, 32, 111, 110, 101, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 48, 49, 97, 50, 32, 32, 32, 32]);
fileData3.push.apply(fileData3, [32, 59, 32, 86, 68, 80, 32, 109, 111, 100, 101, 44, 32, 115, 99, 114, 101, 101, 110, 32, 111, 102, 102, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 87, 82, 84, 86, 68, 80, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 48, 50, 48, 54, 32, 32, 32, 32, 32, 59, 32, 62, 49, 56, 48, 48, 32, 112, 97, 116, 116, 101, 114, 110, 32, 116, 97, 98, 108, 101, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 87, 82, 84, 86, 68, 80, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 48, 48, 48, 51, 32, 32, 32, 32, 32, 59, 32, 102, 111, 114, 32, 99, 111, 108, 111, 114, 32, 116, 97, 98, 108, 101, 13, 10, 32, 32, 32, 32, 115, 111, 99, 98, 32, 114, 50, 44, 114, 48, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 48, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 87, 82, 84, 86, 68, 80, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 48, 48, 48, 52, 32, 32, 32, 32, 32, 59, 32, 102, 111, 114, 32, 112, 97, 116, 116, 101, 114, 110, 32, 116, 97, 98, 108, 101, 13, 10, 32, 32, 32, 32, 115, 111, 99, 98, 32, 114, 51, 44, 114, 48, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 48, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 87, 82, 84, 86, 68, 80, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 48, 53, 51, 54, 32, 32, 32, 32, 32, 59, 32, 62, 49, 98, 48, 48, 32, 102, 111, 114, 32, 115, 112, 114, 105, 116, 101, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 116, 97, 98, 108, 101, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 87, 82, 84, 86, 68, 80, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 48, 54, 48, 55, 32, 32, 32, 32, 32, 59, 32, 62, 51, 56, 48, 48, 32, 102, 111, 114, 32, 115, 112, 114, 105, 116, 101, 32, 112, 97, 116, 116, 101, 114, 110, 32, 116, 97, 98, 108, 101, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 87, 82, 84, 86, 68, 80, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 48, 55, 48, 49, 32, 32, 32, 32, 32, 59, 32, 100, 101, 102, 97, 117, 108, 116, 32, 115, 99, 114, 101, 101, 110, 32, 99, 111, 108, 111, 114, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 87, 82, 84, 86, 68, 80, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 52, 13, 10, 13, 10, 59, 32, 115, 101, 116, 32, 117, 112, 32, 86, 68, 80, 32, 109, 111, 100, 101, 32, 48, 13, 10, 109, 111, 100, 101, 95, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 49, 44, 114, 56, 32, 32, 32, 32, 32, 32, 59, 32, 99, 97, 114, 101, 102, 117, 108, 32, 45, 32, 119, 101, 32, 99, 97, 108, 108, 32, 118, 100, 112, 95, 103, 101, 110, 101, 114, 105, 99, 95, 109, 111, 100, 101, 32, 97, 110, 100, 32, 76, 68, 73, 82, 86, 77, 51, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 48, 56, 48, 48, 32, 32, 32, 32, 32, 59, 32, 98, 105, 116, 32, 119, 101, 32, 119, 97, 110, 116, 32, 116, 111, 32, 99, 108, 101, 97, 114, 13, 10, 32, 32, 32, 32, 115, 122, 99, 98, 32, 114, 48, 44, 64, 109, 111, 100, 101, 13, 10, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 50, 44, 62, 102, 102, 48, 48, 9, 32, 32, 32, 32, 59, 32, 36, 50, 48, 48, 48, 32, 102, 111, 114, 32, 99, 111, 108, 111, 114, 32, 116, 97, 98, 108, 101, 46, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 51, 44, 62, 48, 51, 48, 48, 9, 32, 32, 32, 32, 59, 32, 36, 48, 48, 48, 48, 32, 102, 111, 114, 32, 98, 105, 116, 109, 97, 112, 115, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 48, 48, 48, 50, 32, 32, 32, 32, 32, 59, 32, 114, 48, 32, 115, 101, 116, 116, 105, 110, 103, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 118, 100, 112, 95, 103, 101, 110, 101, 114, 105, 99, 95, 109, 111, 100, 101, 32, 32, 32, 32, 59, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 115, 32, 97, 114, 101, 32, 110, 111, 119, 32, 111, 102, 102, 13, 10, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 48, 49, 48, 48, 32, 32, 32, 32, 32, 59, 32, 116, 97, 114, 103, 101, 116, 32, 105, 110, 32, 86, 68, 80, 32, 109, 101, 109, 111, 114, 121, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 50, 44, 102, 111, 110, 116, 95, 98, 105, 116, 109, 97, 112, 115, 32, 32, 59, 32, 67, 80, 85, 32, 109, 101, 109, 111, 114, 121, 32, 115, 111, 117, 114, 99, 101, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 51, 44, 62, 48, 51, 48, 48, 32, 32, 32, 32, 32, 59, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 98, 121, 116, 101, 115, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 76, 68, 73, 82, 86, 77, 51, 13, 10, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 50, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 48, 13, 10, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 50, 48, 48, 48, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 50, 44, 62, 102, 48, 48, 48, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 51, 44, 62, 49, 56, 48, 48, 32, 32, 32, 32, 32, 59, 32, 102, 105, 108, 108, 32, 99, 111, 108, 111, 114, 32, 116, 97, 98, 108, 101, 32, 119, 105, 116, 104, 32, 119, 104, 105, 116, 101, 32, 111, 110, 32, 116, 114, 97, 110, 115, 112, 97, 114, 101, 110, 116, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 70, 73, 76, 86, 82, 77, 13, 10, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 50, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 99, 108, 115, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 56, 44, 114, 49, 49, 32, 32, 32, 32, 32, 32, 59, 32, 114, 101, 115, 116, 111, 114, 101, 32, 114, 101, 116, 117, 114, 110, 32, 97, 100, 100, 114, 101, 115, 115, 44, 32, 97, 110, 100, 32, 102, 97, 108, 108, 32, 116, 104, 114, 111, 117, 103, 104, 32, 116, 111, 32, 118, 100, 112, 95, 103, 101, 110, 101, 114, 105, 99, 95, 115, 112, 114, 105, 116, 101, 115, 13, 10, 13, 10, 59, 32, 73, 110, 105, 116, 105, 97, 108, 105, 122, 101, 32, 115, 112, 114, 105, 116, 101, 32, 116, 97, 98, 108, 101, 13, 10, 118, 100, 112, 95, 103, 101, 110, 101, 114, 105, 99, 95, 115, 112, 114, 105, 116, 101, 115, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 49, 44, 114, 56, 32, 32, 32, 32, 32, 32, 59, 32, 115, 97, 118, 101, 32, 114, 101, 116, 117, 114, 110, 32, 97, 100, 100, 114, 101, 115, 115, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 49, 98, 48, 48, 32, 32, 32, 32, 32, 59, 32, 115, 112, 114, 105, 116, 101, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 116, 97, 98, 108, 101, 32, 105, 110, 32, 86, 68, 80, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 50, 44, 62, 100, 49, 48, 48, 32, 32, 32, 32, 32, 59, 32, 111, 102, 102, 32, 115, 99, 114, 101, 101, 110, 44, 32, 97, 110, 100, 32, 111, 116, 104, 101, 114, 119, 105, 115, 101, 32, 117, 110, 105, 109, 112, 111, 114, 116, 97, 110, 116, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 51, 44, 49, 50, 56, 32, 32, 32, 32, 32, 32, 32, 59, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 98, 121, 116, 101, 115, 13, 10, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 48, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 70, 73, 76, 86, 82, 77, 13, 10, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 115, 112, 114, 105, 116, 101, 115, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 50, 44, 62, 100, 49, 100, 49, 32, 32, 32, 32, 32, 59, 32, 119, 114, 105, 116, 101, 32, 50, 32, 98, 121, 116, 101, 115, 32, 97, 116, 32, 97, 32, 116, 105, 109, 101, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 51, 44, 49, 50, 56, 13, 10, 33, 49, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 50, 44, 42, 114, 48, 43, 32, 32, 32, 32, 32, 59, 32, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 32, 67, 80, 85, 32, 109, 105, 114, 114, 111, 114, 13, 10, 32, 32, 32, 32, 100, 101, 99, 116, 32, 114, 51, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 45, 33, 49, 13, 10, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 48, 49, 101, 50, 32, 32, 32, 32, 32, 59, 32, 115, 99, 114, 101, 101, 110, 32, 111, 110, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 87, 82, 84, 86, 68, 80, 13, 10, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 50, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 56, 13, 10, 13, 10, 59, 32, 115, 101, 116, 32, 117, 112, 32, 86, 68, 80, 32, 109, 111, 100, 101, 32, 49, 13, 10, 109, 111, 100, 101, 95, 49, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 49, 44, 114, 56, 32, 32, 32, 32, 32, 32, 59, 32, 99, 97, 114, 101, 102, 117, 108, 32, 45, 32, 119, 101, 32, 99, 97, 108, 108, 32, 118, 100, 112, 95, 103, 101, 110, 101, 114, 105, 99, 95, 109, 111, 100, 101, 32, 97, 110, 100, 32, 76, 68, 73, 82, 86, 77, 51, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 48, 56, 48, 48, 32, 32, 32, 32, 32, 59, 32, 98, 105, 116, 32, 119, 101, 32, 119, 97, 110, 116, 32, 116, 111, 32, 99, 108, 101, 97, 114, 13, 10, 32, 32, 32, 32, 115, 122, 99, 98, 32, 114, 48, 44, 64, 109, 111, 100, 101, 13, 10, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 50, 44, 62, 102, 102, 48, 48, 9, 32, 32, 32, 32, 59, 32, 36, 50, 48, 48, 48, 32, 102, 111, 114, 32, 99, 111, 108, 111, 114, 32, 116, 97, 98, 108, 101, 46, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 51, 44, 62, 48, 51, 48, 48, 9, 32, 32, 32, 32, 59, 32, 36, 48, 48, 48, 48, 32, 102, 111, 114, 32, 98, 105, 116, 109, 97, 112, 115, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 48, 48, 48, 50, 32, 32, 32, 32, 32, 59, 32, 114, 48, 32, 115, 101, 116, 116, 105, 110, 103, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 118, 100, 112, 95, 103, 101, 110, 101, 114, 105, 99, 95, 109, 111, 100, 101, 32, 32, 32, 32, 59, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 115, 32, 97, 114, 101, 32, 110, 111, 119, 32, 111, 102, 102, 13, 10, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 48, 48, 48, 48, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 50, 44, 62, 48, 48, 48, 48, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 51, 44, 62, 49, 56, 48, 48, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 70, 73, 76, 86, 82, 77, 32, 32, 32, 32, 32, 32, 59, 32, 99, 108, 101, 97, 114, 32, 112, 97, 116, 116, 101, 114, 110, 32, 116, 97, 98, 108, 101, 13, 10, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 50, 13, 10, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 50, 48, 48, 48, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 50, 44, 62, 102, 48, 48, 48, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 51, 44, 62, 49, 56, 48, 48, 13, 10, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 48, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 70, 73, 76, 86, 82, 77, 32, 32, 32, 32, 32, 32, 59, 32, 105, 110, 105, 116, 32, 99, 111, 108, 111, 114, 32, 116, 97, 98, 108, 101, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 50, 13, 10, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 53, 56, 48, 48, 32, 32, 32, 32, 32, 59, 32, 62, 49, 56, 48, 48, 32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 119, 114, 105, 116, 101, 32, 98, 105, 116, 32, 115, 101, 116, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 114, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 119, 114, 105, 116, 101, 13, 10, 13, 10, 33, 49, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 119, 114, 105, 116, 101, 32, 116, 104, 101, 32, 115, 99, 114, 101, 101, 110, 32, 105, 109, 97, 103, 101, 32, 116, 97, 98, 108, 101, 44, 32, 98, 117, 116, 32, 112, 97, 117, 115, 101, 32, 101, 118, 101, 114, 121, 32, 51, 50, 32, 98, 121, 116, 101, 115, 32, 102, 111, 114, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 115, 13, 10, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 86, 68, 80, 87, 65, 68, 82, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 86, 68, 80, 87, 65, 68, 82, 13, 10, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 50, 44, 51, 50, 13, 10, 13, 10, 33, 50, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 51, 44, 64, 86, 68, 80, 87, 68, 65, 84, 65, 13, 10, 32, 32, 32, 32, 97, 105, 32, 114, 51, 44, 62, 48, 49, 48, 48, 13, 10, 32, 32, 32, 32, 100, 101, 99, 32, 114, 50, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 45, 33, 50, 13, 10, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 50, 13, 10, 32, 32, 32, 32, 97, 105, 32, 114, 48, 44, 51, 50, 13, 10, 32, 32, 32, 32, 99, 105, 32, 114, 48, 44, 62, 53, 98, 48, 48, 13, 10, 32, 32, 32, 32, 106, 108, 32, 45, 33, 49, 13, 10, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 56, 44, 114, 49, 49, 32, 32, 32, 32, 32, 32, 59, 32, 114, 101, 115, 116, 111, 114, 101, 32, 114, 101, 116, 117, 114, 110, 32, 97, 100, 100, 114, 101, 115, 115, 13, 10, 32, 32, 32, 32, 106, 109, 112, 32, 118, 100, 112, 95, 103, 101, 110, 101, 114, 105, 99, 95, 115, 112, 114, 105, 116, 101, 115, 32, 32, 32, 32, 32, 59, 32, 117, 115, 105, 110, 103, 32, 116, 97, 105, 108, 32, 114, 101, 99, 117, 114, 115, 105, 111, 110, 13, 10, 13, 10, 59, 32, 83, 101, 116, 32, 117, 112, 32, 86, 68, 80, 32, 109, 111, 100, 101, 32, 50, 13, 10, 109, 111, 100, 101, 95, 50, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 49, 44, 114, 56, 32, 32, 32, 32, 32, 32, 59, 32, 99, 97, 114, 101, 102, 117, 108, 32, 45, 32, 119, 101, 32, 99, 97, 108, 108, 32, 118, 100, 112, 95, 103, 101, 110, 101, 114, 105, 99, 95, 109, 111, 100, 101, 32, 97, 110, 100, 32, 76, 68, 73, 82, 86, 77, 51, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 48, 56, 48, 48, 32, 32, 32, 32, 32, 59, 32, 98, 105, 116, 32, 119, 101, 32, 119, 97, 110, 116, 32, 116, 111, 32, 115, 101, 116, 13, 10, 32, 32, 32, 32, 115, 111, 99, 98, 32, 114, 48, 44, 64, 109, 111, 100, 101, 13, 10, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 50, 44, 62, 56, 48, 48, 48, 9, 32, 32, 32, 32, 59, 32, 36, 50, 48, 48, 48, 32, 102, 111, 114, 32, 99, 111, 108, 111, 114, 32, 116, 97, 98, 108, 101, 46, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 51, 44, 62, 48, 48, 48, 48, 9, 32, 32, 32, 32, 59, 32, 36, 48, 48, 48, 48, 32, 102, 111, 114, 32, 98, 105, 116, 109, 97, 112, 115, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 48, 48, 48, 48, 32, 32, 32, 32, 32, 59, 32, 114, 48, 32, 115, 101, 116, 116, 105, 110, 103, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 118, 100, 112, 95, 103, 101, 110, 101, 114, 105, 99, 95, 109, 111, 100, 101, 32, 32, 32, 32, 59, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 115, 32, 97, 114, 101, 32, 110, 111, 119, 32, 111, 102, 102, 13, 10, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 48, 49, 48, 48, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 50, 44, 102, 111, 110, 116, 95, 98, 105, 116, 109, 97, 112, 115, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 51, 44, 62, 48, 51, 48, 48, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 76, 68, 73, 82, 86, 77, 32, 32, 32, 32, 32, 32, 59, 32, 108, 111, 97, 100, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 32, 115, 101, 116, 13, 10, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 50, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 48, 13, 10, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 50, 48, 48, 48, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 50, 44, 62, 102, 48, 48, 48, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 51, 44, 62, 48, 48, 50, 48, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 70, 73, 76, 86, 82, 77, 32, 32, 32, 32, 32, 32, 59, 32, 105, 110, 105, 116, 32, 99, 111, 108, 111, 114, 32, 116, 97, 98, 108, 101, 13, 10, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 50, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 99, 108, 115, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 99, 108, 101, 97, 114, 32, 115, 99, 114, 101, 101, 110, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 56, 44, 114, 49, 49, 32, 32, 32, 32, 32, 32, 59, 32, 114, 101, 115, 116, 111, 114, 101, 32, 114, 101, 116, 117, 114, 110, 13, 10, 32, 32, 32, 32, 98, 32, 64, 118, 100, 112, 95, 103, 101, 110, 101, 114, 105, 99, 95, 115, 112, 114, 105, 116, 101, 115, 13, 10, 13, 10, 59, 32, 116, 104, 105, 115, 32, 105, 115, 32, 119, 104, 101, 114, 101, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 115, 32, 104, 97, 112, 112, 101, 110, 32, 101, 118, 101, 114, 121, 32, 102, 114, 97, 109, 101, 13, 10, 59, 32, 85, 110, 108, 105, 107, 101, 32, 97, 32, 110, 111, 114, 109, 97, 108, 32, 84, 73, 32, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 44, 32, 116, 104, 105, 115, 32, 111, 110, 101, 32, 114, 117, 110, 115, 32, 119, 105, 116, 104, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 115, 32, 79, 78, 44, 13, 10, 59, 32, 115, 111, 32, 97, 108, 108, 32, 111, 112, 101, 114, 97, 116, 105, 111, 110, 115, 32, 110, 101, 101, 100, 32, 116, 111, 32, 98, 101, 32, 115, 117, 114, 101, 32, 116, 111, 32, 112, 114, 111, 116, 101, 99, 116, 32, 86, 68, 80, 32, 97, 100, 100, 114, 101, 115, 115, 32, 119, 105, 116, 104, 32, 76, 73, 77, 73, 32, 48, 44, 13, 10, 59, 32, 97, 115, 32, 119, 101, 108, 108, 32, 97, 115, 32, 97, 110, 121, 32, 111, 112, 101, 114, 97, 116, 105, 111, 110, 115, 32, 116, 104, 97, 116, 32, 109, 105, 103, 104, 116, 32, 110, 101, 101, 100, 32, 116, 111, 32, 109, 97, 110, 105, 112, 117, 108, 97, 116, 101, 32, 100, 97, 116, 97, 32, 109, 97, 110, 97, 103, 101, 100, 13, 10, 59, 32, 98, 121, 32, 116, 104, 105, 115, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 46, 32, 87, 101, 32, 101, 110, 116, 101, 114, 32, 118, 105, 97, 32, 116, 104, 101, 32, 110, 111, 114, 109, 97, 108, 32, 117, 115, 101, 114, 32, 104, 111, 111, 107, 44, 32, 115, 111, 32, 87, 80, 32, 105, 115, 32, 111, 110, 13, 10, 59, 32, 71, 80, 76, 87, 83, 44, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 115, 32, 97, 114, 101, 32, 111, 102, 102, 44, 32, 97, 110, 100, 32, 116, 104, 101, 32, 86, 68, 80, 32, 105, 115, 32, 97, 108, 114, 101, 97, 100, 121, 32, 114, 101, 115, 101, 116, 32, 97, 110, 100, 32, 115, 116, 97, 116, 117, 115, 32, 13, 10, 59, 32, 115, 116, 97, 115, 104, 101, 100, 32, 111, 110, 32, 118, 100, 112, 95, 115, 116, 97, 116, 117, 115, 32, 40, 62, 56, 51, 55, 98, 41, 46, 32, 79, 117, 114, 32, 114, 101, 116, 117, 114, 110, 32, 97, 100, 100, 114, 101, 115, 115, 32, 116, 111, 32, 116, 104, 101, 32, 82, 79, 77, 32, 105, 115, 32, 105, 110, 13, 10, 59, 32, 114, 49, 49, 44, 32, 98, 117, 116, 32, 119, 101, 32, 97, 114, 101, 32, 78, 79, 84, 32, 103, 111, 105, 110, 103, 32, 116, 111, 32, 117, 115, 101, 32, 105, 116, 32, 115, 111, 32, 116, 104, 97, 116, 32, 119, 101, 32, 100, 111, 110, 39, 116, 32, 110, 101, 101, 100, 32, 116, 111, 32, 114, 101, 115, 101, 114, 118, 101, 13, 10, 59, 32, 114, 56, 32, 102, 111, 114, 32, 119, 104, 97, 116, 101, 118, 101, 114, 32, 110, 111, 110, 115, 101, 110, 115, 101, 32, 105, 116, 32, 100, 111, 101, 115, 46, 32, 84, 104, 97, 116, 32, 109, 101, 97, 110, 115, 32, 119, 101, 32, 110, 101, 101, 100, 32, 116, 111, 32, 108, 111, 97, 100, 32, 105, 110, 116, 119, 115, 13, 10, 59, 32, 97, 110, 100, 32, 82, 84, 87, 80, 32, 111, 117, 114, 115, 101, 108, 118, 101, 115, 32, 97, 116, 32, 116, 104, 101, 32, 101, 110, 100, 46, 32, 87, 101, 32, 97, 114, 101, 32, 111, 110, 32, 111, 117, 114, 32, 111, 119, 110, 32, 119, 111, 114, 107, 115, 112, 97, 99, 101, 32, 115, 111, 32, 119, 101, 13, 10, 59, 32, 100, 111, 110, 39, 116, 32, 104, 97, 118, 101, 32, 116, 111, 32, 119, 111, 114, 114, 121, 32, 97, 98, 111, 117, 116, 32, 116, 104, 101, 32, 109, 97, 105, 110, 32, 97, 112, 112, 39, 115, 32, 119, 111, 114, 107, 115, 112, 97, 99, 101, 46, 13, 10, 105, 110, 116, 95, 104, 97, 110, 100, 108, 101, 114, 13, 10, 59, 32, 102, 105, 114, 115, 116, 32, 99, 111, 112, 121, 32, 116, 104, 101, 32, 115, 112, 114, 105, 116, 101, 32, 116, 97, 98, 108, 101, 13, 10, 32, 32, 32, 32, 108, 119, 112, 105, 32, 109, 121, 105, 110, 116, 119, 112, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 101, 112, 97, 114, 97, 116, 101, 32, 115, 97, 102, 101, 32, 119, 111, 114, 107, 115, 112, 97, 99, 101, 13, 10, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 46, 105, 102, 110, 101, 32, 67, 86, 66, 65, 83, 73, 67, 95, 66, 65, 78, 75, 95, 83, 87, 73, 84, 67, 72, 73, 78, 71, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 64, 62, 55, 102, 102, 101, 44, 64, 115, 97, 118, 101, 100, 95, 98, 97, 110, 107, 32, 32, 59, 32, 115, 97, 118, 101, 32, 98, 97, 110, 107, 32, 115, 119, 105, 116, 99, 104, 32, 112, 97, 103, 101, 13, 10, 32, 32, 32, 32, 46, 101, 110, 100, 105, 102, 13, 10, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 49, 44, 62, 48, 48, 53, 98, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 62, 49, 98, 48, 48, 32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 119, 114, 105, 116, 101, 32, 98, 105, 116, 32, 97, 100, 100, 101, 100, 44, 32, 97, 110, 100, 32, 98, 121, 116, 101, 32, 102, 108, 105, 112, 112, 101, 100, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 49, 49, 44, 64, 86, 68, 80, 87, 65, 68, 82, 32, 32, 32, 59, 32, 83, 65, 76, 32, 97, 100, 100, 114, 101, 115, 115, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 49, 49, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 49, 49, 44, 64, 86, 68, 80, 87, 65, 68, 82, 32, 32, 32, 59, 32, 103, 111, 105, 110, 103, 32, 116, 111, 32, 99, 111, 112, 121, 32, 116, 104, 101, 32, 115, 112, 114, 105, 116, 101, 32, 116, 97, 98, 108, 101, 32, 116, 111, 32, 86, 68, 80, 13, 10, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 109, 111, 100, 101, 44, 114, 49, 49, 13, 10, 32, 32, 32, 32, 97, 110, 100, 105, 32, 114, 49, 49, 44, 62, 48, 52, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 105, 102, 32, 98, 105, 116, 32, 62, 48, 52, 32, 40, 105, 110, 104, 105, 98, 105, 116, 32, 102, 108, 105, 99, 107, 101, 114, 41, 32, 105, 115, 32, 99, 108, 101, 97, 114, 101, 100, 44, 32, 106, 117, 109, 112, 32, 97, 104, 101, 97, 100, 32, 116, 111, 32, 114, 111, 116, 97, 116, 101, 13, 10, 32, 32, 32, 32, 106, 101, 113, 32, 33, 52, 13, 10, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 114, 49, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 101, 108, 115, 101, 32, 119, 101, 39, 114, 101, 32, 103, 111, 105, 110, 103, 32, 116, 111, 32, 106, 117, 115, 116, 32, 119, 114, 105, 116, 101, 32, 105, 116, 32, 115, 116, 114, 97, 105, 103, 104, 116, 32, 97, 99, 114, 111, 115, 115, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 50, 44, 49, 50, 56, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 51, 44, 115, 112, 114, 105, 116, 101, 115, 13, 10, 33, 55, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 42, 114, 49, 51, 43, 44, 64, 86, 68, 80, 87, 68, 65, 84, 65, 13, 10, 32, 32, 32, 32, 100, 101, 99, 32, 114, 49, 50, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 45, 33, 55, 13, 10, 32, 32, 32, 32, 106, 109, 112, 32, 33, 53, 13, 10, 13, 10, 33, 52, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 102, 108, 105, 99, 107, 101, 114, 44, 114, 49, 49, 32, 32, 32, 59, 32, 104, 101, 114, 101, 32, 119, 101, 32, 119, 114, 105, 116, 101, 32, 105, 116, 32, 114, 111, 116, 97, 116, 101, 100, 32, 101, 118, 101, 114, 121, 32, 102, 114, 97, 109, 101, 13, 10, 32, 32, 32, 32, 97, 105, 32, 114, 49, 49, 44, 62, 48, 52, 48, 48, 13, 10, 32, 32, 32, 32, 97, 110, 100, 105, 32, 114, 49, 49, 44, 62, 55, 102, 48, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 49, 49, 44, 64, 102, 108, 105, 99, 107, 101, 114, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 49, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 109, 97, 107, 101, 32, 99, 111, 117, 110, 116, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 50, 44, 51, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 99, 111, 117, 110, 116, 13, 10, 13, 10, 33, 54, 13, 10, 32, 32, 32, 32, 97, 105, 32, 114, 49, 49, 44, 115, 112, 114, 105, 116, 101, 115, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 116, 104, 105, 115, 32, 105, 115, 32, 115, 116, 105, 108, 108, 32, 102, 97, 115, 116, 101, 114, 32, 116, 104, 97, 110, 32, 115, 101, 112, 97, 114, 97, 116, 101, 32, 105, 110, 99, 115, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 42, 114, 49, 49, 43, 44, 64, 86, 68, 80, 87, 68, 65, 84, 65, 32, 32, 59, 32, 99, 111, 112, 121, 32, 111, 110, 101, 32, 115, 112, 114, 105, 116, 101, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 42, 114, 49, 49, 43, 44, 64, 86, 68, 80, 87, 68, 65, 84, 65, 32, 32, 59, 32, 110, 111, 32, 100, 101, 108, 97, 121, 32, 110, 101, 101, 100, 101, 100, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 42, 114, 49, 49, 43, 44, 64, 86, 68, 80, 87, 68, 65, 84, 65, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 42, 114, 49, 49, 44, 64, 86, 68, 80, 87, 68, 65, 84, 65, 32, 32, 32, 59, 32, 115, 109, 97, 108, 108, 32, 111, 112, 116, 105, 109, 105, 122, 97, 116, 105, 111, 110, 44, 32, 115, 105, 110, 99, 101, 32, 119, 101, 32, 104, 97, 118, 101, 32, 97, 110, 32, 97, 100, 100, 32, 99, 111, 109, 105, 110, 103, 32, 97, 110, 121, 119, 97, 121, 13, 10, 32, 32, 32, 32, 97, 105, 32, 114, 49, 49, 44, 45, 40, 115, 112, 114, 105, 116, 101, 115, 45, 49, 41, 32, 32, 32, 59, 32, 114, 101, 109, 111, 118, 101, 32, 97, 100, 100, 114, 101, 115, 115, 32, 97, 110, 100, 32, 97, 100, 100, 32, 116, 104, 101, 32, 114, 101, 115, 116, 32, 111, 102, 32, 116, 104, 101, 32, 105, 110, 99, 114, 101, 109, 101, 110, 116, 13, 10, 32, 32, 32, 32, 97, 110, 100, 105, 32, 114, 49, 49, 44, 62, 48, 48, 55, 70, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 99, 108, 97, 109, 112, 32, 105, 116, 32, 105, 110, 32, 114, 97, 110, 103, 101, 13, 10, 32, 32, 32, 32, 100, 101, 99, 32, 114, 49, 50, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 45, 33, 54, 13, 10, 33, 53, 13, 10, 13, 10, 59, 32, 110, 101, 120, 116, 32, 114, 101, 97, 100, 32, 116, 104, 101, 32, 106, 111, 121, 115, 116, 105, 99, 107, 115, 32, 45, 32, 111, 117, 116, 112, 117, 116, 32, 110, 101, 101, 100, 115, 32, 116, 111, 32, 98, 101, 32, 50, 49, 120, 120, 76, 68, 82, 85, 32, 45, 32, 49, 32, 97, 110, 100, 32, 50, 32, 97, 114, 101, 32, 98, 117, 116, 116, 111, 110, 32, 97, 110, 100, 32, 98, 117, 116, 116, 111, 110, 50, 32, 114, 101, 115, 112, 101, 99, 116, 105, 118, 101, 108, 121, 13, 10, 59, 32, 87, 101, 32, 100, 111, 110, 39, 116, 32, 104, 97, 118, 101, 32, 97, 32, 98, 117, 116, 116, 111, 110, 32, 50, 46, 32, 87, 101, 32, 97, 108, 115, 111, 32, 110, 101, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 116, 104, 101, 32, 107, 101, 121, 98, 111, 97, 114, 100, 32, 97, 110, 100, 32, 102, 105, 108, 108, 32, 105, 110, 32, 107, 101, 121, 49, 95, 100, 97, 116, 97, 46, 32, 107, 101, 121, 50, 95, 100, 97, 116, 97, 32, 119, 101, 13, 10, 59, 32, 119, 105, 108, 108, 32, 108, 101, 97, 118, 101, 32, 117, 110, 117, 115, 101, 100, 46, 32, 78, 111, 116, 101, 32, 107, 101, 121, 49, 95, 100, 97, 116, 97, 32, 101, 120, 112, 101, 99, 116, 115, 32, 67, 111, 108, 101, 99, 111, 45, 115, 116, 121, 108, 101, 32, 48, 45, 57, 44, 49, 48, 45, 42, 44, 49, 49, 45, 35, 44, 49, 53, 61, 110, 111, 116, 32, 112, 114, 101, 115, 115, 101, 100, 44, 32, 98, 117, 116, 32, 119, 101, 32, 99, 97, 110, 32, 116, 104, 114, 111, 119, 13, 10, 59, 32, 101, 118, 101, 114, 121, 116, 104, 105, 110, 103, 32, 101, 108, 115, 101, 32, 97, 115, 32, 65, 83, 67, 73, 73, 46, 32, 87, 101, 32, 99, 111, 117, 108, 100, 32, 100, 111, 32, 97, 32, 115, 112, 108, 105, 116, 32, 107, 101, 121, 98, 111, 97, 114, 100, 32, 102, 111, 114, 32, 50, 32, 112, 108, 97, 121, 101, 114, 115, 44, 32, 98, 117, 116, 32, 73, 32, 103, 117, 101, 115, 115, 32, 119, 101, 39, 108, 108, 32, 108, 101, 97, 118, 101, 32, 105, 116, 32, 102, 111, 114, 32, 110, 111, 119, 46, 13, 10, 59, 32, 106, 111, 121, 49, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 50, 44, 62, 48, 48, 50, 52, 32, 32, 32, 32, 59, 32, 67, 82, 85, 32, 98, 97, 115, 101, 32, 111, 102, 32, 115, 101, 108, 101, 99, 116, 32, 111, 117, 116, 112, 117, 116, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 51, 44, 62, 48, 54, 48, 48, 32, 32, 32, 32, 59, 32, 106, 111, 121, 115, 116, 105, 99, 107, 32, 49, 32, 99, 111, 108, 117, 109, 110, 13, 10, 32, 32, 32, 32, 108, 100, 99, 114, 32, 114, 49, 51, 44, 51, 32, 32, 32, 32, 32, 32, 59, 32, 115, 101, 108, 101, 99, 116, 32, 105, 116, 13, 10, 32, 32, 32, 32, 115, 114, 99, 32, 114, 49, 50, 44, 55, 32, 32, 32, 32, 32, 32, 32, 59, 32, 100, 101, 108, 97, 121, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 50, 44, 62, 48, 48, 48, 54, 32, 32, 32, 32, 59, 32, 67, 82, 85, 32, 98, 97, 115, 101, 32, 111, 102, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 97, 100, 13, 10, 32, 32, 32, 32, 115, 116, 99, 114, 32, 114, 49, 51, 44, 56, 32, 32, 32, 32, 32, 32, 59, 32, 114, 101, 97, 100, 32, 56, 32, 98, 105, 116, 115, 32, 40, 119, 101, 32, 99, 111, 117, 108, 100, 32, 103, 101, 116, 32, 97, 119, 97, 121, 32, 119, 105, 116, 104, 32, 102, 101, 119, 101, 114, 44, 32, 98, 117, 116, 32, 98, 101, 32, 99, 111, 110, 115, 105, 115, 116, 101, 110, 116, 41, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 99, 111, 110, 118, 101, 114, 116, 95, 106, 111, 121, 115, 116, 105, 99, 107, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 49, 50, 44, 64, 106, 111, 121, 49, 95, 100, 97, 116, 97, 13, 10, 13, 10, 59, 32, 106, 111, 121, 50, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 50, 44, 62, 48, 48, 50, 52, 32, 32, 32, 32, 59, 32, 67, 82, 85, 32, 98, 97, 115, 101, 32, 111, 102, 32, 115, 101, 108, 101, 99, 116, 32, 111, 117, 116, 112, 117, 116, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 51, 44, 62, 48, 55, 48, 48, 32, 32, 32, 32, 59, 32, 106, 111, 121, 115, 116, 105, 99, 107, 32, 50, 32, 99, 111, 108, 117, 109, 110, 13, 10, 32, 32, 32, 32, 108, 100, 99, 114, 32, 114, 49, 51, 44, 51, 32, 32, 32, 32, 32, 32, 59, 32, 115, 101, 108, 101, 99, 116, 32, 105, 116, 13, 10, 32, 32, 32, 32, 115, 114, 99, 32, 114, 49, 50, 44, 55, 32, 32, 32, 32, 32, 32, 32, 59, 32, 100, 101, 108, 97, 121, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 50, 44, 62, 48, 48, 48, 54, 32, 32, 32, 32, 59, 32, 67, 82, 85, 32, 98, 97, 115, 101, 32, 111, 102, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 97, 100, 13, 10, 32, 32, 32, 32, 115, 116, 99, 114, 32, 114, 49, 51, 44, 56, 32, 32, 32, 32, 32, 32, 59, 32, 114, 101, 97, 100, 32, 56, 32, 98, 105, 116, 115, 32, 40, 119, 101, 32, 99, 111, 117, 108, 100, 32, 103, 101, 116, 32, 97, 119, 97, 121, 32, 119, 105, 116, 104, 32, 102, 101, 119, 101, 114, 44, 32, 98, 117, 116, 32, 98, 101, 32, 99, 111, 110, 115, 105, 115, 116, 101, 110, 116, 41, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 99, 111, 110, 118, 101, 114, 116, 95, 106, 111, 121, 115, 116, 105, 99, 107, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 49, 50, 44, 64, 106, 111, 121, 50, 95, 100, 97, 116, 97, 13, 10, 32, 32, 32, 32, 13, 10, 59, 32, 100, 111, 32, 97, 32, 113, 117, 105, 99, 107, 32, 109, 111, 100, 105, 102, 105, 101, 114, 32, 114, 101, 97, 100, 32, 102, 111, 114, 32, 98, 117, 116, 116, 111, 110, 32, 50, 32, 40, 99, 111, 110, 116, 114, 111, 108, 32, 97, 110, 100, 32, 102, 99, 116, 110, 32, 102, 111, 114, 32, 106, 111, 121, 32, 49, 32, 97, 110, 100, 32, 50, 32, 114, 101, 115, 112, 101, 99, 116, 105, 118, 101, 108, 121, 41, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 50, 44, 62, 48, 48, 50, 52, 32, 32, 32, 32, 59, 32, 67, 82, 85, 32, 98, 97, 115, 101, 32, 111, 102, 32, 115, 101, 108, 101, 99, 116, 32, 111, 117, 116, 112, 117, 116, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 114, 49, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 109, 111, 100, 105, 102, 105, 101, 114, 115, 13, 10, 32, 32, 32, 32, 108, 100, 99, 114, 32, 114, 49, 51, 44, 51, 32, 32, 32, 32, 32, 32, 59, 32, 115, 101, 108, 101, 99, 116, 32, 105, 116, 13, 10, 32, 32, 32, 32, 115, 114, 99, 32, 114, 49, 50, 44, 55, 32, 32, 32, 32, 32, 32, 32, 59, 32, 100, 101, 108, 97, 121, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 50, 44, 62, 48, 48, 48, 54, 32, 32, 32, 32, 59, 32, 67, 82, 85, 32, 98, 97, 115, 101, 32, 111, 102, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 97, 100, 13, 10, 32, 32, 32, 32, 115, 116, 99, 114, 32, 114, 49, 51, 44, 56, 32, 32, 32, 32, 32, 32, 59, 32, 114, 101, 97, 100, 32, 56, 32, 98, 105, 116, 115, 32, 40, 119, 101, 32, 99, 111, 117, 108, 100, 32, 103, 101, 116, 32, 97, 119, 97, 121, 32, 119, 105, 116, 104, 32, 102, 101, 119, 101, 114, 44, 32, 98, 117, 116, 32, 98, 101, 32, 99, 111, 110, 115, 105, 115, 116, 101, 110, 116, 41, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 50, 44, 62, 52, 48, 48, 48, 32, 32, 32, 32, 59, 32, 99, 111, 110, 116, 114, 111, 108, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 49, 44, 62, 56, 48, 48, 48, 32, 32, 32, 32, 59, 32, 98, 117, 116, 116, 111, 110, 32, 50, 32, 98, 105, 116, 13, 10, 32, 32, 32, 32, 99, 122, 99, 32, 114, 49, 50, 44, 114, 49, 51, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 46, 110, 111, 99, 49, 98, 50, 13, 10, 32, 32, 32, 32, 115, 111, 99, 98, 32, 114, 49, 49, 44, 64, 106, 111, 121, 49, 95, 100, 97, 116, 97, 13, 10, 46, 110, 111, 99, 49, 98, 50, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 50, 44, 62, 49, 48, 48, 48, 32, 32, 32, 32, 59, 32, 102, 99, 116, 110, 13, 10, 32, 32, 32, 32, 99, 122, 99, 32, 114, 49, 50, 44, 114, 49, 51, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 46, 110, 111, 99, 50, 98, 50, 13, 10, 32, 32, 32, 32, 115, 111, 99, 98, 32, 114, 49, 49, 44, 64, 106, 111, 121, 50, 95, 100, 97, 116, 97, 13, 10, 46, 110, 111, 99, 50, 98, 50, 13, 10, 13, 10, 59, 32, 107, 101, 121, 49, 32, 45, 32, 116, 104, 105, 115, 32, 105, 115, 32, 97, 32, 118, 101, 114, 121, 32, 115, 105, 109, 112, 108, 101, 32, 114, 101, 97, 100, 32, 119, 105, 116, 104, 32, 110, 111, 32, 109, 111, 100, 105, 102, 105, 101, 114, 115, 44, 32, 105, 116, 32, 106, 117, 115, 116, 32, 103, 105, 118, 101, 115, 32, 97, 99, 99, 101, 115, 115, 32, 116, 111, 32, 116, 104, 101, 32, 108, 101, 116, 116, 101, 114, 115, 32, 97, 110, 100, 32, 110, 117, 109, 98, 101, 114, 115, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 114, 49, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 99, 111, 108, 117, 109, 110, 13, 10, 33, 107, 101, 121, 49, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 50, 44, 62, 48, 48, 50, 52, 32, 32, 32, 32, 59, 32, 67, 82, 85, 32, 98, 97, 115, 101, 32, 111, 102, 32, 115, 101, 108, 101, 99, 116, 32, 111, 117, 116, 112, 117, 116, 13, 10, 32, 32, 32, 32, 108, 100, 99, 114, 32, 114, 49, 49, 44, 51, 32, 32, 32, 32, 32, 32, 59, 32, 115, 101, 108, 101, 99, 116, 32, 99, 111, 108, 117, 109, 110, 13, 10, 32, 32, 32, 32, 115, 114, 99, 32, 114, 49, 50, 44, 55, 32, 32, 32, 32, 32, 32, 32, 59, 32, 100, 101, 108, 97, 121, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 50, 44, 62, 48, 48, 48, 54, 32, 32, 32, 32, 59, 32, 67, 82, 85, 32, 98, 97, 115, 101, 32, 111, 102, 32, 114, 101, 116, 117, 114, 110, 32, 114, 101, 97, 100, 13, 10, 32, 32, 32, 32, 115, 116, 99, 114, 32, 114, 49, 51, 44, 56, 32, 32, 32, 32, 32, 32, 59, 32, 103, 101, 116, 32, 116, 104, 101, 32, 98, 105, 116, 115, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 50, 44, 55, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 105, 116, 32, 115, 101, 97, 114, 99, 104, 13, 10, 33, 107, 101, 121, 50, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 49, 50, 44, 49, 13, 10, 32, 32, 32, 32, 99, 122, 99, 32, 64, 109, 97, 115, 107, 116, 97, 98, 108, 101, 40, 114, 49, 50, 41, 44, 114, 49, 51, 32, 32, 32, 32, 59, 32, 98, 105, 116, 32, 115, 101, 116, 63, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 33, 107, 101, 121, 51, 32, 32, 32, 32, 32, 32, 32, 59, 32, 99, 111, 110, 116, 105, 110, 117, 101, 13, 10, 32, 32, 32, 32, 115, 114, 108, 32, 114, 49, 50, 44, 49, 13, 10, 32, 32, 32, 32, 115, 114, 108, 32, 114, 49, 49, 44, 53, 13, 10, 32, 32, 32, 32, 97, 32, 114, 49, 50, 44, 114, 49, 49, 32, 32, 32, 32, 32, 32, 32, 59, 32, 99, 97, 108, 99, 117, 108, 97, 116, 101, 32, 116, 97, 98, 108, 101, 32, 111, 102, 102, 115, 101, 116, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 107, 101, 121, 98, 111, 97, 114, 100, 95, 116, 97, 98, 108, 101, 40, 114, 49, 49, 41, 44, 64, 107, 101, 121, 49, 95, 100, 97, 116, 97, 32, 32, 32, 32, 59, 32, 109, 105, 103, 104, 116, 32, 98, 101, 32, 97, 32, 100, 101, 97, 100, 32, 107, 101, 121, 44, 32, 98, 117, 116, 32, 116, 104, 97, 116, 39, 115, 32, 111, 107, 97, 121, 13, 10, 32, 32, 32, 32, 106, 109, 112, 32, 33, 107, 101, 121, 52, 13, 10, 13, 10, 33, 107, 101, 121, 51, 13, 10, 32, 32, 32, 32, 115, 114, 108, 32, 114, 49, 50, 44, 49, 13, 10, 32, 32, 32, 32, 100, 101, 99, 32, 114, 49, 50, 13, 10, 32, 32, 32, 32, 106, 103, 116, 32, 45, 33, 107, 101, 121, 50, 13, 10, 32, 32, 32, 32, 106, 101, 113, 32, 45, 33, 107, 101, 121, 50, 32, 32, 32, 32, 32, 32, 59, 32, 119, 101, 32, 100, 111, 110, 39, 116, 32, 104, 97, 118, 101, 32, 97, 32, 106, 117, 109, 112, 32, 105, 102, 32, 110, 111, 116, 32, 110, 101, 103, 97, 116, 105, 118, 101, 13, 10, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 97, 105, 32, 114, 49, 49, 44, 62, 48, 49, 48, 48, 13, 10, 32, 32, 32, 32, 99, 105, 32, 114, 49, 49, 44, 62, 48, 54, 48, 48, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 45, 33, 107, 101, 121, 49, 13, 10, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 49, 44, 62, 48, 102, 48, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 49, 49, 44, 64, 107, 101, 121, 49, 95, 100, 97, 116, 97, 32, 32, 32, 32, 32, 59, 32, 110, 111, 32, 107, 101, 121, 32, 119, 97, 115, 32, 112, 114, 101, 115, 115, 101, 100, 13, 10, 33, 107, 101, 121, 52, 13, 10, 13, 10, 59, 32, 99, 104, 101, 99, 107, 32, 102, 111, 114, 32, 113, 117, 105, 116, 32, 45, 32, 97, 116, 116, 101, 109, 112, 116, 115, 32, 116, 111, 32, 119, 111, 114, 107, 32, 105, 116, 32, 105, 110, 116, 111, 32, 116, 104, 101, 32, 97, 98, 111, 118, 101, 32, 119, 101, 114, 101, 32, 110, 111, 116, 32, 119, 111, 114, 107, 105, 110, 103, 13, 10, 59, 32, 98, 111, 114, 114, 111, 119, 101, 100, 32, 102, 114, 111, 109, 32, 99, 111, 110, 115, 111, 108, 101, 32, 82, 79, 77, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 50, 44, 62, 48, 48, 50, 52, 13, 10, 32, 32, 32, 32, 108, 100, 99, 114, 32, 114, 49, 50, 44, 51, 13, 10, 32, 32, 32, 32, 115, 114, 99, 32, 114, 49, 50, 44, 55, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 50, 44, 62, 48, 48, 48, 54, 13, 10, 32, 32, 32, 32, 115, 116, 99, 114, 32, 114, 49, 49, 44, 56, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 50, 44, 62, 49, 49, 48, 48, 13, 10, 32, 32, 32, 32, 99, 122, 99, 32, 114, 49, 50, 44, 114, 49, 49, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 46, 110, 111, 113, 117, 105, 116, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 64, 105, 110, 116, 119, 115, 114, 50, 13, 10, 32, 32, 32, 32, 98, 108, 119, 112, 32, 64, 62, 48, 48, 48, 48, 13, 10, 46, 110, 111, 113, 117, 105, 116, 32, 32, 32, 32, 13, 10, 13, 10, 32, 32, 32, 32, 46, 105, 102, 110, 101, 32, 67, 86, 66, 65, 83, 73, 67, 95, 77, 85, 83, 73, 67, 95, 80, 76, 65, 89, 69, 82, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 109, 117, 115, 105, 99, 95, 109, 111, 100, 101, 44, 114, 48, 13, 10, 32, 32, 32, 32, 106, 101, 113, 32, 33, 49, 48, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 109, 117, 115, 105, 99, 95, 104, 97, 114, 100, 119, 97, 114, 101, 13, 10, 33, 49, 48, 13, 10, 32, 32, 32, 32, 46, 101, 110, 100, 105, 102, 13, 10, 13, 10, 32, 32, 32, 32, 105, 110, 99, 32, 64, 102, 114, 97, 109, 101, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 51, 13, 10, 32, 32, 32, 32, 97, 32, 114, 48, 44, 64, 108, 102, 115, 114, 32, 32, 59, 32, 77, 97, 107, 101, 32, 76, 70, 83, 82, 32, 109, 111, 114, 101, 32, 114, 97, 110, 100, 111, 109, 13, 10, 13, 10, 32, 32, 32, 32, 46, 105, 102, 110, 101, 32, 67, 86, 66, 65, 83, 73, 67, 95, 77, 85, 83, 73, 67, 95, 80, 76, 65, 89, 69, 82, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 109, 117, 115, 105, 99, 95, 109, 111, 100, 101, 44, 114, 48, 13, 10, 32, 32, 32, 32, 106, 101, 113, 32, 33, 57, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 109, 117, 115, 105, 99, 95, 102, 114, 97, 109, 101, 44, 114, 48, 13, 10, 32, 32, 32, 32, 97, 105, 32, 114, 48, 44, 62, 48, 49, 48, 48, 13, 10, 32, 32, 32, 32, 99, 105, 32, 114, 48, 44, 62, 48, 53, 48, 48, 13, 10, 32, 32, 32, 32, 106, 108, 32, 33, 49, 49, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 109, 117, 115, 105, 99, 95, 102, 114, 97, 109, 101, 13, 10, 32, 32, 32, 32, 106, 104, 101, 32, 33, 57, 13, 10, 13, 10, 33, 49, 49, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 109, 117, 115, 105, 99, 95, 102, 114, 97, 109, 101, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 109, 117, 115, 105, 99, 95, 103, 101, 110, 101, 114, 97, 116, 101, 13, 10, 33, 57, 13, 10, 32, 32, 32, 32, 46, 101, 110, 100, 105, 102, 13, 10, 13, 10, 32, 32, 32, 32, 59, 67, 86, 66, 65, 83, 73, 67, 32, 77, 65, 82, 75, 32, 68, 79, 78, 39, 84, 32, 67, 72, 65, 78, 71, 69, 13, 10, 13, 10, 59, 32, 114, 101, 115, 116, 111, 114, 101, 32, 116, 104, 101, 32, 115, 97, 118, 101, 100, 32, 98, 97, 110, 107, 13, 10, 32, 32, 32, 32, 46, 105, 102, 110, 101, 32, 67, 86, 66, 65, 83, 73, 67, 95, 66, 65, 78, 75, 95, 83, 87, 73, 84, 67, 72, 73, 78, 71, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 64, 115, 97, 118, 101, 100, 95, 98, 97, 110, 107, 44, 114, 48, 32, 32, 59, 32, 114, 101, 99, 111, 118, 101, 114, 32, 112, 97, 103, 101, 32, 115, 119, 105, 116, 99, 104, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 42, 114, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 119, 105, 116, 99, 104, 32, 105, 116, 13, 10, 32, 32, 32, 32, 46, 101, 110, 100, 105, 102, 13, 10, 13, 10, 59, 32, 103, 101, 116, 32, 98, 97, 99, 107, 32, 116, 104, 101, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 32, 119, 111, 114, 107, 115, 112, 97, 99, 101, 32, 97, 110, 100, 32, 114, 101, 116, 117, 114, 110, 13, 10, 32, 32, 32, 32, 108, 119, 112, 105, 32, 73, 78, 84, 87, 83, 13, 10, 32, 32, 32, 32, 82, 84, 87, 80, 13, 10, 13, 10, 59, 32, 103, 105, 118, 101, 110, 32, 97, 32, 106, 111, 121, 115, 116, 105, 99, 107, 32, 114, 101, 97, 100, 32, 105, 110, 32, 114, 49, 51, 44, 32, 114, 101, 116, 117, 114, 110, 32, 98, 105, 116, 115, 32, 105, 110, 32, 114, 49, 50, 13, 10, 59, 32, 84, 104, 101, 32, 102, 105, 110, 97, 108, 32, 111, 117, 116, 112, 117, 116, 32, 105, 115, 32, 56, 32, 98, 105, 116, 115, 58, 13, 10, 59, 32, 50, 49, 120, 120, 76, 68, 82, 85, 32, 45, 32, 49, 32, 97, 110, 100, 32, 50, 32, 97, 114, 101, 32, 98, 117, 116, 116, 111, 110, 32, 97, 110, 100, 32, 98, 117, 116, 116, 111, 110, 50, 32, 114, 101, 115, 112, 101, 99, 116, 105, 118, 101, 108, 121, 13, 10, 59, 32, 78, 79, 84, 69, 58, 32, 105, 102, 32, 99, 97, 108, 108, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 99, 111, 109, 112, 105, 108, 101, 114, 44, 32, 116, 104, 105, 115, 32, 119, 111, 110, 39, 116, 32, 97, 99, 116, 32, 97, 115, 32, 101, 120, 112, 101, 99, 116, 101, 100, 13, 10, 99, 111, 110, 118, 101, 114, 116, 95, 106, 111, 121, 115, 116, 105, 99, 107, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 114, 49, 50, 13, 10, 32, 32, 32, 32, 99, 122, 99, 32, 64, 106, 111, 121, 115, 116, 105, 99, 107, 95, 116, 97, 98, 108, 101, 44, 114, 49, 51, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 33, 106, 49, 13, 10, 32, 32, 32, 32, 111, 114, 105, 32, 114, 49, 50, 44, 62, 48, 56, 48, 48, 13, 10, 33, 106, 49, 13, 10, 32, 32, 32, 32, 99, 122, 99, 32, 64, 106, 111, 121, 115, 116, 105, 99, 107, 95, 116, 97, 98, 108, 101, 43, 50, 44, 114, 49, 51, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 33, 106, 50, 13, 10, 32, 32, 32, 32, 111, 114, 105, 32, 114, 49, 50, 44, 62, 48, 52, 48, 48, 13, 10, 33, 106, 50, 13, 10, 32, 32, 32, 32, 99, 122, 99, 32, 64, 106, 111, 121, 115, 116, 105, 99, 107, 95, 116, 97, 98, 108, 101, 43, 52, 44, 114, 49, 51, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 33, 106, 51, 13, 10, 32, 32, 32, 32, 111, 114, 105, 32, 114, 49, 50, 44, 62, 48, 50, 48, 48, 13, 10, 33, 106, 51, 13, 10, 32, 32, 32, 32, 99, 122, 99, 32, 64, 106, 111, 121, 115, 116, 105, 99, 107, 95, 116, 97, 98, 108, 101, 43, 54, 44, 114, 49, 51, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 33, 106, 52, 13, 10, 32, 32, 32, 32, 111, 114, 105, 32, 114, 49, 50, 44, 62, 48, 49, 48, 48, 13, 10, 33, 106, 52, 13, 10, 32, 32, 32, 32, 99, 122, 99, 32, 64, 106, 111, 121, 115, 116, 105, 99, 107, 95, 116, 97, 98, 108, 101, 43, 56, 44, 114, 49, 51, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 33, 106, 53, 13, 10, 32, 32, 32, 32, 111, 114, 105, 32, 114, 49, 50, 44, 62, 52, 48, 48, 48, 13, 10, 33, 106, 53, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 49, 13, 10, 13, 10, 106, 111, 121, 115, 116, 105, 99, 107, 95, 116, 97, 98, 108, 101, 13, 10, 32, 32, 32, 32, 100, 97, 116, 97, 32, 62, 48, 50, 48, 48, 44, 62, 48, 56, 48, 48, 44, 62, 48, 52, 48, 48, 44, 62, 49, 48, 48, 48, 44, 62, 48, 49, 48, 48, 32, 32, 32, 32, 59, 32, 76, 68, 82, 85, 49, 13, 10, 13, 10, 59, 32, 66, 121, 32, 99, 111, 108, 117, 109, 110, 115, 44, 32, 116, 104, 101, 110, 32, 114, 111, 119, 115, 46, 32, 56, 32, 82, 111, 119, 115, 32, 112, 101, 114, 32, 99, 111, 108, 117, 109, 110, 46, 32, 78, 111, 32, 115, 104, 105, 102, 116, 32, 115, 116, 97, 116, 101, 115, 32, 45, 32, 99, 111, 110, 118, 101, 114, 116, 101, 100, 32, 116, 111, 32, 116, 104, 101, 32, 67, 111, 108, 101, 99, 111, 32, 114, 101, 116, 117, 114, 110, 115, 13, 10, 59, 32, 102, 111, 114, 32, 110, 117, 109, 98, 101, 114, 115, 44, 32, 44, 32, 97, 110, 100, 32, 46, 32, 98, 101, 99, 111, 109, 101, 32, 59, 32, 97, 110, 100, 32, 35, 46, 32, 67, 111, 110, 116, 114, 111, 108, 32, 105, 115, 32, 99, 111, 110, 116, 114, 111, 108, 49, 32, 98, 117, 116, 116, 111, 110, 50, 44, 32, 97, 110, 100, 32, 70, 99, 116, 110, 32, 105, 115, 32, 99, 111, 110, 116, 114, 111, 108, 50, 32, 98, 117, 116, 116, 111, 110, 50, 13, 10, 107, 101, 121, 98, 111, 97, 114, 100, 95, 116, 97, 98, 108, 101, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 54, 49, 44, 51, 50, 44, 49, 49, 44, 49, 53, 44, 50, 53, 52, 44, 49, 53, 44, 50, 53, 53, 44, 49, 53, 32, 32, 59, 32, 39, 61, 39, 44, 39, 32, 39, 44, 101, 110, 116, 101, 114, 44, 110, 47, 97, 44, 102, 99, 116, 110, 44, 115, 104, 105, 102, 116, 44, 99, 116, 114, 108, 44, 110, 47, 97, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 52, 54, 44, 55, 54, 44, 55, 57, 44, 57, 44, 50, 44, 56, 51, 44, 56, 55, 44, 56, 56, 32, 32, 32, 32, 32, 32, 59, 32, 39, 46, 39, 44, 39, 76, 39, 44, 39, 79, 39, 44, 39, 57, 39, 44, 39, 50, 39, 44, 39, 83, 39, 44, 39, 87, 39, 44, 39, 88, 39, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 52, 52, 44, 55, 53, 44, 55, 51, 44, 56, 44, 51, 44, 54, 56, 44, 54, 57, 44, 54, 55, 32, 32, 32, 32, 32]);
fileData3.push.apply(fileData3, [32, 59, 32, 39, 44, 39, 44, 39, 75, 39, 44, 39, 73, 39, 44, 39, 56, 39, 44, 39, 51, 39, 44, 39, 68, 39, 44, 39, 69, 39, 44, 39, 67, 39, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 55, 55, 44, 55, 52, 44, 56, 53, 44, 55, 44, 52, 44, 55, 48, 44, 56, 50, 44, 56, 54, 32, 32, 32, 32, 32, 32, 59, 32, 39, 77, 39, 44, 39, 74, 39, 44, 39, 85, 39, 44, 39, 55, 39, 44, 39, 52, 39, 44, 39, 70, 39, 44, 39, 82, 39, 44, 39, 86, 39, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 55, 56, 44, 55, 50, 44, 56, 57, 44, 54, 44, 53, 44, 55, 49, 44, 56, 52, 44, 54, 54, 32, 32, 32, 32, 32, 32, 59, 32, 39, 78, 39, 44, 39, 72, 39, 44, 39, 89, 39, 44, 39, 54, 39, 44, 39, 53, 39, 44, 39, 71, 39, 44, 39, 84, 39, 44, 39, 66, 39, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 49, 48, 44, 53, 57, 44, 56, 48, 44, 48, 44, 49, 44, 54, 53, 44, 56, 49, 44, 57, 48, 32, 32, 32, 32, 32, 32, 59, 32, 39, 47, 39, 44, 39, 59, 39, 44, 39, 80, 39, 44, 39, 48, 39, 44, 39, 49, 39, 44, 39, 65, 39, 44, 39, 81, 39, 44, 39, 90, 39, 13, 10, 13, 10, 109, 97, 115, 107, 116, 97, 98, 108, 101, 13, 10, 32, 32, 32, 32, 100, 97, 116, 97, 32, 62, 48, 49, 48, 48, 44, 62, 48, 50, 48, 48, 44, 62, 48, 52, 48, 48, 44, 62, 48, 56, 48, 48, 44, 62, 49, 48, 48, 48, 44, 62, 50, 48, 48, 48, 44, 62, 52, 48, 48, 48, 44, 62, 56, 48, 48, 48, 13, 10, 32, 32, 32, 32, 100, 97, 116, 97, 32, 62, 48, 102, 48, 48, 13, 10, 32, 32, 32, 32, 13, 10, 59, 32, 119, 97, 105, 116, 32, 102, 111, 114, 32, 102, 114, 97, 109, 101, 32, 116, 111, 32, 105, 110, 99, 114, 101, 109, 101, 110, 116, 13, 10, 119, 97, 105, 116, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 64, 102, 114, 97, 109, 101, 44, 114, 48, 13, 10, 33, 49, 13, 10, 32, 32, 32, 32, 99, 32, 114, 48, 44, 64, 102, 114, 97, 109, 101, 13, 10, 32, 32, 32, 32, 106, 101, 113, 32, 45, 33, 49, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 49, 13, 10, 13, 10, 59, 32, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 32, 109, 117, 115, 105, 99, 32, 115, 121, 115, 116, 101, 109, 13, 10, 109, 117, 115, 105, 99, 95, 105, 110, 105, 116, 13, 10, 59, 32, 109, 117, 116, 101, 32, 115, 111, 117, 110, 100, 32, 99, 104, 105, 112, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 57, 102, 98, 102, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 83, 79, 85, 78, 68, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 83, 79, 85, 78, 68, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 100, 102, 102, 102, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 83, 79, 85, 78, 68, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 83, 79, 85, 78, 68, 13, 10, 13, 10, 32, 32, 32, 32, 46, 105, 102, 101, 113, 32, 67, 86, 66, 65, 83, 73, 67, 95, 77, 85, 83, 73, 67, 95, 80, 76, 65, 89, 69, 82, 13, 10, 59, 32, 114, 101, 116, 117, 114, 110, 32, 105, 102, 32, 119, 101, 32, 100, 111, 110, 39, 116, 32, 104, 97, 118, 101, 32, 116, 104, 101, 32, 112, 108, 97, 121, 101, 114, 32, 99, 111, 109, 112, 105, 108, 101, 100, 32, 105, 110, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 49, 13, 10, 32, 32, 32, 32, 46, 101, 110, 100, 105, 102, 13, 10, 13, 10, 59, 32, 97, 108, 108, 32, 116, 104, 101, 32, 114, 101, 115, 116, 32, 111, 102, 32, 116, 104, 101, 32, 112, 108, 97, 121, 101, 114, 32, 105, 115, 32, 117, 110, 100, 101, 114, 32, 116, 104, 105, 115, 32, 105, 102, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 46, 105, 102, 110, 101, 32, 67, 86, 66, 65, 83, 73, 67, 95, 77, 85, 83, 73, 67, 95, 80, 76, 65, 89, 69, 82, 13, 10, 13, 10, 59, 32, 115, 101, 116, 32, 115, 111, 109, 101, 46, 46, 46, 32, 116, 104, 105, 110, 103, 115, 63, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 102, 102, 48, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 97, 117, 100, 105, 111, 95, 118, 111, 108, 52, 104, 119, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 97, 117, 100, 105, 111, 95, 99, 111, 110, 116, 114, 111, 108, 13, 10, 13, 10, 59, 32, 115, 101, 116, 32, 117, 112, 32, 115, 105, 108, 101, 110, 99, 101, 44, 32, 97, 110, 100, 32, 102, 97, 108, 108, 32, 116, 104, 114, 111, 117, 103, 104, 32, 105, 110, 116, 111, 32, 109, 117, 115, 105, 99, 95, 112, 108, 97, 121, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 109, 117, 115, 105, 99, 95, 115, 105, 108, 101, 110, 99, 101, 13, 10, 13, 10, 59, 13, 10, 59, 32, 80, 108, 97, 121, 32, 109, 117, 115, 105, 99, 46, 13, 10, 59, 32, 82, 48, 32, 61, 32, 80, 111, 105, 110, 116, 101, 114, 32, 116, 111, 32, 109, 117, 115, 105, 99, 32, 40, 111, 114, 105, 103, 105, 110, 97, 108, 32, 89, 89, 65, 65, 41, 13, 10, 59, 13, 10, 109, 117, 115, 105, 99, 95, 112, 108, 97, 121, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 105, 110, 116, 115, 32, 111, 102, 102, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 114, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 103, 101, 116, 32, 97, 32, 122, 101, 114, 111, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 50, 44, 64, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 99, 111, 117, 110, 116, 101, 114, 32, 32, 32, 32, 32, 59, 32, 115, 116, 111, 114, 101, 32, 105, 110, 32, 116, 104, 101, 32, 99, 111, 117, 110, 116, 101, 114, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 42, 114, 48, 43, 44, 114, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 102, 101, 116, 99, 104, 32, 116, 104, 101, 32, 102, 105, 114, 115, 116, 32, 98, 121, 116, 101, 32, 111, 102, 32, 116, 104, 101, 32, 109, 117, 115, 105, 99, 32, 97, 110, 100, 32, 105, 110, 99, 114, 101, 109, 101, 110, 116, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 48, 44, 64, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 116, 111, 114, 101, 32, 116, 104, 101, 32, 117, 112, 100, 97, 116, 101, 100, 32, 97, 100, 100, 114, 101, 115, 115, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 50, 44, 64, 109, 117, 115, 105, 99, 95, 116, 105, 109, 105, 110, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 116, 111, 114, 101, 32, 102, 101, 116, 99, 104, 101, 100, 32, 98, 121, 116, 101, 32, 105, 110, 32, 116, 105, 109, 105, 110, 103, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 50, 44, 62, 48, 49, 48, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 50, 44, 64, 109, 117, 115, 105, 99, 95, 112, 108, 97, 121, 105, 110, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 110, 101, 101, 100, 115, 32, 116, 111, 32, 98, 101, 32, 97, 32, 49, 32, 102, 111, 114, 32, 66, 65, 83, 73, 67, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 64, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 44, 64, 109, 117, 115, 105, 99, 95, 115, 116, 97, 114, 116, 32, 32, 59, 32, 114, 101, 109, 101, 109, 98, 101, 114, 32, 116, 104, 105, 115, 32, 112, 111, 105, 110, 116, 13, 10, 13, 10, 32, 32, 32, 32, 46, 105, 102, 110, 101, 32, 67, 86, 66, 65, 83, 73, 67, 95, 66, 65, 78, 75, 95, 83, 87, 73, 84, 67, 72, 73, 78, 71, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 64, 62, 55, 102, 102, 101, 44, 64, 109, 117, 115, 105, 99, 95, 98, 97, 110, 107, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 97, 118, 101, 32, 98, 97, 110, 107, 32, 115, 119, 105, 116, 99, 104, 32, 112, 97, 103, 101, 32, 102, 111, 114, 32, 109, 117, 115, 105, 99, 13, 10, 32, 32, 32, 32, 46, 101, 110, 100, 105, 102, 13, 10, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 105, 110, 116, 115, 32, 98, 97, 99, 107, 32, 111, 110, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 97, 99, 107, 32, 116, 111, 32, 99, 97, 108, 108, 101, 114, 13, 10, 13, 10, 59, 13, 10, 59, 32, 71, 101, 110, 101, 114, 97, 116, 101, 115, 32, 109, 117, 115, 105, 99, 32, 45, 32, 99, 97, 108, 108, 101, 100, 32, 102, 114, 111, 109, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 32, 40, 114, 101, 103, 115, 32, 97, 114, 101, 32, 115, 97, 118, 101, 100, 41, 13, 10, 59, 13, 10, 109, 117, 115, 105, 99, 95, 103, 101, 110, 101, 114, 97, 116, 101, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 49, 44, 114, 54, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 114, 52, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 117, 115, 101, 32, 114, 52, 32, 97, 115, 32, 97, 32, 122, 101, 114, 111, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 52, 44, 64, 97, 117, 100, 105, 111, 95, 118, 111, 108, 49, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 52, 44, 64, 97, 117, 100, 105, 111, 95, 118, 111, 108, 50, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 52, 44, 64, 97, 117, 100, 105, 111, 95, 118, 111, 108, 51, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 102, 102, 48, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 97, 117, 100, 105, 111, 95, 118, 111, 108, 52, 104, 119, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 99, 111, 117, 110, 116, 101, 114, 44, 114, 48, 32, 32, 32, 32, 32, 59, 32, 99, 104, 101, 99, 107, 32, 99, 111, 117, 110, 116, 100, 111, 119, 110, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 33, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 105, 102, 32, 110, 111, 116, 32, 122, 101, 114, 111, 44, 32, 115, 107, 105, 112, 32, 97, 104, 101, 97, 100, 13, 10, 33, 49, 13, 10, 32, 32, 32, 32, 46, 105, 102, 110, 101, 32, 67, 86, 66, 65, 83, 73, 67, 95, 66, 65, 78, 75, 95, 83, 87, 73, 84, 67, 72, 73, 78, 71, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 64, 109, 117, 115, 105, 99, 95, 98, 97, 110, 107, 44, 114, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 103, 101, 116, 32, 109, 117, 115, 105, 99, 32, 98, 97, 110, 107, 32, 115, 119, 105, 116, 99, 104, 32, 112, 97, 103, 101, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 42, 114, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 101, 116, 32, 105, 116, 13, 10, 32, 32, 32, 32, 46, 101, 110, 100, 105, 102, 13, 10, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 64, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 44, 114, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 107, 101, 101, 112, 32, 109, 117, 115, 105, 99, 32, 112, 111, 105, 110, 116, 101, 114, 32, 105, 110, 32, 114, 49, 32, 45, 32, 117, 112, 100, 97, 116, 101, 32, 105, 116, 32, 105, 102, 32, 110, 101, 101, 100, 101, 100, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 42, 114, 49, 44, 114, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 99, 104, 101, 99, 107, 105, 110, 103, 32, 105, 102, 32, 102, 105, 114, 115, 116, 32, 98, 121, 116, 101, 32, 111, 102, 32, 112, 97, 99, 107, 32, 105, 115, 32, 108, 111, 111, 112, 32, 111, 114, 32, 101, 110, 100, 13, 10, 32, 32, 32, 32, 99, 105, 32, 114, 48, 44, 62, 102, 101, 48, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 101, 110, 100, 32, 111, 102, 32, 109, 117, 115, 105, 99, 63, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 33, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 110, 111, 112, 101, 44, 32, 106, 117, 109, 112, 32, 97, 104, 101, 97, 100, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 52, 44, 64, 109, 117, 115, 105, 99, 95, 112, 108, 97, 121, 105, 110, 103, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 107, 101, 101, 112, 32, 97, 116, 32, 115, 97, 109, 101, 32, 112, 108, 97, 99, 101, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 54, 13, 10, 13, 10, 33, 51, 9, 13, 10, 32, 32, 32, 32, 99, 105, 32, 114, 48, 44, 62, 102, 100, 48, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 114, 101, 112, 101, 97, 116, 63, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 33, 52, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 110, 111, 112, 101, 44, 32, 115, 107, 105, 112, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 64, 109, 117, 115, 105, 99, 95, 115, 116, 97, 114, 116, 44, 64, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 32, 32, 59, 32, 121, 101, 112, 44, 32, 99, 111, 112, 121, 32, 98, 97, 99, 107, 32, 116, 104, 101, 32, 108, 111, 111, 112, 32, 112, 111, 105, 110, 116, 13, 10, 32, 32, 32, 32, 106, 109, 112, 32, 45, 33, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 97, 110, 100, 32, 115, 116, 97, 114, 116, 32, 97, 103, 97, 105, 110, 32, 40, 83, 111, 32, 109, 117, 115, 105, 99, 32, 116, 104, 97, 116, 32, 83, 84, 65, 82, 84, 83, 32, 119, 105, 116, 104, 32, 70, 68, 32, 119, 105, 108, 108, 32, 115, 112, 105, 110, 32, 102, 111, 114, 101, 118, 101, 114, 32, 45, 32, 98, 117, 103, 41, 13, 10, 13, 10, 33, 52, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 109, 117, 115, 105, 99, 95, 116, 105, 109, 105, 110, 103, 44, 114, 48, 13, 10, 32, 32, 32, 32, 97, 110, 100, 105, 32, 114, 48, 44, 62, 51, 102, 48, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 114, 101, 115, 116, 97, 114, 116, 32, 110, 111, 116, 101, 32, 116, 105, 109, 101, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 99, 111, 117, 110, 116, 101, 114, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 42, 114, 49, 43, 44, 114, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 102, 101, 116, 99, 104, 32, 98, 121, 116, 101, 32, 97, 110, 100, 32, 105, 110, 99, 114, 101, 109, 101, 110, 116, 13, 10, 32, 32, 32, 32, 99, 105, 32, 114, 48, 44, 62, 51, 102, 48, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 117, 115, 116, 97, 105, 110, 63, 13, 10, 32, 32, 32, 32, 106, 101, 113, 32, 33, 53, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 48, 44, 114, 50, 13, 10, 32, 32, 32, 32, 97, 110, 100, 105, 32, 114, 50, 44, 62, 99, 48, 48, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 50, 44, 64, 109, 117, 115, 105, 99, 95, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 49, 32, 32, 32, 32, 32, 59, 32, 115, 97, 118, 101, 32, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 32, 116, 121, 112, 101, 13, 10, 32, 32, 32, 32, 97, 110, 100, 105, 32, 114, 48, 44, 62, 51, 102, 48, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 97, 118, 101, 32, 110, 111, 116, 101, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 52, 44, 64, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 49, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 97, 110, 100, 32, 114, 101, 115, 101, 116, 32, 99, 111, 117, 110, 116, 13, 10, 13, 10, 33, 53, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 42, 114, 49, 43, 44, 114, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 102, 101, 116, 99, 104, 32, 110, 101, 120, 116, 32, 98, 121, 116, 101, 32, 97, 110, 100, 32, 105, 110, 99, 114, 101, 109, 101, 110, 116, 13, 10, 32, 32, 32, 32, 99, 105, 32, 114, 48, 44, 62, 51, 102, 48, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 117, 115, 116, 97, 105, 110, 13, 10, 32, 32, 32, 32, 106, 101, 113, 32, 33, 54, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 48, 44, 114, 50, 13, 10, 32, 32, 32, 32, 97, 110, 100, 105, 32, 114, 50, 44, 62, 99, 48, 48, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 50, 44, 64, 109, 117, 115, 105, 99, 95, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 50, 13, 10, 32, 32, 32, 32, 97, 110, 100, 105, 32, 114, 48, 44, 62, 51, 102, 48, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 50, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 52, 44, 64, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 50, 13, 10, 32, 32, 32, 32, 13, 10, 33, 54, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 42, 114, 49, 43, 44, 114, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 102, 101, 116, 99, 104, 32, 110, 101, 120, 116, 32, 98, 121, 116, 101, 32, 97, 110, 100, 32, 105, 110, 99, 114, 101, 109, 101, 110, 116, 13, 10, 32, 32, 32, 32, 99, 105, 32, 114, 48, 44, 62, 51, 102, 48, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 117, 115, 116, 97, 105, 110, 13, 10, 32, 32, 32, 32, 106, 101, 113, 32, 33, 55, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 48, 44, 114, 50, 13, 10, 32, 32, 32, 32, 97, 110, 100, 105, 32, 114, 50, 44, 62, 99, 48, 48, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 50, 44, 64, 109, 117, 115, 105, 99, 95, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 51, 13, 10, 32, 32, 32, 32, 97, 110, 100, 105, 32, 114, 48, 44, 62, 51, 102, 48, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 51, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 52, 44, 64, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 51, 13, 10, 32, 32, 32, 32, 13, 10, 33, 55, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 42, 114, 49, 43, 44, 114, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 102, 101, 116, 99, 104, 32, 100, 114, 117, 109, 32, 98, 121, 116, 101, 32, 97, 110, 100, 32, 105, 110, 99, 114, 101, 109, 101, 110, 116, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 109, 117, 115, 105, 99, 95, 100, 114, 117, 109, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 52, 44, 64, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 52, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 44, 64, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 116, 104, 105, 115, 32, 98, 114, 105, 110, 103, 115, 32, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 32, 117, 112, 32, 116, 111, 32, 100, 97, 116, 101, 32, 45, 32, 100, 111, 110, 101, 32, 119, 105, 116, 104, 32, 114, 49, 13, 10, 32, 32, 32, 32, 13, 10, 33, 50, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 114, 50, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 49, 44, 114, 50, 13, 10, 32, 32, 32, 32, 106, 101, 113, 32, 33, 56, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 109, 117, 115, 105, 99, 95, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 49, 44, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 49, 44, 114, 49, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 50, 102, 114, 101, 113, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 48, 44, 64, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 49, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 49, 44, 64, 97, 117, 100, 105, 111, 95, 118, 111, 108, 49, 13, 10, 13, 10, 33, 56, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 50, 44, 114, 50, 13, 10, 32, 32, 32, 32, 106, 101, 113, 32, 33, 57, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 109, 117, 115, 105, 99, 95, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 50, 44, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 50, 44, 114, 49, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 50, 102, 114, 101, 113, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 48, 44, 64, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 50, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 49, 44, 64, 97, 117, 100, 105, 111, 95, 118, 111, 108, 50, 13, 10, 32, 32, 32, 32, 13, 10, 33, 57, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 51, 44, 114, 50, 13, 10, 32, 32, 32, 32, 106, 101, 113, 32, 33, 49, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 109, 117, 115, 105, 99, 95, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 51, 44, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 51, 44, 114, 49, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 50, 102, 114, 101, 113, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 48, 44, 64, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 51, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 49, 44, 64, 97, 117, 100, 105, 111, 95, 118, 111, 108, 51, 13, 10, 32, 32, 32, 32, 13, 10, 33, 49, 48, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 114, 50, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 109, 117, 115, 105, 99, 95, 100, 114, 117, 109, 44, 114, 50, 13, 10, 32, 32, 32, 32, 106, 101, 113, 32, 33, 49, 49, 13, 10, 32, 32, 32, 32, 99, 105, 32, 114, 50, 44, 62, 48, 49, 48, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 49, 32, 45, 32, 108, 111, 110, 103, 32, 100, 114, 117, 109, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 33, 49, 50, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 52, 44, 114, 50, 13, 10, 32, 32, 32, 32, 99, 105, 32, 114, 50, 44, 62, 48, 51, 48, 48, 13, 10, 32, 32, 32, 32, 106, 104, 101, 32, 33, 49, 49, 13, 10, 32, 32, 32, 32, 13, 10, 33, 49, 53, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 101, 99, 102, 53, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 97, 117, 100, 105, 111, 95, 110, 111, 105, 115, 101, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 97, 117, 100, 105, 111, 95, 118, 111, 108, 52, 104, 119, 13, 10, 32, 32, 32, 32, 106, 109, 112, 32, 33, 49, 49, 13, 10, 13, 10, 33, 49, 50, 9, 13, 10, 32, 32, 32, 32, 99, 105, 32, 114, 50, 44, 62, 48, 50, 48, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 50, 32, 45, 32, 115, 104, 111, 114, 116, 32, 100, 114, 117, 109, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 33, 49, 52, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 52, 44, 114, 50, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 33, 49, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 119, 97, 115, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 99, 109, 112, 32, 35, 48, 32, 105, 110, 32, 111, 114, 105, 103, 105, 110, 97, 108, 32, 99, 111, 100, 101, 46, 46, 46, 32, 110, 101, 101, 100, 101, 100, 63, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 101, 100, 102, 53, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 97, 117, 100, 105, 111, 95, 110, 111, 105, 115, 101, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 97, 117, 100, 105, 111, 95, 118, 111, 108, 52, 104, 119, 13, 10, 32, 32, 32, 32, 106, 109, 112, 32, 33, 49, 49, 13, 10, 13, 10, 33, 49, 52, 13, 10, 59, 32, 51, 32, 45, 32, 82, 111, 108, 108, 32, 119, 97, 115, 32, 99, 111, 109, 109, 101, 110, 116, 101, 100, 32, 111, 117, 116, 46, 46, 46, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 52, 44, 114, 50, 13, 10, 32, 32, 32, 32, 99, 105, 32, 114, 50, 44, 62, 48, 50, 48, 48, 13, 10, 32, 32, 32, 32, 106, 108, 32, 45, 33, 49, 53, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 50, 44, 49, 13, 10, 32, 32, 32, 32, 115, 98, 32, 64, 109, 117, 115, 105, 99, 95, 116, 105, 109, 105, 110, 103, 44, 114, 50, 13, 10, 32, 32, 32, 32, 106, 110, 99, 32, 33, 49, 49, 13, 10, 32, 32, 32, 32, 99, 105, 32, 114, 50, 44, 62, 48, 52, 48, 48, 13, 10, 32, 32, 32, 32, 106, 108, 32, 45, 33, 49, 53, 13, 10, 13, 10, 33, 49, 49, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 114, 49, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 50, 44, 62, 49, 48, 48, 48, 13, 10, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 49, 44, 114, 49, 13, 10, 32, 32, 32, 32, 97, 105, 32, 114, 49, 44, 62, 48, 49, 48, 48, 13, 10, 32, 32, 32, 32, 99, 105, 32, 114, 49, 44, 62, 49, 56, 48, 48, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 36, 43, 54, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 44, 62, 49, 48, 48, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 49, 44, 64, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 49, 13, 10, 32, 32, 32, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 50, 44, 114, 49, 13, 10, 32, 32, 32, 32, 97, 105, 32, 114, 49, 44, 62, 48, 49, 48, 48, 13, 10, 32, 32, 32, 32, 99, 105, 32, 114, 49, 44, 62, 49, 56, 48, 48, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 36, 43, 54, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 44, 62, 49, 48, 48, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 49, 44, 64, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 50, 13, 10, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 51, 44, 114, 49, 13, 10, 32, 32, 32, 32, 97, 105, 32, 114, 49, 44, 62, 48, 49, 48, 48, 13, 10, 32, 32, 32, 32, 99, 105, 32, 114, 49, 44, 62, 49, 56, 48, 48, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 36, 43, 54, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 44, 62, 49, 48, 48, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 49, 44, 64, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 51, 13, 10, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 44, 62, 48, 49, 48, 48, 13, 10, 32, 32, 32, 32, 97, 98, 32, 114, 49, 44, 64, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 52, 13, 10, 32, 32, 32, 32, 115, 98, 32, 114, 49, 44, 64, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 99, 111, 117, 110, 116, 101, 114, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 54, 13, 10, 13, 10, 59, 13, 10, 59, 32, 102, 108, 117, 116, 101, 32, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 13, 10, 59, 13, 10, 109, 117, 115, 105, 99, 95, 102, 108, 117, 116, 101, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 64, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 115, 95, 116, 97, 98, 108, 101, 40, 114, 50, 41, 44, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 102, 108, 117, 116, 101, 110, 111, 116, 101, 50, 40, 114, 49, 41, 44, 114, 50, 13, 10, 32, 32, 32, 32, 115, 114, 97, 32, 114, 50, 44, 56, 13, 10, 32, 32, 32, 32, 97, 32, 114, 50, 44, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 102, 108, 117, 116, 101, 118, 111, 108, 49, 40, 114, 49, 41, 44, 114, 49, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 49, 13, 10, 32, 32, 32, 32, 13, 10, 102, 108, 117, 116, 101, 118, 111, 108, 49, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 49, 48, 44, 49, 50, 44, 49, 51, 44, 49, 51, 44, 49, 50, 44, 49, 50, 44, 49, 50, 44, 49, 50, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 49, 49, 44, 49, 49, 44, 49, 49, 44, 49, 49, 44, 49, 48, 44, 49, 48, 44, 49, 48, 44, 49, 48, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 49, 49, 44, 49, 49, 44, 49, 49, 44, 49, 49, 44, 49, 48, 44, 49, 48, 44, 49, 48, 44, 49, 48, 13, 10, 13, 10, 102, 108, 117, 116, 101, 110, 111, 116, 101, 50, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 49, 44, 49, 44, 49, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 48, 44, 49, 44, 49, 44, 49, 44, 48, 44, 49, 44, 49, 44, 49, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 48, 44, 49, 44, 49, 44, 49, 44, 48, 44, 49, 44, 49, 44, 49, 13, 10, 13, 10, 32, 32, 32, 32, 59, 13, 10, 32, 32, 32, 32, 59, 32, 67, 111, 110, 118, 101, 114, 116, 115, 32, 110, 111, 116, 101, 32, 116, 111, 32, 102, 114, 101, 113, 117, 101, 110, 99, 121, 46, 13, 10, 32, 32, 32, 32, 59, 32, 73, 110, 112, 117, 116, 13, 10, 32, 32, 32, 32, 59, 32, 32, 32, 65, 32, 61, 32, 73, 110, 115, 116, 114, 117, 109, 101, 110, 116, 32, 32, 32, 32, 32, 32, 32, 32, 32, 40, 114, 48, 32, 45, 32, 109, 115, 98, 41, 13, 10, 32, 32, 32, 32, 59, 32, 32, 32, 88, 32, 61, 32, 73, 110, 115, 116, 114, 117, 109, 101, 110, 116, 32, 99, 111, 117, 110, 116, 101, 114, 32, 40, 114, 49, 32, 45, 32, 109, 115, 98, 41, 13, 10, 32, 32, 32, 32, 59, 32, 32, 32, 89, 32, 61, 32, 78, 111, 116, 101, 32, 40, 49, 45, 54, 50, 41, 32, 32, 32, 32, 32, 32, 32, 32, 40, 114, 50, 32, 45, 32, 109, 115, 98, 41, 13, 10, 32, 32, 32, 32, 59, 32, 79, 117, 116, 112, 117, 116, 13, 10, 32, 32, 32, 32, 59, 32, 32, 32, 89, 65, 32, 61, 32, 70, 114, 101, 113, 117, 101, 110, 99, 121, 46, 32, 40, 114, 48, 32, 45, 32, 119, 111, 114, 100, 41, 13, 10, 32, 32, 32, 32, 59, 32, 32, 32, 88, 32, 61, 32, 86, 111, 108, 117, 109, 101, 46, 32, 32, 32, 32, 32, 40, 114, 49, 32, 45, 32, 109, 115, 98, 41, 13, 10, 32, 32, 32, 32, 59, 13, 10, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 50, 102, 114, 101, 113, 13, 10, 32, 32, 32, 32, 115, 114, 108, 32, 114, 50, 44, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 109, 97, 107, 101, 32, 105, 110, 116, 32, 115, 111, 32, 116, 104, 101, 121, 32, 99, 97, 110, 32, 98, 101, 32, 105, 110, 100, 101, 120, 101, 115, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 50, 44, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 109, 97, 107, 101, 32, 119, 111, 114, 100, 32, 105, 110, 100, 101, 120, 13, 10, 32, 32, 32, 32, 115, 114, 108, 32, 114, 49, 44, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 106, 117, 115, 116, 32, 98, 121, 116, 101, 32, 105, 110, 100, 101, 120, 32, 104, 101, 114, 101, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 49, 44, 114, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 99, 111, 110, 118, 101, 110, 105, 101, 110, 116, 108, 121, 32, 119, 101, 32, 110, 111, 119, 32, 107, 110, 111, 119, 32, 105, 116, 39, 115, 32, 62, 48, 48, 32, 115, 111, 32, 119, 101, 32, 99, 97, 110, 32, 99, 108, 101, 97, 114, 32, 111, 117, 116, 32, 114, 48, 39, 115, 32, 76, 83, 66, 32, 102, 111, 114, 32, 101, 97, 115, 105, 101, 114, 32, 116, 101, 115, 116, 115, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 48, 13, 10, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 99, 105, 32, 114, 48, 44, 62, 52, 48, 48, 48, 13, 10, 32, 32, 32, 32, 106, 108, 32, 109, 117, 115, 105, 99, 95, 112, 105, 97, 110, 111, 13, 10, 32, 32, 32, 32, 106, 101, 113, 32, 109, 117, 115, 105, 99, 95, 99, 108, 97, 114, 105, 110, 101, 116, 13, 10, 32, 32, 32, 32, 99, 105, 32, 114, 48, 44, 62, 56, 48, 48, 48, 13, 10, 32, 32, 32, 32, 106, 101, 113, 32, 109, 117, 115, 105, 99, 95, 102, 108, 117, 116, 101, 13, 10, 32, 32, 32, 32, 13, 10, 59, 13, 10, 59, 32, 66, 97, 115, 115, 32, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 13, 10, 59, 32, 13, 10, 109, 117, 115, 105, 99, 95, 98, 97, 115, 115, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 64, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 115, 95, 116, 97, 98, 108, 101, 40, 114, 50, 41, 44, 114, 48, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 48, 44, 49, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 98, 97, 115, 115, 118, 111, 108, 49, 40, 114, 49, 41, 44, 114, 49, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 49, 13, 10, 13, 10, 98, 97, 115, 115, 118, 111, 108, 49, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 49, 51, 44, 49, 51, 44, 49, 50, 44, 49, 50, 44, 49, 49, 44, 49, 49, 44, 49, 48, 44, 49, 48, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 57, 44, 57, 44, 56, 44, 56, 44, 55, 44, 55, 44, 54, 44, 54, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 53, 44, 53, 44, 52, 44, 52, 44, 51, 44, 51, 44, 50, 44, 50, 13, 10, 13, 10, 59, 13, 10, 59, 32, 80, 105, 97, 110, 111, 32, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 13, 10, 59, 32, 13, 10, 109, 117, 115, 105, 99, 95, 112, 105, 97, 110, 111, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 64, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 115, 95, 116, 97, 98, 108, 101, 40, 114, 50, 41, 44, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 112, 105, 97, 110, 111, 118, 111, 108, 49, 40, 114, 49, 41, 44, 114, 49, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 49, 13, 10, 13, 10, 112, 105, 97, 110, 111, 118, 111, 108, 49, 9, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 49, 50, 44, 49, 49, 44, 49, 49, 44, 49, 48, 44, 49, 48, 44, 57, 44, 57, 44, 56, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 56, 44, 55, 44, 55, 44, 54, 44, 54, 44, 53, 44, 53, 44, 52, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 52, 44, 52, 44, 53, 44, 53, 44, 52, 44, 52, 44, 51, 44, 51, 13, 10, 13, 10, 59, 13, 10, 59, 32, 67, 108, 97, 114, 105, 110, 101, 116, 32, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 13, 10, 59, 13, 10, 109, 117, 115, 105, 99, 95, 99, 108, 97, 114, 105, 110, 101, 116, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 64, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 115, 95, 116, 97, 98, 108, 101, 40, 114, 50, 41, 44, 114, 48, 13, 10, 32, 32, 32, 32, 115, 114, 108, 32, 114, 48, 44, 49, 13, 10, 32, 32, 32, 32, 106, 110, 99, 32, 33, 49, 13, 10, 32, 32, 32, 32, 105, 110, 99, 32, 114, 48, 13, 10, 33, 49, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 99, 108, 97, 114, 105, 110, 101, 116, 110, 111, 116, 101, 50, 40, 114, 49, 41, 44, 114, 50, 13, 10, 32, 32, 32, 32, 115, 114, 97, 32, 114, 50, 44, 56, 13, 10, 32, 32, 32, 32, 97, 32, 114, 50, 44, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 99, 108, 97, 114, 105, 110, 101, 116, 118, 111, 108, 49, 40, 114, 49, 41, 44, 114, 49, 32, 32, 32, 59, 32, 109, 115, 98, 32, 111, 110, 108, 121, 63, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 49, 13, 10, 13, 10, 99, 108, 97, 114, 105, 110, 101, 116, 118, 111, 108, 49, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 49, 51, 44, 49, 52, 44, 49, 52, 44, 49, 51, 44, 49, 51, 44, 49, 50, 44, 49, 50, 44, 49, 50, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 49, 49, 44, 49, 49, 44, 49, 49, 44, 49, 49, 44, 49, 50, 44, 49, 50, 44, 49, 50, 44, 49, 50, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 49, 49, 44, 49, 49, 44, 49, 49, 44, 49, 49, 44, 49, 50, 44, 49, 50, 44, 49, 50, 44, 49, 50, 13, 10, 13, 10, 99, 108, 97, 114, 105, 110, 101, 116, 110, 111, 116, 101, 50, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 48, 44, 48, 44, 48, 44, 48, 44, 45, 49, 44, 45, 50, 44, 45, 49, 44, 48, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 49, 44, 50, 44, 49, 44, 48, 44, 45, 49, 44, 45, 50, 44, 45, 49, 44, 48, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 49, 44, 50, 44, 49, 44, 48, 44, 45, 49, 44, 45, 50, 44, 45, 49, 44, 48, 13, 10, 13, 10, 32, 32, 32, 32, 59, 13, 10, 32, 32, 32, 32, 59, 32, 77, 117, 115, 105, 99, 97, 108, 32, 110, 111, 116, 101, 115, 32, 116, 97, 98, 108, 101, 46, 13, 10, 32, 32, 32, 32, 59, 13, 10, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 115, 95, 116, 97, 98, 108, 101, 13, 10, 32, 32, 32, 32, 59, 32, 83, 105, 108, 101, 110, 99, 101, 32, 45, 32, 49, 32, 45, 32, 78, 111, 116, 101, 58, 32, 116, 104, 101, 32, 84, 73, 32, 115, 111, 117, 110, 100, 32, 99, 104, 105, 112, 32, 105, 115, 32, 110, 111, 116, 32, 109, 117, 116, 101, 32, 97, 116, 32, 48, 44, 32, 105, 116, 39, 115, 32, 97, 99, 116, 117, 97, 108, 108, 121, 32, 48, 120, 52, 48, 48, 46, 32, 49, 32, 105, 115, 32, 98, 101, 121, 111, 110, 100, 32, 104, 101, 97, 114, 105, 110, 103, 32, 114, 97, 110, 103, 101, 46, 13, 10, 32, 32, 32, 32, 100, 97, 116, 97, 32, 49, 13, 10, 9, 59, 32, 86, 97, 108, 117, 101, 115, 32, 102, 111, 114, 32, 51, 46, 53, 56, 32, 109, 104, 122, 46, 13, 10, 9, 59, 32, 50, 110, 100, 32, 111, 99, 116, 97, 118, 101, 32, 45, 32, 73, 110, 100, 101, 120, 32, 49, 13, 10, 9, 100, 97, 116, 97, 32, 49, 55, 49, 48, 44, 49, 54, 49, 52, 44, 49, 53, 50, 52, 44, 49, 52, 51, 56, 44, 49, 51, 53, 55, 44, 49, 50, 56, 49, 44, 49, 50, 48, 57, 44, 49, 49, 52, 49, 44, 49, 48, 55, 55, 44, 49, 48, 49, 55, 44, 57, 54, 48, 44, 57, 48, 54, 13, 10, 9, 59, 32, 51, 114, 100, 32, 111, 99, 116, 97, 118, 101, 32, 45, 32, 73, 110, 100, 101, 120, 32, 49, 51, 13, 10, 9, 100, 97, 116, 97, 32, 56, 53, 53, 44, 56, 48, 55, 44, 55, 54, 50, 44, 55, 49, 57, 44, 54, 55, 57, 44, 54, 52, 49, 44, 54, 48, 53, 44, 53, 55, 49, 44, 53, 51, 57, 44, 53, 48, 56, 44, 52, 56, 48, 44, 52, 53, 51, 13, 10, 9, 59, 32, 52, 116, 104, 32, 111, 99, 116, 97, 118, 101, 32, 45, 32, 73, 110, 100, 101, 120, 32, 50, 53, 13, 10, 9, 100, 97, 116, 97, 32, 52, 50, 56, 44, 52, 48, 52, 44, 51, 56, 49, 44, 51, 54, 48, 44, 51, 51, 57, 44, 51, 50, 48, 44, 51, 48, 50, 44, 50, 56, 53, 44, 50, 54, 57, 44, 50, 53, 52, 44, 50, 52, 48, 44, 50, 50, 54, 13, 10, 9, 59, 32, 53, 116, 104, 32, 111, 99, 116, 97, 118, 101, 32, 45, 32, 73, 110, 100, 101, 120, 32, 51, 55, 13, 10, 9, 100, 97, 116, 97, 32, 50, 49, 52, 44, 50, 48, 50, 44, 49, 57, 48, 44, 49, 56, 48, 44, 49, 55, 48, 44, 49, 54, 48, 44, 49, 53, 49, 44, 49, 52, 51, 44, 49, 51, 53, 44, 49, 50, 55, 44, 49, 50, 48, 44, 49, 49, 51, 13, 10, 9, 59, 32, 54, 116, 104, 32, 111, 99, 116, 97, 118, 101, 32, 45, 32, 73, 110, 100, 101, 120, 32, 52, 57, 13, 10, 9, 100, 97, 116, 97, 32, 49, 48, 55, 44, 49, 48, 49, 44, 57, 53, 44, 57, 48, 44, 56, 53, 44, 56, 48, 44, 55, 54, 44, 55, 49, 44, 54, 55, 44, 54, 52, 44, 54, 48, 44, 53, 55, 13, 10, 9, 59, 32, 55, 116, 104, 32, 111, 99, 116, 97, 118, 101, 32, 45, 32, 73, 110, 100, 101, 120, 32, 54, 49, 13, 10, 9, 100, 97, 116, 97, 32, 53, 51, 44, 53, 48, 44, 52, 56, 13, 10, 13, 10, 59, 32, 104, 97, 110, 100, 108, 101, 32, 116, 104, 101, 32, 104, 97, 114, 100, 119, 97, 114, 101, 32, 115, 105, 100, 101, 32, 111, 102, 32, 116, 104, 101, 32, 109, 117, 115, 105, 99, 32, 112, 108, 97, 121, 101, 114, 13, 10, 109, 117, 115, 105, 99, 95, 104, 97, 114, 100, 119, 97, 114, 101, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 109, 117, 115, 105, 99, 95, 109, 111, 100, 101, 44, 114, 48, 13, 10, 32, 32, 32, 32, 99, 105, 32, 114, 48, 44, 62, 48, 52, 48, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 112, 108, 97, 121, 32, 115, 105, 109, 112, 108, 101, 63, 13, 10, 32, 32, 32, 32, 106, 108, 32, 33, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 121, 101, 115, 44, 32, 106, 117, 109, 112, 13, 10, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 97, 117, 100, 105, 111, 95, 118, 111, 108, 50, 44, 114, 48, 32, 32, 59, 32, 119, 104, 97, 116, 32, 105, 115, 32, 116, 104, 105, 115, 32, 98, 108, 111, 99, 107, 39, 115, 32, 105, 110, 116, 101, 110, 116, 63, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 33, 55, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 97, 117, 100, 105, 111, 95, 118, 111, 108, 51, 44, 114, 48, 13, 10, 32, 32, 32, 32, 106, 101, 113, 32, 33, 55, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 97, 117, 100, 105, 111, 95, 118, 111, 108, 50, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 97, 117, 100, 105, 111, 95, 118, 111, 108, 51, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 64, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 51, 44, 64, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 50, 13, 10, 32, 32, 32, 32, 13, 10, 33, 55, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 44, 62, 57, 102, 48, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 109, 117, 116, 101, 32, 100, 101, 102, 97, 117, 108, 116, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 64, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 49, 44, 114, 48, 13, 10, 32, 32, 32, 32, 99, 105, 32, 114, 48, 44, 62, 48, 52, 48, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 102, 105, 108, 116, 101, 114, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97, 110, 103, 101, 13, 10, 32, 32, 32, 32, 106, 104, 101, 32, 33, 49, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 48, 44, 114, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 119, 114, 105, 116, 101, 32, 108, 101, 97, 115, 116, 32, 115, 105, 103, 110, 105, 102, 105, 99, 97, 110, 116, 32, 112, 108, 117, 115, 32, 99, 111, 109, 109, 97, 110, 100, 32, 110, 105, 98, 98, 108, 101, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 49, 13, 10, 32, 32, 32, 32, 97, 110, 100, 105, 32, 114, 49, 44, 62, 48, 102, 102, 102, 13, 10, 32, 32, 32, 32, 111, 114, 105, 32, 114, 49, 44, 62, 56, 48, 48, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 49, 44, 64, 83, 79, 85, 78, 68, 32, 32, 32, 32, 32, 32, 59, 32, 99, 111, 109, 109, 97, 110, 100, 32, 43, 32, 108, 101, 97, 115, 116, 32, 115, 105, 103, 110, 105, 102, 105, 99, 97, 110, 116, 32, 110, 105, 98, 98, 108, 101, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 48, 44, 52, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 83, 79, 85, 78, 68, 32, 32, 32, 32, 32, 32, 59, 32, 109, 111, 115, 116, 32, 115, 105, 103, 110, 105, 102, 105, 99, 97, 110, 116, 32, 98, 121, 116, 101, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 97, 117, 100, 105, 111, 95, 118, 111, 108, 49, 44, 114, 50, 13, 10, 32, 32, 32, 32, 115, 114, 108, 32, 114, 50, 44, 56, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 97, 121, 50, 115, 110, 40, 114, 50, 41, 44, 114, 49, 32, 32, 59, 32, 116, 114, 97, 110, 115, 108, 97, 116, 101, 32, 102, 114, 111, 109, 32, 65, 89, 32, 116, 111, 32, 83, 78, 13, 10, 32, 32, 32, 32, 111, 114, 105, 32, 114, 49, 44, 62, 57, 48, 48, 48, 13, 10, 32, 32, 32, 32, 13, 10, 33, 49, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 49, 44, 64, 83, 79, 85, 78, 68, 32, 32, 32, 32, 32, 32, 59, 32, 118, 111, 108, 117, 109, 101, 13, 10, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 44, 62, 98, 102, 48, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 109, 117, 116, 101, 32, 100, 101, 102, 97, 117, 108, 116, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 64, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 50, 44, 114, 48, 13, 10, 32, 32, 32, 32, 99, 105, 32, 114, 48, 44, 62, 48, 52, 48, 48, 13, 10, 32, 32, 32, 32, 106, 104, 101, 32, 33, 50, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 48, 44, 114, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 119, 114, 105, 116, 101, 32, 108, 101, 97, 115, 116, 32, 115, 105, 103, 110, 105, 102, 105, 99, 97, 110, 116, 32, 112, 108, 117, 115, 32, 99, 111, 109, 109, 97, 110, 100, 32, 110, 105, 98, 98, 108, 101, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 49, 13, 10, 32, 32, 32, 32, 97, 110, 100, 105, 32, 114, 49, 44, 62, 48, 102, 102, 102, 13, 10, 32, 32, 32, 32, 111, 114, 105, 32, 114, 49, 44, 62, 97, 48, 48, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 49, 44, 64, 83, 79, 85, 78, 68, 32, 32, 32, 32, 32, 32, 59, 32, 99, 111, 109, 109, 97, 110, 100, 32, 43, 32, 108, 101, 97, 115, 116, 32, 115, 105, 103, 110, 105, 102, 105, 99, 97, 110, 116, 32, 110, 105, 98, 98, 108, 101, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 48, 44, 52, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 83, 79, 85, 78, 68, 32, 32, 32, 32, 32, 32, 59, 32, 109, 111, 115, 116, 32, 115, 105, 103, 110, 105, 102, 105, 99, 97, 110, 116, 32, 98, 121, 116, 101, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 97, 117, 100, 105, 111, 95, 118, 111, 108, 50, 44, 114, 50, 13, 10, 32, 32, 32, 32, 115, 114, 108, 32, 114, 50, 44, 56, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 97, 121, 50, 115, 110, 40, 114, 50, 41, 44, 114, 49, 32, 32, 59, 32, 116, 114, 97, 110, 115, 108, 97, 116, 101, 32, 102, 114, 111, 109, 32, 65, 89, 32, 116, 111, 32, 83, 78, 13, 10, 32, 32, 32, 32, 111, 114, 105, 32, 114, 49, 44, 62, 98, 48, 48, 48, 13, 10, 32, 32, 32, 32, 13, 10, 33, 50, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 49, 44, 64, 83, 79, 85, 78, 68, 32, 32, 32, 32, 32, 32, 59, 32, 118, 111, 108, 117, 109, 101, 13, 10, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111]);
fileData3.push.apply(fileData3, [118, 98, 32, 64, 109, 117, 115, 105, 99, 95, 109, 111, 100, 101, 44, 114, 48, 13, 10, 32, 32, 32, 32, 99, 105, 32, 114, 48, 44, 62, 48, 52, 48, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 112, 108, 97, 121, 32, 115, 105, 109, 112, 108, 101, 63, 13, 10, 32, 32, 32, 32, 106, 108, 32, 33, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 121, 101, 115, 32, 106, 117, 109, 112, 13, 10, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 44, 62, 100, 102, 48, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 109, 117, 116, 101, 32, 100, 101, 102, 97, 117, 108, 116, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 64, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 51, 44, 114, 48, 13, 10, 32, 32, 32, 32, 99, 105, 32, 114, 48, 44, 62, 48, 52, 48, 48, 13, 10, 32, 32, 32, 32, 106, 104, 101, 32, 33, 51, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 48, 44, 114, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 119, 114, 105, 116, 101, 32, 108, 101, 97, 115, 116, 32, 115, 105, 103, 110, 105, 102, 105, 99, 97, 110, 116, 32, 112, 108, 117, 115, 32, 99, 111, 109, 109, 97, 110, 100, 32, 110, 105, 98, 98, 108, 101, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 49, 13, 10, 32, 32, 32, 32, 97, 110, 100, 105, 32, 114, 49, 44, 62, 48, 102, 102, 102, 13, 10, 32, 32, 32, 32, 111, 114, 105, 32, 114, 49, 44, 62, 99, 48, 48, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 49, 44, 64, 83, 79, 85, 78, 68, 32, 32, 32, 32, 32, 32, 59, 32, 99, 111, 109, 109, 97, 110, 100, 32, 43, 32, 108, 101, 97, 115, 116, 32, 115, 105, 103, 110, 105, 102, 105, 99, 97, 110, 116, 32, 110, 105, 98, 98, 108, 101, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 48, 44, 52, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 83, 79, 85, 78, 68, 32, 32, 32, 32, 32, 32, 59, 32, 109, 111, 115, 116, 32, 115, 105, 103, 110, 105, 102, 105, 99, 97, 110, 116, 32, 98, 121, 116, 101, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 97, 117, 100, 105, 111, 95, 118, 111, 108, 51, 44, 114, 50, 13, 10, 32, 32, 32, 32, 115, 114, 108, 32, 114, 50, 44, 56, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 97, 121, 50, 115, 110, 40, 114, 50, 41, 44, 114, 49, 32, 32, 59, 32, 116, 114, 97, 110, 115, 108, 97, 116, 101, 32, 102, 114, 111, 109, 32, 65, 89, 32, 116, 111, 32, 83, 78, 13, 10, 32, 32, 32, 32, 111, 114, 105, 32, 114, 49, 44, 62, 100, 48, 48, 48, 13, 10, 32, 32, 32, 32, 13, 10, 33, 51, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 49, 44, 64, 83, 79, 85, 78, 68, 32, 32, 32, 32, 32, 32, 59, 32, 118, 111, 108, 117, 109, 101, 13, 10, 13, 10, 33, 54, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 109, 117, 115, 105, 99, 95, 109, 111, 100, 101, 44, 114, 48, 13, 10, 32, 32, 32, 32, 97, 110, 100, 105, 32, 114, 48, 44, 62, 48, 49, 48, 48, 32, 32, 32, 32, 32, 32, 32, 59, 32, 99, 104, 101, 99, 107, 32, 102, 111, 114, 32, 100, 114, 117, 109, 115, 13, 10, 32, 32, 32, 32, 106, 101, 113, 32, 33, 56, 13, 10, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 97, 117, 100, 105, 111, 95, 118, 111, 108, 52, 104, 119, 44, 114, 48, 13, 10, 32, 32, 32, 32, 99, 105, 32, 114, 48, 44, 62, 102, 102, 48, 48, 13, 10, 32, 32, 32, 32, 106, 101, 113, 32, 33, 52, 13, 10, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 97, 117, 100, 105, 111, 95, 110, 111, 105, 115, 101, 44, 114, 49, 13, 10, 32, 32, 32, 32, 99, 98, 32, 114, 49, 44, 64, 97, 117, 100, 105, 111, 95, 99, 111, 110, 116, 114, 111, 108, 32, 32, 32, 32, 59, 32, 100, 111, 110, 39, 116, 32, 114, 101, 116, 114, 105, 103, 103, 101, 114, 32, 110, 111, 105, 115, 101, 32, 105, 102, 32, 115, 97, 109, 101, 13, 10, 32, 32, 32, 32, 106, 101, 113, 32, 33, 52, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 49, 44, 64, 97, 117, 100, 105, 111, 95, 99, 111, 110, 116, 114, 111, 108, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 49, 44, 64, 83, 79, 85, 78, 68, 32, 32, 32, 32, 32, 32, 59, 32, 110, 111, 105, 115, 101, 32, 116, 121, 112, 101, 13, 10, 32, 32, 32, 32, 13, 10, 33, 52, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 83, 79, 85, 78, 68, 32, 32, 32, 32, 32, 32, 59, 32, 110, 111, 105, 115, 101, 32, 118, 111, 108, 117, 109, 101, 13, 10, 13, 10, 33, 56, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 49, 13, 10, 13, 10, 59, 13, 10, 59, 32, 67, 111, 110, 118, 101, 114, 116, 115, 32, 65, 89, 45, 51, 45, 56, 57, 49, 48, 32, 118, 111, 108, 117, 109, 101, 32, 116, 111, 32, 83, 78, 55, 54, 52, 56, 57, 13, 10, 59, 13, 10, 97, 121, 50, 115, 110, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 102, 44, 62, 48, 102, 44, 62, 48, 102, 44, 62, 48, 101, 44, 62, 48, 101, 44, 62, 48, 101, 44, 62, 48, 100, 44, 62, 48, 98, 44, 62, 48, 97, 44, 62, 48, 56, 44, 62, 48, 55, 44, 62, 48, 53, 44, 62, 48, 52, 44, 62, 48, 51, 44, 62, 48, 49, 44, 62, 48, 48, 13, 10, 13, 10, 59, 32, 100, 101, 102, 97, 117, 108, 116, 32, 115, 105, 108, 101, 110, 116, 32, 116, 117, 110, 101, 32, 116, 111, 32, 112, 108, 97, 121, 32, 119, 104, 101, 110, 32, 105, 100, 108, 101, 13, 10, 109, 117, 115, 105, 99, 95, 115, 105, 108, 101, 110, 99, 101, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 56, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 48, 44, 48, 44, 48, 44, 48, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 45, 50, 13, 10, 13, 10, 59, 32, 101, 110, 100, 105, 102, 32, 102, 111, 114, 32, 67, 86, 66, 65, 83, 73, 67, 95, 77, 85, 83, 73, 67, 95, 80, 76, 65, 89, 69, 82, 13, 10, 32, 32, 32, 32, 46, 101, 110, 100, 105, 102, 32, 32, 32, 32, 32, 32, 32, 13, 10, 13, 10, 13, 10, 32, 32, 32, 32, 46, 105, 102, 110, 101, 32, 67, 86, 66, 65, 83, 73, 67, 95, 67, 79, 77, 80, 82, 69, 83, 83, 73, 79, 78, 13, 10, 13, 10, 59, 32, 76, 111, 97, 100, 32, 99, 111, 109, 112, 114, 101, 115, 115, 101, 100, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 115, 58, 32, 67, 104, 97, 114, 32, 110, 117, 109, 98, 101, 114, 32, 105, 110, 32, 82, 52, 44, 32, 67, 80, 85, 32, 100, 97, 116, 97, 32, 105, 110, 32, 82, 48, 44, 32, 99, 111, 117, 110, 116, 32, 105, 110, 32, 82, 53, 32, 40, 77, 83, 66, 41, 13, 10, 59, 32, 79, 114, 105, 103, 105, 110, 97, 108, 58, 32, 112, 111, 105, 110, 116, 101, 114, 32, 61, 32, 99, 104, 97, 114, 32, 110, 117, 109, 98, 101, 114, 44, 32, 116, 101, 109, 112, 32, 61, 32, 67, 80, 85, 32, 97, 100, 100, 114, 101, 115, 115, 44, 32, 97, 32, 61, 32, 110, 117, 109, 98, 101, 114, 32, 99, 104, 97, 114, 115, 13, 10, 100, 101, 102, 105, 110, 101, 95, 99, 104, 97, 114, 95, 117, 110, 112, 97, 99, 107, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 48, 44, 114, 50, 13, 10, 32, 32, 32, 32, 97, 110, 100, 105, 32, 114, 52, 44, 62, 48, 48, 102, 102, 32, 32, 32, 59, 32, 109, 97, 115, 107, 32, 111, 102, 102, 32, 116, 111, 32, 48, 45, 50, 53, 53, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 52, 44, 51, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 116, 105, 109, 101, 115, 32, 56, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 109, 111, 100, 101, 44, 114, 48, 32, 32, 32, 59, 32, 103, 101, 116, 32, 109, 111, 100, 101, 13, 10, 32, 32, 32, 32, 97, 110, 100, 105, 32, 114, 48, 44, 62, 48, 56, 48, 48, 32, 32, 32, 59, 32, 99, 104, 101, 99, 107, 32, 98, 105, 116, 109, 97, 112, 32, 98, 105, 116, 13, 10, 32, 32, 32, 32, 106, 101, 113, 32, 117, 110, 112, 97, 99, 107, 51, 32, 32, 32, 32, 32, 59, 32, 51, 32, 116, 105, 109, 101, 115, 32, 105, 102, 32, 121, 101, 115, 13, 10, 32, 32, 32, 32, 106, 109, 112, 32, 117, 110, 112, 97, 99, 107, 32, 32, 32, 32, 32, 32, 59, 32, 111, 110, 99, 101, 32, 105, 102, 32, 110, 111, 13, 10, 13, 10, 59, 32, 76, 111, 97, 100, 32, 98, 105, 116, 109, 97, 112, 32, 99, 111, 108, 111, 114, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 115, 58, 32, 67, 104, 97, 114, 32, 110, 117, 109, 98, 101, 114, 32, 105, 110, 32, 82, 52, 44, 32, 67, 80, 85, 32, 100, 97, 116, 97, 32, 105, 110, 32, 82, 48, 44, 32, 99, 111, 117, 110, 116, 32, 105, 110, 32, 82, 53, 32, 40, 77, 83, 66, 41, 13, 10, 59, 32, 79, 114, 105, 103, 105, 110, 97, 108, 58, 32, 112, 111, 105, 110, 116, 101, 114, 32, 61, 32, 99, 104, 97, 114, 32, 110, 117, 109, 98, 101, 114, 44, 32, 116, 101, 109, 112, 32, 61, 32, 67, 80, 85, 32, 97, 100, 100, 114, 101, 115, 115, 44, 32, 97, 32, 61, 32, 110, 117, 109, 98, 101, 114, 32, 99, 104, 97, 114, 115, 13, 10, 100, 101, 102, 105, 110, 101, 95, 99, 111, 108, 111, 114, 95, 117, 110, 112, 97, 99, 107, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 48, 44, 114, 50, 13, 10, 32, 32, 32, 32, 97, 110, 100, 105, 32, 114, 52, 44, 62, 48, 48, 102, 102, 32, 32, 32, 59, 32, 109, 97, 115, 107, 32, 111, 102, 102, 32, 116, 111, 32, 48, 45, 50, 53, 53, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 52, 44, 51, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 99, 104, 97, 114, 32, 116, 105, 109, 101, 115, 32, 56, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 52, 48, 48, 48, 32, 32, 32, 32, 32, 59, 32, 98, 97, 115, 101, 32, 111, 102, 32, 99, 111, 108, 111, 114, 32, 116, 97, 98, 108, 101, 13, 10, 32, 32, 32, 32, 97, 32, 114, 48, 44, 114, 52, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 101, 116, 32, 98, 97, 115, 101, 32, 102, 111, 114, 32, 99, 111, 108, 111, 114, 32, 116, 104, 101, 110, 32, 102, 97, 108, 108, 32, 116, 104, 114, 111, 117, 103, 104, 13, 10, 13, 10, 59, 32, 101, 110, 116, 101, 114, 101, 100, 32, 102, 114, 111, 109, 32, 111, 110, 101, 32, 111, 102, 32, 116, 104, 101, 32, 97, 98, 111, 118, 101, 32, 116, 119, 111, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 32, 32, 32, 32, 13, 10, 117, 110, 112, 97, 99, 107, 51, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 49, 44, 114, 57, 32, 32, 32, 32, 32, 32, 59, 32, 115, 97, 118, 101, 32, 114, 101, 116, 117, 114, 110, 32, 97, 100, 100, 114, 101, 115, 115, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 52, 44, 114, 49, 53, 32, 32, 32, 32, 32, 32, 59, 32, 115, 97, 118, 101, 32, 86, 68, 80, 32, 97, 100, 100, 114, 101, 115, 115, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 50, 44, 114, 49, 52, 32, 32, 32, 32, 32, 32, 59, 32, 115, 97, 118, 101, 32, 67, 80, 85, 32, 97, 100, 100, 114, 101, 115, 115, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 53, 44, 114, 49, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 117, 110, 112, 97, 99, 107, 13, 10, 32, 32, 32, 32, 97, 105, 32, 114, 49, 53, 44, 62, 56, 48, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 53, 44, 114, 49, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 52, 44, 114, 50, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 117, 110, 112, 97, 99, 107, 13, 10, 32, 32, 32, 32, 97, 105, 32, 114, 49, 53, 44, 62, 56, 48, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 53, 44, 114, 49, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 52, 44, 114, 50, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 117, 110, 112, 97, 99, 107, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 57, 13, 10, 13, 10, 59, 13, 10, 59, 32, 80, 108, 101, 116, 116, 101, 114, 45, 48, 46, 53, 99, 32, 100, 101, 99, 111, 109, 112, 114, 101, 115, 115, 111, 114, 32, 40, 88, 76, 50, 83, 32, 69, 110, 116, 101, 114, 116, 97, 105, 110, 109, 101, 110, 116, 32, 38, 32, 84, 101, 97, 109, 32, 66, 111, 109, 98, 97, 41, 13, 10, 59, 32, 80, 111, 114, 116, 101, 100, 32, 98, 121, 32, 104, 97, 110, 100, 32, 102, 114, 111, 109, 32, 104, 116, 116, 112, 115, 58, 47, 47, 103, 105, 116, 101, 97, 46, 122, 97, 99, 108, 121, 115, 46, 99, 111, 109, 47, 77, 111, 107, 111, 110, 97, 47, 85, 110, 112, 108, 101, 116, 116, 101, 114, 47, 115, 114, 99, 47, 98, 114, 97, 110, 99, 104, 47, 109, 97, 105, 110, 47, 112, 108, 101, 116, 116, 101, 114, 46, 99, 112, 112, 13, 10, 59, 32, 85, 110, 112, 97, 99, 107, 32, 100, 97, 116, 97, 32, 116, 111, 32, 86, 68, 80, 58, 32, 86, 68, 80, 32, 97, 100, 100, 114, 101, 115, 115, 32, 105, 110, 32, 82, 49, 44, 32, 67, 80, 85, 32, 100, 97, 116, 97, 32, 105, 110, 32, 82, 50, 13, 10, 59, 32, 79, 114, 105, 103, 105, 110, 97, 108, 58, 32, 112, 111, 105, 110, 116, 101, 114, 32, 61, 32, 86, 68, 80, 44, 32, 116, 101, 109, 112, 32, 61, 32, 67, 80, 85, 32, 97, 100, 100, 114, 101, 115, 115, 44, 32, 97, 32, 61, 32, 110, 117, 109, 98, 101, 114, 32, 99, 104, 97, 114, 115, 13, 10, 13, 10, 114, 48, 108, 115, 98, 32, 32, 32, 101, 113, 117, 32, 109, 121, 119, 112, 43, 49, 13, 10, 114, 49, 108, 115, 98, 32, 32, 32, 101, 113, 117, 32, 109, 121, 119, 112, 43, 51, 13, 10, 114, 50, 108, 115, 98, 32, 32, 32, 101, 113, 117, 32, 109, 121, 119, 112, 43, 53, 13, 10, 114, 51, 108, 115, 98, 32, 32, 32, 101, 113, 117, 32, 109, 121, 119, 112, 43, 55, 13, 10, 114, 52, 108, 115, 98, 32, 32, 32, 101, 113, 117, 32, 109, 121, 119, 112, 43, 57, 13, 10, 114, 53, 108, 115, 98, 32, 32, 32, 101, 113, 117, 32, 109, 121, 119, 112, 43, 49, 49, 13, 10, 114, 54, 108, 115, 98, 32, 32, 32, 101, 113, 117, 32, 109, 121, 119, 112, 43, 49, 51, 13, 10, 114, 55, 108, 115, 98, 32, 32, 32, 101, 113, 117, 32, 109, 121, 119, 112, 43, 49, 53, 13, 10, 114, 56, 108, 115, 98, 32, 32, 32, 101, 113, 117, 32, 109, 121, 119, 112, 43, 49, 55, 13, 10, 114, 49, 51, 108, 115, 98, 32, 32, 101, 113, 117, 32, 109, 121, 119, 112, 43, 50, 55, 13, 10, 13, 10, 117, 110, 112, 97, 99, 107, 13, 10, 59, 32, 73, 110, 105, 116, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 49, 44, 114, 49, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 97, 118, 101, 32, 114, 101, 116, 117, 114, 110, 13, 10, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 114, 51, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 42, 114, 50, 43, 44, 114, 51, 32, 32, 32, 32, 32, 32, 32, 59, 32, 108, 100, 97, 32, 40, 116, 101, 109, 112, 41, 44, 121, 13, 10, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 114, 53, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 108, 100, 121, 32, 35, 48, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 51, 44, 49, 13, 10, 32, 32, 32, 32, 106, 110, 99, 32, 33, 117, 112, 49, 52, 13, 10, 32, 32, 32, 32, 105, 110, 99, 32, 114, 53, 13, 10, 33, 117, 112, 49, 52, 13, 10, 32, 32, 32, 32, 97, 105, 32, 114, 51, 44, 62, 48, 49, 48, 48, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 53, 44, 49, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 51, 44, 49, 13, 10, 32, 32, 32, 32, 106, 110, 99, 32, 33, 117, 112, 49, 53, 13, 10, 32, 32, 32, 32, 105, 110, 99, 32, 114, 53, 13, 10, 33, 117, 112, 49, 53, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 53, 44, 49, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 51, 44, 49, 13, 10, 32, 32, 32, 32, 106, 110, 99, 32, 33, 117, 112, 49, 54, 13, 10, 32, 32, 32, 32, 105, 110, 99, 32, 114, 53, 13, 10, 33, 117, 112, 49, 54, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 53, 44, 49, 13, 10, 13, 10, 32, 32, 32, 32, 97, 105, 32, 114, 53, 44, 33, 109, 111, 100, 101, 115, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 42, 114, 53, 44, 114, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 13, 10, 13, 10, 33, 108, 105, 116, 101, 114, 97, 108, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 51, 44, 114, 55, 32, 32, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 42, 114, 50, 43, 44, 114, 51, 13, 10, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 44, 114, 48, 13, 10, 32, 32, 32, 32, 111, 114, 105, 32, 114, 48, 44, 62, 52, 48, 48, 48, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 48, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 86, 68, 80, 87, 65, 68, 82, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 86, 68, 80, 87, 65, 68, 82, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 51, 44, 64, 86, 68, 80, 87, 68, 65, 84, 65, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 105, 110, 108, 105, 110, 101, 32, 115, 101, 116, 117, 112, 47, 119, 114, 105, 116, 101, 32, 87, 82, 84, 86, 82, 77, 13, 10, 13, 10, 32, 32, 32, 32, 105, 110, 99, 32, 114, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 105, 110, 99, 32, 112, 111, 105, 110, 116, 101, 114, 32, 47, 32, 98, 110, 101, 32, 36, 43, 52, 32, 47, 32, 105, 110, 99, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 55, 44, 114, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 108, 100, 97, 32, 112, 108, 101, 116, 116, 101, 114, 95, 98, 105, 116, 13, 10, 33, 108, 111, 111, 112, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 51, 44, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 97, 115, 108, 32, 97, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 33, 117, 112, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 110, 101, 32, 36, 43, 53, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 33, 103, 101, 116, 98, 105, 116, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 106, 115, 114, 32, 46, 103, 101, 116, 98, 105, 116, 13, 10, 33, 117, 112, 50, 13, 10, 32, 32, 32, 32, 106, 110, 99, 32, 45, 33, 108, 105, 116, 101, 114, 97, 108, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 99, 99, 32, 46, 108, 105, 116, 101, 114, 97, 108, 13, 10, 13, 10, 32, 32, 32, 32, 59, 32, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 32, 100, 97, 116, 97, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 51, 44, 62, 48, 48, 48, 49, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 108, 100, 120, 32, 35, 49, 32, 47, 32, 115, 116, 120, 32, 114, 101, 115, 117, 108, 116, 32, 47, 32, 100, 101, 120, 32, 47, 32, 115, 116, 120, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 32, 32, 32, 32, 13, 10, 33, 103, 101, 116, 108, 101, 110, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 51, 44, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 97, 115, 108, 32, 97, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 33, 117, 112, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 110, 101, 32, 36, 43, 53, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 33, 103, 101, 116, 98, 105, 116, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 106, 115, 114, 32, 46, 103, 101, 116, 98, 105, 116, 13, 10, 33, 117, 112, 51, 13, 10, 32, 32, 32, 32, 106, 110, 99, 32, 33, 108, 101, 110, 111, 107, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 99, 99, 32, 46, 108, 101, 110, 111, 107, 13, 10, 32, 32, 32, 32, 13, 10, 33, 108, 117, 115, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 49, 51, 44, 49, 13, 10, 32, 32, 32, 32, 106, 110, 99, 32, 33, 117, 112, 53, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 50, 13, 10, 33, 117, 112, 53, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 51, 44, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 97, 115, 108, 32, 97, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 33, 117, 112, 52, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 110, 101, 32, 36, 43, 53, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 33, 103, 101, 116, 98, 105, 116, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 106, 115, 114, 32, 46, 103, 101, 116, 98, 105, 116, 13, 10, 33, 117, 112, 52, 13, 10, 32, 32, 32, 32, 106, 110, 99, 32, 33, 117, 112, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 110, 101, 101, 100, 32, 116, 111, 32, 99, 104, 101, 99, 107, 32, 99, 97, 114, 114, 121, 32, 110, 111, 119, 46, 46, 46, 13, 10, 32, 32, 32, 32, 105, 110, 99, 32, 114, 49, 51, 32, 32, 32, 32, 13, 10, 33, 117, 112, 54, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 51, 44, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 97, 115, 108, 32, 97, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 33, 117, 112, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 110, 101, 32, 36, 43, 53, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 33, 103, 101, 116, 98, 105, 116, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 106, 115, 114, 32, 46, 103, 101, 116, 98, 105, 116, 13, 10, 33, 117, 112, 55, 13, 10, 32, 32, 32, 32, 106, 110, 99, 32, 33, 108, 101, 110, 111, 107, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 99, 99, 32, 46, 108, 101, 110, 111, 107, 13, 10, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 49, 51, 44, 49, 13, 10, 32, 32, 32, 32, 106, 110, 99, 32, 33, 117, 112, 57, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 50, 13, 10, 33, 117, 112, 57, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 51, 44, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 97, 115, 108, 32, 97, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 33, 117, 112, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 110, 101, 32, 36, 43, 53, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 33, 103, 101, 116, 98, 105, 116, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 106, 115, 114, 32, 46, 103, 101, 116, 98, 105, 116, 13, 10, 33, 117, 112, 56, 13, 10, 32, 32, 32, 32, 106, 110, 99, 32, 33, 117, 112, 49, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 99, 99, 32, 36, 43, 51, 13, 10, 32, 32, 32, 32, 105, 110, 99, 32, 114, 49, 51, 13, 10, 33, 117, 112, 49, 48, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 51, 44, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 97, 115, 108, 32, 97, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 33, 117, 112, 49, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 110, 101, 32, 36, 43, 53, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 33, 103, 101, 116, 98, 105, 116, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 106, 115, 114, 32, 46, 103, 101, 116, 98, 105, 116, 13, 10, 33, 117, 112, 49, 49, 13, 10, 32, 32, 32, 32, 106, 111, 99, 32, 45, 33, 108, 117, 115, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 99, 115, 32, 46, 108, 117, 115, 13, 10, 32, 32, 32, 32, 13, 10, 33, 108, 101, 110, 111, 107, 13, 10, 32, 32, 32, 32, 105, 110, 99, 32, 114, 49, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 105, 110, 99, 32, 114, 101, 115, 117, 108, 116, 32, 47, 32, 98, 110, 101, 32, 36, 43, 52, 32, 47, 32, 105, 110, 99, 32, 114, 101, 115, 117, 108, 116, 43, 49, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 51, 44, 114, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 116, 97, 32, 112, 108, 101, 116, 116, 101, 114, 95, 98, 105, 116, 13, 10, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 114, 56, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 42, 114, 50, 43, 44, 114, 56, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 108, 100, 97, 32, 40, 116, 101, 109, 112, 41, 44, 121, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 116, 97, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 32, 47, 32, 108, 100, 97, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 13, 10, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 99, 105, 32, 114, 56, 44, 62, 48, 48, 56, 48, 13, 10, 32, 32, 32, 32, 106, 108, 32, 33, 111, 102, 102, 115, 111, 107, 13, 10, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 55, 44, 114, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 108, 100, 97, 32, 112, 108, 101, 116, 116, 101, 114, 95, 98, 105, 116, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 54, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 106, 109, 112, 32, 40, 116, 101, 109, 112, 50, 41, 13, 10, 32, 32, 32, 32, 13, 10, 33, 109, 111, 100, 101, 54, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 51, 44, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 97, 115, 108, 32, 97, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 33, 109, 54, 112, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 110, 101, 32, 36, 43, 53, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 33, 103, 101, 116, 98, 105, 116, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 106, 115, 114, 32, 46, 103, 101, 116, 98, 105, 116, 13, 10, 33, 109, 54, 112, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 114, 48, 13, 10, 32, 32, 32, 32, 106, 110, 99, 32, 33, 109, 54, 112, 50, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 56, 48, 48, 48, 13, 10, 33, 109, 54, 112, 50, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 56, 44, 64, 114, 48, 108, 115, 98, 13, 10, 32, 32, 32, 32, 115, 114, 99, 32, 114, 48, 44, 49, 53, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 114, 48, 108, 115, 98, 44, 114, 56, 32, 32, 32, 32, 32, 32, 59, 32, 114, 111, 108, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 43, 49, 13, 10, 33, 109, 111, 100, 101, 53, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 51, 44, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 97, 115, 108, 32, 97, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 33, 109, 53, 112, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 110, 101, 32, 36, 43, 53, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 33, 103, 101, 116, 98, 105, 116, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 106, 115, 114, 32, 46, 103, 101, 116, 98, 105, 116, 13, 10, 33, 109, 53, 112, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 114, 48, 13, 10, 32, 32, 32, 32, 106, 110, 99, 32, 33, 109, 53, 112, 50, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 56, 48, 48, 48, 13, 10, 33, 109, 53, 112, 50, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 56, 44, 64, 114, 48, 108, 115, 98, 13, 10, 32, 32, 32, 32, 115, 114, 99, 32, 114, 48, 44, 49, 53, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 114, 48, 108, 115, 98, 44, 114, 56, 32, 32, 32, 32, 32, 32, 59, 32, 114, 111, 108, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 43, 49, 13, 10, 33, 109, 111, 100, 101, 52, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 51, 44, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 97, 115, 108, 32, 97, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 33, 109, 52, 112, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 110, 101, 32, 36, 43, 53, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 33, 103, 101, 116, 98, 105, 116, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 106, 115, 114, 32, 46, 103, 101, 116, 98, 105, 116, 13, 10, 33, 109, 52, 112, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 114, 48, 13, 10, 32, 32, 32, 32, 106, 110, 99, 32, 33, 109, 52, 112, 50, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 56, 48, 48, 48, 13, 10, 33, 109, 52, 112, 50, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 56, 44, 64, 114, 48, 108, 115, 98, 13, 10, 32, 32, 32, 32, 115, 114, 99, 32, 114, 48, 44, 49, 53, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 114, 48, 108, 115, 98, 44, 114, 56, 32, 32, 32, 32, 32, 32, 59, 32, 114, 111, 108, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 43, 49, 13, 10, 33, 109, 111, 100, 101, 51, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 51, 44, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 97, 115, 108, 32, 97, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 33, 109, 51, 112, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 110, 101, 32, 36, 43, 53, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 33, 103, 101, 116, 98, 105, 116, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 106, 115, 114, 32, 46, 103, 101, 116, 98, 105, 116, 13, 10, 33, 109, 51, 112, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 114, 48, 13, 10, 32, 32, 32, 32, 106, 110, 99, 32, 33, 109, 51, 112, 50, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 56, 48, 48, 48, 13, 10, 33, 109, 51, 112, 50, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 56, 44, 64, 114, 48, 108, 115, 98, 13, 10, 32, 32, 32, 32, 115, 114, 99, 32, 114, 48, 44, 49, 53, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 114, 48, 108, 115, 98, 44, 114, 56, 32, 32, 32, 32, 32, 32, 59, 32, 114, 111, 108, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 43, 49, 13, 10, 33, 109, 111, 100, 101, 50, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 51, 44, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 97, 115, 108, 32, 97, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 33, 109, 50, 112, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 110, 101, 32, 36, 43, 53, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 33, 103, 101, 116, 98, 105, 116, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 106, 115, 114, 32, 46, 103, 101, 116, 98, 105, 116, 13, 10, 33, 109, 50, 112, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 114, 48, 13, 10, 32, 32, 32, 32, 106, 110, 99, 32, 33, 109, 50, 112, 50, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 56, 48, 48, 48, 13, 10, 33, 109, 50, 112, 50, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 56, 44, 64, 114, 48, 108, 115, 98, 13, 10, 32, 32, 32, 32, 115, 114, 99, 32, 114, 48, 44, 49, 53, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 114, 48, 108, 115, 98, 44, 114, 56, 32, 32, 32, 32, 32, 32, 59, 32, 114, 111, 108, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 43, 49, 13, 10, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 51, 44, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 97, 115, 108, 32, 97, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 33, 109, 50, 112, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 110, 101, 32, 36, 43, 53, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 33, 103, 101, 116, 98, 105, 116, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 106, 115, 114, 32, 46, 103, 101, 116, 98, 105, 116, 13, 10, 33, 109, 50, 112, 51, 13, 10, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 51, 44, 114, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 116, 97, 32, 112, 108, 101, 116, 116, 101, 114, 95, 98, 105, 116, 32, 40, 110, 111, 32, 116, 111, 117, 99, 104, 32, 99, 97, 114, 114, 121, 41, 13, 10, 32, 32, 32, 32, 106, 110, 99, 32, 33, 111, 102, 102, 115, 111, 107, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 99, 99, 32, 46, 111, 102, 102, 115, 111, 107, 13, 10, 13, 10, 32, 32, 32, 32, 97, 105, 32, 114, 56, 44, 62, 48, 49, 48, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 105, 110, 99, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 43, 49, 13, 10, 32, 32, 32, 32, 97, 110, 100, 105, 32, 114, 56, 44, 62, 102, 102, 55, 102, 32, 32, 32, 32, 32, 32, 32, 59, 32, 108, 100, 97, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 32, 47, 32, 97, 110, 100, 32, 35, 36, 55, 102, 32, 47, 32, 115, 116, 97, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 13, 10, 13, 10, 33, 111, 102, 102, 115, 111, 107, 13, 10, 32, 32, 32, 32, 105, 110, 99, 32, 114, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 105, 110, 99, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 32, 47, 32, 98, 110, 101, 32, 36, 43, 52, 32, 47, 32, 105, 110, 99, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 43, 49, 13, 10, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 44, 114, 48, 13, 10, 32, 32, 32, 32, 115, 32, 114, 56, 44, 114, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 48, 44, 114, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 108, 100, 97, 32, 112, 111, 105, 110, 116, 101, 114, 32, 47, 32, 115, 101, 99, 32, 47, 32, 115, 98, 99, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 32, 47, 32, 115, 116, 97, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 32, 47, 32, 108, 100, 97, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 32, 47, 32, 115, 98, 99, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 43, 49, 32, 47, 32, 115, 116, 97, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 43, 49, 13, 10, 32, 32, 32, 32, 111, 114, 105, 32, 114, 49, 44, 62, 52, 48, 48, 48, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 100, 111, 32, 116, 104, 105, 115, 32, 111, 117, 116, 115, 105, 100, 101, 32, 116, 104, 101, 32, 108, 111, 111, 112, 13, 10, 32, 32, 32, 32, 13, 10, 33, 108, 111, 111, 112, 50, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 101, 105, 13, 10, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 56, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 56, 44, 64, 86, 68, 80, 87, 65, 68, 82, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 56, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 56, 44, 64, 86, 68, 80, 87, 65, 68, 82, 32, 32, 32, 32, 59, 32, 82, 68, 86, 82, 77, 32, 102, 114, 111, 109, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 13, 10, 32, 32, 32, 32, 110, 111, 112, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 86, 68, 80, 68, 65, 84, 65, 44, 114, 48, 13, 10, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 49, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 49, 44, 64, 86, 68, 80, 87, 65, 68, 82, 13, 10, 32, 32, 32, 32, 115, 119, 112, 98, 32, 114, 49, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 49, 44, 64, 86, 68, 80, 87, 65, 68, 82, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 48, 44, 64, 86, 68, 80, 87, 68, 65, 84, 65, 32, 32, 32, 59, 32, 87, 82, 84, 86, 82, 77, 32, 116, 111, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 99, 108, 105, 13, 10, 32, 32, 32, 32, 105, 110, 99, 32, 114, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 105, 110, 99, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 32, 47, 32, 98, 110, 101, 32, 36, 43, 52, 32, 47, 32, 105, 110, 99, 32, 112, 108, 101, 116, 116, 101, 114, 95, 111, 102, 102, 43, 49, 13, 10, 32, 32, 32, 32, 105, 110, 99, 32, 114, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 105, 110, 99, 32, 112, 111, 105, 110, 116, 101, 114, 32, 47, 32, 98, 110, 101, 32, 36, 43, 52, 32, 47, 32, 105, 110, 99, 32, 112, 111, 105, 110, 116, 101, 114, 43, 49, 13, 10, 32, 32, 32, 32, 100, 101, 99, 32, 114, 49, 51, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 45, 33, 108, 111, 111, 112, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 100, 101, 99, 32, 114, 101, 115, 117, 108, 116, 32, 47, 32, 98, 110, 101, 32, 46, 108, 111, 111, 112, 50, 32, 47, 32, 100, 101, 99, 32, 114, 101, 115, 117, 108, 116, 43, 49, 32, 47, 32, 98, 110, 101, 32, 46, 108, 111, 111, 112, 50, 13, 10, 13, 10, 32, 32, 32, 32, 97, 110, 100, 105, 32, 114, 49, 44, 62, 51, 102, 102, 102, 32, 32, 32, 32, 32, 32, 32, 59, 32, 114, 101, 115, 116, 111, 114, 101, 32, 97, 100, 100, 114, 101, 115, 115, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 55, 44, 114, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 108, 100, 97, 32, 112, 108, 101, 116, 116, 101, 114, 95, 98, 105, 116, 13, 10, 32, 32, 32, 32, 98, 32, 64, 45, 33, 108, 111, 111, 112, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 106, 109, 112, 32, 46, 108, 111, 111, 112, 13, 10, 13, 10, 33, 103, 101, 116, 98, 105, 116, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 114, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 108, 100, 121, 32, 35, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 42, 114, 50, 43, 44, 114, 51, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 108, 100, 97, 32, 40, 116, 101, 109, 112, 41, 44, 121, 32, 47, 32, 105, 110, 99, 32, 116, 101, 109, 112, 32, 47, 32, 98, 110, 101, 32, 36, 43, 52, 32, 47, 32, 105, 110, 99, 32, 116, 101, 109, 112, 43, 49, 13, 10, 32, 32, 32, 32, 106, 111, 99, 32, 33, 103, 98, 49, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 51, 44, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 114, 111, 108, 32, 97, 32, 119, 105, 116, 104, 32, 110, 111, 32, 99, 97, 114, 114, 121, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 49, 13, 10, 33, 103, 98, 49, 13, 10, 32, 32, 32, 32, 115, 108, 97, 32, 114, 51, 44, 49, 13, 10, 32, 32, 32, 32, 111, 114, 105, 32, 114, 51, 44, 62, 48, 49, 48, 48, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 114, 111, 108, 32, 97, 32, 119, 105, 116, 104, 32, 99, 97, 114, 114, 121, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 49, 13, 10, 13, 10, 33, 109, 111, 100, 101, 115, 13, 10, 32, 32, 32, 32, 100, 97, 116, 97, 32, 45, 33, 111, 102, 102, 115, 111, 107, 13, 10, 32, 32, 32, 32, 100, 97, 116, 97, 32, 45, 33, 109, 111, 100, 101, 50, 13, 10, 32, 32, 32, 32, 100, 97, 116, 97, 32, 45, 33, 109, 111, 100, 101, 51, 13, 10, 32, 32, 32, 32, 100, 97, 116, 97, 32, 45, 33, 109, 111, 100, 101, 52, 13, 10, 32, 32, 32, 32, 100, 97, 116, 97, 32, 45, 33, 109, 111, 100, 101, 53, 13, 10, 32, 32, 32, 32, 100, 97, 116, 97, 32, 45, 33, 109, 111, 100, 101, 54, 13, 10, 32, 32, 32, 32, 46, 101, 110, 100, 105, 102, 13, 10, 13, 10, 59, 32, 82, 101, 113, 117, 105, 114, 101, 100, 32, 102, 111, 114, 32, 67, 114, 101, 97, 116, 105, 118, 105, 115, 105, 111, 110, 32, 98, 101, 99, 97, 117, 115, 101, 32, 105, 116, 32, 100, 111, 101, 115, 110, 39, 116, 32, 112, 114, 111, 118, 105, 100, 101, 32, 97, 110, 32, 65, 83, 67, 73, 73, 32, 99, 104, 97, 114, 115, 101, 116, 46, 13, 10, 59, 32, 75, 101, 112, 116, 32, 102, 111, 114, 32, 84, 73, 32, 116, 111, 32, 114, 101, 100, 117, 99, 101, 32, 100, 101, 112, 101, 110, 100, 101, 110, 99, 101, 32, 111, 110, 32, 116, 104, 101, 32, 99, 111, 110, 115, 111, 108, 101, 32, 97, 110, 100, 32, 98, 101, 99, 97, 117, 115, 101, 32, 105, 116, 32, 108, 111, 111, 107, 115, 13, 10, 59, 32, 98, 101, 116, 116, 101, 114, 32, 116, 104, 97, 110, 32, 116, 104, 101, 32, 99, 97, 112, 115, 46, 13, 10, 59, 13, 10, 59, 32, 77, 121, 32, 112, 101, 114, 115, 111, 110, 97, 108, 32, 102, 111, 110, 116, 32, 102, 111, 114, 32, 84, 77, 83, 57, 57, 50, 56, 46, 13, 10, 59, 13, 10, 59, 32, 80, 97, 116, 116, 101, 114, 110, 101, 100, 32, 97, 102, 116, 101, 114, 32, 116, 104, 101, 32, 84, 77, 83, 57, 57, 50, 56, 32, 112, 114, 111, 103, 114, 97, 109, 109, 105, 110, 103, 32, 109, 97, 110, 117, 97, 108, 32, 54, 120, 56, 32, 108, 101, 116, 116, 101, 114, 115, 13, 10, 59, 32, 119, 105, 116, 104, 32, 98, 101, 116, 116, 101, 114, 32, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 108, 101, 116, 116, 101, 114, 115, 44, 32, 97, 108, 115, 111, 32, 73, 32, 109, 97, 100, 101, 32, 97, 32, 112, 114, 111, 112, 101, 114, 13, 10, 59, 32, 65, 84, 32, 115, 105, 103, 110, 46, 13, 10, 59, 13, 10, 102, 111, 110, 116, 95, 98, 105, 116, 109, 97, 112, 115, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 50, 48, 32, 115, 112, 97, 99, 101, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 50, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 48, 48, 44, 62, 50, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 50, 49, 32, 33, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 53, 48, 44, 62, 53, 48, 44, 62, 53, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 50, 50, 32, 34, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 53, 48, 44, 62, 53, 48, 44, 62, 102, 56, 44, 62, 53, 48, 44, 62, 102, 56, 44, 62, 53, 48, 44, 62, 53, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 50, 51, 32, 35, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 50, 48, 44, 62, 55, 56, 44, 62, 97, 48, 44, 62, 55, 48, 44, 62, 50, 56, 44, 62, 102, 48, 44, 62, 50, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 50, 52, 32, 62, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 99, 48, 44, 62, 99, 56, 44, 62, 49, 48, 44, 62, 50, 48, 44, 62, 52, 48, 44, 62, 57, 56, 44, 62, 49, 56, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 50, 53, 32, 37, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 52, 48, 44, 62, 97, 48, 44, 62, 52, 48, 44, 62, 97, 48, 44, 62, 97, 56, 44, 62, 57, 48, 44, 62, 54, 56, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 50, 54, 32, 38, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 54, 48, 44, 62, 50, 48, 44, 62, 52, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 50, 55, 32, 39, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 49, 48, 44, 62, 50, 48, 44, 62, 52, 48, 44, 62, 52, 48, 44, 62, 52, 48, 44, 62, 50, 48, 44, 62, 49, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 50, 56, 32, 40, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 52, 48, 44, 62, 50, 48, 44, 62, 49, 48, 44, 62, 49, 48, 44, 62, 49, 48, 44, 62, 50, 48, 44, 62, 52, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 50, 57, 32, 41, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 48, 44, 62, 97, 56, 44, 62, 55, 48, 44, 62, 50, 48, 44, 62, 55, 48, 44, 62, 97, 56, 44, 62, 48, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 50, 97, 32, 42, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 102, 56, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 48, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 50, 98, 32, 43, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 54, 48, 44, 62, 50, 48, 44, 62, 52, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 50, 99, 32, 44, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 102, 99, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 50, 100, 32, 45, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 54, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 50, 101, 32, 46, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 48, 44, 62, 48, 56, 44, 62, 49, 48, 44, 62, 50, 48, 44, 62, 52, 48, 44, 62, 56, 48, 44, 62, 48, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 50, 102, 32, 47, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 55, 48, 44, 62, 56, 56, 44, 62, 57, 56, 44, 62, 97, 56, 44, 62, 99, 56, 44, 62, 56, 56, 44, 62, 55, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 51, 48, 32, 48, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 50, 48, 44, 62, 54, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 102, 56, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 51, 49, 32, 49, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 55, 48, 44, 62, 56, 56, 44, 62, 48, 56, 44, 62, 49, 48, 44, 62, 54, 48, 44, 62, 56, 48, 44, 62, 102, 56, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 51, 50, 32, 50, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 55, 48, 44, 62, 56, 56, 44, 62, 48, 56, 44, 62, 51, 48, 44, 62, 48, 56, 44, 62, 56, 56, 44, 62, 55, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 51, 51, 32, 51, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 51, 48, 44, 62, 53, 48, 44, 62, 57, 48, 44, 62, 57, 48, 44, 62, 102, 56, 44, 62, 49, 48, 44, 62, 49, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 51, 52, 32, 52, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 102, 56, 44, 62, 56, 48, 44, 62, 102, 48, 44, 62, 48, 56, 44, 62, 48, 56, 44, 62, 48, 56, 44, 62, 102, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 51, 53, 32, 53, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 51, 48, 44, 62, 52, 48, 44, 62, 56, 48, 44, 62, 102, 48, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 55, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 51, 54, 32, 54, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 102, 56, 44, 62, 48, 56, 44, 62, 49, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 51, 55, 32, 55, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 55, 48, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 55, 48, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 55, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 51, 56, 32, 56, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 55, 48, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 55, 56, 44, 62, 48, 56, 44, 62, 49, 48, 44, 62, 54, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 51, 57, 32, 57, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 54, 48, 44, 62, 48, 48, 44, 62, 54, 48, 44, 62, 48, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 51, 97, 32, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 54, 48, 44, 62, 48, 48, 44, 62, 54, 48, 44, 62, 50, 48, 44, 62, 52, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 51, 98, 32, 42, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 49, 48, 44, 62, 50, 48, 44, 62, 52, 48, 44, 62, 56, 48, 44, 62, 52, 48, 44, 62, 50, 48, 44, 62, 49, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 51, 99, 32, 60, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 48, 44, 62, 48, 48, 44]);
fileData3.push.apply(fileData3, [62, 102, 56, 44, 62, 48, 48, 44, 62, 102, 56, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 51, 100, 32, 61, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 56, 44, 62, 48, 52, 44, 62, 48, 50, 44, 62, 48, 49, 44, 62, 48, 50, 44, 62, 48, 52, 44, 62, 48, 56, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 51, 101, 32, 62, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 55, 48, 44, 62, 56, 56, 44, 62, 48, 56, 44, 62, 49, 48, 44, 62, 50, 48, 44, 62, 48, 48, 44, 62, 50, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 51, 102, 32, 63, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 55, 48, 44, 62, 56, 56, 44, 62, 57, 56, 44, 62, 97, 56, 44, 62, 57, 56, 44, 62, 56, 48, 44, 62, 55, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 52, 48, 32, 64, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 50, 48, 44, 62, 53, 48, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 102, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 52, 49, 32, 65, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 102, 48, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 102, 48, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 102, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 52, 50, 32, 66, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 55, 48, 44, 62, 56, 56, 44, 62, 56, 48, 44, 62, 56, 48, 44, 62, 56, 48, 44, 62, 56, 56, 44, 62, 55, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 52, 51, 32, 67, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 102, 48, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 102, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 52, 52, 32, 68, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 102, 56, 44, 62, 56, 48, 44, 62, 56, 48, 44, 62, 102, 48, 44, 62, 56, 48, 44, 62, 56, 48, 44, 62, 102, 56, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 52, 53, 32, 69, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 102, 56, 44, 62, 56, 48, 44, 62, 56, 48, 44, 62, 102, 48, 44, 62, 56, 48, 44, 62, 56, 48, 44, 62, 56, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 52, 54, 32, 70, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 55, 48, 44, 62, 56, 56, 44, 62, 56, 48, 44, 62, 98, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 55, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 52, 55, 32, 71, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 56, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 102, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 52, 56, 32, 72, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 55, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 55, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 52, 57, 32, 73, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 56, 44, 62, 48, 56, 44, 62, 48, 56, 44, 62, 48, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 55, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 52, 65, 32, 74, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 56, 56, 44, 62, 57, 48, 44, 62, 97, 48, 44, 62, 99, 48, 44, 62, 97, 48, 44, 62, 57, 48, 44, 62, 56, 56, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 52, 66, 32, 75, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 56, 48, 44, 62, 56, 48, 44, 62, 56, 48, 44, 62, 56, 48, 44, 62, 56, 48, 44, 62, 56, 48, 44, 62, 102, 56, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 52, 67, 32, 76, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 56, 56, 44, 62, 100, 56, 44, 62, 97, 56, 44, 62, 97, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 52, 68, 32, 77, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 56, 56, 44, 62, 99, 56, 44, 62, 99, 56, 44, 62, 97, 56, 44, 62, 57, 56, 44, 62, 57, 56, 44, 62, 56, 56, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 52, 69, 32, 78, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 55, 48, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 55, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 52, 70, 32, 79, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 102, 48, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 102, 48, 44, 62, 56, 48, 44, 62, 56, 48, 44, 62, 56, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 53, 48, 32, 80, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 55, 48, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 97, 56, 44, 62, 57, 48, 44, 62, 54, 56, 32, 32, 32, 32, 32, 32, 59, 32, 62, 53, 49, 32, 81, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 102, 48, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 102, 48, 44, 62, 97, 48, 44, 62, 57, 48, 44, 62, 56, 56, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 53, 50, 32, 82, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 55, 48, 44, 62, 56, 56, 44, 62, 56, 48, 44, 62, 55, 48, 44, 62, 48, 56, 44, 62, 56, 56, 44, 62, 55, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 53, 51, 32, 83, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 102, 56, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 53, 52, 32, 84, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 56, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 55, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 53, 53, 32, 85, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 56, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 53, 48, 44, 62, 53, 48, 44, 62, 50, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 53, 54, 32, 86, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 56, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 97, 56, 44, 62, 97, 56, 44, 62, 100, 56, 44, 62, 56, 56, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 53, 55, 32, 87, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 56, 56, 44, 62, 56, 56, 44, 62, 53, 48, 44, 62, 50, 48, 44, 62, 53, 48, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 53, 56, 32, 88, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 56, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 55, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 53, 57, 32, 89, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 102, 56, 44, 62, 48, 56, 44, 62, 49, 48, 44, 62, 50, 48, 44, 62, 52, 48, 44, 62, 56, 48, 44, 62, 102, 56, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 53, 65, 32, 90, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 55, 56, 44, 62, 54, 48, 44, 62, 54, 48, 44, 62, 54, 48, 44, 62, 54, 48, 44, 62, 54, 48, 44, 62, 55, 56, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 53, 66, 32, 91, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 48, 44, 62, 56, 48, 44, 62, 52, 48, 44, 62, 50, 48, 44, 62, 49, 48, 44, 62, 48, 56, 44, 62, 48, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 53, 67, 32, 92, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 70, 48, 44, 62, 51, 48, 44, 62, 51, 48, 44, 62, 51, 48, 44, 62, 51, 48, 44, 62, 51, 48, 44, 62, 70, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 53, 68, 32, 93, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 50, 48, 44, 62, 53, 48, 44, 62, 56, 56, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 53, 69, 32, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 102, 56, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 53, 70, 32, 95, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 52, 48, 44, 62, 50, 48, 44, 62, 49, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 54, 48, 32, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 48, 44, 62, 48, 48, 44, 62, 54, 56, 44, 62, 57, 56, 44, 62, 56, 56, 44, 62, 57, 56, 44, 62, 54, 56, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 54, 49, 32, 97, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 56, 48, 44, 62, 56, 48, 44, 62, 102, 48, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 102, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 54, 50, 32, 98, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 48, 44, 62, 48, 48, 44, 62, 55, 56, 44, 62, 56, 48, 44, 62, 56, 48, 44, 62, 56, 48, 44, 62, 55, 56, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 54, 51, 32, 99, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 56, 44, 62, 48, 56, 44, 62, 54, 56, 44, 62, 57, 56, 44, 62, 56, 56, 44, 62, 57, 56, 44, 62, 54, 56, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 54, 52, 32, 100, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 48, 44, 62, 48, 48, 44, 62, 55, 48, 44, 62, 56, 56, 44, 62, 102, 56, 44, 62, 56, 48, 44, 62, 55, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 54, 53, 32, 101, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 51, 48, 44, 62, 52, 56, 44, 62, 52, 48, 44, 62, 101, 48, 44, 62, 52, 48, 44, 62, 52, 48, 44, 62, 52, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 54, 54, 32, 102, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 48, 44, 62, 48, 48, 44, 62, 55, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 55, 56, 44, 62, 48, 56, 44, 62, 55, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 54, 55, 32, 103, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 56, 48, 44, 62, 56, 48, 44, 62, 102, 48, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 54, 56, 32, 104, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 50, 48, 44, 62, 48, 48, 44, 62, 54, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 55, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 54, 57, 32, 105, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 56, 44, 62, 48, 48, 44, 62, 49, 56, 44, 62, 48, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 55, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 54, 97, 32, 106, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 56, 48, 44, 62, 56, 48, 44, 62, 56, 56, 44, 62, 57, 48, 44, 62, 101, 48, 44, 62, 57, 48, 44, 62, 56, 56, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 54, 98, 32, 107, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 54, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 55, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 54, 99, 32, 108, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 48, 44, 62, 48, 48, 44, 62, 100, 48, 44, 62, 97, 56, 44, 62, 97, 56, 44, 62, 97, 56, 44, 62, 97, 56, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 54, 100, 32, 109, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 48, 44, 62, 48, 48, 44, 62, 98, 48, 44, 62, 99, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 54, 101, 32, 110, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 48, 44, 62, 48, 48, 44, 62, 55, 48, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 55, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 54, 102, 32, 111, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 48, 44, 62, 48, 48, 44, 62, 102, 48, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 102, 48, 44, 62, 56, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 55, 48, 32, 112, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 48, 44, 62, 48, 48, 44, 62, 55, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 55, 56, 44, 62, 48, 56, 32, 32, 32, 32, 32, 32, 59, 32, 62, 55, 49, 32, 113, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 48, 44, 62, 48, 48, 44, 62, 98, 56, 44, 62, 99, 48, 44, 62, 56, 48, 44, 62, 56, 48, 44, 62, 56, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 55, 50, 32, 114, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 48, 44, 62, 48, 48, 44, 62, 55, 56, 44, 62, 56, 48, 44, 62, 55, 48, 44, 62, 48, 56, 44, 62, 102, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 55, 51, 32, 115, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 50, 48, 44, 62, 50, 48, 44, 62, 102, 56, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 55, 52, 32, 116, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 48, 44, 62, 48, 48, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 57, 56, 44, 62, 54, 56, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 55, 53, 32, 117, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 48, 44, 62, 48, 48, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 53, 48, 44, 62, 50, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 55, 54, 32, 118, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 48, 44, 62, 48, 48, 44, 62, 56, 56, 44, 62, 97, 56, 44, 62, 97, 56, 44, 62, 97, 56, 44, 62, 53, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 55, 55, 32, 119, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 48, 44, 62, 48, 48, 44, 62, 56, 56, 44, 62, 53, 48, 44, 62, 50, 48, 44, 62, 53, 48, 44, 62, 56, 56, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 55, 56, 32, 120, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 48, 44, 62, 48, 48, 44, 62, 56, 56, 44, 62, 56, 56, 44, 62, 57, 56, 44, 62, 54, 56, 44, 62, 48, 56, 44, 62, 55, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 55, 57, 32, 121, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 48, 44, 62, 48, 48, 44, 62, 102, 56, 44, 62, 49, 48, 44, 62, 50, 48, 44, 62, 52, 48, 44, 62, 102, 56, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 55, 97, 32, 122, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 49, 56, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 52, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 49, 56, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 55, 98, 32, 123, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 50, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 55, 99, 32, 124, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 99, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 49, 48, 44, 62, 50, 48, 44, 62, 50, 48, 44, 62, 99, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 55, 100, 32, 125, 32, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 48, 48, 44, 62, 48, 48, 44, 62, 52, 48, 44, 62, 97, 56, 44, 62, 49, 48, 44, 62, 48, 48, 44, 62, 48, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 55, 101, 13, 10, 32, 32, 32, 32, 98, 121, 116, 101, 32, 62, 55, 48, 44, 62, 55, 48, 44, 62, 50, 48, 44, 62, 102, 56, 44, 62, 50, 48, 44, 62, 55, 48, 44, 62, 53, 48, 44, 62, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 62, 55, 102, 13, 10, 13, 10, 13, 10, 59, 32, 84, 104, 101, 32, 115, 116, 97, 99, 107, 32, 105, 115, 32, 115, 105, 109, 117, 108, 97, 116, 101, 100, 32, 117, 115, 105, 110, 103, 32, 82, 49, 48, 46, 32, 73, 116, 39, 115, 32, 110, 111, 116, 32, 117, 115, 101, 100, 32, 105, 110, 13, 10, 59, 32, 116, 104, 101, 115, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 32, 98, 117, 116, 32, 116, 104, 101, 32, 99, 111, 109, 112, 105, 108, 101, 100, 32, 99, 111, 100, 101, 32, 119, 105, 108, 108, 32, 110, 101, 101, 100, 32, 105, 116, 46, 13, 10, 59, 32, 84, 111, 32, 112, 117, 115, 104, 58, 32, 100, 101, 99, 116, 32, 114, 49, 48, 44, 32, 109, 111, 118, 32, 114, 48, 44, 42, 114, 49, 48, 13, 10, 59, 32, 84, 111, 32, 112, 111, 112, 58, 32, 32, 109, 111, 118, 32, 42, 114, 49, 48, 43, 44, 114, 48, 13, 10, 59, 32, 72, 111, 119, 101, 118, 101, 114, 44, 32, 102, 111, 114, 32, 74, 83, 82, 32, 97, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 105, 115, 32, 104, 101, 108, 112, 102, 117, 108, 32, 45, 32, 99, 97, 108, 108, 32, 116, 104, 105, 115, 32, 108, 105, 107, 101, 58, 13, 10, 59, 32, 98, 108, 32, 64, 106, 115, 114, 13, 10, 59, 32, 100, 97, 116, 97, 32, 60, 102, 117, 110, 99, 116, 105, 111, 110, 95, 97, 100, 100, 114, 101, 115, 115, 62, 13, 10, 106, 115, 114, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 42, 114, 49, 49, 43, 44, 114, 49, 52, 32, 32, 32, 32, 32, 32, 32, 59, 32, 103, 101, 116, 32, 116, 104, 101, 32, 106, 117, 109, 112, 32, 97, 100, 100, 114, 101, 115, 115, 13, 10, 32, 32, 32, 32, 100, 101, 99, 116, 32, 114, 49, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 109, 97, 107, 101, 32, 114, 111, 111, 109, 32, 111, 110, 32, 115, 116, 97, 99, 107, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 49, 44, 42, 114, 49, 48, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 97, 118, 101, 32, 114, 101, 116, 117, 114, 110, 32, 97, 100, 100, 114, 101, 115, 115, 13, 10, 32, 32, 32, 32, 98, 108, 32, 42, 114, 49, 52, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 110, 101, 119, 32, 115, 117, 98, 114, 111, 117, 116, 105, 110, 101, 32, 99, 97, 108, 108, 44, 32, 119, 101, 32, 99, 97, 110, 32, 99, 111, 109, 101, 32, 98, 97, 99, 107, 32, 104, 101, 114, 101, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 42, 114, 49, 48, 43, 44, 114, 49, 49, 32, 32, 32, 32, 32, 32, 32, 59, 32, 103, 101, 116, 32, 114, 101, 97, 108, 32, 114, 101, 116, 117, 114, 110, 32, 111, 102, 102, 32, 115, 116, 97, 99, 107, 32, 45, 32, 119, 97, 114, 110, 105, 110, 103, 44, 32, 97, 108, 108, 32, 98, 97, 115, 105, 99, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 32, 100, 111, 32, 116, 104, 105, 115, 32, 105, 110, 108, 105, 110, 101, 32, 114, 97, 116, 104, 101, 114, 32, 116, 104, 97, 110, 32, 114, 101, 116, 117, 114, 110, 13, 10, 32, 32, 32, 32, 98, 32, 42, 114, 49, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 98, 97, 99, 107, 32, 116, 111, 32, 99, 97, 108, 108, 101, 114, 13, 10, 13, 10, 59, 32, 101, 110, 116, 114, 121, 32, 99, 111, 100, 101, 32, 45, 32, 119, 101, 32, 115, 104, 111, 117, 108, 100, 32, 101, 110, 116, 101, 114, 32, 119, 105, 116, 104, 32, 105, 110, 116, 115, 32, 111, 102, 102, 32, 97, 110, 121, 119, 97, 121, 13, 10, 83, 84, 65, 82, 84, 13, 10, 32, 32, 32, 32, 108, 105, 109, 105, 32, 48, 13, 10, 32, 32, 32, 32, 108, 119, 112, 105, 32, 109, 121, 119, 112, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 103, 101, 116, 32, 111, 117, 114, 32, 112, 114, 105, 118, 97, 116, 101, 32, 119, 111, 114, 107, 115, 112, 97, 99, 101, 13, 10, 32, 32, 32, 32, 108, 105, 32, 82, 49, 48, 44, 62, 52, 48, 48, 48, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 112, 115, 101, 117, 100, 111, 32, 115, 116, 97, 99, 107, 32, 112, 111, 105, 110, 116, 101, 114, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 64, 62, 56, 56, 48, 50, 44, 64, 118, 100, 112, 95, 115, 116, 97, 116, 117, 115, 32, 32, 59, 32, 99, 108, 101, 97, 114, 32, 97, 110, 121, 32, 112, 101, 110, 100, 105, 110, 103, 32, 86, 68, 80, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 32, 97, 110, 100, 32, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 32, 118, 100, 112, 95, 115, 116, 97, 116, 117, 115, 32, 105, 102, 32, 110, 101, 101, 100, 101, 100, 13, 10, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 48, 49, 56, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 115, 101, 108, 101, 99, 116, 32, 49, 54, 107, 44, 32, 109, 97, 103, 110, 105, 102, 105, 101, 100, 44, 32, 98, 108, 97, 110, 107, 44, 32, 110, 111, 32, 105, 110, 116, 115, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 119, 114, 116, 118, 100, 112, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 111, 116, 104, 101, 114, 32, 112, 111, 114, 116, 115, 32, 119, 114, 105, 116, 101, 32, 116, 104, 105, 115, 32, 116, 119, 105, 99, 101, 46, 46, 46, 32, 109, 97, 121, 98, 101, 32, 116, 111, 32, 98, 101, 32, 49, 48, 48, 37, 32, 115, 117, 114, 101, 32, 110, 111, 32, 78, 77, 73, 32, 104, 97, 112, 112, 101, 110, 115, 63, 32, 87, 101, 32, 100, 111, 110, 39, 116, 32, 104, 97, 118, 101, 32, 116, 104, 97, 116, 32, 112, 114, 111, 98, 108, 101, 109, 46, 32, 32, 32, 32, 13, 10, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 102, 105, 114, 115, 116, 115, 112, 32, 32, 32, 32, 32, 32, 32, 59, 32, 99, 108, 101, 97, 114, 32, 118, 97, 114, 105, 97, 98, 108, 101, 115, 32, 105, 110, 32, 115, 99, 114, 97, 116, 99, 104, 112, 97, 100, 13, 10, 115, 116, 108, 112, 49, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 42, 114, 48, 43, 13, 10, 32, 32, 32, 32, 99, 105, 32, 114, 48, 44, 108, 97, 115, 116, 115, 112, 13, 10, 32, 32, 32, 32, 106, 108, 32, 115, 116, 108, 112, 49, 13, 10, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 50, 48, 48, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 99, 108, 101, 97, 114, 32, 108, 111, 119, 101, 114, 32, 56, 107, 32, 82, 65, 77, 13, 10, 115, 116, 108, 112, 50, 13, 10, 32, 32, 32, 32, 99, 108, 114, 32, 42, 114, 48, 43, 13, 10, 32, 32, 32, 32, 99, 105, 32, 114, 48, 44, 62, 52, 48, 48, 48, 13, 10, 32, 32, 32, 32, 106, 110, 101, 32, 115, 116, 108, 112, 50, 13, 10, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 48, 102, 48, 102, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 48, 44, 64, 107, 101, 121, 49, 95, 100, 97, 116, 97, 32, 32, 32, 59, 32, 103, 101, 116, 115, 32, 98, 111, 116, 104, 32, 45, 32, 110, 111, 32, 107, 101, 121, 32, 105, 115, 32, 62, 48, 102, 32, 114, 101, 116, 117, 114, 110, 13, 10, 32, 32, 32, 32, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 109, 117, 115, 105, 99, 95, 105, 110, 105, 116, 13, 10, 32, 32, 32, 32, 98, 108, 32, 64, 109, 111, 100, 101, 95, 48, 13, 10, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 105, 110, 116, 95, 104, 97, 110, 100, 108, 101, 114, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 48, 44, 64, 105, 110, 116, 119, 115, 114, 50, 32, 32, 32, 32, 32, 59, 32, 115, 101, 116, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 32, 102, 117, 110, 99, 116, 105, 111, 110, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 48, 44, 62, 56, 48, 48, 48, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 48, 44, 64, 105, 110, 116, 119, 115, 114, 49, 32, 32, 32, 32, 32, 59, 32, 100, 105, 115, 97, 98, 108, 101, 32, 109, 111, 115, 116, 32, 99, 111, 110, 115, 111, 108, 101, 32, 82, 79, 77, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 32, 104, 97, 110, 100, 108, 105, 110, 103, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 44, 49, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 44, 64, 105, 110, 116, 119, 115, 114, 49, 49, 32, 32, 32, 32, 59, 32, 109, 97, 107, 101, 32, 115, 117, 114, 101, 32, 115, 99, 114, 101, 101, 110, 32, 116, 105, 109, 101, 111, 117, 116, 32, 105, 115, 32, 111, 100, 100, 32, 115, 111, 32, 105, 116, 32, 110, 101, 118, 101, 114, 32, 116, 114, 105, 103, 103, 101, 114, 115, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 44, 62, 48, 49, 48, 56, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 44, 64, 103, 112, 108, 119, 115, 114, 49, 52, 32, 32, 32, 32, 59, 32, 71, 80, 76, 32, 115, 116, 97, 116, 117, 115, 32, 102, 108, 97, 103, 115, 44, 32, 115, 104, 111, 117, 108, 100, 32, 97, 108, 114, 101, 97, 100, 121, 32, 98, 101, 32, 116, 104, 105, 115, 44, 32, 98, 117, 116, 32, 98, 101, 32, 115, 117, 114, 101, 13, 10, 32, 32, 32, 32, 109, 111, 118, 98, 32, 114, 49, 44, 64, 110, 116, 115, 99, 32, 32, 32, 32, 32, 32, 32, 59, 32, 105, 110, 105, 116, 32, 110, 116, 115, 99, 32, 102, 108, 97, 103, 32, 116, 111, 32, 116, 114, 117, 101, 32, 45, 32, 119, 101, 32, 97, 99, 116, 117, 97, 108, 108, 121, 32, 100, 111, 32, 110, 111, 116, 32, 104, 97, 118, 101, 32, 97, 32, 103, 111, 111, 100, 32, 119, 97, 121, 32, 116, 111, 32, 100, 101, 116, 101, 99, 116, 13, 10, 32, 32, 32, 32, 108, 105, 32, 114, 49, 44, 62, 56, 99, 48, 50, 13, 10, 32, 32, 32, 32, 109, 111, 118, 32, 114, 49, 44, 64, 103, 112, 108, 119, 115, 114, 49, 53, 32, 32, 32, 32, 59, 32, 65, 100, 100, 114, 101, 115, 115, 32, 111, 102, 32, 86, 68, 80, 32, 102, 111, 114, 32, 71, 80, 76, 32, 45, 32, 115, 104, 111, 117, 108, 100, 32, 97, 108, 114, 101, 97, 100, 121, 32, 98, 101, 32, 116, 104, 105, 115, 44, 32, 98, 117, 116, 32, 98, 101, 32, 115, 117, 114, 101, 13, 10, 32, 32, 32, 32, 13, 10, 59, 59, 59, 32, 67, 86, 66, 97, 115, 105, 99, 32, 99, 111, 100, 101, 32, 115, 116, 97, 114, 116, 115, 32, 104, 101, 114, 101, 13, 10]);
Module['FS_createDataFile']('/', 'cvbasic_9900_prologue.asm', fileData3, true, true);
fileData4 = [];
fileData4.push.apply(fileData4, [9, 59, 13, 10, 9, 59, 32, 67, 86, 66, 97, 115, 105, 99, 32, 101, 112, 105, 108, 111, 103, 117, 101, 32, 40, 66, 65, 83, 73, 67, 32, 99, 111, 109, 112, 105, 108, 101, 114, 32, 102, 111, 114, 32, 67, 111, 108, 101, 99, 111, 118, 105, 115, 105, 111, 110, 41, 13, 10, 9, 59, 13, 10, 9, 59, 32, 98, 121, 32, 79, 115, 99, 97, 114, 32, 84, 111, 108, 101, 100, 111, 32, 71, 46, 13, 10, 9, 59, 32, 104, 116, 116, 112, 115, 58, 47, 47, 110, 97, 110, 111, 99, 104, 101, 115, 115, 46, 111, 114, 103, 47, 13, 10, 9, 59, 13, 10, 9, 59, 32, 67, 114, 101, 97, 116, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 70, 101, 98, 47, 50, 55, 47, 50, 48, 50, 52, 46, 13, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 70, 101, 98, 47, 50, 57, 47, 50, 48, 50, 52, 46, 32, 65, 100, 100, 101, 100, 32, 106, 111, 121, 115, 116, 105, 99, 107, 44, 32, 107, 101, 121, 112, 97, 100, 44, 32, 102, 114, 97, 109, 101, 44, 32, 114, 97, 110, 100, 111, 109, 44, 32, 97, 110, 100, 13, 10, 9, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 97, 100, 95, 112, 111, 105, 110, 116, 101, 114, 32, 118, 97, 114, 105, 97, 98, 108, 101, 115, 46, 13, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 77, 97, 114, 47, 48, 52, 47, 50, 48, 50, 52, 46, 32, 65, 100, 100, 101, 100, 32, 109, 117, 115, 105, 99, 32, 112, 108, 97, 121, 101, 114, 46, 13, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 77, 97, 114, 47, 48, 53, 47, 50, 48, 50, 52, 46, 32, 65, 100, 100, 101, 100, 32, 115, 117, 112, 112, 111, 114, 116, 32, 102, 111, 114, 32, 83, 101, 103, 97, 32, 83, 71, 49, 48, 48, 48, 46, 13, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 77, 97, 114, 47, 49, 50, 47, 50, 48, 50, 52, 46, 32, 65, 100, 100, 101, 100, 32, 115, 117, 112, 112, 111, 114, 116, 32, 102, 111, 114, 32, 77, 83, 88, 46, 13, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 77, 97, 114, 47, 49, 51, 47, 50, 48, 50, 52, 46, 32, 65, 100, 100, 101, 100, 32, 80, 108, 101, 116, 116, 101, 114, 32, 100, 101, 99, 111, 109, 112, 114, 101, 115, 115, 111, 114, 46, 13, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 77, 97, 114, 47, 49, 57, 47, 50, 48, 50, 52, 46, 32, 65, 100, 100, 101, 100, 32, 115, 117, 112, 112, 111, 114, 116, 32, 102, 111, 114, 32, 115, 112, 114, 105, 116, 101, 32, 102, 108, 105, 99, 107, 101, 114, 46, 13, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 65, 112, 114, 47, 49, 49, 47, 50, 48, 50, 52, 46, 32, 65, 100, 100, 101, 100, 32, 115, 117, 112, 112, 111, 114, 116, 32, 102, 111, 114, 32, 83, 117, 112, 101, 114, 32, 71, 97, 109, 101, 32, 77, 111, 100, 117, 108, 101, 46, 13, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 65, 112, 114, 47, 49, 51, 47, 50, 48, 50, 52, 46, 32, 85, 112, 100, 97, 116, 101, 115, 32, 76, 70, 83, 82, 32, 105, 110, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 105, 111, 110, 32, 104, 97, 110, 100, 108, 101, 114, 46, 13, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 65, 112, 114, 47, 50, 54, 47, 50, 48, 50, 52, 46, 32, 65, 108, 108, 32, 99, 111, 100, 101, 32, 109, 111, 118, 101, 100, 32, 116, 111, 32, 99, 118, 98, 97, 115, 105, 99, 95, 112, 114, 111, 108, 111, 103, 117, 101, 46, 97, 115, 109, 32, 115, 111, 32, 105, 116, 13, 10, 9, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 110, 32, 114, 101, 109, 97, 105, 110, 32, 97, 99, 99, 101, 115, 115, 105, 98, 108, 101, 32, 105, 110, 32, 98, 97, 110, 107, 32, 48, 32, 40, 98, 97, 110, 107, 32, 115, 119, 105, 116, 99, 104, 105, 110, 103, 41, 46, 13, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 65, 117, 103, 47, 48, 50, 47, 50, 48, 50, 52, 46, 32, 65, 100, 100, 101, 100, 32, 114, 111, 109, 95, 101, 110, 100, 32, 108, 97, 98, 101, 108, 32, 102, 111, 114, 32, 77, 101, 109, 111, 116, 101, 99, 104, 46, 13, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 65, 117, 103, 47, 49, 53, 47, 50, 48, 50, 52, 46, 32, 65, 100, 100, 101, 100, 32, 115, 117, 112, 112, 111, 114, 116, 32, 102, 111, 114, 32, 84, 97, 116, 117, 110, 103, 32, 69, 105, 110, 115, 116, 101, 105, 110, 46, 13, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 78, 111, 118, 47, 49, 50, 47, 50, 48, 50, 52, 46, 32, 65, 100, 100, 101, 100, 32, 118, 100, 112, 95, 115, 116, 97, 116, 117, 115, 46, 13, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 70, 101, 98, 47, 48, 51, 47, 50, 48, 50, 53, 46, 32, 82, 111, 117, 110, 100, 32, 102, 105, 110, 97, 108, 32, 82, 79, 77, 32, 115, 105, 122, 101, 32, 116, 111, 32, 56, 75, 32, 109, 117, 108, 116, 105, 112, 108, 101, 115, 46, 13, 10, 9, 59, 13, 10, 13, 10, 114, 111, 109, 95, 101, 110, 100, 58, 13, 10, 13, 10, 9, 59, 32, 82, 79, 77, 32, 102, 105, 110, 97, 108, 32, 115, 105, 122, 101, 32, 114, 111, 117, 110, 100, 105, 110, 103, 13, 10, 32, 32, 32, 32, 105, 102, 32, 77, 83, 88, 43, 67, 79, 76, 69, 67, 79, 43, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 43, 83, 86, 73, 43, 83, 79, 82, 68, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 84, 73, 77, 69, 83, 32, 40, 40, 36, 43, 36, 49, 70, 70, 70, 41, 38, 36, 49, 101, 48, 48, 48, 41, 45, 36, 32, 68, 66, 32, 36, 102, 102, 13, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 13, 10, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 43, 69, 73, 78, 83, 84, 69, 73, 78, 43, 78, 65, 66, 85, 13, 10, 9, 59, 32, 65, 108, 105, 103, 110, 32, 102, 111, 108, 108, 111, 119, 105, 110, 103, 32, 100, 97, 116, 97, 32, 116, 111, 32, 97, 32, 50, 53, 54, 45, 98, 121, 116, 101, 32, 112, 97, 103, 101, 46, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 84, 73, 77, 69, 83, 32, 36, 49, 48, 48, 45, 40, 36, 38, 36, 102, 102, 41, 32, 68, 66, 32, 36, 52, 102, 13, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 13, 10, 32, 32, 32, 32, 105, 102, 32, 80, 86, 50, 48, 48, 48, 13, 10, 9, 84, 73, 77, 69, 83, 32, 36, 49, 48, 48, 48, 48, 45, 36, 32, 68, 66, 32, 36, 102, 102, 13, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 13, 10, 32, 32, 32, 32, 105, 102, 32, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 13, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 67, 86, 66, 65, 83, 73, 67, 95, 66, 65, 78, 75, 95, 83, 87, 73, 84, 67, 72, 73, 78, 71, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 103, 32, 67, 86, 66, 65, 83, 73, 67, 95, 66, 65, 78, 75, 95, 82, 79, 77, 95, 83, 73, 90, 69, 42, 49, 48, 50, 52, 45, 49, 9, 59, 32, 70, 111, 114, 99, 101, 32, 102, 105, 110, 97, 108, 32, 82, 79, 77, 32, 115, 105, 122, 101, 13, 10, 9, 100, 98, 32, 36, 102, 102, 13, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 105, 102, 13, 10, 9, 102, 111, 114, 103, 32, 36, 55, 70, 70, 48, 13, 10, 9, 111, 114, 103, 32, 36, 55, 70, 70, 48, 13, 10, 9, 100, 98, 32, 34, 84, 77, 82, 32, 83, 69, 71, 65, 34, 13, 10, 9, 100, 98, 32, 48, 44, 48, 13, 10, 9, 100, 98, 32, 48, 44, 48, 9, 9, 59, 32, 67, 104, 101, 99, 107, 115, 117, 109, 13, 10, 9, 100, 98, 32, 36, 49, 49, 44, 36, 55, 56, 9, 59, 32, 80, 114, 111, 100, 117, 99, 116, 32, 99, 111, 100, 101, 13, 10, 9, 100, 98, 32, 36, 48, 48, 9, 9, 59, 32, 86, 101, 114, 115, 105, 111, 110, 13, 10, 9, 100, 98, 32, 36, 52, 99, 9, 9, 59, 32, 83, 77, 83, 32, 69, 120, 112, 111, 114, 116, 32, 43, 32, 51, 50, 75, 66, 32, 102, 111, 114, 32, 99, 104, 101, 99, 107, 115, 117, 109, 13, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 13, 10, 32, 32, 32, 32, 105, 102, 32, 67, 79, 76, 69, 67, 79, 43, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 43, 77, 83, 88, 43, 83, 86, 73, 43, 83, 79, 82, 68, 43, 80, 86, 50, 48, 48, 48, 13, 10, 9, 111, 114, 103, 32, 66, 65, 83, 69, 95, 82, 65, 77, 13, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 13, 10, 114, 97, 109, 95, 115, 116, 97, 114, 116, 58, 13, 10, 13, 10, 115, 112, 114, 105, 116, 101, 115, 58, 13, 10, 32, 32, 32, 32, 105, 102, 32, 83, 77, 83, 13, 10, 9, 114, 98, 32, 50, 53, 54, 13, 10, 32, 32, 32, 32, 101, 108, 115, 101, 13, 10, 9, 114, 98, 32, 49, 50, 56, 13, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 13, 10, 115, 112, 114, 105, 116, 101, 95, 100, 97, 116, 97, 58, 13, 10, 9, 114, 98, 32, 52, 13, 10, 102, 114, 97, 109, 101, 58, 13, 10, 9, 114, 98, 32, 50, 13, 10, 114, 101, 97, 100, 95, 112, 111, 105, 110, 116, 101, 114, 58, 13, 10, 9, 114, 98, 32, 50, 13, 10, 99, 117, 114, 115, 111, 114, 58, 13, 10, 9, 114, 98, 32, 50, 13, 10, 108, 102, 115, 114, 58, 13, 10, 9, 114, 98, 32, 50, 13, 10, 109, 111, 100, 101, 58, 13, 10, 9, 114, 98, 32, 49, 13, 10, 102, 108, 105, 99, 107, 101, 114, 58, 13, 10, 9, 114, 98, 32, 49, 13, 10, 106, 111, 121, 49, 95, 100, 97, 116, 97, 58, 13, 10, 9, 114, 98, 32, 49, 13, 10, 106, 111, 121, 50, 95, 100, 97, 116, 97, 58, 13, 10, 9, 114, 98, 32, 49, 13, 10, 107, 101, 121, 49, 95, 100, 97, 116, 97, 58, 13, 10, 9, 114, 98, 32, 49, 13, 10, 107, 101, 121, 50, 95, 100, 97, 116, 97, 58, 13, 10, 9, 114, 98, 32, 49, 13, 10, 110, 116, 115, 99, 58, 13, 10, 9, 114, 98, 32, 49, 13, 10, 118, 100, 112, 95, 115, 116, 97, 116, 117, 115, 58, 13, 10, 9, 114, 98, 32, 49, 13, 10, 32, 32, 32, 32, 105, 102, 32, 78, 65, 66, 85, 13, 10, 110, 97, 98, 117, 95, 100, 97, 116, 97, 48, 58, 32, 114, 98, 32, 49, 13, 10, 110, 97, 98, 117, 95, 100, 97, 116, 97, 49, 58, 32, 114, 98, 32, 49, 13, 10, 110, 97, 98, 117, 95, 100, 97, 116, 97, 50, 58, 32, 114, 98, 32, 49, 13, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 13, 10, 13, 10, 32, 32, 32, 32, 105, 102, 32, 67, 86, 66, 65, 83, 73, 67, 95, 77, 85, 83, 73, 67, 95, 80, 76, 65, 89, 69, 82, 13, 10, 109, 117, 115, 105, 99, 95, 116, 105, 99, 107, 58, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 98, 32, 49, 13, 10, 109, 117, 115, 105, 99, 95, 109, 111, 100, 101, 58, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 98, 32, 49, 13, 10, 13, 10, 32, 32, 32, 32, 105, 102, 32, 67, 86, 66, 65, 83, 73, 67, 95, 66, 65, 78, 75, 95, 83, 87, 73, 84, 67, 72, 73, 78, 71, 13, 10, 109, 117, 115, 105, 99, 95, 98, 97, 110, 107, 58, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 114, 98, 32, 49, 13, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 13, 10, 109, 117, 115, 105, 99, 95, 115, 116, 97, 114, 116, 58, 9, 9, 114, 98, 32, 50, 13, 10, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 58, 9, 9, 114, 98, 32, 50, 13, 10, 109, 117, 115, 105, 99, 95, 112, 108, 97, 121, 105, 110, 103, 58, 9, 9, 114, 98, 32, 49, 13, 10, 109, 117, 115, 105, 99, 95, 116, 105, 109, 105, 110, 103, 58, 9, 9, 114, 98, 32, 49, 13, 10, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 99, 111, 117, 110, 116, 101, 114, 58, 9, 114, 98, 32, 49, 13, 10, 109, 117, 115, 105, 99, 95, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 49, 58, 9, 114, 98, 32, 49, 13, 10, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 49, 58, 9, 114, 98, 32, 49, 13, 10, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 49, 58, 9, 9, 114, 98, 32, 49, 13, 10, 109, 117, 115, 105, 99, 95, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 50, 58, 9, 114, 98, 32, 49, 13, 10, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 50, 58, 9, 114, 98, 32, 49, 13, 10, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 50, 58, 9, 9, 114, 98, 32, 49, 13, 10, 109, 117, 115, 105, 99, 95, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 51, 58, 9, 114, 98, 32, 49, 13, 10, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 51, 58, 9, 114, 98, 32, 49, 13, 10, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 51, 58, 9, 9, 114, 98, 32, 49, 13, 10, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 52, 58, 9, 114, 98, 32, 49, 13, 10, 109, 117, 115, 105, 99, 95, 100, 114, 117, 109, 58, 9, 9, 114, 98, 32, 49, 13, 10, 13, 10, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 49, 58, 9, 9, 114, 98, 32, 50, 13, 10, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 50, 58, 9, 9, 114, 98, 32, 50, 13, 10, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 51, 58, 9, 9, 114, 98, 32, 50, 13, 10, 97, 117, 100, 105, 111, 95, 110, 111, 105, 115, 101, 58, 9, 9, 114, 98, 32, 49, 13, 10, 97, 117, 100, 105, 111, 95, 109, 105, 120, 58, 9, 9, 114, 98, 32, 49, 13, 10, 97, 117, 100, 105, 111, 95, 118, 111, 108, 49, 58, 9, 9, 114, 98, 32, 49, 13, 10, 97, 117, 100, 105, 111, 95, 118, 111, 108, 50, 58, 9, 9, 114, 98, 32, 49, 13, 10, 97, 117, 100, 105, 111, 95, 118, 111, 108, 51, 58, 9, 9, 114, 98, 32, 49, 13, 10, 13, 10, 97, 117, 100, 105, 111, 95, 99, 111, 110, 116, 114, 111, 108, 58, 9, 9, 114, 98, 32, 49, 13, 10, 97, 117, 100, 105, 111, 95, 118, 111, 108, 52, 104, 119, 58, 9, 9, 114, 98, 32, 49, 13, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 13, 10, 13, 10, 32, 32, 32, 32, 105, 102, 32, 83, 71, 77, 13, 10, 9, 111, 114, 103, 32, 36, 50, 48, 48, 48, 9, 59, 32, 83, 116, 97, 114, 116, 32, 102, 111, 114, 32, 118, 97, 114, 105, 97, 98, 108, 101, 115, 46, 13, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 13, 10]);
Module['FS_createDataFile']('/', 'cvbasic_epilogue.asm', fileData4, true, true);
fileData5 = [];
fileData5.push.apply(fileData5, [9, 59, 10, 9, 59, 32, 67, 86, 66, 97, 115, 105, 99, 32, 112, 114, 111, 108, 111, 103, 117, 101, 32, 40, 66, 65, 83, 73, 67, 32, 99, 111, 109, 112, 105, 108, 101, 114, 32, 102, 111, 114, 32, 67, 111, 108, 101, 99, 111, 118, 105, 115, 105, 111, 110, 32, 97, 110, 100, 32, 111, 116, 104, 101, 114, 32, 99, 111, 110, 115, 111, 108, 101, 115, 41, 10, 9, 59, 10, 9, 59, 32, 98, 121, 32, 79, 115, 99, 97, 114, 32, 84, 111, 108, 101, 100, 111, 32, 71, 46, 10, 9, 59, 32, 104, 116, 116, 112, 115, 58, 47, 47, 110, 97, 110, 111, 99, 104, 101, 115, 115, 46, 111, 114, 103, 47, 10, 9, 59, 10, 9, 59, 32, 67, 114, 101, 97, 116, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 70, 101, 98, 47, 50, 55, 47, 50, 48, 50, 52, 46, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 70, 101, 98, 47, 50, 57, 47, 50, 48, 50, 52, 46, 32, 84, 117, 114, 110, 115, 32, 111, 102, 102, 32, 115, 111, 117, 110, 100, 46, 32, 78, 111, 119, 32, 105, 116, 32, 114, 101, 97, 100, 115, 32, 116, 104, 101, 32, 99, 111, 110, 116, 114, 111, 108, 108, 101, 114, 115, 46, 10, 9, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 65, 100, 100, 101, 100, 32, 49, 54, 45, 98, 105, 116, 32, 109, 117, 108, 116, 105, 112, 108, 121, 44, 32, 100, 105, 118, 105, 115, 105, 111, 110, 44, 32, 109, 111, 100, 117, 108, 111, 44, 32, 97, 110, 100, 32, 97, 98, 115, 46, 10, 9, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 65, 100, 100, 101, 100, 32, 114, 97, 110, 100, 111, 109, 32, 103, 101, 110, 101, 114, 97, 116, 111, 114, 46, 32, 65, 100, 100, 101, 100, 32, 115, 111, 117, 110, 100, 32, 114, 111, 117, 116, 105, 110, 101, 115, 46, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 77, 97, 114, 47, 48, 51, 47, 50, 48, 50, 52, 46, 32, 82, 101, 109, 111, 118, 101, 100, 32, 102, 110, 97, 109, 101, 32, 100, 105, 114, 101, 99, 116, 105, 118, 101, 32, 116, 111, 32, 117, 115, 101, 32, 103, 97, 115, 109, 56, 48, 46, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 77, 97, 114, 47, 48, 53, 47, 50, 48, 50, 52, 46, 32, 65, 100, 100, 101, 100, 32, 115, 117, 112, 112, 111, 114, 116, 32, 102, 111, 114, 32, 83, 101, 103, 97, 32, 83, 71, 49, 48, 48, 48, 46, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 77, 97, 114, 47, 48, 54, 47, 50, 48, 50, 52, 46, 32, 65, 100, 100, 101, 100, 32, 69, 78, 65, 83, 67, 82, 44, 32, 68, 73, 83, 83, 67, 82, 44, 32, 97, 110, 100, 32, 67, 80, 89, 66, 76, 75, 46, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 77, 97, 114, 47, 48, 56, 47, 50, 48, 50, 52, 46, 32, 65, 100, 100, 101, 100, 32, 109, 111, 100, 101, 115, 32, 48, 44, 32, 49, 32, 97, 110, 100, 32, 50, 46, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 77, 97, 114, 47, 49, 50, 47, 50, 48, 50, 52, 46, 32, 65, 100, 100, 101, 100, 32, 115, 117, 112, 112, 111, 114, 116, 32, 102, 111, 114, 32, 77, 83, 88, 46, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 77, 97, 114, 47, 49, 52, 47, 50, 48, 50, 52, 46, 32, 65, 100, 100, 101, 100, 32, 95, 115, 103, 110, 49, 54, 46, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 77, 97, 114, 47, 49, 53, 47, 50, 48, 50, 52, 46, 32, 65, 100, 100, 101, 100, 32, 117, 112, 112, 101, 114, 32, 49, 54, 107, 32, 101, 110, 97, 98, 108, 101, 32, 102, 111, 114, 32, 77, 83, 88, 46, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 65, 112, 114, 47, 49, 49, 47, 50, 48, 50, 52, 46, 32, 65, 100, 100, 101, 100, 32, 115, 117, 112, 112, 111, 114, 116, 32, 102, 111, 114, 32, 102, 111, 114, 109, 97, 116, 116, 105, 110, 103, 32, 110, 117, 109, 98, 101, 114, 115, 46, 32, 65, 100, 100, 101, 100, 10, 9, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 117, 112, 112, 111, 114, 116, 32, 102, 111, 114, 32, 83, 117, 112, 101, 114, 32, 71, 97, 109, 101, 32, 77, 111, 100, 117, 108, 101, 46, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 65, 112, 114, 47, 49, 51, 47, 50, 48, 50, 52, 46, 32, 83, 97, 118, 101, 100, 32, 98, 121, 116, 101, 115, 32, 105, 110, 32, 83, 71, 45, 49, 48, 48, 48, 32, 82, 79, 77, 115, 46, 32, 70, 97, 115, 116, 101, 114, 32, 76, 68, 73, 82, 86, 77, 46, 10, 9, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 83, 104, 111, 114, 116, 101, 114, 32, 109, 111, 100, 101, 32, 115, 101, 116, 116, 105, 110, 103, 32, 115, 117, 98, 114, 111, 117, 116, 105, 110, 101, 115, 46, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 65, 112, 114, 47, 50, 54, 47, 50, 48, 50, 52, 46, 32, 73, 110, 116, 101, 114, 114, 117, 112, 116, 105, 111, 110, 32, 104, 97, 110, 100, 108, 101, 114, 32, 115, 97, 118, 101, 115, 32, 99, 117, 114, 114, 101, 110, 116, 32, 98, 97, 110, 107, 46, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 65, 112, 114, 47, 50, 55, 47, 50, 48, 50, 52, 46, 32, 77, 117, 115, 105, 99, 32, 112, 108, 97, 121, 101, 114, 32, 110, 111, 119, 32, 115, 117, 112, 112, 111, 114, 116, 115, 32, 98, 97, 110, 107, 32, 115, 119, 105, 116, 99, 104, 105, 110, 103, 46, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 77, 97, 121, 47, 49, 55, 47, 50, 48, 50, 52, 46, 32, 65, 100, 100, 101, 100, 32, 100, 101, 108, 97, 121, 32, 102, 111, 114, 32, 83, 71, 49, 48, 48, 48, 32, 97, 110, 100, 32, 83, 67, 51, 48, 48, 48, 32, 99, 111, 110, 116, 114, 111, 108, 108, 101, 114, 10, 9, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 117, 112, 112, 111, 114, 116, 32, 119, 105, 116, 104, 32, 107, 101, 121, 98, 111, 97, 114, 100, 32, 40, 99, 111, 100, 101, 32, 98, 121, 32, 83, 105, 82, 105, 111, 75, 68, 41, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 74, 117, 110, 47, 48, 52, 47, 50, 48, 50, 52, 46, 32, 83, 71, 77, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 32, 100, 101, 108, 101, 116, 101, 100, 32, 78, 84, 83, 67, 32, 102, 108, 97, 103, 46, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 74, 117, 110, 47, 48, 55, 47, 50, 48, 50, 52, 46, 32, 75, 101, 121, 115, 32, 48, 45, 57, 44, 32, 61, 32, 97, 110, 100, 32, 45, 32, 101, 109, 117, 108, 97, 116, 101, 32, 107, 101, 121, 112, 97, 100, 32, 105, 110, 32, 77, 83, 88, 46, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 74, 117, 110, 47, 49, 55, 47, 50, 48, 50, 52, 46, 32, 65, 100, 100, 101, 100, 32, 83, 86, 73, 45, 51, 50, 56, 32, 115, 117, 112, 112, 111, 114, 116, 46, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 65, 117, 103, 47, 48, 49, 47, 50, 48, 50, 52, 46, 32, 65, 100, 100, 101, 100, 32, 83, 111, 114, 100, 32, 77, 53, 32, 115, 117, 112, 112, 111, 114, 116, 46, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 65, 117, 103, 47, 48, 50, 47, 50, 48, 50, 52, 46, 32, 80, 83, 71, 32, 108, 97, 98, 101, 108, 32, 110, 111, 119, 32, 100, 101, 102, 105, 110, 101, 100, 32, 98, 121, 32, 67, 86, 66, 97, 115, 105, 99, 46, 32, 65, 100, 100, 101, 100, 32, 77, 101, 109, 111, 116, 101, 99, 104, 10, 9, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 117, 112, 112, 111, 114, 116, 46, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 65, 117, 103, 47, 48, 56, 47, 50, 48, 50, 52, 46, 32, 65, 100, 100, 101, 100, 32, 83, 111, 117, 110, 100, 105, 99, 47, 72, 97, 110, 105, 109, 101, 120, 32, 80, 101, 110, 99, 105, 108, 32, 73, 73, 32, 115, 117, 112, 112, 111, 114, 116, 46, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 65, 117, 103, 47, 49, 53, 47, 50, 48, 50, 52, 46, 32, 65, 100, 100, 101, 100, 32, 115, 117, 112, 112, 111, 114, 116, 32, 102, 111, 114, 32, 84, 97, 116, 117, 110, 103, 32, 69, 105, 110, 115, 116, 101, 105, 110, 46, 32, 65, 100, 100, 101, 100, 32, 115, 117, 112, 112, 111, 114, 116, 10, 9, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 114, 32, 67, 97, 115, 105, 111, 32, 80, 86, 45, 50, 48, 48, 48, 46, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 65, 117, 103, 47, 50, 49, 47, 50, 48, 50, 52, 46, 32, 65, 100, 100, 101, 100, 32, 107, 101, 121, 112, 97, 100, 32, 115, 117, 112, 112, 111, 114, 116, 32, 102, 111, 114, 32, 77, 101, 109, 111, 116, 101, 99, 104, 44, 32, 84, 97, 116, 117, 110, 103, 32, 69, 105, 110, 115, 116, 101, 105, 110, 44, 10, 9, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 97, 110, 100, 32, 67, 97, 115, 105, 111, 32, 80, 86, 45, 50, 48, 48, 48, 46, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 65, 117, 103, 47, 51, 48, 47, 50, 48, 50, 52, 46, 32, 67, 104, 97, 110, 103, 101, 100, 32, 109, 111, 100, 101, 32, 98, 105, 116, 32, 116, 111, 32, 98, 105, 116, 32, 51, 32, 40, 97, 118, 111, 105, 100, 115, 32, 99, 111, 108, 108, 105, 115, 105, 111, 110, 10, 9, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 32, 102, 108, 105, 99, 107, 101, 114, 32, 102, 108, 97, 103, 41, 46, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 79, 99, 116, 47, 49, 53, 47, 50, 48, 50, 52, 46, 32, 65, 100, 100, 101, 100, 32, 76, 68, 73, 82, 77, 86, 46, 32, 83, 111, 108, 118, 101, 100, 32, 98, 117, 103, 32, 119, 104, 101, 114, 101, 32, 97, 115, 116, 101, 114, 105, 115, 107, 32, 97, 110, 100, 32, 110, 117, 109, 98, 101, 114, 10, 9, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 107, 101, 121, 115, 32, 118, 97, 108, 117, 101, 115, 32, 119, 101, 114, 101, 32, 105, 110, 118, 101, 114, 116, 101, 100, 46, 10, 9, 59, 32, 82, 101, 118, 105, 115, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 78, 111, 118, 47, 49, 50, 47, 50, 48, 50, 52, 46, 32, 83, 97, 118, 101, 115, 32, 116, 104, 101, 32, 86, 68, 80, 32, 115, 116, 97, 116, 117, 115, 46, 10, 9, 59, 10, 10, 74, 79, 89, 83, 69, 76, 58, 9, 101, 113, 117, 32, 36, 99, 48, 10, 75, 69, 89, 83, 69, 76, 58, 9, 101, 113, 117, 32, 36, 56, 48, 10, 10, 74, 79, 89, 49, 58, 32, 32, 32, 101, 113, 117, 32, 36, 102, 99, 45, 36, 50, 48, 42, 40, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 41, 10, 74, 79, 89, 50, 58, 32, 32, 32, 101, 113, 117, 32, 36, 102, 102, 45, 36, 50, 50, 42, 40, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 41, 10, 10, 32, 32, 32, 32, 105, 102, 32, 67, 79, 76, 69, 67, 79, 10, 9, 111, 114, 103, 32, 36, 56, 48, 48, 48, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 80, 69, 78, 67, 73, 76, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 34, 67, 79, 80, 89, 82, 73, 71, 72, 84, 32, 83, 79, 85, 78, 68, 73, 67, 34, 10, 9, 106, 112, 32, 83, 84, 65, 82, 84, 10, 9, 106, 112, 32, 110, 109, 105, 95, 104, 97, 110, 100, 108, 101, 114, 10, 9, 106, 112, 32, 48, 9, 59, 32, 114, 115, 116, 32, 36, 48, 56, 10, 9, 106, 112, 32, 48, 9, 59, 32, 114, 115, 116, 32, 36, 49, 48, 10, 9, 106, 112, 32, 48, 9, 59, 32, 114, 115, 116, 32, 36, 49, 56, 10, 9, 106, 112, 32, 48, 9, 59, 32, 114, 115, 116, 32, 36, 50, 48, 10, 9, 106, 112, 32, 48, 9, 59, 32, 114, 115, 116, 32, 36, 50, 56, 10, 9, 106, 112, 32, 48, 9, 59, 32, 114, 115, 116, 32, 36, 51, 48, 10, 9, 106, 112, 32, 48, 9, 59, 32, 114, 115, 116, 32, 36, 51, 56, 10, 9, 100, 119, 32, 36, 48, 48, 48, 48, 10, 9, 100, 119, 32, 36, 48, 48, 48, 48, 10, 9, 100, 119, 32, 36, 48, 48, 48, 48, 10, 9, 100, 119, 32, 36, 48, 48, 48, 48, 10, 9, 100, 98, 32, 34, 67, 86, 66, 65, 83, 73, 67, 33, 80, 79, 87, 69, 82, 69, 68, 32, 66, 89, 33, 50, 48, 50, 52, 33, 34, 10, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 9, 100, 98, 32, 36, 53, 53, 44, 36, 97, 97, 10, 9, 100, 119, 32, 48, 10, 9, 100, 119, 32, 48, 10, 9, 100, 119, 32, 48, 10, 9, 100, 119, 32, 48, 10, 9, 100, 119, 32, 83, 84, 65, 82, 84, 10, 10, 9, 106, 112, 32, 48, 9, 59, 32, 114, 115, 116, 32, 36, 48, 56, 10, 9, 106, 112, 32, 48, 9, 59, 32, 114, 115, 116, 32, 36, 49, 48, 10, 9, 106, 112, 32, 48, 9, 59, 32, 114, 115, 116, 32, 36, 49, 56, 10, 9, 106, 112, 32, 48, 9, 59, 32, 114, 115, 116, 32, 36, 50, 48, 10, 9, 106, 112, 32, 48, 9, 59, 32, 114, 115, 116, 32, 36, 50, 56, 10, 9, 106, 112, 32, 48, 9, 59, 32, 114, 115, 116, 32, 36, 51, 48, 10, 9, 106, 112, 32, 48, 9, 59, 32, 114, 115, 116, 32, 36, 51, 56, 10, 10, 9, 106, 112, 32, 110, 109, 105, 95, 104, 97, 110, 100, 108, 101, 114, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 43, 83, 86, 73, 10, 9, 111, 114, 103, 32, 36, 48, 48, 48, 48, 10, 9, 100, 105, 10, 9, 108, 100, 32, 115, 112, 44, 83, 84, 65, 67, 75, 10, 9, 106, 112, 32, 83, 84, 65, 82, 84, 10, 9, 100, 98, 32, 36, 102, 102, 10, 9, 106, 112, 32, 48, 10, 9, 100, 98, 32, 36, 102, 102, 44, 36, 102, 102, 44, 36, 102, 102, 44, 36, 102, 102, 44, 36, 102, 102, 10, 9, 106, 112, 32, 48, 10, 9, 100, 98, 32, 36, 102, 102, 44, 36, 102, 102, 44, 36, 102, 102, 44, 36, 102, 102, 44, 36, 102, 102, 10, 9, 106, 112, 32, 48, 10, 9, 100, 98, 32, 36, 102, 102, 44, 36, 102, 102, 44, 36, 102, 102, 44, 36, 102, 102, 44, 36, 102, 102, 10, 9, 106, 112, 32, 48, 10, 9, 100, 98, 32, 36, 102, 102, 44, 36, 102, 102, 44, 36, 102, 102, 44, 36, 102, 102, 44, 36, 102, 102, 10, 9, 106, 112, 32, 48, 10, 9, 100, 98, 32, 36, 102, 102, 44, 36, 102, 102, 44, 36, 102, 102, 44, 36, 102, 102, 44, 36, 102, 102, 10, 9, 106, 112, 32, 48, 10, 9, 100, 98, 32, 36, 102, 102, 44, 36, 102, 102, 44, 36, 102, 102, 44, 36, 102, 102, 44, 36, 102, 102, 10, 9, 106, 112, 32, 110, 109, 105, 95, 104, 97, 110, 100, 108, 101, 114, 9, 59, 32, 73, 116, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 99, 97, 108, 108, 101, 100, 32, 105, 110, 116, 95, 104, 97, 110, 100, 108, 101, 114, 46, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 77, 83, 88, 10, 9, 79, 82, 71, 32, 36, 52, 48, 48, 48, 10, 9, 100, 98, 32, 34, 65, 66, 34, 10, 9, 100, 119, 32, 83, 84, 65, 82, 84, 10, 9, 100, 119, 32, 36, 48, 48, 48, 48, 10, 9, 100, 119, 32, 36, 48, 48, 48, 48, 10, 9, 100, 119, 32, 36, 48, 48, 48, 48, 10, 9, 100, 119, 32, 36, 48, 48, 48, 48, 10, 10, 87, 82, 84, 80, 83, 71, 58, 9, 101, 113, 117, 32, 36, 48, 48, 57, 51, 10, 82, 68, 80, 83, 71, 58, 9, 101, 113, 117, 32, 36, 48, 48, 57, 54, 10, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 79, 82, 68, 10, 9, 79, 82, 71, 32, 36, 50, 48, 48, 48, 10, 9, 100, 98, 32, 36, 48, 50, 9, 9, 59, 32, 65, 118, 111, 105, 100, 32, 99, 104, 101, 99, 107, 105, 110, 103, 32, 36, 52, 48, 48, 48, 10, 9, 100, 119, 32, 83, 84, 65, 82, 84, 9, 59, 32, 83, 116, 97, 114, 116, 32, 97, 100, 100, 114, 101, 115, 115, 46, 10, 9, 100, 119, 32, 36, 48, 48, 50, 101, 9, 59, 32, 80, 114, 101, 115, 116, 97, 114, 116, 32, 97, 100, 100, 114, 101, 115, 115, 32, 40, 106, 117, 115, 116, 32, 112, 111, 105, 110, 116, 32, 116, 111, 32, 82, 69, 84, 32, 105, 110, 32, 66, 73, 79, 83, 41, 46, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 80, 86, 50, 48, 48, 48, 10, 9, 79, 82, 71, 32, 36, 67, 48, 48, 48, 10, 9, 106, 112, 32, 83, 84, 65, 82, 84, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 67, 80, 77, 10, 9, 111, 114, 103, 32, 36, 48, 49, 48, 48, 10, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 9, 111, 114, 103, 32, 36, 52, 48, 102, 99, 10, 9, 100, 119, 32, 114, 111, 109, 95, 115, 116, 97, 114, 116, 10, 9, 100, 119, 32, 114, 111, 109, 95, 101, 110, 100, 45, 114, 111, 109, 95, 115, 116, 97, 114, 116, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 114, 111, 109, 95, 115, 116, 97, 114, 116, 58, 10, 9, 106, 112, 32, 83, 84, 65, 82, 84, 10, 9, 100, 98, 32, 48, 44, 48, 44, 48, 44, 48, 44, 48, 10, 9, 100, 119, 32, 110, 109, 105, 95, 104, 97, 110, 100, 108, 101, 114, 10, 9, 100, 119, 32, 110, 117, 108, 108, 95, 118, 101, 99, 116, 111, 114, 10, 9, 100, 119, 32, 110, 117, 108, 108, 95, 118, 101, 99, 116, 111, 114, 10, 9, 100, 119, 32, 114, 111, 109, 95, 115, 116, 97, 114, 116, 10, 10, 110, 117, 108, 108, 95, 118, 101, 99, 116, 111, 114, 58, 10, 9, 101, 105, 10, 9, 114, 101, 116, 105, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 69, 73, 78, 83, 84, 69, 73, 78, 10, 9, 111, 114, 103, 32, 36, 48, 49, 48, 48, 10, 114, 111, 109, 95, 115, 116, 97, 114, 116, 58, 10, 9, 106, 112, 32, 83, 84, 65, 82, 84, 10, 9, 100, 98, 32, 48, 44, 48, 44, 48, 44, 48, 44, 48, 10, 9, 100, 119, 32, 36, 48, 48, 48, 48, 10, 9, 100, 119, 32, 36, 48, 48, 48, 48, 10, 9, 100, 119, 32, 36, 48, 48, 48, 48, 10, 9, 100, 119, 32, 36, 48, 48, 48, 48, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 78, 65, 66, 85, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 67, 80, 77, 10, 9, 111, 114, 103, 32, 36, 48, 49, 48, 48, 10, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 9, 111, 114, 103, 32, 36, 49, 52, 48, 100, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 110, 111, 112, 10, 9, 110, 111, 112, 10, 9, 110, 111, 112, 10, 9, 106, 112, 32, 83, 84, 65, 82, 84, 10, 32, 32, 32, 32, 32, 32, 32, 32, 116, 105, 109, 101, 115, 32, 36, 49, 48, 48, 45, 40, 36, 38, 50, 53, 53, 41, 32, 100, 98, 32, 36, 102, 102, 10, 110, 97, 98, 117, 95, 105, 110, 116, 58, 10, 9, 100, 119, 32, 110, 117, 108, 108, 95, 118, 101, 99, 116, 111, 114, 10, 9, 100, 119, 32, 110, 117, 108, 108, 95, 118, 101, 99, 116, 111, 114, 10, 9, 100, 119, 32, 107, 101, 121, 98, 111, 97, 114, 100, 95, 104, 97, 110, 100, 108, 101, 114, 10, 9, 100, 119, 32, 110, 109, 105, 95, 104, 97, 110, 100, 108, 101, 114, 10, 9, 100, 119, 32, 110, 117, 108, 108, 95, 118, 101, 99, 116, 111, 114, 10, 9, 100, 119, 32, 110, 117, 108, 108, 95, 118, 101, 99, 116, 111, 114, 10, 9, 100, 119, 32, 110, 117, 108, 108, 95, 118, 101, 99, 116, 111, 114, 10, 9, 100, 119, 32, 110, 117, 108, 108, 95, 118, 101, 99, 116, 111, 114, 10, 10, 110, 117, 108, 108, 95, 118, 101, 99, 116, 111, 114, 58, 10, 9, 101, 105, 10, 9, 114, 101, 116, 105, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 32, 32, 32, 32, 105, 102, 32, 83, 86, 73, 10, 87, 82, 84, 80, 83, 71, 58, 9, 10, 9, 111, 117, 116, 32, 40, 36, 56, 56, 41, 44, 97, 10, 9, 112, 117, 115, 104, 32, 97, 102, 10, 9, 108, 100, 32, 97, 44, 101, 10, 9, 111, 117, 116, 32, 40, 36, 56, 99, 41, 44, 97, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 114, 101, 116, 10, 10, 82, 68, 80, 83, 71, 58, 10, 9, 111, 117, 116, 32, 40, 36, 56, 56, 41, 44, 97, 10, 9, 112, 117, 115, 104, 32, 97, 102, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 105, 110, 32, 97, 44, 40, 36, 57, 48, 41, 10, 9, 114, 101, 116, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 32, 32, 32, 32, 105, 102, 32, 69, 73, 78, 83, 84, 69, 73, 78, 10, 87, 82, 84, 80, 83, 71, 58, 9, 10, 9, 111, 117, 116, 32, 40, 36, 48, 50, 41, 44, 97, 10, 9, 112, 117, 115, 104, 32, 97, 102, 10, 9, 108, 100, 32, 97, 44, 101, 10, 9, 111, 117, 116, 32, 40, 36, 48, 51, 41, 44, 97, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 114, 101, 116, 10, 10, 82, 68, 80, 83, 71, 58, 10, 9, 111, 117, 116, 32, 40, 36, 48, 50, 41, 44, 97, 10, 9, 112, 117, 115, 104, 32, 97, 102, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 105, 110, 32, 97, 44, 40, 36, 48, 50, 41, 10, 9, 114, 101, 116, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 32, 32, 32, 32, 105, 102, 32, 78, 65, 66, 85, 10, 87, 82, 84, 80, 83, 71, 58, 9, 10, 9, 111, 117, 116, 32, 40, 36, 52, 49, 41, 44, 97, 10, 9, 112, 117, 115, 104, 32, 97, 102, 10, 9, 108, 100, 32, 97, 44, 101, 10, 9, 111, 117, 116, 32, 40, 36, 52, 48, 41, 44, 97, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 114, 101, 116, 10, 10, 82, 68, 80, 83, 71, 58, 10, 9, 111, 117, 116, 32, 40, 36, 52, 49, 41, 44, 97, 10, 9, 112, 117, 115, 104, 32, 97, 102, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 105, 110, 32, 97, 44, 40, 36, 52, 48, 41, 10, 9, 114, 101, 116, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 32, 32, 32, 32, 105, 102, 32, 80, 86, 50, 48, 48, 48, 10, 9, 59, 32, 84, 104, 101, 32, 67, 97, 115, 105, 111, 32, 80, 86, 50, 48, 48, 48, 32, 104, 97, 115, 32, 116, 104, 101, 32, 86, 68, 80, 32, 112, 111, 114, 116, 115, 32, 109, 97, 112, 112, 101, 100, 32, 105, 110, 116, 111, 32, 109, 97, 105, 110, 32, 109, 101, 109, 111, 114, 121, 32, 40, 77, 82, 69, 81, 41, 10, 87, 82, 84, 86, 68, 80, 58, 10, 9, 108, 100, 32, 97, 44, 98, 10, 9, 108, 100, 32, 40, 86, 68, 80, 43, 49, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 99, 10, 9, 111, 114, 32, 36, 56, 48, 10, 9, 108, 100, 32, 40, 86, 68, 80, 43, 49, 41, 44, 97, 10, 9, 114, 101, 116, 10, 10, 83, 69, 84, 87, 82, 84, 58, 10, 9, 108, 100, 32, 97, 44, 108, 10, 9, 108, 100, 32, 40, 86, 68, 80, 43, 49, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 104, 10, 9, 111, 114, 32, 36, 52, 48, 10, 9, 108, 100, 32, 40, 86, 68, 80, 43, 49, 41, 44, 97, 10, 9, 114, 101, 116, 10, 10, 83, 69, 84, 82, 68, 58, 10, 9, 108, 100, 32, 97, 44, 108, 10, 9, 108, 100, 32, 40, 86, 68, 80, 43, 49, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 110, 100, 32, 36, 51, 102, 10, 9, 108, 100, 32, 40, 86, 68, 80, 43, 49, 41, 44, 97, 10, 9, 114, 101, 116, 10, 10, 87, 82, 84, 86, 82, 77, 58, 10, 9, 112, 117, 115, 104, 32, 97, 102, 10, 9, 99, 97, 108, 108, 32, 83, 69, 84, 87, 82, 84, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 108, 100, 32, 40, 86, 68, 80, 41, 44, 97, 10, 9, 114, 101, 116, 10, 10, 82, 68, 86, 82, 77, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 117, 115, 104, 32, 97, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 83, 69, 84, 82, 68, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 111, 112, 32, 97, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 86, 68, 80, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 10, 10, 70, 73, 76, 86, 82, 77, 58, 10, 9, 112, 117, 115, 104, 32, 97, 102, 10, 9, 99, 97, 108, 108, 32, 83, 69, 84, 87, 82, 84, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 100, 101, 99, 32, 98, 99, 9, 9, 59, 32, 84, 45, 115, 116, 97, 116, 101, 115, 32, 40, 110, 111, 114, 109, 97, 108, 32, 47, 32, 77, 49, 41, 10, 46, 49, 58, 9, 108, 100, 32, 40, 86, 68, 80, 41, 44, 97, 9, 59, 32, 49, 51, 32, 49, 52, 10, 9, 100, 101, 99, 32, 98, 99, 9, 9, 59, 32, 32, 54, 32, 32, 55, 10, 9, 98, 105, 116, 32, 55, 44, 98, 9, 9, 59, 32, 32, 56, 32, 49, 48, 10, 9, 106, 112, 32, 122, 44, 46, 49, 9, 9, 59, 32, 49, 48, 32, 49, 49, 10, 9, 9, 9, 59, 32, 45, 45, 32, 45, 45, 10, 9, 9, 9, 59, 32, 51, 55, 32, 52, 50, 10, 9, 114, 101, 116, 10, 10, 76, 68, 73, 82, 77, 86, 58, 10, 9, 101, 120, 32, 100, 101, 44, 104, 108, 10, 9, 99, 97, 108, 108, 32, 83, 69, 84, 82, 68, 10, 9, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 9, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 46, 49, 58, 10, 9, 108, 100, 32, 97, 44, 40, 86, 68, 80, 41, 10, 9, 108, 100, 32, 40, 100, 101, 41, 44, 97, 10, 9, 105, 110, 99, 32, 100, 101, 10, 9, 100, 101, 99, 32, 98, 99, 10, 9, 108, 100, 32, 97, 44, 98, 10, 9, 111, 114, 32, 99, 10, 9, 106, 112, 32, 110, 122, 44, 46, 49, 10, 9, 114, 101, 116, 10, 10, 76, 68, 73, 82, 86, 77, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 69, 88, 32, 68, 69, 44, 72, 76, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 67, 65, 76, 76, 32, 83, 69, 84, 87, 82, 84, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 69, 88, 32, 68, 69, 44, 72, 76, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 68, 69, 67, 32, 66, 67, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 73, 78, 67, 32, 67, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 76, 68, 32, 65, 44, 66, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 76, 68, 32, 66, 44, 67, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 73, 78, 67, 32, 65, 10, 9, 76, 68, 32, 67, 44, 65, 13, 10, 46, 49, 58, 10, 9, 76, 68, 32, 65, 44, 40, 72, 76, 41, 9, 59, 32, 32, 55, 32, 32, 56, 10, 9, 76, 68, 32, 40, 86, 68, 80, 41, 44, 65, 9, 59, 32, 49, 51, 32, 49, 52, 10, 9, 73, 78, 67, 32, 72, 76, 9, 9, 59, 32, 32, 54, 32, 32, 55, 10, 9, 68, 74, 78, 90, 32, 46, 49, 9, 9, 59, 32, 49, 51, 32, 49, 52, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 68, 69, 67, 32, 67, 9, 9, 59, 32, 32, 52, 32, 32, 53, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 74, 80, 32, 78, 90, 44, 46, 49, 9, 59, 32, 49, 48, 32, 49, 49, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 82, 69, 84, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 9, 59, 32, 78, 111, 114, 109, 97, 108, 32, 112, 108, 97, 116, 102, 111, 114, 109, 115, 32, 119, 105, 116, 104, 32, 86, 68, 80, 32, 99, 111, 110, 110, 101, 99, 116, 101, 100, 32, 118, 105, 97, 32, 112, 111, 114, 116, 115, 32, 40, 73, 79, 82, 81, 41, 10, 87, 82, 84, 86, 68, 80, 58, 10, 9, 108, 100, 32, 97, 44, 98, 10, 9, 111, 117, 116, 32, 40, 86, 68, 80, 43, 49, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 99, 10, 9, 111, 114, 32, 36, 56, 48, 10, 9, 111, 117, 116, 32, 40, 86, 68, 80, 43, 49, 41, 44, 97, 10, 9, 114, 101, 116, 10, 10, 83, 69, 84, 87, 82, 84, 58, 10, 9, 108, 100, 32, 97, 44, 108, 10, 9, 111, 117, 116, 32, 40, 86, 68, 80, 43, 49, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 104, 10, 9, 111, 114, 32, 36, 52, 48, 10, 9, 111, 117, 116, 32, 40, 86, 68, 80, 43, 49, 41, 44, 97, 10, 9, 114, 101, 116, 10, 10, 83, 69, 84, 82, 68, 58, 10, 9, 108, 100, 32, 97, 44, 108, 10, 9, 111, 117, 116, 32, 40, 86, 68, 80, 43, 49, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 110, 100, 32, 36, 51, 102, 10, 9, 111, 117, 116, 32, 40, 86, 68, 80, 43, 49, 41, 44, 97, 10, 9, 114, 101, 116, 10, 10, 87, 82, 84, 86, 82, 77, 58, 10, 9, 112, 117, 115, 104, 32, 97, 102, 10, 9, 99, 97, 108, 108, 32, 83, 69, 84, 87, 82, 84, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 111, 117, 116, 32, 40, 86, 68, 80, 41, 44, 97, 10, 9, 114, 101, 116, 10, 10, 32, 32, 32, 32, 105, 102, 32, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 10, 9, 100, 98, 32, 36, 102, 102, 44, 36, 102, 102, 44, 36, 102, 102, 44, 36, 102, 102, 44, 36, 102, 102, 44, 36, 102, 102, 44, 36, 102, 102, 44, 36, 102, 102, 10, 10, 9, 59, 32, 76, 111, 99, 97, 116, 101, 100, 32, 97, 116, 32, 36, 48, 48, 54, 54, 10, 9, 101, 105, 9, 9, 59, 32, 78, 77, 73, 32, 104, 97, 110, 100, 108, 101, 114, 32, 40, 112, 97, 117, 115, 101, 32, 98, 117, 116, 116, 111, 110, 41, 10, 9, 114, 101, 116, 110, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 82, 68, 86, 82, 77, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 117, 115, 104, 32, 97, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 83, 69, 84, 82, 68, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 111, 112, 32, 97, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 32, 97, 44, 40, 86, 68, 80, 82, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 10, 10, 70, 73, 76, 86, 82, 77, 58, 10, 9, 112, 117, 115, 104, 32, 97, 102, 10, 9, 99, 97, 108, 108, 32, 83, 69, 84, 87, 82, 84, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 100, 101, 99, 32, 98, 99, 9, 9, 59, 32, 84, 45, 115, 116, 97, 116, 101, 115, 32, 40, 110, 111, 114, 109, 97, 108, 32, 47, 32, 77, 49, 41, 10, 46, 49, 58, 9, 111, 117, 116, 32, 40, 86, 68, 80, 41, 44, 97, 9, 59, 32, 49, 49, 32, 49, 50, 10, 9, 100, 101, 99, 32, 98, 99, 9, 9, 59, 32, 32, 54, 32, 32, 55, 10, 9, 98, 105, 116, 32, 55, 44, 98, 9, 9, 59, 32, 32, 56, 32, 49, 48, 10, 9, 106, 112, 32, 122, 44, 46, 49, 9, 9, 59, 32, 49, 48, 32, 49, 49, 10, 9, 9, 9, 59, 32, 45, 45, 32, 45, 45, 10, 9, 9, 9, 59, 32, 51, 53, 32, 52, 48, 10, 9, 114, 101, 116, 10, 10, 76, 68, 73, 82, 77, 86, 58, 10, 9, 101, 120, 32, 100, 101, 44, 104, 108, 10, 9, 99, 97, 108, 108, 32, 83, 69, 84, 82, 68, 10, 9, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 9, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 46, 49, 58, 10, 9, 105, 110, 32, 97, 44, 40, 86, 68, 80, 41, 10, 9, 108, 100, 32, 40, 100, 101, 41, 44, 97, 10, 32, 32, 32, 32, 105, 102, 32, 83, 79, 82, 68, 43, 83, 77, 83, 10, 9, 110, 111, 112, 9, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 71, 49, 48, 48, 48, 43, 77, 69, 77, 79, 84, 69, 67, 72, 43, 69, 73, 78, 83, 84, 69, 73, 78, 10, 9, 110, 111, 112, 9, 59, 32, 83, 71, 49, 48, 48, 48, 32, 105, 115, 32, 51, 46, 53, 56, 32, 109, 104, 122, 44, 32, 98, 117, 116, 32, 83, 67, 51, 48, 48, 48, 32, 105, 115, 32, 52, 32, 109, 104, 122, 46, 10, 9, 110, 111, 112, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 105, 110, 99, 32, 100, 101, 10, 9, 100, 101, 99, 32, 98, 99, 10, 9, 108, 100, 32, 97, 44, 98, 10, 9, 111, 114, 32, 99, 10, 9, 106, 112, 32, 110, 122, 44, 46, 49, 10, 9, 114, 101, 116, 10, 10, 76, 68, 73, 82, 86, 77, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 100, 101, 44, 104, 108, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 83, 69, 84, 87, 82, 84, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 100, 101, 44, 104, 108, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 101, 99, 32, 98, 99, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 99, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 98, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 44, 99, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 97, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 99, 44, 86, 68, 80, 13, 10, 46, 49, 58, 10, 32, 32, 32, 32, 105, 102, 32, 83, 79, 82, 68, 43, 83, 77, 83, 10, 9, 110, 111, 112, 9, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 71, 49, 48, 48, 48, 43, 77, 69, 77, 79, 84, 69, 67, 72, 43, 69, 73, 78, 83, 84, 69, 73, 78, 10, 9, 110, 111, 112, 9, 59, 32, 83, 71, 49, 48, 48, 48, 32, 105, 115, 32, 51, 46, 53, 56, 32, 109, 104, 122, 44, 32, 98, 117, 116, 32, 83, 67, 51, 48, 48, 48, 32, 105, 115, 32, 52, 32, 109, 104, 122, 46, 10, 9, 110, 111, 112, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 111, 117, 116, 105, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 112, 32, 110, 122, 44, 46, 49, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 101, 99, 32, 97, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 112, 32, 110, 122, 44, 46, 49, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 32, 32, 32, 32, 105, 102, 32, 83, 77, 83, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 76, 68, 73, 82, 86, 77, 51, 58, 10, 9, 99, 97, 108, 108, 32, 46, 49, 10, 9, 99, 97, 108, 108, 32, 46, 49, 10, 46, 49, 58, 9, 112, 117, 115, 104, 32, 104, 108, 10, 9, 112, 117, 115, 104, 32, 100, 101, 10, 9, 112, 117, 115, 104, 32, 98, 99, 10, 9, 99, 97, 108, 108, 32, 76, 68, 73, 82, 86, 77, 10, 9, 112, 111, 112, 32, 98, 99, 10, 9, 112, 111, 112, 32, 100, 101, 10, 9, 108, 100, 32, 97, 44, 100, 10, 9, 97, 100, 100, 32, 97, 44, 56, 10, 9, 108, 100, 32, 100, 44, 97, 10, 9, 112, 111, 112, 32, 104, 108, 10, 9, 114, 101, 116, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 68, 73, 83, 83, 67, 82, 58, 10, 9, 99, 97, 108, 108, 32, 110, 109, 105, 95, 111, 102, 102, 10, 9, 108, 100, 32, 98, 99, 44, 36, 97, 50, 48, 49, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 86, 68, 80, 10, 9, 106, 112, 32, 110, 109, 105, 95, 111, 110, 10, 10, 69, 78, 65, 83, 67, 82, 58, 10, 9, 99, 97, 108, 108, 32, 110, 109, 105, 95, 111, 102, 102, 10, 9, 108, 100, 32, 98, 99, 44, 36, 101, 50, 48, 49, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 86, 68, 80, 10, 9, 106, 112, 32, 110, 109, 105, 95, 111, 110, 10, 10, 67, 80, 89, 66, 76, 75, 58, 10, 9, 112, 111, 112, 32, 104, 108, 10, 9, 101, 120, 32, 97, 102, 44, 97, 102, 39, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 108, 100, 32, 98, 44, 97, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 108, 100, 32, 99, 44, 97, 10, 9, 112, 111, 112, 32, 100, 101, 10, 9, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 9, 99, 97, 108, 108, 32, 110, 109, 105, 95, 111, 102, 102, 10, 46, 49, 58, 9, 112, 117, 115, 104, 32, 98, 99, 10, 9, 112, 117, 115, 104, 32, 104, 108, 10, 9, 112, 117, 115, 104, 32, 100, 101, 10, 9, 108, 100, 32, 98, 44, 48, 10, 9, 99, 97, 108, 108, 32, 76, 68, 73, 82, 86, 77, 10, 9, 112, 111, 112, 32, 104, 108, 10, 32, 32, 32, 32, 105, 102, 32, 83, 77, 83, 10, 9, 108, 100, 32, 98, 99, 44, 36, 48, 48, 52, 48, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 9, 108, 100, 32, 98, 99, 44, 36, 48, 48, 50, 48, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 97, 100, 100, 32, 104, 108, 44, 98, 99, 10, 9, 101, 120, 32, 100, 101, 44, 104, 108, 10, 9, 112, 111, 112, 32, 104, 108, 10, 9, 101, 120, 32, 97, 102, 44, 97, 102, 39, 10, 9, 108, 100, 32, 99, 44, 97, 10, 9, 108, 100, 32, 98, 44, 48, 10, 9, 97, 100, 100, 32, 104, 108, 44, 98, 99, 10, 9, 101, 120, 32, 97, 102, 44, 97, 102, 39, 10, 9, 112, 111, 112, 32, 98, 99, 10, 9, 100, 106, 110, 122, 32, 46, 49, 10, 9, 106, 112, 32, 110, 109, 105, 95, 111, 110, 10, 9, 10, 110, 109, 105, 95, 111, 102, 102, 58, 10, 32, 32, 32, 32, 105, 102, 32, 67, 79, 76, 69, 67, 79, 43, 80, 86, 50, 48, 48, 48, 10, 9, 112, 117, 115, 104, 32, 104, 108, 10, 9, 108, 100, 32, 104, 108, 44, 109, 111, 100, 101, 10, 9, 115, 101, 116, 32, 48, 44, 40, 104, 108, 41, 10, 9, 112, 111, 112, 32, 104, 108, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 43, 77, 83, 88, 43, 83, 86, 73, 43, 83, 79, 82, 68, 43, 77, 69, 77, 79, 84, 69, 67, 72, 43, 78, 65, 66, 85, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 105, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 114, 101, 116, 10, 10, 110, 109, 105, 95, 111, 110, 58, 10, 32, 32, 32, 32, 105, 102, 32, 67, 79, 76, 69, 67, 79, 43, 80, 86, 50, 48, 48, 48, 10, 9, 112, 117, 115, 104, 32, 97, 102, 10, 9, 112, 117, 115, 104, 32, 104, 108, 10, 9, 108, 100, 32, 104, 108, 44, 109, 111, 100, 101, 10, 9, 114, 101, 115, 32, 48, 44, 40, 104, 108, 41, 10, 9, 110, 111, 112, 10, 9, 98, 105, 116, 32, 49, 44, 40, 104, 108, 41, 10, 9, 106, 112, 32, 110, 122, 44, 110, 109, 105, 95, 104, 97, 110, 100, 108, 101, 114, 46, 48, 10, 9, 112, 111, 112, 32, 104, 108, 10, 9, 112, 111, 112, 32, 97, 102, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 43, 77, 83, 88, 43, 83, 86, 73, 43, 83, 79, 82, 68, 43, 77, 69, 77, 79, 84, 69, 67, 72, 43, 78, 65, 66, 85, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 105, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 114, 101, 116, 10, 10, 32, 32, 32, 32, 105, 102, 32, 67, 79, 76, 69, 67, 79, 10, 107, 101, 121, 112, 97, 100, 95, 116, 97, 98, 108, 101, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 102, 44, 36, 48, 56, 44, 36, 48, 52, 44, 36, 48, 53, 44, 36, 48, 99, 44, 36, 48, 55, 44, 36, 48, 98, 44, 36, 48, 50, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 100, 44, 36, 48, 97, 44, 36, 48, 48, 44, 36, 48, 57, 44, 36, 48, 51, 44, 36, 48, 49, 44, 36, 48, 54, 44, 36, 48, 102, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 99, 108, 115, 58, 10, 32, 32, 32, 32, 105, 102, 32, 83, 77, 83, 10, 9, 108, 100, 32, 104, 108, 44, 36, 51, 56, 48, 48, 10, 9, 108, 100, 32, 40, 99, 117, 114, 115, 111, 114, 41, 44, 104, 108, 10, 9, 100, 105, 10, 9, 99, 97, 108, 108, 32, 83, 69, 84, 87, 82, 84, 10, 46, 49, 58, 9, 108, 100, 32, 97, 44, 36, 50, 48, 9, 59, 32, 32, 55, 10, 9, 111, 117, 116, 32, 40, 86, 68, 80, 41, 44, 97, 9, 59, 32, 49, 49, 10, 9, 105, 110, 99, 32, 104, 108, 9, 9, 59, 32, 32, 54, 10, 9, 105, 110, 99, 32, 104, 108, 9, 9, 59, 32, 32, 54, 10, 9, 108, 100, 32, 97, 44, 36, 48, 48, 9, 59, 32, 32, 55, 10, 9, 111, 117, 116, 32, 40, 86, 68, 80, 41, 44, 97, 9, 59, 32, 49, 49, 10, 9, 108, 100, 32, 97, 44, 104, 9, 9, 59, 32, 32, 52, 32, 10, 9, 99, 112, 32, 36, 51, 101, 9, 9, 59, 32, 32, 55, 10, 9, 106, 112, 32, 110, 122, 44, 46, 49, 9, 59, 32, 49, 48, 10, 9, 101, 105, 10, 9, 114, 101, 116, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 9, 108, 100, 32, 104, 108, 44, 36, 49, 56, 48, 48, 10, 9, 108, 100, 32, 40, 99, 117, 114, 115, 111, 114, 41, 44, 104, 108, 10, 9, 108, 100, 32, 98, 99, 44, 36, 48, 51, 48, 48, 10, 9, 108, 100, 32, 97, 44, 36, 50, 48, 10, 9, 99, 97, 108, 108, 32, 110, 109, 105, 95, 111, 102, 102, 10, 9, 99, 97, 108, 108, 32, 70, 73, 76, 86, 82, 77, 10, 9, 106, 112, 32, 110, 109, 105, 95, 111, 110, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 112, 114, 105, 110, 116, 95, 115, 116, 114, 105, 110, 103, 58, 10, 9, 108, 100, 32, 99, 44, 97, 10, 9, 108, 100, 32, 98, 44, 48, 10, 9, 108, 100, 32, 100, 101, 44, 40, 99, 117, 114, 115, 111, 114, 41, 10, 32, 32, 32, 32, 105, 102, 32, 83, 77, 83, 10, 9, 108, 100, 32, 97, 44, 100, 10, 9, 97, 110, 100, 32, 36, 48, 55, 10, 9, 111, 114, 32, 36, 51, 56, 10, 9, 108, 100, 32, 100, 44, 97, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 9, 108, 100, 32, 97, 44, 100, 10, 9, 97, 110, 100, 32, 36, 48, 55, 10, 9, 111, 114, 32, 36, 49, 56, 10, 9, 108, 100, 32, 100, 44, 97, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 112, 117, 115, 104, 32, 100, 101, 10, 9, 112, 117, 115, 104, 32, 98, 99, 10, 9, 99, 97, 108, 108, 32, 110, 109, 105, 95, 111, 102, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 77, 83, 10, 9, 101, 120, 32, 100, 101, 44, 104, 108, 10, 46, 49, 58, 9, 108, 100, 32, 97, 44, 40, 100, 101, 41, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 86, 82, 77, 10, 9, 105, 110, 99, 32, 100, 101, 10, 9, 105, 110, 99, 32, 104, 108, 10, 9, 120, 111, 114, 32, 97, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 86, 82, 77, 10, 9, 105, 110, 99, 32, 104, 108, 10, 9, 100, 101, 99, 32, 98, 99, 10, 9, 108, 100, 32, 97, 44, 98, 10, 9, 111, 114, 32, 99, 10, 9, 106, 112, 32, 110, 122, 44, 46, 49, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 9, 99, 97, 108, 108, 32, 76, 68, 73, 82, 86, 77, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 99, 97, 108, 108, 32, 110, 109, 105, 95, 111, 110, 10, 9, 112, 111, 112, 32, 98, 99, 10, 9, 112, 111, 112, 32, 104, 108, 10, 9, 97, 100, 100, 32, 104, 108, 44, 98, 99, 10, 32, 32, 32, 32, 105, 102, 32, 83, 77, 83, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 104, 108, 44, 98, 99, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 108, 100, 32, 40, 99, 117, 114, 115, 111, 114, 41, 44, 104, 108, 10, 9, 114, 101, 116, 10, 10, 112, 114, 105, 110, 116, 95, 110, 117, 109, 98, 101, 114, 58, 10, 9, 108, 100, 32, 98, 44, 48, 10, 9, 99, 97, 108, 108, 32, 110, 109, 105, 95, 111, 102, 102, 10, 112, 114, 105, 110, 116, 95, 110, 117, 109, 98, 101, 114, 53, 58, 10, 9, 108, 100, 32, 100, 101, 44, 49, 48, 48, 48, 48, 10, 9, 99, 97, 108, 108, 32, 112, 114, 105, 110, 116, 95, 100, 105, 103, 105, 116, 10, 112, 114, 105, 110, 116, 95, 110, 117, 109, 98, 101, 114, 52, 58, 10, 9, 108, 100, 32, 100, 101, 44, 49, 48, 48, 48, 10, 9, 99, 97, 108, 108, 32, 112, 114, 105, 110, 116, 95, 100, 105, 103, 105, 116, 10, 112, 114, 105, 110, 116, 95, 110, 117, 109, 98, 101, 114, 51, 58, 10, 9, 108, 100, 32, 100, 101, 44, 49, 48, 48, 10, 9, 99, 97, 108, 108, 32, 112, 114, 105, 110, 116, 95, 100, 105, 103, 105, 116, 10, 112, 114, 105, 110, 116, 95, 110, 117, 109, 98, 101, 114, 50, 58, 10, 9, 108, 100, 32, 100, 101, 44, 49, 48, 10, 9, 99, 97, 108, 108, 32, 112, 114, 105, 110, 116, 95, 100, 105, 103, 105, 116, 10, 112, 114, 105, 110, 116, 95, 110, 117, 109, 98, 101, 114, 49, 58, 10, 9, 108, 100, 32, 100, 101, 44, 49, 10, 9, 108, 100, 32, 98, 44, 101, 10, 9, 99, 97, 108, 108, 32, 112, 114, 105, 110, 116, 95, 100, 105, 103, 105, 116, 10, 9, 106, 112, 32, 110, 109, 105, 95, 111, 110, 10, 10, 112, 114, 105, 110, 116, 95, 100, 105, 103, 105, 116, 58, 10, 9, 108, 100, 32, 97, 44, 36, 50, 102, 10, 9, 111, 114, 32, 97, 10, 46, 50, 58, 9, 105, 110, 99, 32, 97, 10, 9, 115, 98, 99, 32, 104, 108, 44, 100, 101, 10, 9, 106, 112, 32, 110, 99, 44, 46, 50, 10, 9, 97, 100, 100, 32, 104, 108, 44, 100, 101, 10, 9, 99, 112, 32, 36, 51, 48, 10, 9, 106, 114, 32, 110, 122, 44, 46, 51, 10, 9, 108, 100, 32, 97, 44, 98, 10, 9, 111, 114, 32, 97, 10, 9, 114, 101, 116, 32, 122, 10, 9, 100, 101, 99, 32, 97, 10, 9, 106, 114, 32, 122, 44, 46, 52, 10, 9, 108, 100, 32, 97, 44, 99, 10, 9, 106, 114, 32, 112, 114, 105, 110, 116, 95, 99, 104, 97, 114, 10, 46, 52, 58, 10, 9, 108, 100, 32, 97, 44, 36, 51, 48, 10, 46, 51, 58, 9, 108, 100, 32, 98, 44, 49, 10, 10, 112, 114, 105, 110, 116, 95, 99, 104, 97, 114, 58, 10, 9, 112, 117, 115, 104, 32, 104, 108, 10, 9, 108, 100, 32, 104, 108, 44, 40, 99, 117, 114, 115, 111, 114, 41, 10, 9, 101, 120, 32, 97, 102, 44, 97, 102, 39, 10, 9, 108, 100, 32, 97, 44, 104, 10, 9, 97, 110, 100, 32, 36, 48, 55, 10, 32, 32, 32, 32, 105, 102, 32, 83, 77, 83, 10, 9, 111, 114, 32, 36, 51, 56, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 9, 111, 114, 32, 36, 49, 56, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 108, 100, 32, 104, 44, 97, 10, 9, 101, 120, 32, 97, 102, 44, 97, 102, 39, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 86, 82, 77, 10, 9, 105, 110, 99, 32, 104, 108, 10, 32, 32, 32, 32, 105, 102, 32, 83, 77, 83, 10, 9, 120, 111, 114, 32, 97, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 86, 82, 77, 10, 9, 105, 110, 99, 32, 104, 108, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 108, 100, 32, 40, 99, 117, 114, 115, 111, 114, 41, 44, 104, 108, 10, 9, 112, 111, 112, 32, 104, 108, 10, 9, 114, 101, 116, 10, 10, 100, 101, 102, 105, 110, 101, 95, 99, 104, 97, 114, 58, 10, 9, 101, 120, 32, 100, 101, 44, 104, 108, 10, 9, 108, 100, 32, 108, 44, 97, 10, 9, 108, 100, 32, 104, 44, 48, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 50, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 52, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 56, 10, 32, 32, 32, 32, 105, 102, 32, 83, 77, 83, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 49, 54, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 51, 50, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 108, 100, 32, 99, 44, 108, 10, 9, 108, 100, 32, 98, 44, 104, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 112, 111, 112, 32, 104, 108, 10, 9, 112, 117, 115, 104, 32, 97, 102, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 50, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 52, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 56, 10, 32, 32, 32, 32, 105, 102, 32, 83, 77, 83, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 49, 54, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 51, 50, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 101, 120, 32, 100, 101, 44, 104, 108, 10, 32, 32, 32, 32, 105, 102, 32, 83, 77, 83, 10, 9, 100, 105, 10, 9, 99, 97, 108, 108, 32, 76, 68, 73, 82, 86, 77, 10, 9, 101, 105, 10, 9, 114, 101, 116, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 9, 99, 97, 108, 108, 32, 110, 109, 105, 95, 111, 102, 102, 10, 9, 108, 100, 32, 97, 44, 40, 109, 111, 100, 101, 41, 10, 9, 97, 110, 100, 32, 56, 10, 9, 106, 114, 32, 110, 122, 44, 46, 49, 10, 9, 99, 97, 108, 108, 32, 76, 68, 73, 82, 86, 77, 51, 10, 9, 106, 112, 32, 110, 109, 105, 95, 111, 110, 10, 9, 10, 46, 49, 58, 9, 99, 97, 108, 108, 32, 76, 68, 73, 82, 86, 77, 10, 9, 106, 112, 32, 110, 109, 105, 95, 111, 110, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 100, 101, 102, 105, 110, 101, 95, 99, 111, 108, 111, 114, 58, 10, 32, 32, 32, 32, 105, 102, 32, 83, 77, 83, 10, 9, 114, 101, 116, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 9, 101, 120, 32, 100, 101, 44, 104, 108, 10, 9, 108, 100, 32, 108, 44, 97, 10, 9, 108, 100, 32, 104, 44, 48, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 50, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 52, 10, 9, 97, 100, 100, 32, 104, 108, 44]);
fileData5.push.apply(fileData5, [104, 108, 9, 59, 32, 120, 56, 10, 9, 108, 100, 32, 99, 44, 108, 10, 9, 108, 100, 32, 98, 44, 104, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 112, 111, 112, 32, 104, 108, 10, 9, 112, 117, 115, 104, 32, 97, 102, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 50, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 52, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 56, 10, 9, 101, 120, 32, 100, 101, 44, 104, 108, 10, 9, 115, 101, 116, 32, 53, 44, 100, 10, 9, 99, 97, 108, 108, 32, 110, 109, 105, 95, 111, 102, 102, 10, 9, 99, 97, 108, 108, 32, 76, 68, 73, 82, 86, 77, 51, 10, 9, 106, 112, 32, 110, 109, 105, 95, 111, 110, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 100, 101, 102, 105, 110, 101, 95, 115, 112, 114, 105, 116, 101, 58, 10, 9, 101, 120, 32, 100, 101, 44, 104, 108, 10, 9, 108, 100, 32, 108, 44, 97, 10, 9, 108, 100, 32, 104, 44, 48, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 50, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 52, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 56, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 49, 54, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 51, 50, 10, 32, 32, 32, 32, 105, 102, 32, 83, 77, 83, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 54, 52, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 108, 100, 32, 99, 44, 108, 10, 9, 108, 100, 32, 98, 44, 104, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 112, 111, 112, 32, 104, 108, 10, 9, 112, 117, 115, 104, 32, 97, 102, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 50, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 52, 10, 32, 32, 32, 32, 105, 102, 32, 83, 77, 83, 10, 9, 115, 101, 116, 32, 49, 44, 104, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 9, 108, 100, 32, 104, 44, 36, 48, 55, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 56, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 49, 54, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 51, 50, 10, 32, 32, 32, 32, 105, 102, 32, 83, 77, 83, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 54, 52, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 101, 120, 32, 100, 101, 44, 104, 108, 10, 9, 99, 97, 108, 108, 32, 110, 109, 105, 95, 111, 102, 102, 10, 9, 99, 97, 108, 108, 32, 76, 68, 73, 82, 86, 77, 10, 9, 106, 112, 32, 110, 109, 105, 95, 111, 110, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 10, 117, 112, 100, 97, 116, 101, 95, 115, 112, 114, 105, 116, 101, 58, 10, 32, 32, 32, 32, 105, 102, 32, 83, 77, 83, 10, 9, 112, 111, 112, 32, 98, 99, 9, 9, 59, 32, 80, 111, 112, 32, 114, 101, 116, 117, 114, 110, 32, 97, 100, 100, 114, 101, 115, 115, 46, 10, 9, 112, 111, 112, 32, 100, 101, 9, 9, 59, 32, 51, 116, 104, 46, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 105, 110, 32, 68, 32, 40, 89, 45, 99, 111, 111, 114, 100, 105, 110, 97, 116, 101, 41, 10, 9, 108, 100, 32, 101, 44, 97, 9, 9, 59, 32, 52, 116, 104, 46, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 105, 110, 32, 69, 32, 40, 102, 114, 97, 109, 101, 41, 10, 9, 112, 111, 112, 32, 97, 102, 9, 9, 59, 32, 50, 110, 100, 46, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 105, 110, 32, 65, 32, 40, 88, 45, 99, 111, 111, 114, 100, 105, 110, 97, 116, 101, 41, 10, 9, 112, 111, 112, 32, 104, 108, 9, 9, 59, 32, 49, 115, 116, 46, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 105, 110, 32, 72, 32, 40, 115, 112, 114, 105, 116, 101, 32, 110, 117, 109, 98, 101, 114, 41, 10, 9, 112, 117, 115, 104, 32, 98, 99, 9, 9, 59, 32, 80, 117, 115, 104, 32, 114, 101, 116, 117, 114, 110, 32, 97, 100, 100, 114, 101, 115, 115, 46, 10, 9, 108, 100, 32, 108, 44, 104, 10, 9, 114, 101, 115, 32, 55, 44, 108, 10, 9, 114, 101, 115, 32, 54, 44, 108, 10, 9, 108, 100, 32, 104, 44, 115, 112, 114, 105, 116, 101, 115, 62, 62, 56, 10, 9, 108, 100, 32, 40, 104, 108, 41, 44, 97, 10, 9, 115, 108, 97, 32, 108, 10, 9, 115, 101, 116, 32, 55, 44, 108, 10, 9, 108, 100, 32, 40, 104, 108, 41, 44, 100, 10, 9, 105, 110, 99, 32, 108, 10, 9, 108, 100, 32, 40, 104, 108, 41, 44, 101, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 9, 112, 111, 112, 32, 98, 99, 10, 9, 108, 100, 32, 40, 115, 112, 114, 105, 116, 101, 95, 100, 97, 116, 97, 43, 51, 41, 44, 97, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 108, 100, 32, 40, 115, 112, 114, 105, 116, 101, 95, 100, 97, 116, 97, 43, 50, 41, 44, 97, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 108, 100, 32, 40, 115, 112, 114, 105, 116, 101, 95, 100, 97, 116, 97, 43, 49, 41, 44, 97, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 108, 100, 32, 40, 115, 112, 114, 105, 116, 101, 95, 100, 97, 116, 97, 41, 44, 97, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 59, 32, 65, 32, 61, 32, 83, 112, 114, 105, 116, 101, 32, 110, 117, 109, 98, 101, 114, 10, 9, 112, 117, 115, 104, 32, 98, 99, 10, 9, 108, 100, 32, 100, 101, 44, 115, 112, 114, 105, 116, 101, 115, 10, 9, 97, 100, 100, 32, 97, 44, 97, 10, 9, 97, 100, 100, 32, 97, 44, 97, 10, 32, 32, 32, 32, 105, 102, 32, 83, 79, 82, 68, 10, 9, 111, 114, 32, 36, 56, 48, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 108, 100, 32, 101, 44, 97, 10, 9, 108, 100, 32, 104, 108, 44, 115, 112, 114, 105, 116, 101, 95, 100, 97, 116, 97, 10, 9, 108, 100, 32, 98, 99, 44, 52, 10, 9, 108, 100, 105, 114, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 114, 101, 116, 10, 10, 9, 59, 32, 70, 97, 115, 116, 32, 49, 54, 45, 98, 105, 116, 32, 109, 117, 108, 116, 105, 112, 108, 105, 99, 97, 116, 105, 111, 110, 46, 10, 95, 109, 117, 108, 49, 54, 58, 10, 9, 108, 100, 32, 98, 44, 104, 10, 9, 108, 100, 32, 99, 44, 108, 10, 9, 108, 100, 32, 97, 44, 49, 54, 10, 9, 108, 100, 32, 104, 108, 44, 48, 10, 46, 49, 58, 10, 9, 115, 114, 108, 32, 100, 10, 9, 114, 114, 32, 101, 10, 9, 106, 114, 32, 110, 99, 44, 46, 50, 10, 9, 97, 100, 100, 32, 104, 108, 44, 98, 99, 10, 46, 50, 58, 9, 115, 108, 97, 32, 99, 10, 9, 114, 108, 32, 98, 10, 9, 100, 101, 99, 32, 97, 10, 9, 106, 112, 32, 110, 122, 44, 46, 49, 10, 9, 114, 101, 116, 10, 10, 9, 59, 32, 49, 54, 45, 98, 105, 116, 32, 115, 105, 103, 110, 101, 100, 32, 109, 111, 100, 117, 108, 111, 46, 10, 9, 59, 32, 104, 108, 32, 61, 32, 104, 108, 32, 37, 32, 100, 101, 10, 95, 109, 111, 100, 49, 54, 115, 58, 10, 9, 108, 100, 32, 97, 44, 104, 10, 9, 111, 114, 32, 97, 10, 9, 112, 117, 115, 104, 32, 97, 102, 10, 9, 98, 105, 116, 32, 55, 44, 104, 10, 9, 99, 97, 108, 108, 32, 110, 122, 44, 95, 110, 101, 103, 49, 54, 10, 9, 101, 120, 32, 100, 101, 44, 104, 108, 10, 9, 98, 105, 116, 32, 55, 44, 104, 10, 9, 99, 97, 108, 108, 32, 110, 122, 44, 95, 110, 101, 103, 49, 54, 10, 9, 101, 120, 32, 100, 101, 44, 104, 108, 10, 9, 99, 97, 108, 108, 32, 95, 109, 111, 100, 49, 54, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 114, 101, 116, 32, 112, 10, 9, 106, 112, 32, 95, 110, 101, 103, 49, 54, 10, 10, 9, 59, 32, 49, 54, 45, 98, 105, 116, 32, 115, 105, 103, 110, 101, 100, 32, 100, 105, 118, 105, 115, 105, 111, 110, 46, 10, 9, 59, 32, 104, 108, 32, 61, 32, 104, 108, 32, 47, 32, 100, 101, 10, 95, 100, 105, 118, 49, 54, 115, 58, 10, 9, 108, 100, 32, 97, 44, 104, 10, 9, 120, 111, 114, 32, 100, 10, 9, 112, 117, 115, 104, 32, 97, 102, 10, 9, 98, 105, 116, 32, 55, 44, 104, 10, 9, 99, 97, 108, 108, 32, 110, 122, 44, 95, 110, 101, 103, 49, 54, 10, 9, 101, 120, 32, 100, 101, 44, 104, 108, 10, 9, 98, 105, 116, 32, 55, 44, 104, 10, 9, 99, 97, 108, 108, 32, 110, 122, 44, 95, 110, 101, 103, 49, 54, 10, 9, 101, 120, 32, 100, 101, 44, 104, 108, 10, 9, 99, 97, 108, 108, 32, 95, 100, 105, 118, 49, 54, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 114, 101, 116, 32, 112, 10, 9, 106, 112, 32, 95, 110, 101, 103, 49, 54, 10, 10, 95, 97, 98, 115, 49, 54, 58, 10, 9, 98, 105, 116, 32, 55, 44, 104, 10, 9, 114, 101, 116, 32, 122, 10, 95, 110, 101, 103, 49, 54, 58, 10, 9, 108, 100, 32, 97, 44, 104, 10, 9, 99, 112, 108, 10, 9, 108, 100, 32, 104, 44, 97, 10, 9, 108, 100, 32, 97, 44, 108, 10, 9, 99, 112, 108, 10, 9, 108, 100, 32, 108, 44, 97, 10, 9, 105, 110, 99, 32, 104, 108, 10, 9, 114, 101, 116, 10, 10, 9, 59, 32, 70, 97, 115, 116, 32, 49, 54, 45, 98, 105, 116, 32, 100, 105, 118, 105, 115, 105, 111, 110, 46, 10, 9, 59, 32, 104, 108, 32, 61, 32, 104, 108, 32, 47, 32, 100, 101, 10, 95, 100, 105, 118, 49, 54, 58, 10, 9, 108, 100, 32, 98, 44, 104, 10, 9, 108, 100, 32, 99, 44, 108, 10, 9, 108, 100, 32, 104, 108, 44, 48, 10, 9, 108, 100, 32, 97, 44, 49, 54, 10, 46, 49, 58, 10, 9, 114, 108, 32, 99, 10, 9, 114, 108, 32, 98, 10, 9, 97, 100, 99, 32, 104, 108, 44, 104, 108, 10, 9, 115, 98, 99, 32, 104, 108, 44, 100, 101, 10, 9, 106, 112, 32, 110, 99, 44, 46, 50, 9, 10, 9, 97, 100, 100, 32, 104, 108, 44, 100, 101, 10, 46, 50, 58, 10, 9, 99, 99, 102, 10, 9, 100, 101, 99, 32, 97, 10, 9, 106, 112, 32, 110, 122, 44, 46, 49, 10, 9, 114, 108, 32, 99, 10, 9, 114, 108, 32, 98, 10, 9, 108, 100, 32, 104, 44, 98, 10, 9, 108, 100, 32, 108, 44, 99, 10, 9, 114, 101, 116, 10, 10, 9, 59, 32, 70, 97, 115, 116, 32, 49, 54, 45, 98, 105, 116, 32, 109, 111, 100, 117, 108, 111, 46, 10, 95, 109, 111, 100, 49, 54, 58, 10, 9, 108, 100, 32, 98, 44, 104, 10, 9, 108, 100, 32, 99, 44, 108, 10, 9, 108, 100, 32, 104, 108, 44, 48, 10, 9, 108, 100, 32, 97, 44, 49, 54, 10, 46, 49, 58, 10, 9, 114, 108, 32, 99, 10, 9, 114, 108, 32, 98, 10, 9, 97, 100, 99, 32, 104, 108, 44, 104, 108, 10, 9, 115, 98, 99, 32, 104, 108, 44, 100, 101, 10, 9, 106, 112, 32, 110, 99, 44, 46, 50, 9, 10, 9, 97, 100, 100, 32, 104, 108, 44, 100, 101, 10, 46, 50, 58, 10, 9, 99, 99, 102, 10, 9, 100, 101, 99, 32, 97, 10, 9, 106, 112, 32, 110, 122, 44, 46, 49, 10, 9, 114, 101, 116, 10, 10, 95, 115, 103, 110, 49, 54, 58, 10, 9, 108, 100, 32, 97, 44, 104, 10, 9, 111, 114, 32, 108, 10, 9, 114, 101, 116, 32, 122, 10, 9, 98, 105, 116, 32, 55, 44, 104, 10, 9, 108, 100, 32, 104, 108, 44, 36, 102, 102, 102, 102, 10, 9, 114, 101, 116, 32, 110, 122, 10, 9, 105, 110, 99, 32, 104, 108, 10, 9, 105, 110, 99, 32, 104, 108, 10, 9, 114, 101, 116, 10, 10, 9, 59, 32, 82, 97, 110, 100, 111, 109, 32, 110, 117, 109, 98, 101, 114, 32, 103, 101, 110, 101, 114, 97, 116, 111, 114, 46, 10, 9, 59, 32, 70, 114, 111, 109, 32, 109, 121, 32, 103, 97, 109, 101, 32, 77, 101, 99, 104, 97, 32, 69, 105, 103, 104, 116, 46, 10, 114, 97, 110, 100, 111, 109, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 108, 44, 40, 108, 102, 115, 114, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 114, 32, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 46, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 108, 44, 36, 55, 56, 49, 49, 10, 46, 48, 58, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 110, 100, 32, 36, 56, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 110, 100, 32, 36, 48, 50, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 114, 99, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 114, 99, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 120, 111, 114, 32, 98, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 110, 100, 32, 36, 48, 49, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 114, 99, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 120, 111, 114, 32, 98, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 110, 100, 32, 36, 50, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 108, 99, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 108, 99, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 120, 111, 114, 32, 98, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 108, 99, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 114, 32, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 114, 32, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 108, 102, 115, 114, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 10, 10, 115, 110, 55, 54, 52, 56, 57, 95, 102, 114, 101, 113, 58, 10, 32, 32, 32, 32, 105, 102, 32, 67, 79, 76, 69, 67, 79, 43, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 43, 83, 79, 82, 68, 43, 77, 69, 77, 79, 84, 69, 67, 72, 43, 80, 86, 50, 48, 48, 48, 10, 9, 108, 100, 32, 98, 44, 97, 10, 9, 108, 100, 32, 97, 44, 108, 10, 9, 97, 110, 100, 32, 36, 48, 102, 10, 9, 111, 114, 32, 98, 10, 9, 111, 117, 116, 32, 40, 80, 83, 71, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 10, 9, 105, 110, 32, 97, 44, 40, 36, 48, 51, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 10, 9, 108, 100, 32, 97, 44, 104, 10, 9, 97, 110, 100, 32, 36, 51, 102, 10, 9, 111, 117, 116, 32, 40, 80, 83, 71, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 10, 9, 105, 110, 32, 97, 44, 40, 36, 48, 51, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 114, 101, 116, 10, 10, 115, 110, 55, 54, 52, 56, 57, 95, 118, 111, 108, 58, 10, 32, 32, 32, 32, 105, 102, 32, 67, 79, 76, 69, 67, 79, 43, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 43, 83, 79, 82, 68, 43, 77, 69, 77, 79, 84, 69, 67, 72, 43, 80, 86, 50, 48, 48, 48, 10, 9, 99, 112, 108, 10, 9, 97, 110, 100, 32, 36, 48, 102, 10, 9, 111, 114, 32, 98, 10, 9, 111, 117, 116, 32, 40, 80, 83, 71, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 10, 9, 105, 110, 32, 97, 44, 40, 36, 48, 51, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 114, 101, 116, 10, 10, 115, 110, 55, 54, 52, 56, 57, 95, 99, 111, 110, 116, 114, 111, 108, 58, 10, 32, 32, 32, 32, 105, 102, 32, 67, 79, 76, 69, 67, 79, 43, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 43, 83, 79, 82, 68, 43, 77, 69, 77, 79, 84, 69, 67, 72, 43, 80, 86, 50, 48, 48, 48, 10, 9, 97, 110, 100, 32, 36, 48, 102, 10, 9, 111, 114, 32, 36, 101, 48, 10, 9, 111, 117, 116, 32, 40, 80, 83, 71, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 10, 9, 105, 110, 32, 97, 44, 40, 36, 48, 51, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 114, 101, 116, 10, 10, 97, 121, 51, 95, 114, 101, 103, 58, 10, 32, 32, 32, 32, 105, 102, 32, 67, 79, 76, 69, 67, 79, 10, 9, 112, 117, 115, 104, 32, 97, 102, 10, 9, 108, 100, 32, 97, 44, 98, 10, 9, 111, 117, 116, 32, 40, 36, 53, 48, 41, 44, 97, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 111, 117, 116, 32, 40, 36, 53, 49, 41, 44, 97, 10, 9, 114, 101, 116, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 71, 49, 48, 48, 48, 43, 83, 79, 82, 68, 43, 83, 77, 83, 43, 77, 69, 77, 79, 84, 69, 67, 72, 43, 80, 86, 50, 48, 48, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 77, 83, 88, 43, 83, 86, 73, 43, 69, 73, 78, 83, 84, 69, 73, 78, 43, 78, 65, 66, 85, 10, 9, 108, 100, 32, 101, 44, 97, 10, 9, 108, 100, 32, 97, 44, 98, 10, 9, 106, 112, 32, 87, 82, 84, 80, 83, 71, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 97, 121, 51, 95, 102, 114, 101, 113, 58, 10, 32, 32, 32, 32, 105, 102, 32, 67, 79, 76, 69, 67, 79, 10, 9, 111, 117, 116, 32, 40, 36, 53, 48, 41, 44, 97, 10, 9, 112, 117, 115, 104, 32, 97, 102, 10, 9, 108, 100, 32, 97, 44, 108, 10, 9, 111, 117, 116, 32, 40, 36, 53, 49, 41, 44, 97, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 105, 110, 99, 32, 97, 10, 9, 111, 117, 116, 32, 40, 36, 53, 48, 41, 44, 97, 10, 9, 112, 117, 115, 104, 32, 97, 102, 10, 9, 108, 100, 32, 97, 44, 104, 10, 9, 97, 110, 100, 32, 36, 48, 102, 10, 9, 111, 117, 116, 32, 40, 36, 53, 49, 41, 44, 97, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 114, 101, 116, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 43, 83, 79, 82, 68, 43, 77, 69, 77, 79, 84, 69, 67, 72, 43, 80, 86, 50, 48, 48, 48, 10, 9, 114, 101, 116, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 77, 83, 88, 43, 83, 86, 73, 43, 69, 73, 78, 83, 84, 69, 73, 78, 43, 78, 65, 66, 85, 10, 9, 108, 100, 32, 101, 44, 108, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 80, 83, 71, 10, 9, 108, 100, 32, 101, 44, 104, 10, 9, 105, 110, 99, 32, 97, 10, 9, 106, 112, 32, 87, 82, 84, 80, 83, 71, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 32, 32, 32, 32, 105, 102, 32, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 43, 83, 86, 73, 43, 83, 79, 82, 68, 43, 77, 69, 77, 79, 84, 69, 67, 72, 43, 69, 73, 78, 83, 84, 69, 73, 78, 43, 80, 86, 50, 48, 48, 48, 43, 78, 65, 66, 85, 10, 9, 59, 32, 82, 101, 113, 117, 105, 114, 101, 100, 32, 102, 111, 114, 32, 83, 71, 49, 48, 48, 48, 32, 97, 110, 100, 32, 83, 101, 103, 97, 32, 77, 97, 115, 116, 101, 114, 32, 83, 121, 115, 116, 101, 109, 32, 97, 115, 32, 98, 111, 116, 104, 32, 100, 111, 110, 39, 116, 32, 104, 97, 118, 101, 32, 97, 32, 66, 73, 79, 83, 10, 9, 59, 32, 82, 101, 113, 117, 105, 114, 101, 100, 32, 102, 111, 114, 32, 83, 86, 73, 32, 98, 101, 99, 97, 117, 115, 101, 32, 119, 101, 32, 100, 111, 110, 39, 116, 32, 104, 97, 118, 101, 32, 97, 99, 99, 101, 115, 115, 32, 116, 111, 32, 66, 73, 79, 83, 32, 105, 110, 32, 99, 97, 114, 116, 114, 105, 100, 103, 101, 46, 10, 9, 59, 32, 82, 101, 113, 117, 105, 114, 101, 100, 32, 102, 111, 114, 32, 83, 111, 114, 100, 32, 77, 53, 32, 98, 101, 99, 97, 117, 115, 101, 32, 105, 116, 32, 100, 111, 101, 115, 110, 39, 116, 32, 112, 114, 111, 118, 105, 100, 101, 32, 97, 110, 32, 65, 83, 67, 73, 73, 32, 99, 104, 97, 114, 115, 101, 116, 46, 10, 9, 59, 32, 82, 101, 113, 117, 105, 114, 101, 100, 32, 102, 111, 114, 32, 77, 101, 109, 111, 116, 101, 99, 104, 47, 69, 105, 110, 115, 116, 101, 105, 110, 32, 98, 101, 99, 97, 117, 115, 101, 32, 67, 80, 47, 77, 32, 117, 115, 101, 115, 32, 116, 104, 101, 32, 109, 101, 109, 111, 114, 121, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 77, 121, 32, 112, 101, 114, 115, 111, 110, 97, 108, 32, 102, 111, 110, 116, 32, 102, 111, 114, 32, 84, 77, 83, 57, 57, 50, 56, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 80, 97, 116, 116, 101, 114, 110, 101, 100, 32, 97, 102, 116, 101, 114, 32, 116, 104, 101, 32, 84, 77, 83, 57, 57, 50, 56, 32, 112, 114, 111, 103, 114, 97, 109, 109, 105, 110, 103, 32, 109, 97, 110, 117, 97, 108, 32, 54, 120, 56, 32, 108, 101, 116, 116, 101, 114, 115, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 119, 105, 116, 104, 32, 98, 101, 116, 116, 101, 114, 32, 108, 111, 119, 101, 114, 99, 97, 115, 101, 32, 108, 101, 116, 116, 101, 114, 115, 44, 32, 97, 108, 115, 111, 32, 73, 32, 109, 97, 100, 101, 32, 97, 32, 112, 114, 111, 112, 101, 114, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 65, 84, 32, 115, 105, 103, 110, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 10, 102, 111, 110, 116, 95, 98, 105, 116, 109, 97, 112, 115, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 48, 32, 115, 112, 97, 99, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 48, 48, 44, 36, 50, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 49, 32, 33, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 53, 48, 44, 36, 53, 48, 44, 36, 53, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 50, 32, 34, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 53, 48, 44, 36, 53, 48, 44, 36, 102, 56, 44, 36, 53, 48, 44, 36, 102, 56, 44, 36, 53, 48, 44, 36, 53, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 51, 32, 35, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 50, 48, 44, 36, 55, 56, 44, 36, 97, 48, 44, 36, 55, 48, 44, 36, 50, 56, 44, 36, 102, 48, 44, 36, 50, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 52, 32, 36, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 99, 48, 44, 36, 99, 56, 44, 36, 49, 48, 44, 36, 50, 48, 44, 36, 52, 48, 44, 36, 57, 56, 44, 36, 49, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 53, 32, 37, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 52, 48, 44, 36, 97, 48, 44, 36, 52, 48, 44, 36, 97, 48, 44, 36, 97, 56, 44, 36, 57, 48, 44, 36, 54, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 54, 32, 38, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 54, 48, 44, 36, 50, 48, 44, 36, 52, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 55, 32, 39, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 49, 48, 44, 36, 50, 48, 44, 36, 52, 48, 44, 36, 52, 48, 44, 36, 52, 48, 44, 36, 50, 48, 44, 36, 49, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 56, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 52, 48, 44, 36, 50, 48, 44, 36, 49, 48, 44, 36, 49, 48, 44, 36, 49, 48, 44, 36, 50, 48, 44, 36, 52, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 57, 32, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 97, 56, 44, 36, 55, 48, 44, 36, 50, 48, 44, 36, 55, 48, 44, 36, 97, 56, 44, 36, 48, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 97, 32, 42, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 102, 56, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 48, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 98, 32, 43, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 54, 48, 44, 36, 50, 48, 44, 36, 52, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 99, 32, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 102, 99, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 100, 32, 45, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 54, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 101, 32, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 56, 44, 36, 49, 48, 44, 36, 50, 48, 44, 36, 52, 48, 44, 36, 56, 48, 44, 36, 48, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 50, 102, 32, 47, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 55, 48, 44, 36, 56, 56, 44, 36, 57, 56, 44, 36, 97, 56, 44, 36, 99, 56, 44, 36, 56, 56, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 48, 32, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 50, 48, 44, 36, 54, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 102, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 49, 32, 49, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 55, 48, 44, 36, 56, 56, 44, 36, 48, 56, 44, 36, 49, 48, 44, 36, 54, 48, 44, 36, 56, 48, 44, 36, 102, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 50, 32, 50, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 55, 48, 44, 36, 56, 56, 44, 36, 48, 56, 44, 36, 51, 48, 44, 36, 48, 56, 44, 36, 56, 56, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 51, 32, 51, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 51, 48, 44, 36, 53, 48, 44, 36, 57, 48, 44, 36, 57, 48, 44, 36, 102, 56, 44, 36, 49, 48, 44, 36, 49, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 52, 32, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 102, 56, 44, 36, 56, 48, 44, 36, 102, 48, 44, 36, 48, 56, 44, 36, 48, 56, 44, 36, 48, 56, 44, 36, 102, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 53, 32, 53, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 51, 48, 44, 36, 52, 48, 44, 36, 56, 48, 44, 36, 102, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 54, 32, 54, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 102, 56, 44, 36, 48, 56, 44, 36, 49, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 55, 32, 55, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 55, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 55, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 56, 32, 56, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 55, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 55, 56, 44, 36, 48, 56, 44, 36, 49, 48, 44, 36, 54, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 57, 32, 57, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 54, 48, 44, 36, 48, 48, 44, 36, 54, 48, 44, 36, 48, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 97, 32, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 54, 48, 44, 36, 48, 48, 44, 36, 54, 48, 44, 36, 50, 48, 44, 36, 52, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 98, 32, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 49, 48, 44, 36, 50, 48, 44, 36, 52, 48, 44, 36, 56, 48, 44, 36, 52, 48, 44, 36, 50, 48, 44, 36, 49, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 99, 32, 60, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 102, 56, 44, 36, 48, 48, 44, 36, 102, 56, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 100, 32, 61, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 56, 44, 36, 48, 52, 44, 36, 48, 50, 44, 36, 48, 49, 44, 36, 48, 50, 44, 36, 48, 52, 44, 36, 48, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 101, 32, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 55, 48, 44, 36, 56, 56, 44, 36, 48, 56, 44, 36, 49, 48, 44, 36, 50, 48, 44, 36, 48, 48, 44, 36, 50, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 51, 102, 32, 63, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 55, 48, 44, 36, 56, 56, 44, 36, 57, 56, 44, 36, 97, 56, 44, 36, 57, 56, 44, 36, 56, 48, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 48, 32, 64, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 50, 48, 44, 36, 53, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 102, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 49, 32, 65, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 102, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 102, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 102, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 50, 32, 66, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 55, 48, 44, 36, 56, 56, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 56, 56, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 51, 32, 67, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 102, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 102, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 52, 32, 68, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 102, 56, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 102, 48, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 102, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 53, 32, 69, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 102, 56, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 102, 48, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 54, 32, 70, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 55, 48, 44, 36, 56, 56, 44, 36, 56, 48, 44, 36, 98, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 55, 32, 71, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 102, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 56, 32, 72, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 55, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 57, 32, 73, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 56, 44, 36, 48, 56, 44, 36, 48, 56, 44, 36, 48, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 65, 32, 74, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 56, 56, 44, 36, 57, 48, 44, 36, 97, 48, 44, 36, 99, 48, 44, 36, 97, 48, 44, 36, 57, 48, 44, 36, 56, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 66, 32, 75, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 56, 48, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 102, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 67, 32, 76, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 56, 56, 44, 36, 100, 56, 44, 36, 97, 56, 44, 36, 97, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 68, 32, 77, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 56, 56, 44, 36, 99, 56, 44, 36, 99, 56, 44, 36, 97, 56, 44, 36, 57, 56, 44, 36, 57, 56, 44, 36, 56, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 69, 32, 78, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 55, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 70, 32, 79, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 102, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 102, 48, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 48, 32, 80, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 55, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 97, 56, 44, 36, 57, 48, 44, 36, 54, 56, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 49, 32, 81, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 102, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 102, 48, 44, 36, 97, 48, 44, 36, 57, 48, 44, 36, 56, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 50, 32, 82, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 55, 48, 44, 36, 56, 56, 44, 36, 56, 48, 44, 36, 55, 48, 44, 36, 48, 56, 44, 36, 56, 56, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 51, 32, 83, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 102, 56, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 52, 32, 84, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 53, 32, 85, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 53, 48, 44, 36, 53, 48, 44, 36, 50, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 54, 32, 86, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 97, 56, 44, 36, 97, 56, 44, 36, 100, 56, 44, 36, 56, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 55, 32, 87, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 56, 56, 44, 36, 56, 56, 44, 36, 53, 48, 44, 36, 50, 48, 44, 36, 53, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 56, 32, 88, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 55, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 57, 32, 89, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 102, 56, 44, 36, 48, 56, 44, 36, 49, 48, 44, 36, 50, 48, 44, 36, 52, 48, 44, 36, 56, 48, 44, 36, 102, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 65, 32, 90, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 55, 56, 44, 36, 54, 48, 44, 36, 54, 48, 44, 36, 54, 48, 44, 36, 54, 48, 44, 36, 54, 48, 44, 36, 55, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 66, 32, 91, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 56, 48, 44, 36, 52, 48, 44, 36, 50, 48, 44, 36, 49, 48, 44, 36, 48, 56, 44, 36, 48, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 67, 32, 92, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 70, 48, 44, 36, 51, 48, 44, 36, 51, 48, 44, 36, 51, 48, 44, 36, 51, 48, 44, 36, 51, 48, 44, 36, 70, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 68, 32, 93, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 50, 48, 44, 36, 53, 48, 44, 36, 56, 56, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 69, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 102, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 53, 70, 32, 95, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 52, 48, 44, 36, 50, 48, 44, 36, 49, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 48, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 54, 56, 44, 36, 57, 56, 44, 36, 56, 56, 44, 36, 57, 56, 44, 36, 54, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 49, 32, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 56, 48, 44, 36, 56, 48, 44, 36, 102, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 102, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 50, 32, 98, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 55, 56, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 55, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 51, 32, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 56, 44, 36, 48, 56, 44, 36, 54, 56, 44, 36, 57, 56, 44, 36, 56, 56, 44, 36, 57, 56, 44, 36, 54, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 52, 32, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 55, 48, 44, 36, 56, 56, 44, 36, 102, 56, 44, 36, 56, 48, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 53, 32, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 51, 48, 44, 36, 52, 56, 44, 36, 52, 48, 44, 36, 101, 48, 44, 36, 52, 48, 44, 36, 52, 48, 44, 36, 52, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 54, 32, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 55, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 55, 56, 44, 36, 48, 56, 44, 36, 55, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 55, 32, 103, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 56, 48, 44, 36, 56, 48, 44, 36, 102, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 56, 32, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 50, 48, 44, 36, 48, 48, 44, 36, 54, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 57, 32, 105, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 56, 44, 36, 48, 48, 44, 36, 49, 56, 44, 36, 48, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 97, 32, 106, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 56, 48, 44, 36, 56, 48, 44, 36, 56, 56, 44, 36, 57, 48, 44, 36, 101, 48, 44, 36, 57, 48, 44, 36, 56, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 98, 32, 107, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 54, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 99, 32, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 100, 48, 44, 36, 97, 56, 44, 36, 97, 56, 44, 36, 97, 56, 44, 36, 97, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 100, 32, 109, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 98, 48, 44, 36, 99, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 101, 32, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 55, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 55, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 54, 102, 32, 111, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 102, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 102, 48, 44, 36, 56, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 48, 32, 112, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 55, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 55, 56, 44, 36, 48, 56, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 49, 32, 113, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 98, 56, 44, 36, 99, 48, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 56, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 50, 32, 114, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 55, 56, 44, 36, 56, 48, 44, 36, 55, 48, 44, 36, 48, 56, 44, 36, 102, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 51, 32, 115, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 50, 48, 44, 36, 50, 48, 44, 36, 102, 56, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 52, 32, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 57, 56, 44, 36, 54, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 53, 32, 117, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 53, 48, 44, 36, 50, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 54, 32, 118, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 56, 56, 44, 36, 97, 56, 44, 36, 97, 56, 44, 36, 97, 56, 44, 36, 53, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 55, 32, 119, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 56, 56, 44, 36, 53, 48, 44, 36, 50, 48, 44, 36, 53, 48, 44, 36, 56, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 56, 32, 120, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 56, 56, 44, 36, 56, 56, 44, 36, 57, 56, 44, 36, 54, 56, 44, 36, 48, 56, 44, 36, 55, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 57, 32, 121, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 102, 56, 44, 36, 49, 48, 44, 36, 50, 48, 44, 36, 52, 48, 44, 36, 102, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 97, 32, 122, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 49, 56, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 52, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 49, 56, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 98, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 99, 32, 124, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 99, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 49, 48, 44, 36, 50, 48, 44, 36, 50, 48, 44, 36, 99, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 100, 32, 125, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 52, 48, 44, 36, 97, 56, 44, 36, 49, 48, 44, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 55, 48, 44, 36, 55, 48, 44, 36, 50, 48, 44, 36, 102, 56, 44, 36, 50, 48, 44, 36, 55, 48, 44, 36, 53, 48, 44, 36, 48, 48, 32, 32, 32, 32, 32, 32, 59, 32, 36, 55, 102, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 32, 32, 32, 32, 105, 102, 32, 83, 77, 83, 10, 112, 97, 108, 101, 116, 116, 101, 95, 108, 111, 97, 100, 58, 10, 9, 112, 117, 115, 104, 32, 104, 108, 10, 9, 100, 105, 10, 9, 108, 100, 32, 104, 108, 44, 36, 99, 48, 48, 48, 10, 9, 99, 97, 108, 108, 32, 83, 69, 84, 87, 82, 84, 10, 9, 112, 111, 112, 32, 104, 108, 10, 9, 108, 100, 32, 98, 99, 44, 51, 50, 42, 50, 53, 54, 43, 86, 68, 80, 10, 9, 111, 117, 116, 105, 10, 9, 106, 112, 32, 110, 122, 44, 36, 45, 50, 10, 9, 101, 105, 10, 9, 114, 101, 116, 10, 10, 109, 111, 100, 101, 95, 52, 58, 10, 9, 100, 105, 10, 9, 108, 100, 32, 98, 99, 44, 36, 48, 52, 48, 48, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 86, 68, 80, 10, 9, 108, 100, 32, 98, 99, 44, 36, 97, 50, 48, 49, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 86, 68, 80, 10, 9, 108, 100, 32, 98, 99, 44, 36, 48, 102, 48, 50, 9, 59, 32, 36, 51, 56, 48, 48, 32, 102, 111, 114, 32, 112, 97, 116, 116, 101, 114, 110, 32, 116, 97, 98, 108, 101, 32, 40, 114, 101, 113, 117, 105, 114, 101, 100, 32, 98, 105, 116, 32, 48, 32, 115, 101, 116, 32, 116, 111, 32, 49, 32, 102, 111, 114, 32, 83, 77, 83, 49, 41, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 86, 68, 80, 10, 9, 108, 100, 32, 98, 99, 44, 36, 102, 102, 48, 51, 9, 59, 32, 78, 111, 116, 32, 117, 115, 101, 100, 32, 40, 114, 101, 113, 117, 105, 114, 101, 100, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 83, 77, 83, 49, 41, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 86, 68, 80, 10, 9, 108, 100, 32, 98, 99, 44, 36, 48, 55, 48, 52, 9, 59, 32, 78, 111, 116, 32, 117, 115, 101, 100, 32, 40, 114, 101, 113, 117, 105, 114, 101, 100, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 83, 77, 83, 49, 41, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 86, 68, 80, 10, 9, 108, 100, 32, 98, 99, 44, 36, 55, 102, 48, 53, 9, 59, 32]);
fileData5.push.apply(fileData5, [36, 51, 102, 48, 48, 32, 102, 111, 114, 32, 115, 112, 114, 105, 116, 101, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 116, 97, 98, 108, 101, 32, 40, 114, 101, 113, 117, 105, 114, 101, 100, 32, 98, 105, 116, 32, 48, 32, 115, 101, 116, 32, 116, 111, 32, 49, 41, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 86, 68, 80, 10, 9, 108, 100, 32, 98, 99, 44, 36, 48, 55, 48, 54, 9, 59, 32, 36, 50, 48, 48, 48, 32, 102, 111, 114, 32, 115, 112, 114, 105, 116, 101, 115, 32, 98, 105, 116, 109, 97, 112, 115, 32, 40, 111, 114, 32, 36, 48, 51, 32, 102, 111, 114, 32, 36, 48, 48, 48, 48, 41, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 86, 68, 80, 10, 9, 108, 100, 32, 98, 99, 44, 36, 48, 48, 48, 55, 9, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 86, 68, 80, 10, 9, 108, 100, 32, 98, 99, 44, 36, 48, 48, 48, 56, 9, 59, 32, 66, 97, 99, 107, 103, 114, 111, 117, 110, 100, 32, 88, 32, 115, 99, 114, 111, 108, 108, 9, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 86, 68, 80, 10, 9, 108, 100, 32, 98, 99, 44, 36, 48, 48, 48, 57, 9, 59, 32, 66, 97, 99, 107, 103, 114, 111, 117, 110, 100, 32, 89, 32, 115, 99, 114, 111, 108, 108, 9, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 86, 68, 80, 10, 9, 108, 100, 32, 104, 108, 44, 36, 50, 48, 42, 51, 50, 9, 59, 32, 80, 111, 105, 110, 116, 32, 116, 111, 32, 115, 112, 97, 99, 101, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 32, 98, 105, 116, 109, 97, 112, 10, 9, 99, 97, 108, 108, 32, 83, 69, 84, 87, 82, 84, 10, 9, 108, 100, 32, 104, 108, 44, 102, 111, 110, 116, 95, 98, 105, 116, 109, 97, 112, 115, 10, 9, 108, 100, 32, 99, 44, 57, 54, 10, 46, 49, 58, 9, 108, 100, 32, 98, 44, 56, 10, 46, 50, 58, 9, 108, 100, 32, 97, 44, 40, 104, 108, 41, 10, 9, 111, 117, 116, 32, 40, 86, 68, 80, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 40, 104, 108, 41, 10, 9, 111, 117, 116, 32, 40, 86, 68, 80, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 40, 104, 108, 41, 10, 9, 111, 117, 116, 32, 40, 86, 68, 80, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 40, 104, 108, 41, 10, 9, 111, 117, 116, 32, 40, 86, 68, 80, 41, 44, 97, 10, 9, 105, 110, 99, 32, 104, 108, 10, 9, 100, 106, 110, 122, 32, 46, 50, 10, 9, 100, 101, 99, 32, 99, 10, 9, 106, 112, 32, 110, 122, 44, 46, 49, 10, 9, 101, 105, 10, 9, 99, 97, 108, 108, 32, 99, 108, 115, 10, 9, 100, 105, 10, 9, 108, 100, 32, 104, 108, 44, 36, 51, 102, 48, 48, 10, 9, 108, 100, 32, 98, 99, 44, 36, 48, 48, 52, 48, 10, 9, 108, 100, 32, 97, 44, 36, 101, 48, 10, 9, 99, 97, 108, 108, 32, 70, 73, 76, 86, 82, 77, 10, 9, 108, 100, 32, 104, 108, 44, 115, 112, 114, 105, 116, 101, 115, 10, 9, 108, 100, 32, 100, 101, 44, 115, 112, 114, 105, 116, 101, 115, 43, 49, 10, 9, 108, 100, 32, 98, 99, 44, 54, 51, 10, 9, 108, 100, 32, 40, 104, 108, 41, 44, 36, 101, 48, 10, 9, 108, 100, 105, 114, 10, 9, 101, 105, 10, 9, 108, 100, 32, 104, 108, 44, 46, 51, 10, 9, 99, 97, 108, 108, 32, 112, 97, 108, 101, 116, 116, 101, 95, 108, 111, 97, 100, 10, 9, 106, 112, 32, 69, 78, 65, 83, 67, 82, 10, 10, 9, 59, 32, 84, 77, 83, 57, 49, 49, 56, 45, 97, 108, 105, 107, 101, 32, 112, 97, 108, 101, 116, 116, 101, 10, 46, 51, 58, 10, 9, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 99, 44, 36, 50, 101, 44, 36, 50, 48, 44, 36, 51, 48, 44, 36, 48, 50, 44, 36, 51, 99, 44, 36, 49, 55, 44, 36, 50, 66, 44, 36, 48, 102, 44, 36, 50, 102, 44, 36, 48, 56, 44, 36, 51, 51, 44, 36, 50, 97, 44, 36, 51, 102, 10, 9, 100, 98, 32, 36, 48, 48, 44, 36, 48, 48, 44, 36, 48, 99, 44, 36, 50, 101, 44, 36, 50, 48, 44, 36, 51, 48, 44, 36, 48, 50, 44, 36, 51, 99, 44, 36, 49, 55, 44, 36, 50, 66, 44, 36, 48, 102, 44, 36, 50, 102, 44, 36, 48, 56, 44, 36, 51, 51, 44, 36, 50, 97, 44, 36, 51, 102, 10, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 118, 100, 112, 95, 103, 101, 110, 101, 114, 105, 99, 95, 109, 111, 100, 101, 58, 10, 9, 99, 97, 108, 108, 32, 110, 109, 105, 95, 111, 102, 102, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 86, 68, 80, 10, 9, 108, 100, 32, 98, 99, 44, 36, 97, 50, 48, 49, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 86, 68, 80, 10, 9, 108, 100, 32, 98, 99, 44, 36, 48, 54, 48, 50, 9, 59, 32, 36, 49, 56, 48, 48, 32, 102, 111, 114, 32, 112, 97, 116, 116, 101, 114, 110, 32, 116, 97, 98, 108, 101, 46, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 86, 68, 80, 10, 9, 108, 100, 32, 98, 44, 100, 10, 9, 108, 100, 32, 99, 44, 36, 48, 51, 9, 59, 32, 102, 111, 114, 32, 99, 111, 108, 111, 114, 32, 116, 97, 98, 108, 101, 46, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 86, 68, 80, 10, 9, 108, 100, 32, 98, 44, 101, 10, 9, 108, 100, 32, 99, 44, 36, 48, 52, 9, 59, 32, 102, 111, 114, 32, 98, 105, 116, 109, 97, 112, 32, 116, 97, 98, 108, 101, 46, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 86, 68, 80, 10, 9, 108, 100, 32, 98, 99, 44, 36, 51, 54, 48, 53, 9, 59, 32, 36, 49, 98, 48, 48, 32, 102, 111, 114, 32, 115, 112, 114, 105, 116, 101, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 116, 97, 98, 108, 101, 46, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 86, 68, 80, 10, 9, 108, 100, 32, 98, 99, 44, 36, 48, 55, 48, 54, 9, 59, 32, 36, 51, 56, 48, 48, 32, 102, 111, 114, 32, 115, 112, 114, 105, 116, 101, 115, 32, 98, 105, 116, 109, 97, 112, 115, 46, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 86, 68, 80, 10, 9, 108, 100, 32, 98, 99, 44, 36, 48, 49, 48, 55, 10, 9, 106, 112, 32, 87, 82, 84, 86, 68, 80, 10, 10, 109, 111, 100, 101, 95, 48, 58, 10, 9, 108, 100, 32, 104, 108, 44, 109, 111, 100, 101, 10, 9, 114, 101, 115, 32, 51, 44, 40, 104, 108, 41, 10, 9, 108, 100, 32, 98, 99, 44, 36, 48, 50, 48, 48, 10, 9, 108, 100, 32, 100, 101, 44, 36, 102, 102, 48, 51, 9, 59, 32, 36, 50, 48, 48, 48, 32, 102, 111, 114, 32, 99, 111, 108, 111, 114, 32, 116, 97, 98, 108, 101, 44, 32, 36, 48, 48, 48, 48, 32, 102, 111, 114, 32, 98, 105, 116, 109, 97, 112, 115, 46, 10, 9, 99, 97, 108, 108, 32, 118, 100, 112, 95, 103, 101, 110, 101, 114, 105, 99, 95, 109, 111, 100, 101, 10, 32, 32, 32, 32, 105, 102, 32, 67, 79, 76, 69, 67, 79, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 80, 69, 78, 67, 73, 76, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 108, 44, 40, 36, 48, 48, 49, 51, 41, 10, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 9, 108, 100, 32, 104, 108, 44, 40, 36, 48, 48, 54, 99, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 108, 100, 32, 100, 101, 44, 45, 49, 50, 56, 10, 9, 97, 100, 100, 32, 104, 108, 44, 100, 101, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 71, 49, 48, 48, 48, 43, 83, 86, 73, 43, 83, 79, 82, 68, 43, 77, 69, 77, 79, 84, 69, 67, 72, 43, 69, 73, 78, 83, 84, 69, 73, 78, 43, 80, 86, 50, 48, 48, 48, 43, 78, 65, 66, 85, 10, 9, 108, 100, 32, 104, 108, 44, 102, 111, 110, 116, 95, 98, 105, 116, 109, 97, 112, 115, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 77, 83, 88, 10, 9, 108, 100, 32, 104, 108, 44, 40, 36, 48, 48, 48, 52, 41, 32, 32, 32, 10, 9, 105, 110, 99, 32, 104, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 108, 100, 32, 100, 101, 44, 36, 48, 49, 48, 48, 10, 9, 108, 100, 32, 98, 99, 44, 36, 48, 51, 48, 48, 10, 9, 99, 97, 108, 108, 32, 76, 68, 73, 82, 86, 77, 51, 10, 9, 99, 97, 108, 108, 32, 110, 109, 105, 95, 111, 110, 10, 9, 99, 97, 108, 108, 32, 110, 109, 105, 95, 111, 102, 102, 10, 9, 108, 100, 32, 104, 108, 44, 36, 50, 48, 48, 48, 10, 9, 108, 100, 32, 98, 99, 44, 36, 49, 56, 48, 48, 10, 9, 108, 100, 32, 97, 44, 36, 102, 48, 10, 9, 99, 97, 108, 108, 32, 70, 73, 76, 86, 82, 77, 10, 9, 99, 97, 108, 108, 32, 110, 109, 105, 95, 111, 110, 10, 9, 99, 97, 108, 108, 32, 99, 108, 115, 10, 118, 100, 112, 95, 103, 101, 110, 101, 114, 105, 99, 95, 115, 112, 114, 105, 116, 101, 115, 58, 10, 9, 99, 97, 108, 108, 32, 110, 109, 105, 95, 111, 102, 102, 10, 9, 108, 100, 32, 104, 108, 44, 36, 49, 98, 48, 48, 10, 9, 108, 100, 32, 98, 99, 44, 36, 48, 48, 56, 48, 10, 9, 108, 100, 32, 97, 44, 36, 100, 49, 10, 9, 99, 97, 108, 108, 32, 70, 73, 76, 86, 82, 77, 10, 9, 108, 100, 32, 104, 108, 44, 115, 112, 114, 105, 116, 101, 115, 10, 9, 108, 100, 32, 100, 101, 44, 115, 112, 114, 105, 116, 101, 115, 43, 49, 10, 9, 108, 100, 32, 98, 99, 44, 49, 50, 55, 10, 9, 108, 100, 32, 40, 104, 108, 41, 44, 36, 100, 49, 10, 9, 108, 100, 105, 114, 10, 9, 99, 97, 108, 108, 32, 110, 109, 105, 95, 111, 110, 10, 9, 106, 112, 32, 69, 78, 65, 83, 67, 82, 10, 10, 109, 111, 100, 101, 95, 49, 58, 10, 9, 108, 100, 32, 104, 108, 44, 109, 111, 100, 101, 10, 9, 114, 101, 115, 32, 51, 44, 40, 104, 108, 41, 10, 9, 108, 100, 32, 98, 99, 44, 36, 48, 50, 48, 48, 10, 9, 108, 100, 32, 100, 101, 44, 36, 102, 102, 48, 51, 9, 59, 32, 36, 50, 48, 48, 48, 32, 102, 111, 114, 32, 99, 111, 108, 111, 114, 32, 116, 97, 98, 108, 101, 44, 32, 36, 48, 48, 48, 48, 32, 102, 111, 114, 32, 98, 105, 116, 109, 97, 112, 115, 46, 10, 9, 99, 97, 108, 108, 32, 118, 100, 112, 95, 103, 101, 110, 101, 114, 105, 99, 95, 109, 111, 100, 101, 10, 9, 108, 100, 32, 104, 108, 44, 36, 48, 48, 48, 48, 10, 9, 108, 100, 32, 98, 99, 44, 36, 49, 56, 48, 48, 10, 9, 120, 111, 114, 32, 97, 10, 9, 99, 97, 108, 108, 32, 70, 73, 76, 86, 82, 77, 10, 9, 99, 97, 108, 108, 32, 110, 109, 105, 95, 111, 110, 10, 9, 99, 97, 108, 108, 32, 110, 109, 105, 95, 111, 102, 102, 10, 9, 108, 100, 32, 104, 108, 44, 36, 50, 48, 48, 48, 10, 9, 108, 100, 32, 98, 99, 44, 36, 49, 56, 48, 48, 10, 9, 108, 100, 32, 97, 44, 36, 102, 48, 10, 9, 99, 97, 108, 108, 32, 70, 73, 76, 86, 82, 77, 10, 9, 99, 97, 108, 108, 32, 110, 109, 105, 95, 111, 110, 10, 9, 108, 100, 32, 104, 108, 44, 36, 49, 56, 48, 48, 10, 46, 49, 58, 9, 99, 97, 108, 108, 32, 110, 109, 105, 95, 111, 102, 102, 10, 9, 108, 100, 32, 98, 44, 51, 50, 10, 46, 50, 58, 9, 108, 100, 32, 97, 44, 108, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 86, 82, 77, 10, 9, 105, 110, 99, 32, 104, 108, 10, 9, 100, 106, 110, 122, 32, 46, 50, 10, 9, 99, 97, 108, 108, 32, 110, 109, 105, 95, 111, 110, 10, 9, 108, 100, 32, 97, 44, 104, 10, 9, 99, 112, 32, 36, 49, 98, 10, 9, 106, 112, 32, 110, 122, 44, 46, 49, 10, 9, 106, 112, 32, 118, 100, 112, 95, 103, 101, 110, 101, 114, 105, 99, 95, 115, 112, 114, 105, 116, 101, 115, 10, 10, 109, 111, 100, 101, 95, 50, 58, 10, 9, 108, 100, 32, 104, 108, 44, 109, 111, 100, 101, 10, 9, 115, 101, 116, 32, 51, 44, 40, 104, 108, 41, 10, 9, 108, 100, 32, 98, 99, 44, 36, 48, 48, 48, 48, 10, 9, 108, 100, 32, 100, 101, 44, 36, 56, 48, 48, 48, 9, 59, 32, 36, 50, 48, 48, 48, 32, 102, 111, 114, 32, 99, 111, 108, 111, 114, 32, 116, 97, 98, 108, 101, 44, 32, 36, 48, 48, 48, 48, 32, 102, 111, 114, 32, 98, 105, 116, 109, 97, 112, 115, 46, 10, 9, 99, 97, 108, 108, 32, 118, 100, 112, 95, 103, 101, 110, 101, 114, 105, 99, 95, 109, 111, 100, 101, 10, 32, 32, 32, 32, 105, 102, 32, 67, 79, 76, 69, 67, 79, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 80, 69, 78, 67, 73, 76, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 108, 44, 40, 36, 48, 48, 49, 51, 41, 10, 32, 32, 32, 32, 32, 32, 101, 108, 115, 101, 10, 9, 108, 100, 32, 104, 108, 44, 40, 36, 48, 48, 54, 99, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 108, 100, 32, 100, 101, 44, 45, 49, 50, 56, 10, 9, 97, 100, 100, 32, 104, 108, 44, 100, 101, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 43, 83, 86, 73, 43, 83, 79, 82, 68, 43, 77, 69, 77, 79, 84, 69, 67, 72, 43, 69, 73, 78, 83, 84, 69, 73, 78, 43, 80, 86, 50, 48, 48, 48, 43, 78, 65, 66, 85, 10, 9, 108, 100, 32, 104, 108, 44, 102, 111, 110, 116, 95, 98, 105, 116, 109, 97, 112, 115, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 77, 83, 88, 10, 9, 108, 100, 32, 104, 108, 44, 40, 36, 48, 48, 48, 52, 41, 32, 32, 32, 10, 9, 105, 110, 99, 32, 104, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 108, 100, 32, 100, 101, 44, 36, 48, 49, 48, 48, 10, 9, 108, 100, 32, 98, 99, 44, 36, 48, 51, 48, 48, 10, 9, 99, 97, 108, 108, 32, 76, 68, 73, 82, 86, 77, 10, 9, 99, 97, 108, 108, 32, 110, 109, 105, 95, 111, 110, 10, 9, 99, 97, 108, 108, 32, 110, 109, 105, 95, 111, 102, 102, 10, 9, 108, 100, 32, 104, 108, 44, 36, 50, 48, 48, 48, 10, 9, 108, 100, 32, 98, 99, 44, 36, 48, 48, 50, 48, 10, 9, 108, 100, 32, 97, 44, 36, 102, 48, 10, 9, 99, 97, 108, 108, 32, 70, 73, 76, 86, 82, 77, 10, 9, 99, 97, 108, 108, 32, 110, 109, 105, 95, 111, 110, 10, 9, 99, 97, 108, 108, 32, 99, 108, 115, 10, 9, 106, 112, 32, 118, 100, 112, 95, 103, 101, 110, 101, 114, 105, 99, 95, 115, 112, 114, 105, 116, 101, 115, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 32, 32, 32, 32, 105, 102, 32, 77, 83, 88, 10, 69, 78, 65, 83, 76, 84, 58, 32, 69, 81, 85, 32, 36, 48, 48, 50, 52, 32, 32, 32, 32, 32, 32, 32, 59, 32, 83, 101, 108, 101, 99, 116, 32, 115, 108, 111, 116, 32, 40, 72, 61, 65, 100, 100, 114, 44, 32, 65, 61, 83, 108, 111, 116, 41, 10, 82, 83, 76, 82, 69, 71, 58, 32, 69, 81, 85, 32, 36, 48, 49, 51, 56, 32, 32, 32, 32, 32, 32, 32, 59, 32, 82, 101, 97, 100, 32, 115, 108, 111, 116, 32, 115, 116, 97, 116, 117, 115, 32, 105, 110, 32, 65, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 71, 101, 116, 32, 115, 108, 111, 116, 32, 109, 97, 112, 112, 105, 110, 103, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 66, 32, 61, 32, 49, 54, 75, 32, 98, 97, 110, 107, 32, 40, 48, 32, 102, 111, 114, 32, 36, 48, 48, 48, 48, 44, 32, 49, 32, 102, 111, 114, 32, 36, 52, 48, 48, 48, 44, 32, 50, 32, 102, 111, 114, 32, 36, 56, 48, 48, 48, 44, 32, 51, 32, 102, 111, 114, 32, 36, 99, 48, 48, 48, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 65, 32, 61, 32, 67, 117, 114, 114, 101, 110, 116, 32, 115, 108, 111, 116, 32, 115, 101, 108, 101, 99, 116, 105, 111, 110, 32, 115, 116, 97, 116, 117, 115, 32, 40, 67, 65, 76, 76, 32, 82, 83, 76, 82, 69, 71, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 10, 103, 101, 116, 95, 115, 108, 111, 116, 95, 109, 97, 112, 112, 105, 110, 103, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 114, 111, 116, 97, 116, 101, 95, 115, 108, 111, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 99, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 97, 44, 36, 67, 49, 32, 32, 32, 32, 32, 32, 32, 59, 32, 69, 88, 80, 84, 66, 76, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 108, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 44, 36, 70, 67, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 104, 108, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 110, 100, 32, 36, 56, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 71, 101, 116, 32, 101, 120, 112, 97, 110, 100, 101, 100, 32, 102, 108, 97, 103, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 114, 32, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 99, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 104, 108, 41, 32, 32, 32, 32, 32, 32, 32, 59, 32, 83, 76, 84, 84, 66, 76, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 114, 111, 116, 97, 116, 101, 95, 115, 108, 111, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 108, 99, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 108, 99, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 114, 32, 99, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 65, 32, 99, 111, 110, 116, 97, 105, 110, 115, 32, 98, 105, 116, 32, 55, 32, 61, 32, 77, 97, 114, 107, 115, 32, 101, 120, 112, 97, 110, 100, 101, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 54, 32, 45, 32, 52, 32, 61, 32, 68, 111, 101, 115, 110, 39, 116, 32, 99, 97, 114, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 51, 32, 45, 32, 50, 32, 61, 32, 83, 101, 99, 111, 110, 100, 97, 114, 121, 32, 109, 97, 112, 112, 101, 114, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 49, 32, 45, 32, 48, 32, 61, 32, 80, 114, 105, 109, 97, 114, 121, 32, 109, 97, 112, 112, 101, 114, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 10, 10, 114, 111, 116, 97, 116, 101, 95, 115, 108, 111, 116, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 117, 115, 104, 32, 98, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 101, 99, 32, 98, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 98, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 122, 44, 46, 49, 10, 46, 48, 58, 32, 32, 32, 32, 32, 114, 114, 99, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 114, 99, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 106, 110, 122, 32, 46, 48, 10, 46, 49, 58, 32, 32, 32, 32, 32, 97, 110, 100, 32, 51, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 111, 112, 32, 98, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 10, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 110, 109, 105, 95, 104, 97, 110, 100, 108, 101, 114, 58, 10, 9, 112, 117, 115, 104, 32, 97, 102, 10, 9, 112, 117, 115, 104, 32, 104, 108, 10, 9, 108, 100, 32, 104, 108, 44, 109, 111, 100, 101, 10, 9, 98, 105, 116, 32, 48, 44, 40, 104, 108, 41, 10, 9, 106, 114, 32, 122, 44, 46, 49, 10, 9, 115, 101, 116, 32, 49, 44, 40, 104, 108, 41, 10, 9, 112, 111, 112, 32, 104, 108, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 114, 101, 116, 110, 10, 10, 46, 48, 58, 9, 114, 101, 115, 32, 49, 44, 40, 104, 108, 41, 10, 10, 46, 49, 58, 9, 112, 117, 115, 104, 32, 98, 99, 10, 9, 112, 117, 115, 104, 32, 100, 101, 10, 32, 32, 105, 102, 32, 67, 86, 66, 65, 83, 73, 67, 95, 66, 65, 78, 75, 95, 83, 87, 73, 84, 67, 72, 73, 78, 71, 10, 32, 32, 32, 32, 105, 102, 32, 67, 79, 76, 69, 67, 79, 10, 9, 108, 100, 32, 97, 44, 40, 36, 102, 102, 98, 102, 41, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 10, 9, 108, 100, 32, 97, 44, 40, 36, 55, 102, 98, 102, 41, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 77, 83, 88, 10, 9, 108, 100, 32, 97, 44, 40, 36, 98, 102, 102, 102, 41, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 112, 117, 115, 104, 32, 97, 102, 10, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 79, 82, 68, 43, 77, 69, 77, 79, 84, 69, 67, 72, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 99, 116, 99, 95, 114, 101, 116, 105, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 43, 77, 83, 88, 43, 83, 86, 73, 43, 83, 79, 82, 68, 43, 77, 69, 77, 79, 84, 69, 67, 72, 43, 78, 65, 66, 85, 10, 9, 105, 110, 32, 97, 44, 40, 86, 68, 80, 82, 43, 49, 41, 10, 9, 108, 100, 32, 40, 118, 100, 112, 95, 115, 116, 97, 116, 117, 115, 41, 44, 97, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 9, 59, 10, 9, 59, 32, 85, 112, 100, 97, 116, 101, 32, 111, 102, 32, 115, 112, 114, 105, 116, 101, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 116, 97, 98, 108, 101, 10, 9, 59, 10, 32, 32, 32, 32, 105, 102, 32, 83, 77, 83, 10, 9, 98, 105, 116, 32, 50, 44, 40, 104, 108, 41, 10, 9, 106, 114, 32, 122, 44, 46, 52, 10, 9, 108, 100, 32, 104, 108, 44, 36, 51, 102, 48, 48, 10, 9, 99, 97, 108, 108, 32, 83, 69, 84, 87, 82, 84, 10, 9, 108, 100, 32, 104, 108, 44, 115, 112, 114, 105, 116, 101, 115, 10, 9, 108, 100, 32, 98, 99, 44, 36, 52, 48, 48, 48, 43, 86, 68, 80, 10, 9, 111, 117, 116, 105, 10, 9, 106, 112, 32, 110, 122, 44, 36, 45, 50, 10, 9, 108, 100, 32, 104, 108, 44, 36, 51, 102, 56, 48, 10, 9, 99, 97, 108, 108, 32, 83, 69, 84, 87, 82, 84, 10, 9, 108, 100, 32, 104, 108, 44, 115, 112, 114, 105, 116, 101, 115, 10, 9, 108, 100, 32, 98, 99, 44, 36, 56, 48, 48, 48, 43, 86, 68, 80, 10, 9, 111, 117, 116, 105, 10, 9, 106, 112, 32, 110, 122, 44, 36, 45, 50, 10, 9, 106, 114, 32, 46, 53, 10, 10, 46, 52, 58, 9, 108, 100, 32, 104, 108, 44, 36, 51, 102, 48, 48, 10, 9, 99, 97, 108, 108, 32, 83, 69, 84, 87, 82, 84, 10, 9, 108, 100, 32, 97, 44, 40, 102, 108, 105, 99, 107, 101, 114, 41, 10, 9, 105, 110, 99, 32, 97, 10, 9, 97, 110, 100, 32, 36, 51, 102, 10, 9, 108, 100, 32, 40, 102, 108, 105, 99, 107, 101, 114, 41, 44, 97, 10, 9, 108, 100, 32, 108, 44, 97, 10, 9, 108, 100, 32, 104, 44, 115, 112, 114, 105, 116, 101, 115, 62, 62, 56, 10, 9, 108, 100, 32, 98, 99, 44, 36, 52, 48, 48, 48, 43, 86, 68, 80, 10, 9, 108, 100, 32, 100, 101, 44, 54, 10, 9, 111, 117, 116, 105, 10, 9, 97, 100, 100, 32, 104, 108, 44, 100, 101, 10, 9, 114, 101, 115, 32, 54, 44, 108, 10, 9, 106, 112, 32, 110, 122, 44, 36, 45, 53, 10, 9, 108, 100, 32, 104, 108, 44, 36, 51, 102, 56, 48, 10, 9, 99, 97, 108, 108, 32, 83, 69, 84, 87, 82, 84, 10, 9, 108, 100, 32, 97, 44, 40, 102, 108, 105, 99, 107, 101, 114, 41, 10, 9, 97, 100, 100, 32, 97, 44, 97, 10, 9, 111, 114, 32, 36, 56, 48, 10, 9, 108, 100, 32, 108, 44, 97, 10, 9, 108, 100, 32, 98, 99, 44, 36, 56, 48, 48, 48, 43, 86, 68, 80, 10, 9, 108, 100, 32, 100, 101, 44, 49, 50, 10, 9, 108, 100, 32, 104, 44, 115, 112, 114, 105, 116, 101, 115, 62, 62, 56, 10, 9, 111, 117, 116, 105, 10, 9, 110, 111, 112, 10, 9, 110, 111, 112, 10, 9, 110, 111, 112, 10, 9, 111, 117, 116, 105, 10, 9, 97, 100, 100, 32, 104, 108, 44, 100, 101, 10, 9, 115, 101, 116, 32, 55, 44, 108, 10, 9, 106, 112, 32, 110, 122, 44, 36, 45, 49, 50, 10, 46, 53, 58, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 9, 108, 100, 32, 98, 99, 44, 36, 56, 48, 48, 48, 43, 86, 68, 80, 10, 9, 98, 105, 116, 32, 50, 44, 40, 104, 108, 41, 10, 9, 106, 114, 32, 122, 44, 46, 52, 10, 10, 9, 108, 100, 32, 104, 108, 44, 36, 49, 98, 48, 48, 10, 9, 99, 97, 108, 108, 32, 83, 69, 84, 87, 82, 84, 10, 9, 108, 100, 32, 104, 108, 44, 115, 112, 114, 105, 116, 101, 115, 10, 46, 55, 58, 10, 32, 32, 32, 32, 105, 102, 32, 80, 86, 50, 48, 48, 48, 10, 9, 108, 100, 32, 97, 44, 40, 104, 108, 41, 10, 9, 108, 100, 32, 40, 86, 68, 80, 41, 44, 97, 10, 9, 105, 110, 99, 32, 104, 108, 10, 9, 100, 106, 110, 122, 32, 46, 55, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 43, 69, 73, 78, 83, 84, 69, 73, 78, 43, 83, 71, 49, 48, 48, 48, 10, 9, 110, 111, 112, 10, 9, 110, 111, 112, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 111, 117, 116, 105, 10, 9, 106, 112, 32, 110, 122, 44, 46, 55, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 106, 114, 32, 46, 53, 10, 10, 46, 52, 58, 10, 9, 108, 100, 32, 104, 108, 44, 36, 49, 98, 48, 48, 10, 9, 99, 97, 108, 108, 32, 83, 69, 84, 87, 82, 84, 10, 9, 108, 100, 32, 97, 44, 40, 102, 108, 105, 99, 107, 101, 114, 41, 10, 9, 97, 100, 100, 32, 97, 44, 36, 48, 52, 10, 9, 108, 100, 32, 40, 102, 108, 105, 99, 107, 101, 114, 41, 44, 97, 10, 9, 108, 100, 32, 100, 101, 44, 50, 52, 10, 9, 108, 100, 32, 98, 44, 49, 50, 56, 10, 9, 108, 100, 32, 108, 44, 97, 10, 32, 32, 32, 32, 105, 102, 32, 83, 79, 82, 68, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 9, 108, 100, 32, 104, 44, 115, 112, 114, 105, 116, 101, 115, 62, 62, 56, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 46, 54, 58, 10, 32, 32, 32, 32, 105, 102, 32, 83, 79, 82, 68, 10, 9, 115, 101, 116, 32, 55, 44, 108, 10, 9, 108, 100, 32, 104, 44, 115, 112, 114, 105, 116, 101, 115, 62, 62, 56, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 9, 114, 101, 115, 32, 55, 44, 108, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 80, 86, 50, 48, 48, 48, 10, 9, 108, 100, 32, 97, 44, 40, 104, 108, 41, 9, 59, 32, 32, 55, 32, 32, 56, 10, 9, 108, 100, 32, 40, 86, 68, 80, 41, 44, 97, 9, 59, 32, 49, 51, 32, 49, 52, 10, 9, 105, 110, 99, 32, 104, 108, 9, 9, 59, 32, 32, 54, 32, 32, 55, 10, 9, 100, 101, 99, 32, 98, 9, 9, 59, 32, 32, 52, 32, 32, 53, 10, 9, 108, 100, 32, 97, 44, 40, 104, 108, 41, 10, 9, 108, 100, 32, 40, 86, 68, 80, 41, 44, 97, 10, 9, 105, 110, 99, 32, 104, 108, 10, 9, 100, 101, 99, 32, 98, 10, 9, 108, 100, 32, 97, 44, 40, 104, 108, 41, 10, 9, 108, 100, 32, 40, 86, 68, 80, 41, 44, 97, 10, 9, 105, 110, 99, 32, 104, 108, 10, 9, 100, 101, 99, 32, 98, 10, 9, 108, 100, 32, 97, 44, 40, 104, 108, 41, 10, 9, 108, 100, 32, 40, 86, 68, 80, 41, 44, 97, 10, 9, 105, 110, 99, 32, 104, 108, 10, 9, 100, 101, 99, 32, 98, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 9, 111, 117, 116, 105, 10, 9, 106, 112, 32, 36, 43, 51, 10, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 43, 69, 73, 78, 83, 84, 69, 73, 78, 43, 83, 71, 49, 48, 48, 48, 10, 9, 110, 111, 112, 10, 9, 110, 111, 112, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 111, 117, 116, 105, 10, 9, 106, 112, 32, 36, 43, 51, 10, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 43, 69, 73, 78, 83, 84, 69, 73, 78, 43, 83, 71, 49, 48, 48, 48, 10, 9, 110, 111, 112, 10, 9, 110, 111, 112, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 111, 117, 116, 105, 10, 9, 106, 112, 32, 36, 43, 51, 10, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 43, 69, 73, 78, 83, 84, 69, 73, 78, 43, 83, 71, 49, 48, 48, 48, 10, 9, 110, 111, 112, 10, 9, 110, 111, 112, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 111, 117, 116, 105, 10, 9, 106, 112, 32, 36, 43, 51, 10, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 43, 69, 73, 78, 83, 84, 69, 73, 78, 43, 83, 71, 49, 48, 48, 48, 10, 9, 110, 111, 112, 10, 9, 110, 111, 112, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 97, 100, 100, 32, 104, 108, 44, 100, 101, 10, 9, 106, 112, 32, 110, 122, 44, 46, 54, 10, 46, 53, 58, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 32, 32, 32, 32, 105, 102, 32, 67, 79, 76, 69, 67, 79, 10, 9, 111, 117, 116, 32, 40, 74, 79, 89, 83, 69, 76, 41, 44, 97, 10, 9, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 9, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 9, 105, 110, 32, 97, 44, 40, 74, 79, 89, 49, 41, 10, 9, 111, 114, 32, 36, 98, 48, 10, 9, 108, 100, 32, 98, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 74, 79, 89, 50, 41, 10, 9, 111, 114, 32, 36, 98, 48, 10, 9, 108, 100, 32, 99, 44, 97, 10, 10, 9, 111, 117, 116, 32, 40, 75, 69, 89, 83, 69, 76, 41, 44, 97, 10, 9, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 9, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 9, 105, 110, 32, 97, 44, 40, 74, 79, 89, 49, 41, 10, 9, 108, 100, 32, 100, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 74, 79, 89, 50, 41, 10, 9, 108, 100, 32, 101, 44, 97, 10, 10, 9, 108, 100, 32, 97, 44, 100, 10, 9, 114, 108, 99, 97, 10, 9, 111, 114, 32, 36, 55, 102, 10, 9, 97, 110, 100, 32, 98, 10, 9, 99, 112, 108, 10, 9, 108, 100, 32, 40, 106, 111, 121, 49, 95, 100, 97, 116, 97, 41, 44, 97, 10, 10, 9, 108, 100, 32, 97, 44, 101, 10, 9, 114, 108, 99, 97, 10, 9, 111, 114, 32, 36, 55, 102, 10, 9, 97, 110, 100, 32, 99, 10, 9, 99, 112, 108, 10, 9, 108, 100, 32, 40, 106, 111, 121, 50, 95, 100, 97, 116, 97, 41, 44, 97, 10, 10, 9, 108, 100, 32, 97, 44, 100, 10, 9, 97, 110, 100, 32, 36, 48, 102, 10, 9, 108, 100, 32, 99, 44, 97, 10, 9, 108, 100, 32, 98, 44, 48, 10, 9, 108, 100, 32, 104, 108, 44, 107, 101, 121, 112, 97, 100, 95, 116, 97, 98, 108, 101, 10, 9, 97, 100, 100, 32, 104, 108, 44, 98, 99, 10, 9, 108, 100, 32, 97, 44, 40, 104, 108, 41, 10, 9, 108, 100, 32, 40, 107, 101, 121, 49, 95, 100, 97, 116, 97, 41, 44, 97, 10, 10, 9, 108, 100, 32, 97, 44, 101, 10, 9, 97, 110, 100, 32, 36, 48, 102, 10, 9, 108, 100, 32, 99, 44, 97, 10, 9, 108, 100, 32, 104, 108, 44, 107, 101, 121, 112, 97, 100, 95, 116, 97, 98, 108, 101, 10, 9, 97, 100, 100, 32, 104, 108, 44, 98, 99, 10, 9, 108, 100, 32, 97, 44, 40, 104, 108, 41, 10, 9, 108, 100, 32, 40, 107, 101, 121, 50, 95, 100, 97, 116, 97, 41, 44, 97, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 10, 9, 108, 100, 32, 97, 44, 36, 48, 55, 10, 9, 111, 117, 116, 32, 40, 36, 100, 101, 41, 44, 97, 10, 9, 108, 100, 32, 98, 44, 36, 102, 102, 10, 9, 105, 110, 32, 97, 44, 40, 74, 79, 89, 49, 41, 10, 9, 108, 100, 32, 104, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 74, 79, 89, 50, 41, 10, 9, 108, 100, 32, 108, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 36, 100, 101, 41, 10, 9, 99, 112, 32, 55, 10, 9, 106, 112, 32, 110, 122, 44, 46, 115, 103, 49, 48, 48, 48, 10, 10, 9, 108, 100, 32, 97, 44, 36, 48, 48, 10, 9, 111, 117, 116, 32, 40, 36, 100, 101, 41, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 36, 100, 99, 41, 10, 9, 114, 114, 97, 10, 9, 108, 100, 32, 99, 44, 49, 10, 9, 106, 114, 32, 110, 99, 44, 46, 115, 103, 49, 10, 9, 105, 110, 32, 97, 44, 40, 36, 100, 100, 41, 10, 9, 114, 114, 97, 10, 9, 108, 100, 32, 99, 44, 56, 10, 9, 106, 114, 32, 110, 99, 44, 46, 115, 103, 49, 10, 9, 108, 100, 32, 97, 44, 36, 48, 49, 10, 9, 111, 117, 116, 32, 40, 36, 100, 101, 41, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 36, 100, 99, 41, 10, 9, 114, 114, 97, 10, 9, 108, 100, 32, 99, 44, 50, 10, 9, 106, 114, 32, 110, 99, 44, 46, 115, 103, 49, 10, 9, 105, 110, 32, 97, 44, 40, 36, 100, 100, 41, 10, 9, 114, 114, 97, 10, 9, 108, 100, 32, 99, 44, 57, 10, 9, 106, 114, 32, 110, 99, 44, 46, 115, 103, 49, 10, 9, 108, 100, 32, 97, 44, 36, 48, 50, 10, 9, 111, 117, 116, 32, 40, 36, 100, 101, 41, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 36, 100, 99, 41, 10, 9, 114, 114, 97, 10, 9, 108, 100, 32, 99, 44, 51, 10, 9, 106, 114, 32, 110, 99, 44, 46, 115, 103, 49, 10, 9, 105, 110, 32, 97, 44, 40, 36, 100, 100, 41, 10, 9, 114, 114, 97, 10, 9, 108, 100, 32, 99, 44, 48, 10, 9, 106, 114, 32, 110, 99, 44, 46, 115, 103, 49, 10, 9, 108, 100, 32, 97, 44, 36, 48, 51, 10, 9, 111, 117, 116, 32, 40, 36, 100, 101, 41, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 36, 100, 99, 41, 10, 9, 98, 105, 116, 32, 52, 44, 97, 10, 9, 108, 100, 32, 99, 44, 49, 48, 10, 9, 106, 114, 32, 122, 44, 46, 115, 103, 49, 10, 9, 114, 114, 97, 10, 9, 108, 100, 32, 99, 44, 52, 10, 9, 106, 114, 32, 110, 99, 44, 46, 115, 103, 49, 10, 9, 108, 100, 32, 97, 44, 36, 48, 52, 10, 9, 111, 117, 116, 32, 40, 36, 100, 101, 41, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 36, 100, 99, 41, 10, 9, 114, 114, 97, 10, 9, 108, 100, 32, 99, 44, 53, 10, 9, 106, 114, 32, 110, 99, 44, 46, 115, 103, 49, 10, 9, 108, 100, 32, 97, 44, 36, 48, 53, 10, 9, 111, 117, 116, 32, 40, 36, 100, 101, 41, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 36, 100, 99, 41, 10, 9, 98, 105, 116, 32, 54, 44, 97, 10, 9, 108, 100, 32, 99, 44, 49, 49, 10, 9, 106, 114, 32, 122, 44, 46, 115, 103, 49, 10, 9, 114, 114, 97, 10, 9, 108, 100, 32, 99, 44, 54, 10, 9, 106, 114, 32, 110, 99, 44, 46, 115, 103, 49, 10, 9, 108, 100, 32, 97, 44, 36, 48, 54, 10, 9, 111, 117, 116, 32, 40, 36, 100, 101, 41, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 36, 100, 99, 41, 10, 9, 114, 114, 97, 10, 9, 108, 100, 32, 99, 44, 55, 10, 9, 106, 114, 32, 110, 99, 44, 46, 115, 103, 49, 10, 9, 108, 100, 32, 99, 44, 49, 53, 10, 46, 115, 103, 49, 58, 9, 108, 100, 32, 97, 44, 99, 10, 9, 108, 100, 32, 40, 107, 101, 121, 49, 95, 100, 97, 116, 97, 41, 44, 97, 10, 10, 9, 108, 100, 32, 97, 44, 36, 48, 52, 10, 9, 111, 117, 116, 32, 40, 36, 100, 101, 41, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 36, 100, 99, 41, 10, 9, 98, 105, 116, 32, 53, 44, 97, 9, 9, 59, 32, 75, 101, 121, 98, 111, 97, 114, 100, 32, 100, 111, 119, 110, 46, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 49, 44, 104, 10, 9, 108, 100, 32, 97, 44, 36, 48, 53, 10, 9, 111, 117, 116, 32, 40, 36, 100, 101, 41, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 36, 100, 99, 41, 10, 9, 98, 105, 116, 32, 53, 44, 97, 9, 9, 59, 32, 75, 101, 121, 98, 111, 97, 114, 100, 32, 108, 101, 102, 116, 46, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 50, 44, 104, 10, 9, 108, 100, 32, 97, 44, 36, 48, 54, 10, 9, 111, 117, 116, 32, 40, 36, 100, 101, 41, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 36, 100, 99, 41, 10, 9, 98, 105, 116, 32, 53, 44, 97, 9, 9, 59, 32, 75, 101, 121, 98, 111, 97, 114, 100, 32, 114, 105, 103, 104, 116, 46, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 51, 44, 104, 10, 9, 98, 105, 116, 32, 54, 44, 97, 9, 9, 59, 32, 75, 101, 121, 98, 111, 97, 114, 100, 32, 117, 112, 46, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 48, 44, 104, 10, 9, 108, 100, 32, 97, 44, 36, 48, 50, 10, 9, 111, 117, 116, 32, 40, 36, 100, 101, 41, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 36, 100, 99, 41, 10, 9, 98, 105, 116, 32, 52, 44, 97, 9, 9, 59, 32, 75, 101, 121, 98, 111, 97, 114, 100, 32, 73, 110, 115, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 52, 44, 104, 10, 9, 108, 100, 32, 97, 44, 36, 48, 51, 10, 9, 111, 117, 116, 32, 40, 36, 100, 101, 41, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 36, 100, 99, 41, 10, 9, 98, 105, 116, 32, 52, 44, 97, 9, 9, 59, 32, 75, 101, 121, 98, 111, 97, 114, 100, 32, 68, 101, 108, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 53, 44, 104, 10, 46, 115, 103, 49, 48, 48, 48, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 48, 44, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 48, 44, 98, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 49, 44, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 50, 44, 98, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 50, 44, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 51, 44, 98, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 51, 44, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 49, 44, 98, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 52, 44, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 54, 44, 98, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 53, 44, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 55, 44, 98, 10, 9, 108, 100, 32, 97, 44, 98, 10, 9, 99, 112, 108, 10, 9, 108, 100, 32, 40, 106, 111, 121, 49, 95, 100, 97, 116, 97, 41, 44, 97, 10, 10, 9, 108, 100, 32, 97, 44, 36, 102, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 54, 44, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 48, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 55, 44, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 50, 44, 97, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 48, 44, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 51, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 49, 44, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 49, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 50, 44, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 52, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 51, 44, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 53, 44, 97, 10, 9, 99, 112, 108, 10, 9, 108, 100, 32, 40, 106, 111, 121, 50, 95, 100, 97, 116, 97, 41, 44, 97, 10, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 77, 83, 88, 10, 9, 59, 32, 75, 101, 121, 98, 111, 97, 114, 100, 32, 109, 97, 116, 114, 105, 120, 32, 102, 114, 111, 109, 32, 104, 116, 116, 112, 115, 58, 47, 47, 109, 97, 112, 46, 103, 114, 97, 117, 119, 46, 110, 108, 47, 97, 114, 116, 105, 99, 108, 101, 115, 47, 107, 101, 121, 109, 97, 116, 114, 105, 120, 46, 112, 104, 112, 10, 9, 108, 100, 32, 97, 44, 49, 53, 10, 9, 99, 97, 108, 108, 32, 82, 68, 80, 83, 71, 10, 9, 97, 110, 100, 32, 36, 98, 48, 10, 9, 111, 114, 32, 36, 52, 102, 10, 9, 108, 100, 32, 101, 44, 97, 10, 9, 108, 100, 32, 97, 44, 49, 53, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 80, 83, 71, 10, 9, 108, 100, 32, 97, 44, 49, 52, 10, 9, 99, 97, 108, 108, 32, 82, 68, 80, 83, 71, 10, 9, 108, 100, 32, 98, 44, 36, 102, 102, 10, 9, 98, 105, 116, 32, 48, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 48, 44, 98, 10, 9, 98, 105, 116, 32, 51, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 49, 44, 98, 10, 9, 98, 105, 116, 32, 49, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 50, 44, 98, 10, 9, 98, 105, 116, 32, 50, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 51, 44, 98, 10, 9, 98, 105, 116, 32, 52, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 54, 44, 98, 10, 9, 98, 105, 116, 32, 53, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 55, 44, 98, 10, 9, 108, 100, 32, 97, 44, 98, 10, 9, 99, 112, 108, 10, 9, 108, 100, 32, 40, 106, 111, 121, 50, 95, 100, 97, 116, 97, 41, 44, 97, 10, 10, 9, 105, 110, 32, 97, 44, 40, 36, 97, 97, 41, 10, 9, 97, 110, 100, 32, 36, 102, 48, 10, 9, 111, 114, 32, 36, 48, 48, 10, 9, 111, 117, 116, 32, 40, 36, 97, 97, 41, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 36, 97, 57, 41, 10, 9, 99, 112, 32, 36, 102, 102, 10, 9, 108, 100, 32, 99, 44, 36, 102, 102, 10, 9, 106, 114, 32, 110, 122, 44, 46, 107, 101, 121, 49, 10, 9, 105, 110, 32, 97, 44, 40, 36, 97, 97, 41, 10, 9, 97, 110, 100, 32, 36, 102, 48, 10, 9, 111, 114, 32, 36, 48, 49, 10, 9, 111, 117, 116, 32, 40, 36, 97, 97, 41, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 36, 97, 57, 41, 10, 9, 97, 110, 100, 32, 36, 48, 51, 10, 9, 99, 112, 32, 36, 48, 51, 10, 9, 108, 100, 32, 99, 44, 36, 48, 55, 10, 9, 106, 114, 32, 110, 122, 44, 46, 107, 101, 121, 49, 10, 9, 105, 110, 32, 97, 44, 40, 36, 97, 97, 41, 10, 9, 97, 110, 100, 32, 36, 102, 48, 10, 9, 111, 114, 32, 36, 48, 55, 10, 9, 111, 117, 116, 32, 40, 36, 97, 97, 41, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 36, 97, 57, 41, 10, 9, 98, 105, 116, 32, 53, 44, 97, 9, 9, 59, 32, 66, 83, 10, 9, 108, 100, 32, 99, 44, 36, 48, 97, 10, 9, 106, 114, 32, 122, 44, 46, 107, 101, 121, 50, 10, 9, 98, 105, 116, 32, 55, 44, 97, 9, 9, 59, 32, 82, 69, 84, 10, 9, 108, 100, 32, 99, 44, 36, 48, 98, 10, 9, 106, 114, 32, 122, 44, 46, 107, 101, 121, 50, 10, 9, 108, 100, 32, 99, 44, 36, 48, 102, 10, 9, 106, 114, 32, 46, 107, 101, 121, 50, 10, 10, 46, 107, 101, 121, 49, 58, 9, 114, 114, 97, 10, 9, 105, 110, 99, 32, 99, 10, 9, 106, 114, 32, 99, 44, 46, 107, 101, 121, 49, 10, 46, 107, 101, 121, 50, 58, 10, 9, 108, 100, 32, 97, 44, 99, 10, 9, 108, 100, 32, 40, 107, 101, 121, 49, 95, 100, 97, 116, 97, 41, 44, 97, 9, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 44, 36, 102, 102, 10, 9, 105, 110, 32, 97, 44, 40, 36, 97, 97, 41, 10, 9, 97, 110, 100, 32, 36, 102, 48, 10, 9, 111, 114, 32, 36, 48, 56, 10, 9, 111, 117, 116, 32, 40, 36, 97, 97, 41, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 36, 97, 57, 41, 10, 9, 98, 105, 116, 32, 53, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 48, 44, 98, 10, 9, 98, 105, 116, 32, 55, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 49, 44, 98, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 54, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 50, 44, 98, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 52, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 51, 44, 98, 10, 9, 98, 105, 116, 32, 48, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 54, 44, 98, 10, 9, 105, 110, 32, 97, 44, 40, 36, 97, 97, 41, 10, 9, 97, 110, 100, 32, 36, 102, 48, 10, 9, 111, 114, 32, 36, 48, 52, 10, 9, 111, 117, 116, 32, 40, 36, 97, 97, 41, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 36, 97, 57, 41, 10, 9, 98, 105, 116, 32, 50, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 55, 44, 98, 10, 10, 9, 108, 100, 32, 97, 44, 49, 53, 10, 9, 99, 97, 108, 108, 32, 82, 68, 80, 83, 71, 10, 9, 97, 110, 100, 32, 36, 98, 48, 10, 9, 111, 114, 32, 36, 48, 102, 10, 9, 108, 100, 32, 101, 44, 97, 10, 9, 108, 100, 32, 97, 44, 49, 53, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 80, 83, 71, 10, 9, 108, 100, 32, 97, 44, 49, 52, 10, 9, 99, 97, 108, 108, 32, 82, 68, 80, 83, 71, 10, 9, 98, 105, 116, 32, 48, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 48, 44, 98, 10, 9, 98, 105, 116, 32, 51, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 49, 44, 98, 10, 9, 98, 105, 116, 32, 49, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 50, 44, 98, 10, 9, 98, 105, 116, 32, 50, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 51, 44, 98, 10, 9, 98, 105, 116, 32, 52, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 54, 44, 98, 10, 9, 98, 105, 116, 32, 53, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 55, 44, 98, 10, 10, 9, 108, 100, 32, 97, 44, 98, 10, 9, 99, 112, 108, 10, 9, 108, 100, 32, 40, 106, 111, 121, 49, 95, 100, 97, 116, 97, 41, 44, 97, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 86, 73, 10, 9, 108, 100, 32, 97, 44, 49, 52, 10, 9, 99, 97, 108, 108, 32, 82, 68, 80, 83, 71, 10, 9, 108, 100, 32, 98, 44, 36, 102, 102, 10, 9, 98, 105, 116, 32, 52, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 48, 44, 98, 10, 9, 98, 105, 116, 32, 55, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 49, 44, 98, 10, 9, 98, 105, 116, 32, 53, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 50, 44, 98, 10, 9, 98, 105, 116, 32, 54, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 51, 44, 98, 10, 10, 9, 105, 110, 32, 97, 44, 40, 36, 57, 56, 41, 10, 9, 98, 105, 116, 32, 53, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 54, 44, 98, 10, 9, 108, 100, 32, 97, 44, 98, 10, 9, 99, 112, 108, 10, 9, 108, 100, 32, 40, 106, 111, 121, 50, 95, 100, 97, 116, 97, 41, 44, 97, 10, 10, 9, 108, 100, 32, 97, 44, 36, 49, 48, 10, 9, 111, 117, 116, 32, 40, 36, 57, 54, 41, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 36, 57, 57, 41, 10, 9, 99, 112, 32, 36, 102, 102, 10, 9, 108, 100, 32, 99, 44, 36, 102, 102, 10, 9, 106, 114, 32, 110, 122, 44, 46, 107, 101, 121, 49, 10, 9, 108, 100, 32, 97, 44, 36, 49, 49, 10, 9, 111, 117, 116, 32, 40, 36, 57, 54, 41, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 36, 57, 57, 41, 10, 9, 97, 110, 100, 32, 36, 48, 51, 10, 9, 99, 112, 32, 36, 48, 51, 10, 9, 108, 100, 32, 99, 44, 36, 48, 55, 10, 9, 106, 114, 32, 110, 122, 44, 46, 107, 101, 121, 49, 10, 9, 108, 100, 32, 97, 44, 36, 49, 54, 10, 9, 111, 117, 116, 32, 40, 36, 57, 54, 41, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 36, 57, 57, 41, 10, 9, 98, 105, 116, 32, 54, 44, 97, 10, 9, 108, 100, 32, 99, 44, 36, 48, 98, 10, 9, 106, 114, 32, 122, 44, 46, 107, 101, 121, 50, 10, 9, 108, 100, 32, 97, 44, 36, 49, 53, 10, 9, 111, 117, 116, 32, 40, 36, 57, 54, 41, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 36, 57, 57, 41, 10, 9]);
fileData5.push.apply(fileData5, [98, 105, 116, 32, 54, 44, 97, 10, 9, 108, 100, 32, 99, 44, 36, 48, 97, 10, 9, 106, 114, 32, 122, 44, 46, 107, 101, 121, 50, 10, 9, 108, 100, 32, 99, 44, 36, 48, 102, 10, 9, 106, 114, 32, 46, 107, 101, 121, 50, 10, 10, 46, 107, 101, 121, 49, 58, 9, 114, 114, 97, 10, 9, 105, 110, 99, 32, 99, 10, 9, 106, 114, 32, 99, 44, 46, 107, 101, 121, 49, 10, 46, 107, 101, 121, 50, 58, 10, 9, 108, 100, 32, 97, 44, 99, 10, 9, 108, 100, 32, 40, 107, 101, 121, 49, 95, 100, 97, 116, 97, 41, 44, 97, 9, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 44, 36, 102, 102, 10, 9, 108, 100, 32, 97, 44, 36, 49, 53, 10, 9, 111, 117, 116, 32, 40, 36, 57, 54, 41, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 36, 57, 57, 41, 10, 9, 98, 105, 116, 32, 55, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 48, 44, 98, 10, 9, 108, 100, 32, 97, 44, 36, 49, 56, 10, 9, 111, 117, 116, 32, 40, 36, 57, 54, 41, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 36, 57, 57, 41, 10, 9, 98, 105, 116, 32, 55, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 49, 44, 98, 10, 9, 108, 100, 32, 97, 44, 36, 49, 55, 10, 9, 111, 117, 116, 32, 40, 36, 57, 54, 41, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 36, 57, 57, 41, 10, 9, 98, 105, 116, 32, 55, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 50, 44, 98, 10, 9, 108, 100, 32, 97, 44, 36, 49, 54, 10, 9, 111, 117, 116, 32, 40, 36, 57, 54, 41, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 36, 57, 57, 41, 10, 9, 98, 105, 116, 32, 55, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 51, 44, 98, 10, 9, 108, 100, 32, 97, 44, 36, 49, 56, 10, 9, 111, 117, 116, 32, 40, 36, 57, 54, 41, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 36, 57, 57, 41, 10, 9, 98, 105, 116, 32, 48, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 54, 44, 98, 10, 9, 108, 100, 32, 97, 44, 36, 49, 51, 10, 9, 111, 117, 116, 32, 40, 36, 57, 54, 41, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 36, 57, 57, 41, 10, 9, 98, 105, 116, 32, 53, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 55, 44, 98, 10, 10, 9, 108, 100, 32, 97, 44, 49, 52, 10, 9, 99, 97, 108, 108, 32, 82, 68, 80, 83, 71, 10, 9, 98, 105, 116, 32, 48, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 48, 44, 98, 10, 9, 98, 105, 116, 32, 51, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 49, 44, 98, 10, 9, 98, 105, 116, 32, 49, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 50, 44, 98, 10, 9, 98, 105, 116, 32, 50, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 51, 44, 98, 10, 9, 10, 9, 105, 110, 32, 97, 44, 40, 36, 57, 56, 41, 10, 9, 98, 105, 116, 32, 52, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 54, 44, 98, 10, 9, 108, 100, 32, 97, 44, 98, 10, 9, 99, 112, 108, 10, 9, 108, 100, 32, 40, 106, 111, 121, 49, 95, 100, 97, 116, 97, 41, 44, 97, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 79, 82, 68, 10, 9, 108, 100, 32, 98, 99, 44, 36, 102, 102, 102, 102, 10, 9, 105, 110, 32, 97, 44, 40, 36, 51, 55, 41, 9, 59, 32, 82, 101, 97, 100, 32, 106, 111, 121, 115, 116, 105, 99, 107, 10, 9, 114, 114, 97, 10, 9, 106, 114, 32, 110, 99, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 49, 44, 98, 10, 9, 114, 114, 97, 10, 9, 106, 114, 32, 110, 99, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 48, 44, 98, 10, 9, 114, 114, 97, 10, 9, 106, 114, 32, 110, 99, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 51, 44, 98, 10, 9, 114, 114, 97, 10, 9, 106, 114, 32, 110, 99, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 50, 44, 98, 10, 9, 114, 114, 97, 10, 9, 106, 114, 32, 110, 99, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 49, 44, 99, 10, 9, 114, 114, 97, 10, 9, 106, 114, 32, 110, 99, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 48, 44, 99, 10, 9, 114, 114, 97, 10, 9, 106, 114, 32, 110, 99, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 51, 44, 99, 10, 9, 114, 114, 97, 10, 9, 106, 114, 32, 110, 99, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 50, 44, 99, 10, 9, 105, 110, 32, 97, 44, 40, 36, 51, 49, 41, 10, 9, 114, 114, 97, 10, 9, 106, 114, 32, 110, 99, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 54, 44, 98, 10, 9, 114, 114, 97, 10, 9, 106, 114, 32, 110, 99, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 55, 44, 98, 10, 9, 114, 114, 97, 10, 9, 114, 114, 97, 10, 9, 114, 114, 97, 10, 9, 106, 114, 32, 110, 99, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 54, 44, 99, 10, 9, 114, 114, 97, 10, 9, 106, 114, 32, 110, 99, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 55, 44, 99, 10, 9, 108, 100, 32, 97, 44, 98, 10, 9, 99, 112, 108, 10, 9, 108, 100, 32, 40, 106, 111, 121, 49, 95, 100, 97, 116, 97, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 99, 10, 9, 99, 112, 108, 10, 9, 108, 100, 32, 40, 106, 111, 121, 50, 95, 100, 97, 116, 97, 41, 44, 97, 10, 9, 105, 110, 32, 97, 44, 40, 36, 51, 49, 41, 9, 59, 32, 75, 101, 121, 98, 111, 97, 114, 100, 32, 49, 45, 56, 10, 9, 111, 114, 32, 97, 10, 9, 108, 100, 32, 99, 44, 36, 48, 48, 10, 9, 106, 114, 32, 110, 122, 44, 46, 107, 101, 121, 51, 10, 9, 105, 110, 32, 97, 44, 40, 36, 51, 53, 41, 9, 10, 9, 98, 105, 116, 32, 48, 44, 97, 9, 9, 59, 32, 57, 10, 9, 108, 100, 32, 99, 44, 36, 48, 57, 10, 9, 106, 114, 32, 110, 122, 44, 46, 107, 101, 121, 53, 10, 9, 98, 105, 116, 32, 49, 44, 97, 9, 9, 59, 32, 48, 10, 9, 108, 100, 32, 99, 44, 36, 48, 48, 10, 9, 106, 114, 32, 110, 122, 44, 46, 107, 101, 121, 53, 10, 9, 98, 105, 116, 32, 55, 44, 97, 9, 9, 59, 32, 66, 97, 99, 107, 115, 112, 97, 99, 101, 10, 9, 108, 100, 32, 99, 44, 36, 48, 97, 10, 9, 106, 114, 32, 110, 122, 44, 46, 107, 101, 121, 53, 10, 9, 105, 110, 32, 97, 44, 40, 36, 51, 48, 41, 10, 9, 98, 105, 116, 32, 55, 44, 97, 9, 9, 59, 32, 69, 110, 116, 101, 114, 10, 9, 108, 100, 32, 99, 44, 36, 48, 98, 9, 10, 9, 106, 114, 32, 110, 122, 44, 46, 107, 101, 121, 53, 10, 9, 108, 100, 32, 99, 44, 36, 48, 102, 10, 9, 106, 114, 32, 46, 107, 101, 121, 53, 10, 10, 46, 107, 101, 121, 51, 58, 9, 114, 114, 97, 10, 9, 105, 110, 99, 32, 99, 10, 9, 106, 114, 32, 110, 99, 44, 46, 107, 101, 121, 51, 10, 46, 107, 101, 121, 53, 58, 10, 9, 108, 100, 32, 97, 44, 99, 10, 9, 108, 100, 32, 40, 107, 101, 121, 49, 95, 100, 97, 116, 97, 41, 44, 97, 9, 10, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 10, 9, 108, 100, 32, 98, 99, 44, 36, 102, 102, 102, 102, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 102, 98, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 53, 41, 44, 97, 9, 59, 32, 83, 101, 108, 101, 99, 116, 32, 107, 101, 121, 98, 111, 97, 114, 100, 32, 114, 111, 119, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 32, 97, 44, 40, 36, 48, 53, 41, 9, 59, 32, 82, 101, 97, 100, 32, 107, 101, 121, 98, 111, 97, 114, 100, 32, 100, 97, 116, 97, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 55, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 48, 44, 98, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 85, 112, 32, 100, 105, 114, 101, 99, 116, 105, 111, 110, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 51, 44, 97, 9, 9, 59, 32, 89, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 48, 44, 99, 9, 9, 59, 32, 85, 112, 32, 100, 105, 114, 101, 99, 116, 105, 111, 110, 46, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 101, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 53, 41, 44, 97, 9, 59, 32, 83, 101, 108, 101, 99, 116, 32, 107, 101, 121, 98, 111, 97, 114, 100, 32, 114, 111, 119, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 32, 97, 44, 40, 36, 48, 53, 41, 9, 59, 32, 82, 101, 97, 100, 32, 107, 101, 121, 98, 111, 97, 114, 100, 32, 100, 97, 116, 97, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 55, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 49, 44, 98, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 82, 105, 103, 104, 116, 32, 107, 101, 121, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 98, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 53, 41, 44, 97, 9, 59, 32, 83, 101, 108, 101, 99, 116, 32, 107, 101, 121, 98, 111, 97, 114, 100, 32, 114, 111, 119, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 32, 97, 44, 40, 36, 48, 53, 41, 9, 59, 32, 82, 101, 97, 100, 32, 107, 101, 121, 98, 111, 97, 114, 100, 32, 100, 97, 116, 97, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 55, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 50, 44, 98, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 68, 111, 119, 110, 32, 107, 101, 121, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 102, 55, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 53, 41, 44, 97, 9, 59, 32, 83, 101, 108, 101, 99, 116, 32, 107, 101, 121, 98, 111, 97, 114, 100, 32, 114, 111, 119, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 32, 97, 44, 40, 36, 48, 53, 41, 9, 59, 32, 82, 101, 97, 100, 32, 107, 101, 121, 98, 111, 97, 114, 100, 32, 100, 97, 116, 97, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 55, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 51, 44, 98, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 76, 101, 102, 116, 32, 107, 101, 121, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 100, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 53, 41, 44, 97, 9, 59, 32, 83, 101, 108, 101, 99, 116, 32, 107, 101, 121, 98, 111, 97, 114, 100, 32, 114, 111, 119, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 32, 97, 44, 40, 36, 48, 53, 41, 9, 59, 32, 82, 101, 97, 100, 32, 107, 101, 121, 98, 111, 97, 114, 100, 32, 100, 97, 116, 97, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 55, 44, 97, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 72, 111, 109, 101, 32, 107, 101, 121, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 54, 44, 98, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 66, 117, 116, 116, 111, 110, 32, 49, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 55, 70, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 53, 41, 44, 97, 9, 59, 32, 83, 101, 108, 101, 99, 116, 32, 107, 101, 121, 98, 111, 97, 114, 100, 32, 114, 111, 119, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 32, 97, 44, 40, 36, 48, 53, 41, 9, 59, 32, 82, 101, 97, 100, 32, 107, 101, 121, 98, 111, 97, 114, 100, 32, 100, 97, 116, 97, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 50, 44, 97, 9, 9, 59, 32, 66, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 48, 44, 99, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 85, 112, 32, 107, 101, 121, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 49, 44, 97, 9, 9, 59, 32, 67, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 49, 44, 99, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 82, 105, 103, 104, 116, 32, 107, 101, 121, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 51, 44, 97, 9, 9, 59, 32, 77, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 50, 44, 99, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 68, 111, 119, 110, 32, 107, 101, 121, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 48, 44, 97, 9, 9, 59, 32, 90, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 51, 44, 99, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 76, 101, 102, 116, 32, 107, 101, 121, 46, 10, 9, 98, 105, 116, 32, 53, 44, 97, 9, 9, 59, 32, 45, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 55, 44, 99, 9, 9, 59, 32, 66, 117, 116, 116, 111, 110, 32, 50, 32, 102, 111, 114, 32, 112, 108, 97, 121, 101, 114, 32, 50, 46, 10, 9, 98, 105, 116, 32, 55, 44, 97, 9, 9, 59, 32, 45, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 55, 44, 98, 9, 9, 59, 32, 66, 117, 116, 116, 111, 110, 32, 50, 32, 102, 111, 114, 32, 112, 108, 97, 121, 101, 114, 32, 49, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 32, 97, 44, 40, 36, 48, 54, 41, 9, 59, 32, 82, 101, 97, 100, 32, 107, 101, 121, 98, 111, 97, 114, 100, 32, 100, 97, 116, 97, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 48, 44, 97, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 83, 112, 97, 99, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 54, 44, 99, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 66, 117, 116, 116, 111, 110, 32, 49, 46, 10, 9, 108, 100, 32, 97, 44, 98, 10, 9, 99, 112, 108, 10, 9, 108, 100, 32, 40, 106, 111, 121, 49, 95, 100, 97, 116, 97, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 99, 10, 9, 99, 112, 108, 10, 9, 108, 100, 32, 40, 106, 111, 121, 50, 95, 100, 97, 116, 97, 41, 44, 97, 10, 10, 9, 108, 100, 32, 97, 44, 36, 102, 101, 10, 9, 111, 117, 116, 32, 40, 36, 48, 53, 41, 44, 97, 10, 9, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 9, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 9, 105, 110, 32, 97, 44, 40, 36, 48, 53, 41, 10, 9, 114, 114, 97, 10, 9, 108, 100, 32, 98, 44, 49, 10, 9, 106, 114, 32, 110, 99, 44, 46, 109, 116, 49, 10, 9, 114, 114, 97, 10, 9, 108, 100, 32, 98, 44, 51, 10, 9, 106, 114, 32, 110, 99, 44, 46, 109, 116, 49, 10, 9, 114, 114, 97, 10, 9, 108, 100, 32, 98, 44, 53, 10, 9, 106, 114, 32, 110, 99, 44, 46, 109, 116, 49, 10, 9, 114, 114, 97, 10, 9, 108, 100, 32, 98, 44, 55, 10, 9, 106, 114, 32, 110, 99, 44, 46, 109, 116, 49, 10, 9, 114, 114, 97, 10, 9, 108, 100, 32, 98, 44, 57, 10, 9, 106, 114, 32, 110, 99, 44, 46, 109, 116, 49, 10, 9, 108, 100, 32, 97, 44, 36, 100, 102, 10, 9, 111, 117, 116, 32, 40, 36, 48, 53, 41, 44, 97, 10, 9, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 9, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 9, 105, 110, 32, 97, 44, 40, 36, 48, 53, 41, 10, 9, 98, 105, 116, 32, 54, 44, 97, 10, 9, 108, 100, 32, 98, 44, 49, 49, 10, 9, 106, 114, 32, 122, 44, 46, 109, 116, 49, 10, 9, 108, 100, 32, 97, 44, 36, 102, 100, 10, 9, 111, 117, 116, 32, 40, 36, 48, 53, 41, 44, 97, 10, 9, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 9, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 9, 105, 110, 32, 97, 44, 40, 36, 48, 53, 41, 10, 9, 114, 114, 97, 10, 9, 114, 114, 97, 10, 9, 108, 100, 32, 98, 44, 50, 10, 9, 106, 114, 32, 110, 99, 44, 46, 109, 116, 49, 10, 9, 114, 114, 97, 10, 9, 108, 100, 32, 98, 44, 52, 10, 9, 106, 114, 32, 110, 99, 44, 46, 109, 116, 49, 10, 9, 114, 114, 97, 10, 9, 108, 100, 32, 98, 44, 54, 10, 9, 106, 114, 32, 110, 99, 44, 46, 109, 116, 49, 10, 9, 114, 114, 97, 10, 9, 108, 100, 32, 98, 44, 56, 10, 9, 106, 114, 32, 110, 99, 44, 46, 109, 116, 49, 10, 9, 114, 114, 97, 10, 9, 108, 100, 32, 98, 44, 48, 10, 9, 106, 114, 32, 110, 99, 44, 46, 109, 116, 49, 10, 9, 105, 110, 32, 97, 44, 40, 36, 48, 54, 41, 10, 9, 114, 114, 97, 10, 9, 108, 100, 32, 98, 44, 49, 48, 10, 9, 106, 114, 32, 110, 99, 44, 46, 109, 116, 49, 10, 9, 108, 100, 32, 98, 44, 49, 53, 10, 46, 109, 116, 49, 58, 10, 9, 108, 100, 32, 97, 44, 98, 10, 9, 108, 100, 32, 40, 107, 101, 121, 49, 95, 100, 97, 116, 97, 41, 44, 97, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 69, 73, 78, 83, 84, 69, 73, 78, 10, 9, 108, 100, 32, 98, 99, 44, 36, 102, 102, 102, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 48, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 50, 41, 44, 97, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 102, 55, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 51, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 48, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 50, 41, 44, 97, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 32, 97, 44, 40, 36, 48, 50, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 54, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 48, 44, 98, 9, 9, 59, 32, 85, 112, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 48, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 50, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 102, 98, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 51, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 48, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 50, 41, 44, 97, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 32, 97, 44, 40, 36, 48, 50, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 52, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 49, 44, 98, 9, 9, 59, 32, 82, 105, 103, 104, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 48, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 50, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 102, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 51, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 48, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 50, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 32, 97, 44, 40, 36, 48, 50, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 53, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 50, 44, 98, 9, 9, 59, 32, 68, 111, 119, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 48, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 50, 41, 44, 97, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 102, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 51, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 48, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 50, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 32, 97, 44, 40, 36, 48, 50, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 51, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 51, 44, 98, 9, 9, 59, 32, 76, 101, 102, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 48, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 50, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 102, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 51, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 48, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 50, 41, 44, 97, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 32, 97, 44, 40, 36, 48, 50, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 54, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 54, 44, 98, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 70, 105, 114, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 48, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 50, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 55, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 51, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 48, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 50, 41, 44, 97, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 32, 97, 44, 40, 36, 48, 50, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 48, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 36, 43, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 55, 44, 98, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 50, 110, 100, 32, 102, 105, 114, 101, 10, 9, 108, 100, 32, 97, 44, 98, 10, 9, 99, 112, 108, 10, 9, 108, 100, 32, 40, 106, 111, 121, 49, 95, 100, 97, 116, 97, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 99, 10, 9, 99, 112, 108, 10, 9, 108, 100, 32, 40, 106, 111, 121, 50, 95, 100, 97, 116, 97, 41, 44, 97, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 48, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 50, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 101, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 51, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 48, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 50, 41, 44, 97, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 32, 97, 44, 40, 36, 48, 50, 41, 10, 9, 114, 114, 97, 10, 9, 108, 100, 32, 98, 44, 55, 10, 9, 106, 114, 32, 110, 99, 44, 46, 116, 101, 49, 10, 9, 114, 114, 97, 10, 9, 108, 100, 32, 98, 44, 54, 10, 9, 106, 114, 32, 110, 99, 44, 46, 116, 101, 49, 10, 9, 114, 114, 97, 10, 9, 108, 100, 32, 98, 44, 53, 10, 9, 106, 114, 32, 110, 99, 44, 46, 116, 101, 49, 10, 9, 114, 114, 97, 10, 9, 108, 100, 32, 98, 44, 52, 10, 9, 106, 114, 32, 110, 99, 44, 46, 116, 101, 49, 10, 9, 114, 114, 97, 10, 9, 108, 100, 32, 98, 44, 51, 10, 9, 106, 114, 32, 110, 99, 44, 46, 116, 101, 49, 10, 9, 114, 114, 97, 10, 9, 108, 100, 32, 98, 44, 50, 10, 9, 106, 114, 32, 110, 99, 44, 46, 116, 101, 49, 10, 9, 114, 114, 97, 10, 9, 108, 100, 32, 98, 44, 49, 10, 9, 106, 114, 32, 110, 99, 44, 46, 116, 101, 49, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 48, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 50, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 102, 55, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 51, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 48, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 50, 41, 44, 97, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 32, 97, 44, 40, 36, 48, 50, 41, 10, 9, 98, 105, 116, 32, 51, 44, 97, 10, 9, 108, 100, 32, 98, 44, 56, 10, 9, 106, 114, 32, 122, 44, 46, 116, 101, 49, 10, 9, 98, 105, 116, 32, 52, 44, 97, 10, 9, 108, 100, 32, 98, 44, 49, 48, 10, 9, 106, 114, 32, 122, 44, 46, 116, 101, 49, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 48, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 50, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 102, 98, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 51, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 48, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 50, 41, 44, 97, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 32, 97, 44, 40, 36, 48, 50, 41, 10, 9, 98, 105, 116, 32, 54, 44, 97, 10, 9, 108, 100, 32, 98, 44, 57, 10, 9, 106, 114, 32, 122, 44, 46, 116, 101, 49, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 48, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 50, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 102, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 51, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 48, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 50, 41, 44, 97, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 32, 97, 44, 40, 36, 48, 50, 41, 10, 9, 98, 105, 116, 32, 53, 44, 97, 10, 9, 108, 100, 32, 98, 44, 49, 49, 10, 9, 106, 114, 32, 122, 44, 46, 116, 101, 49, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 48, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 50, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 102, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 51, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 48, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 48, 50, 41, 44, 97, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 32, 97, 44, 40, 36, 48, 50, 41, 10, 9, 98, 105, 116, 32, 55, 44, 97, 10, 9, 108, 100, 32, 98, 44, 48, 10, 9, 106, 114, 32, 122, 44, 46, 116, 101, 49, 10, 9, 108, 100, 32, 98, 44, 49, 53, 10, 46, 116, 101, 49, 58, 10, 9, 108, 100, 32, 97, 44, 98, 10, 9, 108, 100, 32, 40, 107, 101, 121, 49, 95, 100, 97, 116, 97, 41, 44, 97, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 80, 86, 50, 48, 48, 48, 10, 9, 108, 100, 32, 98, 99, 44, 36, 102, 102, 102, 102, 10, 9, 108, 100, 32, 97, 44, 55, 10, 9, 111, 117, 116, 32, 40, 36, 50, 48, 41, 44, 97, 10, 9, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 9, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 9, 105, 110, 32, 97, 44, 40, 36, 50, 48, 41, 10, 9, 98, 105, 116, 32, 49, 44, 97, 10, 9, 106, 114, 32, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 48, 44, 98, 10, 9, 98, 105, 116, 32, 48, 44, 97, 10, 9, 106, 114, 32, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 51, 44, 98, 10, 9, 108, 100, 32, 97, 44, 54, 10, 9, 111, 117, 116, 32, 40, 36, 50, 48, 41, 44, 97, 10, 9, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 9, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 9, 105, 110, 32, 97, 44, 40, 36, 50, 48, 41, 10, 9, 98, 105, 116, 32, 49, 44, 97, 10, 9, 106, 114, 32, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 49, 44, 98, 10, 9, 98, 105, 116, 32, 48, 44, 97, 10, 9, 106, 114, 32, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 50, 44, 98, 10, 9, 108, 100, 32, 97, 44, 56, 10, 9, 111, 117, 116, 32, 40, 36, 50, 48, 41, 44, 97, 10, 9, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 9, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 9, 105, 110, 32, 97, 44, 40, 36, 50, 48, 41, 10, 9, 98, 105, 116, 32, 48, 44, 97, 10, 9, 106, 114, 32, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 54, 44, 98, 10, 9, 98, 105, 116, 32, 49, 44, 97, 10, 9, 106, 114, 32, 122, 44, 36, 43, 52, 10, 9, 114, 101, 115, 32, 55, 44, 98, 10, 9, 108, 100, 32, 97, 44, 98, 10, 9, 99, 112, 108, 10, 9, 108, 100, 32, 40, 106, 111, 121, 49, 95, 100, 97, 116, 97, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 99, 10, 9, 99, 112, 108, 10, 9, 108, 100, 32, 40, 106, 111, 121, 50, 95, 100, 97, 116, 97, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 48, 10, 9, 111, 117, 116, 32, 40, 36, 50, 48, 41, 44, 97, 10, 9, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 9, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 9, 105, 110, 32, 97, 44, 40, 36, 50, 48, 41, 10, 9, 97, 110, 100, 32, 36, 48, 102, 10, 9, 108, 100, 32, 98, 44, 36, 48, 52, 10, 9, 106, 114, 32, 110, 122, 44, 46, 112, 118, 49, 10, 9, 105, 110, 32, 97, 44, 40, 36, 49, 48, 41, 10, 9, 97, 110, 100, 32, 36, 48, 102, 10, 9, 108, 100, 32, 98, 44, 36, 48, 56, 10, 9, 106, 114, 32, 110, 122, 44, 46, 112, 118, 49, 10, 9, 108, 100, 32, 97, 44, 56, 10, 9, 111, 117, 116, 32, 40, 36, 50, 48, 41, 44, 97, 10, 9, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 9, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 9, 105, 110, 32, 97, 44, 40, 36, 49, 48, 41, 10, 9, 108, 100, 32, 98, 44, 49, 49, 10, 9, 98, 105, 116, 32, 48, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 46, 112, 118, 50, 10, 9, 108, 100, 32, 97, 44, 52, 10, 9, 111, 117, 116, 32, 40, 36, 50, 48, 41, 44, 97, 10, 9, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 9, 101, 120, 32, 40, 115, 112, 41, 44, 104, 108, 10, 9, 105, 110, 32, 97, 44, 40, 36, 50, 48, 41, 10, 9, 108, 100, 32, 98, 44, 49, 48, 10, 9, 98, 105, 116, 32, 51, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 46, 112, 118, 50, 10, 9, 105, 110, 32, 97, 44, 40, 36, 49, 48, 41, 10, 9, 108, 100, 32, 98, 44, 57, 10, 9, 98, 105, 116, 32, 48, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 46, 112, 118, 50, 10, 9, 108, 100, 32, 98, 44, 48, 10, 9, 98, 105, 116, 32, 51, 44, 97, 10, 9, 106, 114, 32, 110, 122, 44, 46, 112, 118, 50, 10, 9, 108, 100, 32, 98, 44, 49, 53, 10, 9, 106, 114, 32, 46, 112, 118, 50, 10, 10, 46, 112, 118, 49, 58, 9, 114, 114, 97, 10, 9, 106, 114, 32, 99, 44, 46, 112, 118, 50, 10, 9, 100, 101, 99, 32, 98, 10, 9, 114, 114, 97, 10, 9, 106, 114, 32, 99, 44, 46, 112, 118, 50, 10, 9, 100, 101, 99, 32, 98, 10, 9, 114, 114, 97, 10, 9, 106, 114, 32, 99, 44, 46, 112, 118, 50, 10, 9, 100, 101, 99, 32, 98, 10, 46, 112, 118, 50, 58, 9, 108, 100, 32, 97, 44, 98, 10, 9, 108, 100, 32, 40, 107, 101, 121, 49, 95, 100, 97, 116, 97, 41, 44, 97, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 78, 65, 66, 85, 10, 9, 108, 100, 32, 97, 44, 40, 110, 97, 98, 117, 95, 100, 97, 116, 97, 48, 41, 10, 9, 97, 110, 100, 32, 36, 99, 102, 10, 9, 108, 100, 32, 40, 106, 111, 121, 49, 95, 100, 97, 116, 97, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 40, 110, 97, 98, 117, 95, 100, 97, 116, 97, 49, 41, 10, 9, 97, 110, 100, 32, 36, 99, 102, 10, 9, 108, 100, 32, 40, 106, 111, 121, 50, 95, 100, 97, 116, 97, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 40, 110, 97, 98, 117, 95, 100, 97, 116, 97, 50, 41, 10, 9, 108, 100, 32, 40, 107, 101, 121, 49, 95, 100, 97, 116, 97, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 36, 48, 102, 10, 9, 108, 100, 32, 40, 110, 97, 98, 117, 95, 100, 97, 116, 97, 50, 41, 44, 97, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 32, 32, 32, 32, 105, 102, 32, 67, 86, 66, 65, 83, 73, 67, 95, 77, 85, 83, 73, 67, 95, 80, 76, 65, 89, 69, 82, 10, 9, 108, 100, 32, 97, 44, 40, 109, 117, 115, 105, 99, 95, 109, 111, 100, 101, 41, 10, 9, 111, 114, 32, 97, 10, 9, 99, 97, 108, 108, 32, 110, 122, 44, 109, 117, 115, 105, 99, 95, 104, 97, 114, 100, 119, 97, 114, 101, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 9, 108, 100, 32, 104, 108, 44, 40, 102, 114, 97, 109, 101, 41, 10, 9, 105, 110, 99, 32, 104, 108, 10, 9, 108, 100, 32, 40, 102, 114, 97, 109, 101, 41, 44, 104, 108, 10, 10, 9, 108, 100, 32, 104, 108, 44, 108, 102, 115, 114, 9, 59, 32, 77, 97, 107, 101, 32, 76, 70, 83, 82, 32, 109, 111, 114, 101, 32, 114, 97, 110, 100, 111, 109, 10, 9, 105, 110, 99, 32, 40, 104, 108, 41, 10, 9, 105, 110, 99, 32, 40, 104, 108, 41, 10, 9, 105, 110, 99, 32, 40, 104, 108, 41, 10, 10, 32, 32, 32, 32, 105, 102, 32, 67, 86, 66, 65, 83, 73, 67, 95, 77, 85, 83, 73, 67, 95, 80, 76, 65, 89, 69, 82, 10, 9, 59, 10, 9, 59, 32, 77, 117, 115, 105, 99, 32, 105, 115, 32, 112, 108, 97, 121, 101, 100, 32, 119, 105, 116, 104, 32, 97, 32, 53, 48, 104, 122, 32, 99, 108, 111, 99, 107, 46, 10, 9, 59, 10, 9, 108, 100, 32, 97, 44, 40, 110, 116, 115, 99, 41, 10, 9, 111, 114, 32, 97, 10, 9, 106, 114, 32, 122, 44, 46, 50, 10, 9, 108, 100, 32, 97, 44, 40, 109, 117, 115, 105, 99, 95, 116, 105, 99, 107, 41, 10, 9, 105, 110, 99, 32, 97, 10, 9, 99, 112, 32, 54, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 51, 10, 9, 120, 111, 114, 32, 97, 10, 9, 108, 100, 32, 40, 109, 117, 115, 105, 99, 95, 116, 105, 99, 107, 41, 44, 97, 10, 9, 106, 114, 32, 122, 44, 46, 51, 10, 46, 50, 58, 10, 9, 108, 100, 32, 97, 44, 40, 109, 117, 115, 105, 99, 95, 109, 111, 100, 101, 41, 10, 9, 111, 114, 32, 97, 10, 9, 99, 97, 108, 108, 32, 110, 122, 44, 109, 117, 115, 105, 99, 95, 103, 101, 110, 101, 114, 97, 116, 101, 10, 46, 51, 58, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 59, 67, 86, 66, 65, 83, 73, 67, 32, 77, 65, 82, 75, 32, 68, 79, 78, 39, 84, 32, 67, 72, 65, 78, 71, 69, 10, 10, 32, 32, 105, 102, 32, 67, 86, 66, 65, 83, 73, 67, 95, 66, 65, 78, 75, 95, 83, 87, 73, 84, 67, 72, 73, 78, 71, 10, 9, 112, 111, 112, 32, 97, 102, 10, 32, 32, 32, 32, 105, 102, 32, 67, 79, 76, 69, 67, 79, 10, 9, 108, 100, 32, 108, 44, 97, 10, 9, 108, 100, 32, 104, 44, 36, 102, 102, 10, 9, 108, 100, 32, 97, 44, 40, 104, 108, 41, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 10, 9, 108, 100, 32, 40, 36, 102, 102, 102, 101, 41, 44, 97, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 77, 83, 88, 10, 9, 108, 100, 32, 40, 36, 55, 48, 48, 48, 41, 44, 97, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 101, 110, 100, 105, 102, 10, 9, 112, 111, 112, 32, 100, 101, 10, 9, 112, 111, 112, 32, 98, 99, 10, 9, 112, 111, 112, 32, 104, 108, 10, 32, 32, 32, 32, 105, 102, 32, 67, 79, 76, 69, 67, 79, 10, 9, 105, 110, 32, 97, 44, 40, 86, 68, 80, 43, 49, 41, 10, 9, 108, 100, 32, 40, 118, 100, 112, 95, 115, 116, 97, 116, 117, 115, 41, 44, 97, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 114, 101, 116, 110, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 43, 83, 86, 73, 43, 78, 65, 66, 85, 10, 9, 112, 111, 112, 32, 97, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 105, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 105, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 77, 83, 88, 10, 9, 112, 111, 112, 32, 97, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 79, 82, 68, 43, 77, 69, 77, 79, 84, 69, 67, 72, 10, 9, 112, 111, 112, 32, 97, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 105, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 10, 10, 99, 116, 99, 95, 114, 101, 116, 105, 58, 10, 9, 114, 101, 116, 105, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 69, 73, 78, 83, 84, 69, 73, 78, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 114, 101, 116, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 80, 86, 50, 48, 48, 48, 10, 9, 108, 100, 32, 97, 44, 40, 86, 68, 80, 43, 49, 41, 10, 9, 108, 100, 32, 40, 118, 100, 112, 95, 115, 116, 97, 116, 117, 115, 41, 44, 97, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 114, 101, 116, 110, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 32, 32, 32, 32, 105, 102, 32, 78, 65, 66, 85, 10, 107, 101, 121, 98, 111, 97, 114, 100, 95, 104, 97, 110, 100, 108, 101, 114, 58, 10, 9, 112, 117, 115, 104, 32, 97, 102, 10, 9, 112, 117, 115, 104, 32, 98, 99, 10, 9, 112, 117, 115, 104, 32, 104, 108, 10, 9, 105, 110, 32, 97, 44, 40, 36, 57, 48, 41, 10, 9, 108, 100, 32, 99, 44, 97, 10, 9, 99, 112, 32, 36, 48, 100, 9, 59, 32, 69, 110, 116, 101, 114, 10, 9, 108, 100, 32, 97, 44, 49, 49, 10, 9, 106, 114, 32, 122, 44, 46, 56, 10, 9, 108, 100, 32, 97, 44, 99, 10, 9, 99, 112, 32, 36, 55, 102, 9, 59, 32, 68, 101, 108, 10, 9, 108, 100, 32, 97, 44, 49, 48, 10, 9, 106, 114, 32, 122, 44, 46, 56, 10, 9, 108, 100, 32, 97, 44, 99, 10, 9, 99, 112, 32, 36, 51, 48, 10, 9, 106, 114, 32, 99, 44, 46, 55, 10, 9, 99, 112, 32, 36, 51, 97, 10, 9, 106, 114, 32, 110, 99, 44, 46, 55, 10, 9, 115, 117, 98, 32, 36, 51, 48, 10, 46, 56, 58, 9, 108, 100, 32, 40, 110, 97, 98, 117, 95, 100, 97, 116, 97, 50, 41, 44, 97, 10, 9, 106, 114, 32, 46, 49, 10, 46, 55, 58, 10, 9, 99, 112, 32, 36, 97, 48, 10, 9, 106, 114, 32, 99, 44, 46, 50, 10, 9, 99, 112, 32, 36, 99, 48, 10, 9, 106, 114, 32, 99, 44, 46, 106, 111, 121, 115, 116, 105, 99, 107, 10, 46, 50, 58, 10, 9, 108, 100, 32, 104, 108, 44, 110, 97, 98, 117, 95, 100, 97, 116, 97, 48, 10, 9, 99, 112, 32, 36, 56, 48, 10, 9, 106, 114, 32, 110, 122, 44, 46, 51, 10, 9, 114, 101, 115, 32, 52, 44, 40, 104, 108, 41, 10, 9, 106, 114, 32, 46, 49, 10, 46, 51, 58, 10, 9, 99, 112, 32, 36, 56, 49, 10, 9, 106, 114, 32, 110, 122, 44, 46, 52, 10, 9, 115, 101, 116, 32, 52, 44, 40, 104, 108, 41, 10, 9, 106, 114, 32, 46, 49, 10, 46, 52, 58, 10, 9, 99, 112, 32, 36, 101, 48, 10, 9, 106, 114, 32, 99, 44, 46, 49, 10, 9, 97, 110, 100, 32, 36, 48, 102, 10, 9, 108, 100, 32, 98, 44, 50, 10, 9, 106, 114, 32, 122, 44, 46, 53, 10, 9, 100, 101, 99, 32, 97, 10, 9, 108, 100, 32, 98, 44, 56, 10, 9, 106, 114, 32, 122, 44, 46, 53, 10, 9, 100, 101, 99, 32, 97, 10, 9, 108, 100, 32, 98, 44, 49, 10, 9, 106, 114, 32, 122, 44, 46, 53, 10, 9, 100, 101, 99, 32, 97, 10, 9, 108, 100, 32, 98, 44, 52, 10, 9, 106, 114, 32, 122, 44, 46, 53, 10, 9, 100, 101, 99, 32, 97, 10, 9, 108, 100, 32, 98, 44, 36, 56, 48, 10, 9, 106, 114, 32, 122, 44, 46, 53, 10, 9, 100, 101, 99, 32, 97, 10, 9, 108, 100, 32, 98, 44, 36, 52, 48, 10, 9, 106, 114, 32, 110, 122, 44, 46, 49, 10, 46, 53, 58, 9, 98, 105, 116, 32, 52, 44, 99, 10, 9, 106, 114, 32, 110, 122, 44, 46, 54, 10, 9, 108, 100, 32, 97, 44, 40, 104, 108, 41, 10, 9, 111, 114, 32, 98, 10, 9, 108, 100, 32, 40, 104, 108, 41, 44, 97, 10, 9, 106, 114, 32, 46, 49, 10, 10, 46, 54, 58, 10, 9, 108, 100, 32, 97, 44, 98, 10, 9, 99, 112, 108, 10, 9, 97, 110, 100, 32, 40, 104, 108, 41, 10, 9, 108, 100, 32, 40, 104, 108, 41, 44, 97, 10, 9, 106, 114, 32, 46, 49, 10, 10, 46, 106, 111, 121, 115, 116, 105, 99, 107, 58, 10, 9, 108, 100, 32, 104, 108, 44, 110, 97, 98, 117, 95, 100, 97, 116, 97, 48, 10, 9, 98, 105, 116, 32, 52, 44, 40, 104, 108, 41, 10, 9, 106, 114, 32, 122, 44, 36, 43, 53, 10, 9, 108, 100, 32, 104, 108, 44, 110, 97, 98, 117, 95, 100, 97, 116, 97, 49, 10, 9, 108, 100, 32, 98, 44, 36, 48, 48, 10, 9, 98, 105, 116, 32, 51, 44, 99, 10, 9, 106, 114, 32, 122, 44, 36, 43, 52, 10, 9, 115, 101, 116, 32, 48, 44, 98, 10, 9, 98, 105, 116, 32, 50, 44, 99, 10, 9, 106, 114, 32, 122, 44, 36, 43, 52, 10, 9, 115, 101, 116, 32, 49, 44, 98, 10, 9, 98, 105, 116, 32, 49, 44, 99, 10, 9, 106, 114, 32, 122, 44, 36, 43, 52, 10, 9, 115, 101, 116, 32, 50, 44, 98, 10, 9, 98, 105, 116, 32, 48, 44, 99, 10, 9, 106, 114, 32, 122, 44, 36, 43, 52, 10, 9, 115, 101, 116, 32, 51, 44, 98, 10, 9, 98, 105, 116, 32, 52, 44, 99, 10, 9, 106, 114, 32, 122, 44, 36, 43, 52, 10, 9, 115, 101, 116, 32, 54, 44, 98, 10, 9, 108, 100, 32, 40, 104, 108, 41, 44, 98, 10, 46, 49, 58, 10, 9, 112, 111, 112, 32, 104, 108, 10, 9, 112, 111, 112, 32, 98, 99, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 101, 105, 10, 9, 114, 101, 116, 105, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 79, 82, 68, 10, 119, 97, 105, 116, 58, 10, 9, 108, 100, 32, 100, 101, 44, 40, 102, 114, 97, 109, 101, 41, 10, 46, 49, 58, 10, 9, 108, 100, 32, 104, 108, 44, 40, 102, 114, 97, 109, 101, 41, 10, 9, 111, 114, 32, 97, 10, 9, 115, 98, 99, 32, 104, 108, 44, 100, 101, 10, 9, 106, 114, 32, 122, 44, 46, 49, 10, 9, 114, 101, 116, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 69, 73, 78, 83, 84, 69, 73, 78, 10, 119, 97, 105, 116, 58, 10, 9, 105, 110, 32, 97, 44, 40, 86, 68, 80, 43, 49, 41, 10, 9, 110, 111, 112, 10, 9, 105, 110, 32, 97, 44, 40, 86, 68, 80, 43, 49, 41, 10, 9, 98, 105, 116, 32, 55, 44, 97, 10, 9, 106, 114, 32, 122, 44, 36, 45, 52, 10, 9, 108, 100, 32, 40, 118, 100, 112, 95, 115, 116, 97, 116, 117, 115, 41, 44, 97, 10, 9, 106, 112, 32, 110, 109, 105, 95, 104, 97, 110, 100, 108, 101, 114, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 9, 59, 10, 9, 59, 32, 84, 104, 101, 32, 109, 117, 115, 105, 99, 32, 112, 108, 97, 121, 101, 114, 32, 99, 111, 100, 101, 32, 99, 111, 109, 101, 115, 32, 102, 114, 111, 109, 32, 109, 121, 10, 9, 59, 32, 103, 97, 109, 101, 32, 80, 114, 105, 110, 99, 101, 115, 115, 32, 81, 117, 101, 115, 116, 32, 102, 111, 114, 32, 67, 111, 108, 101, 99, 111, 118, 105, 115, 105, 111, 110, 32, 40, 50, 48, 49, 50, 41, 10, 9, 59, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 73, 110, 105, 116, 32, 109, 117, 115, 105, 99, 32, 112, 108, 97, 121, 101, 114, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 10, 109, 117, 115, 105, 99, 95, 105, 110, 105, 116, 58, 10, 32, 32, 32, 32, 105, 102, 32, 67, 79, 76, 69, 67, 79, 43, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 43, 83, 79, 82, 68, 43, 77, 69, 77, 79, 84, 69, 67, 72, 43, 80, 86, 50, 48, 48, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 57, 102, 10, 32, 32, 32]);
fileData5.push.apply(fileData5, [32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 80, 83, 71, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 10, 9, 105, 110, 32, 97, 44, 40, 36, 48, 51, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 98, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 80, 83, 71, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 10, 9, 105, 110, 32, 97, 44, 40, 36, 48, 51, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 100, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 80, 83, 71, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 10, 9, 105, 110, 32, 97, 44, 40, 36, 48, 51, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 102, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 80, 83, 71, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 10, 9, 105, 110, 32, 97, 44, 40, 36, 48, 51, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 101, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 80, 83, 71, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 10, 9, 105, 110, 32, 97, 44, 40, 36, 48, 51, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 67, 79, 76, 69, 67, 79, 43, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 43, 77, 83, 88, 43, 83, 86, 73, 43, 83, 79, 82, 68, 43, 77, 69, 77, 79, 84, 69, 67, 72, 43, 80, 86, 50, 48, 48, 48, 10, 77, 73, 88, 95, 66, 65, 83, 69, 58, 9, 101, 113, 117, 32, 36, 98, 56, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 69, 73, 78, 83, 84, 69, 73, 78, 43, 78, 65, 66, 85, 10, 77, 73, 88, 95, 66, 65, 83, 69, 58, 9, 101, 113, 117, 32, 36, 55, 56, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 77, 83, 88, 43, 83, 86, 73, 43, 69, 73, 78, 83, 84, 69, 73, 78, 43, 78, 65, 66, 85, 10, 9, 108, 100, 32, 97, 44, 36, 48, 56, 10, 9, 108, 100, 32, 101, 44, 36, 48, 48, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 80, 83, 71, 10, 9, 108, 100, 32, 97, 44, 36, 48, 57, 10, 9, 108, 100, 32, 101, 44, 36, 48, 48, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 80, 83, 71, 10, 9, 108, 100, 32, 97, 44, 36, 48, 97, 10, 9, 108, 100, 32, 101, 44, 36, 48, 48, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 80, 83, 71, 10, 9, 108, 100, 32, 97, 44, 36, 48, 55, 10, 9, 108, 100, 32, 101, 44, 77, 73, 88, 95, 66, 65, 83, 69, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 80, 83, 71, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 71, 77, 10, 9, 108, 100, 32, 98, 44, 36, 48, 56, 10, 9, 120, 111, 114, 32, 97, 10, 9, 99, 97, 108, 108, 32, 97, 121, 51, 95, 114, 101, 103, 10, 9, 108, 100, 32, 98, 44, 36, 48, 57, 10, 9, 99, 97, 108, 108, 32, 97, 121, 51, 95, 114, 101, 103, 10, 9, 108, 100, 32, 98, 44, 36, 48, 97, 10, 9, 99, 97, 108, 108, 32, 97, 121, 51, 95, 114, 101, 103, 10, 9, 108, 100, 32, 98, 44, 36, 48, 55, 10, 9, 108, 100, 32, 97, 44, 36, 98, 56, 10, 9, 99, 97, 108, 108, 32, 97, 121, 51, 95, 114, 101, 103, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 67, 86, 66, 65, 83, 73, 67, 95, 77, 85, 83, 73, 67, 95, 80, 76, 65, 89, 69, 82, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 9, 114, 101, 116, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 32, 32, 32, 32, 105, 102, 32, 67, 86, 66, 65, 83, 73, 67, 95, 77, 85, 83, 73, 67, 95, 80, 76, 65, 89, 69, 82, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 102, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 97, 117, 100, 105, 111, 95, 118, 111, 108, 52, 104, 119, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 101, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 97, 117, 100, 105, 111, 95, 99, 111, 110, 116, 114, 111, 108, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 77, 73, 88, 95, 66, 65, 83, 69, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 97, 117, 100, 105, 111, 95, 109, 105, 120, 41, 44, 97, 10, 9, 108, 100, 32, 104, 108, 44, 109, 117, 115, 105, 99, 95, 115, 105, 108, 101, 110, 99, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 10, 9, 59, 32, 80, 108, 97, 121, 32, 97, 32, 109, 117, 115, 105, 99, 46, 10, 9, 59, 32, 72, 76, 32, 61, 32, 80, 111, 105, 110, 116, 101, 114, 32, 116, 111, 32, 109, 117, 115, 105, 99, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 10, 109, 117, 115, 105, 99, 95, 112, 108, 97, 121, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 110, 109, 105, 95, 111, 102, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 104, 108, 41, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 109, 117, 115, 105, 99, 95, 116, 105, 109, 105, 110, 103, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 109, 117, 115, 105, 99, 95, 115, 116, 97, 114, 116, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 41, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 120, 111, 114, 32, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 99, 111, 117, 110, 116, 101, 114, 41, 44, 97, 10, 9, 105, 110, 99, 32, 97, 10, 9, 108, 100, 32, 40, 109, 117, 115, 105, 99, 95, 112, 108, 97, 121, 105, 110, 103, 41, 44, 97, 10, 32, 32, 105, 102, 32, 67, 86, 66, 65, 83, 73, 67, 95, 66, 65, 78, 75, 95, 83, 87, 73, 84, 67, 72, 73, 78, 71, 10, 32, 32, 32, 32, 105, 102, 32, 67, 79, 76, 69, 67, 79, 10, 9, 108, 100, 32, 97, 44, 40, 36, 102, 102, 98, 102, 41, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 36, 55, 102, 98, 102, 41, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 77, 83, 88, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 36, 98, 102, 102, 102, 41, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 109, 117, 115, 105, 99, 95, 98, 97, 110, 107, 41, 44, 97, 10, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 112, 32, 110, 109, 105, 95, 111, 110, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 71, 101, 110, 101, 114, 97, 116, 101, 115, 32, 109, 117, 115, 105, 99, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 10, 109, 117, 115, 105, 99, 95, 103, 101, 110, 101, 114, 97, 116, 101, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 97, 117, 100, 105, 111, 95, 109, 105, 120, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 110, 100, 32, 36, 99, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 114, 32, 36, 51, 56, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 97, 117, 100, 105, 111, 95, 109, 105, 120, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 120, 111, 114, 32, 97, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 84, 117, 114, 110, 32, 111, 102, 102, 32, 97, 108, 108, 32, 116, 104, 101, 32, 115, 111, 117, 110, 100, 32, 99, 104, 97, 110, 110, 101, 108, 115, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 108, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 97, 117, 100, 105, 111, 95, 118, 111, 108, 49, 41, 44, 104, 108, 32, 32, 32, 59, 32, 97, 117, 100, 105, 111, 95, 118, 111, 108, 49, 47, 97, 117, 100, 105, 111, 95, 118, 111, 108, 50, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 97, 117, 100, 105, 111, 95, 118, 111, 108, 51, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 36, 102, 102, 10, 9, 108, 100, 32, 40, 97, 117, 100, 105, 111, 95, 118, 111, 108, 52, 104, 119, 41, 44, 97, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 99, 111, 117, 110, 116, 101, 114, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 114, 32, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 112, 32, 110, 122, 44, 46, 54, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 108, 44, 40, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 41, 10, 46, 49, 53, 58, 32, 32, 32, 32, 112, 117, 115, 104, 32, 104, 108, 10, 32, 32, 105, 102, 32, 67, 86, 66, 65, 83, 73, 67, 95, 66, 65, 78, 75, 95, 83, 87, 73, 84, 67, 72, 73, 78, 71, 10, 9, 108, 100, 32, 97, 44, 40, 109, 117, 115, 105, 99, 95, 98, 97, 110, 107, 41, 10, 32, 32, 32, 32, 105, 102, 32, 67, 79, 76, 69, 67, 79, 10, 9, 108, 100, 32, 101, 44, 97, 10, 9, 108, 100, 32, 100, 44, 36, 102, 102, 10, 9, 108, 100, 32, 97, 44, 40, 100, 101, 41, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 36, 102, 102, 102, 101, 41, 44, 97, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 77, 83, 88, 10, 9, 108, 100, 32, 40, 36, 55, 48, 48, 48, 41, 44, 97, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 44, 40, 104, 108, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 99, 44, 40, 104, 108, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 100, 44, 40, 104, 108, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 101, 44, 40, 104, 108, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 111, 112, 32, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 109, 117, 115, 105, 99, 95, 116, 105, 109, 105, 110, 103, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 108, 99, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 99, 44, 46, 49, 54, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 101, 44, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 100, 44, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 46, 49, 55, 10, 10, 46, 49, 54, 58, 32, 32, 32, 32, 114, 108, 99, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 99, 44, 46, 49, 55, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 101, 44, 48, 10, 46, 49, 55, 58, 32, 32, 32, 32, 108, 100, 32, 97, 44, 98, 9, 9, 59, 32, 82, 101, 97, 100, 32, 102, 105, 114, 115, 116, 32, 98, 121, 116, 101, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 112, 32, 45, 50, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 69, 110, 100, 32, 111, 102, 32, 109, 117, 115, 105, 99, 63, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 46, 49, 57, 32, 32, 32, 32, 32, 32, 32, 59, 32, 78, 111, 44, 32, 106, 117, 109, 112, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 120, 111, 114, 32, 97, 9, 9, 59, 32, 75, 101, 101, 112, 32, 97, 116, 32, 115, 97, 109, 101, 32, 112, 108, 97, 99, 101, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 109, 117, 115, 105, 99, 95, 112, 108, 97, 121, 105, 110, 103, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 10, 10, 46, 49, 57, 58, 32, 32, 32, 32, 99, 112, 32, 45, 51, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 82, 101, 112, 101, 97, 116, 32, 109, 117, 115, 105, 99, 63, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 112, 32, 110, 122, 44, 46, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 108, 44, 40, 109, 117, 115, 105, 99, 95, 115, 116, 97, 114, 116, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 46, 49, 53, 10, 10, 46, 48, 58, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 109, 117, 115, 105, 99, 95, 116, 105, 109, 105, 110, 103, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 110, 100, 32, 36, 51, 102, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 82, 101, 115, 116, 97, 114, 116, 32, 110, 111, 116, 101, 32, 116, 105, 109, 101, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 99, 111, 117, 110, 116, 101, 114, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 98, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 112, 32, 36, 51, 102, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 83, 117, 115, 116, 97, 105, 110, 63, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 122, 44, 46, 49, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 108, 99, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 108, 99, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 110, 100, 32, 51, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 109, 117, 115, 105, 99, 95, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 49, 41, 44, 97, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 98, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 110, 100, 32, 36, 51, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 49, 41, 44, 97, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 120, 111, 114, 32, 97, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 49, 41, 44, 97, 32, 32, 32, 32, 10, 46, 49, 58, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 99, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 112, 32, 36, 51, 102, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 122, 44, 46, 50, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 108, 99, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 108, 99, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 110, 100, 32, 51, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 109, 117, 115, 105, 99, 95, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 50, 41, 44, 97, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 110, 100, 32, 36, 51, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 50, 41, 44, 97, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 120, 111, 114, 32, 97, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 50, 41, 44, 97, 32, 32, 32, 32, 10, 46, 50, 58, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 100, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 112, 32, 36, 51, 102, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 122, 44, 46, 51, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 108, 99, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 108, 99, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 110, 100, 32, 51, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 109, 117, 115, 105, 99, 95, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 51, 41, 44, 97, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 110, 100, 32, 36, 51, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 51, 41, 44, 97, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 120, 111, 114, 32, 97, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 51, 41, 44, 97, 32, 32, 32, 32, 10, 46, 51, 58, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 101, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 109, 117, 115, 105, 99, 95, 100, 114, 117, 109, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 120, 111, 114, 32, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 52, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 109, 117, 115, 105, 99, 95, 116, 105, 109, 105, 110, 103, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 110, 100, 32, 36, 99, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 46, 49, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 104, 108, 10, 46, 49, 52, 58, 32, 32, 32, 32, 108, 100, 32, 40, 109, 117, 115, 105, 99, 95, 112, 111, 105, 110, 116, 101, 114, 41, 44, 104, 108, 10, 10, 46, 54, 58, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 49, 41, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 114, 32, 97, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 122, 44, 46, 55, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 99, 44, 40, 109, 117, 115, 105, 99, 95, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 49, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 50, 102, 114, 101, 113, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 49, 41, 44, 104, 108, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 97, 117, 100, 105, 111, 95, 118, 111, 108, 49, 41, 44, 97, 10, 10, 46, 55, 58, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 50, 41, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 114, 32, 97, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 122, 44, 46, 56, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 99, 44, 40, 109, 117, 115, 105, 99, 95, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 50, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 50, 102, 114, 101, 113, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 50, 41, 44, 104, 108, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 97, 117, 100, 105, 111, 95, 118, 111, 108, 50, 41, 44, 97, 10, 10, 46, 56, 58, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 51, 41, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 114, 32, 97, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 122, 44, 46, 57, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 99, 44, 40, 109, 117, 115, 105, 99, 95, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 95, 51, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 50, 102, 114, 101, 113, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 51, 41, 44, 104, 108, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 97, 117, 100, 105, 111, 95, 118, 111, 108, 51, 41, 44, 97, 10, 10, 46, 57, 58, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 109, 117, 115, 105, 99, 95, 100, 114, 117, 109, 41, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 114, 32, 97, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 122, 44, 46, 52, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 101, 99, 32, 97, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 49, 32, 45, 32, 76, 111, 110, 103, 32, 100, 114, 117, 109, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 46, 53, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 52, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 112, 32, 51, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 112, 32, 110, 99, 44, 46, 52, 10, 46, 49, 48, 58, 32, 32, 32, 32, 108, 100, 32, 97, 44, 53, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 97, 117, 100, 105, 111, 95, 110, 111, 105, 115, 101, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 101, 110, 97, 98, 108, 101, 95, 100, 114, 117, 109, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 46, 52, 10, 10, 46, 53, 58, 32, 32, 32, 32, 32, 100, 101, 99, 32, 97, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 50, 32, 45, 32, 83, 104, 111, 114, 116, 32, 100, 117, 114, 109, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 46, 49, 49, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 52, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 114, 32, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 112, 32, 110, 122, 44, 46, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 56, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 97, 117, 100, 105, 111, 95, 110, 111, 105, 115, 101, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 101, 110, 97, 98, 108, 101, 95, 100, 114, 117, 109, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 46, 52, 10, 10, 46, 49, 49, 58, 32, 32, 32, 32, 59, 100, 101, 99, 32, 97, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 51, 32, 45, 32, 82, 111, 108, 108, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 106, 112, 32, 110, 122, 44, 46, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 109, 117, 115, 105, 99, 95, 116, 105, 109, 105, 110, 103, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 110, 100, 32, 36, 51, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 114, 99, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 52, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 112, 32, 50, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 112, 32, 99, 44, 46, 49, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 112, 32, 98, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 112, 32, 99, 44, 46, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 101, 99, 32, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 101, 99, 32, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 112, 32, 98, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 112, 32, 99, 44, 46, 49, 48, 10, 46, 52, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 49, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 112, 32, 36, 49, 56, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 112, 32, 110, 122, 44, 36, 43, 53, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 117, 98, 32, 36, 48, 56, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 49, 41, 44, 97, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 50, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 112, 32, 36, 49, 56, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 112, 32, 110, 122, 44, 36, 43, 53, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 117, 98, 32, 36, 48, 56, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 50, 41, 44, 97, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 51, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 112, 32, 36, 49, 56, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 112, 32, 110, 122, 44, 36, 43, 53, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 117, 98, 32, 36, 48, 56, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 51, 41, 44, 97, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 108, 44, 109, 117, 115, 105, 99, 95, 99, 111, 117, 110, 116, 101, 114, 95, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 40, 104, 108, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 108, 44, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 95, 99, 111, 117, 110, 116, 101, 114, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 101, 99, 32, 40, 104, 108, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 67, 111, 110, 118, 101, 114, 116, 115, 32, 110, 111, 116, 101, 32, 116, 111, 32, 102, 114, 101, 113, 117, 101, 110, 99, 121, 46, 10, 32, 9, 59, 32, 73, 110, 112, 117, 116, 58, 10, 9, 59, 32, 32, 32, 65, 32, 61, 32, 78, 111, 116, 101, 32, 40, 49, 45, 54, 50, 41, 46, 10, 9, 59, 32, 32, 32, 66, 32, 61, 32, 73, 110, 115, 116, 114, 117, 109, 101, 110, 116, 32, 99, 111, 117, 110, 116, 101, 114, 46, 10, 9, 59, 32, 32, 32, 67, 32, 61, 32, 73, 110, 115, 116, 114, 117, 109, 101, 110, 116, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 79, 117, 116, 112, 117, 116, 58, 10, 9, 59, 32, 32, 32, 72, 76, 32, 61, 32, 70, 114, 101, 113, 117, 101, 110, 99, 121, 46, 10, 9, 59, 32, 32, 32, 65, 32, 61, 32, 86, 111, 108, 117, 109, 101, 46, 10, 9, 59, 10, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 50, 102, 114, 101, 113, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 97, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 101, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 100, 44, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 108, 44, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 115, 95, 116, 97, 98, 108, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 104, 108, 44, 100, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 104, 108, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 44, 40, 104, 108, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 108, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 114, 32, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 112, 32, 122, 44, 109, 117, 115, 105, 99, 95, 112, 105, 97, 110, 111, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 101, 99, 32, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 112, 32, 122, 44, 109, 117, 115, 105, 99, 95, 99, 108, 97, 114, 105, 110, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 101, 99, 32, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 112, 32, 122, 44, 109, 117, 115, 105, 99, 95, 102, 108, 117, 116, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 66, 97, 115, 115, 32, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 10, 109, 117, 115, 105, 99, 95, 98, 97, 115, 115, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 104, 108, 44, 104, 108, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 80, 105, 97, 110, 111, 32, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 10, 109, 117, 115, 105, 99, 95, 112, 105, 97, 110, 111, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 98, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 97, 44, 46, 49, 38, 50, 53, 53, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 99, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 99, 32, 97, 44, 46, 49, 62, 62, 56, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 117, 98, 32, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 98, 99, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 10, 10, 46, 49, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 49, 50, 44, 49, 49, 44, 49, 49, 44, 49, 48, 44, 49, 48, 44, 57, 44, 57, 44, 56, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 56, 44, 55, 44, 55, 44, 54, 44, 54, 44, 53, 44, 53, 44, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 52, 44, 52, 44, 53, 44, 53, 44, 52, 44, 52, 44, 51, 44, 51, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 67, 108, 97, 114, 105, 110, 101, 116, 32, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 10, 109, 117, 115, 105, 99, 95, 99, 108, 97, 114, 105, 110, 101, 116, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 98, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 97, 44, 46, 49, 38, 50, 53, 53, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 99, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 99, 32, 97, 44, 46, 49, 62, 62, 56, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 117, 98, 32, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 98, 99, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 101, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 108, 99, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 98, 99, 32, 97, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 100, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 104, 108, 44, 100, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 108, 32, 104, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 114, 32, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 112, 32, 110, 99, 44, 46, 50, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 104, 108, 10, 46, 50, 58, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 97, 44, 50, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 99, 44, 97, 10, 9, 106, 114, 32, 110, 99, 44, 36, 43, 51, 10, 9, 105, 110, 99, 32, 98, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 98, 99, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 10, 10, 46, 49, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 48, 44, 48, 44, 48, 44, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 45, 50, 44, 45, 52, 44, 45, 50, 44, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 50, 44, 52, 44, 50, 44, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 45, 50, 44, 45, 52, 44, 45, 50, 44, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 50, 44, 52, 44, 50, 44, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 45, 50, 44, 45, 52, 44, 45, 50, 44, 48, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 49, 51, 44, 49, 52, 44, 49, 52, 44, 49, 51, 44, 49, 51, 44, 49, 50, 44, 49, 50, 44, 49, 50, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 49, 49, 44, 49, 49, 44, 49, 49, 44, 49, 49, 44, 49, 50, 44, 49, 50, 44, 49, 50, 44, 49, 50, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 49, 49, 44, 49, 49, 44, 49, 49, 44, 49, 49, 44, 49, 50, 44, 49, 50, 44, 49, 50, 44, 49, 50, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 70, 108, 117, 116, 101, 32, 105, 110, 115, 116, 114, 117, 109, 101, 110, 116, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 10, 109, 117, 115, 105, 99, 95, 102, 108, 117, 116, 101, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 98, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 97, 44, 46, 49, 38, 50, 53, 53, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 99, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 99, 32, 97, 44, 46, 49, 62, 62, 56, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 117, 98, 32, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 98, 99, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 101, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 108, 99, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 98, 99, 32, 97, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 100, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 104, 108, 44, 100, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 97, 44, 50, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 99, 44, 97, 10, 9, 106, 114, 32, 110, 99, 44, 36, 43, 51, 10, 9, 105, 110, 99, 32, 98, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 98, 99, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 10, 10, 46, 49, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 48, 44, 48, 44, 48, 44, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 48, 44, 49, 44, 50, 44, 49, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 48, 44, 49, 44, 50, 44, 49, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 48, 44, 49, 44, 50, 44, 49, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 48, 44, 49, 44, 50, 44, 49, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 48, 44, 49, 44, 50, 44, 49, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 49, 48, 44, 49, 50, 44, 49, 51, 44, 49, 51, 44, 49, 50, 44, 49, 50, 44, 49, 50, 44, 49, 50, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 49, 49, 44, 49, 49, 44, 49, 49, 44, 49, 49, 44, 49, 48, 44, 49, 48, 44, 49, 48, 44, 49, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 49, 49, 44, 49, 49, 44, 49, 49, 44, 49, 49, 44, 49, 48, 44, 49, 48, 44, 49, 48, 44, 49, 48, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 69, 109, 105, 116, 32, 115, 111, 117, 110, 100, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 10, 109, 117, 115, 105, 99, 95, 104, 97, 114, 100, 119, 97, 114, 101, 58, 10, 32, 32, 32, 32, 105, 102, 32, 67, 79, 76, 69, 67, 79, 43, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 43, 83, 79, 82, 68, 43, 77, 69, 77, 79, 84, 69, 67, 72, 43, 80, 86, 50, 48, 48, 48, 10, 9, 108, 100, 32, 97, 44, 40, 109, 117, 115, 105, 99, 95, 109, 111, 100, 101, 41, 10, 9, 99, 112, 32, 52, 9, 9, 59, 32, 80, 76, 65, 89, 32, 83, 73, 77, 80, 76, 69, 63, 10, 9, 106, 114, 32, 99, 44, 46, 55, 9, 9, 59, 32, 89, 101, 115, 44, 32, 106, 117, 109, 112, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 97, 117, 100, 105, 111, 95, 118, 111, 108, 50, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 114, 32, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 112, 32, 110, 122, 44, 46, 55, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 97, 117, 100, 105, 111, 95, 118, 111, 108, 51, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 114, 32, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 112, 32, 122, 44, 46, 55, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 97, 117, 100, 105, 111, 95, 118, 111, 108, 50, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 120, 111, 114, 32, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 97, 117, 100, 105, 111, 95, 118, 111, 108, 51, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 108, 44, 40, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 51, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 50, 41, 44, 104, 108, 10, 46, 55, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 108, 44, 40, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 49, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 112, 32, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 57, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 112, 32, 110, 99, 44, 46, 49, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 110, 100, 32, 36, 48, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 114, 32, 36, 56, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 80, 83, 71, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 10, 9, 105, 110, 32, 97, 44, 40, 36, 48, 51, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 104, 108, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 104, 108, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 104, 108, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 104, 108, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 80, 83, 71, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 10, 9, 105, 110, 32, 97, 44, 40, 36, 48, 51, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 97, 117, 100, 105, 111, 95, 118, 111, 108, 49, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 97, 44, 97, 121, 50, 115, 110, 38, 50, 53, 53, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 108, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 99, 32, 97, 44, 97, 121, 50, 115, 110, 62, 62, 56, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 117, 98, 32, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 104, 108, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 114, 32, 36, 57, 48, 10, 46, 49, 58, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 80, 83, 71, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 10, 9, 105, 110, 32, 97, 44, 40, 36, 48, 51, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 108, 44, 40, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 50, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 112, 32, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 98, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 112, 32, 110, 99, 44, 46, 50, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 110, 100, 32, 36, 48, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 114, 32, 36, 97, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 80, 83, 71, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 10, 9, 105, 110, 32, 97, 44, 40, 36, 48, 51, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 104, 108, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 104, 108, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 104, 108, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 104, 108, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 80, 83, 71, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 10, 9, 105, 110, 32, 97, 44, 40, 36, 48, 51, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 97, 117, 100, 105, 111, 95, 118, 111, 108, 50, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 97, 44, 97, 121, 50, 115, 110, 38, 50, 53, 53, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 108, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 99, 32, 97, 44, 97, 121, 50, 115, 110, 62, 62, 56, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 117, 98, 32, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 104, 108, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 114, 32, 36, 98, 48, 10, 46, 50, 58, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 80, 83, 71, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 10, 9, 105, 110, 32, 97, 44, 40, 36, 48, 51, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 9, 108, 100, 32, 97, 44, 40, 109, 117, 115, 105, 99, 95, 109, 111, 100, 101, 41, 10, 9, 99, 112, 32, 52, 9, 9, 59, 32, 80, 76, 65, 89, 32, 83, 73, 77, 80, 76, 69, 63, 10, 9, 106, 114, 32, 99, 44, 46, 54, 9, 9, 59, 32, 89, 101, 115, 44, 32, 106, 117, 109, 112, 46, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 108, 44, 40, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 51, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 112, 32, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 100, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 112, 32, 110, 99, 44, 46, 51, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 110, 100, 32, 36, 48, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 114, 32, 36, 99, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 80, 83, 71, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 10, 9, 105, 110, 32, 97, 44, 40, 36, 48, 51, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 104, 108, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 104, 108, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 104, 108, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 104, 108, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 80, 83, 71, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 10, 9, 105, 110, 32, 97, 44, 40, 36, 48, 51, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 97, 117, 100, 105, 111, 95, 118, 111, 108, 51, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 97, 44, 97, 121, 50, 115, 110, 38, 50, 53, 53, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 108, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 99, 32, 97, 44, 97, 121, 50, 115, 110, 62, 62, 56, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 117, 98, 32, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 104, 108, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 114, 32, 36, 100, 48, 10, 46, 51, 58, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 80, 83, 71, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 10, 9, 105, 110, 32, 97, 44, 40, 36, 48, 51, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 46, 54, 58, 10, 9, 108, 100, 32, 97, 44, 40, 109, 117, 115, 105, 99, 95, 109, 111, 100, 101, 41, 10, 9, 97, 110, 100, 32, 49, 9, 9, 59, 32, 78, 79, 32, 68, 82, 85, 77, 83, 63, 10, 9, 114, 101, 116, 32, 122, 9, 9, 59, 32, 89, 101, 115, 44, 32, 114, 101, 116, 117, 114, 110, 46, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 97, 117, 100, 105, 111, 95, 118, 111, 108, 52, 104, 119, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 97, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 122, 44, 46, 52, 32, 32, 32, 32, 32, 32, 32]);
fileData5.push.apply(fileData5, [32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 97, 117, 100, 105, 111, 95, 110, 111, 105, 115, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 112, 32, 49, 54, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 44, 36, 101, 99, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 112, 32, 99, 44, 46, 53, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 44, 36, 101, 100, 32, 32, 32, 32, 32, 32, 32, 32, 10, 59, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 44, 36, 101, 101, 32, 32, 32, 32, 32, 32, 32, 32, 10, 46, 53, 58, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 97, 117, 100, 105, 111, 95, 99, 111, 110, 116, 114, 111, 108, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 112, 32, 98, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 122, 44, 46, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 98, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 97, 117, 100, 105, 111, 95, 99, 111, 110, 116, 114, 111, 108, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 80, 83, 71, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 10, 9, 105, 110, 32, 97, 44, 40, 36, 48, 51, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 46, 52, 58, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 97, 117, 100, 105, 111, 95, 118, 111, 108, 52, 104, 119, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 80, 83, 71, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 10, 9, 105, 110, 32, 97, 44, 40, 36, 48, 51, 41, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 77, 83, 88, 43, 83, 86, 73, 43, 69, 73, 78, 83, 84, 69, 73, 78, 43, 78, 65, 66, 85, 10, 9, 108, 100, 32, 97, 44, 40, 109, 117, 115, 105, 99, 95, 109, 111, 100, 101, 41, 10, 9, 99, 112, 32, 52, 9, 9, 59, 32, 80, 76, 65, 89, 32, 83, 73, 77, 80, 76, 69, 63, 10, 9, 106, 114, 32, 99, 44, 46, 56, 9, 9, 59, 32, 89, 101, 115, 44, 32, 106, 117, 109, 112, 46, 9, 10, 9, 108, 100, 32, 104, 108, 44, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 49, 10, 9, 108, 100, 32, 98, 99, 44, 36, 48, 98, 48, 48, 10, 9, 108, 100, 32, 97, 44, 99, 10, 9, 108, 100, 32, 101, 44, 40, 104, 108, 41, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 80, 83, 71, 10, 9, 105, 110, 99, 32, 104, 108, 10, 9, 105, 110, 99, 32, 99, 10, 9, 100, 106, 110, 122, 32, 36, 45, 55, 10, 9, 114, 101, 116, 10, 46, 56, 58, 10, 9, 108, 100, 32, 104, 108, 44, 97, 117, 100, 105, 111, 95, 102, 114, 101, 113, 49, 10, 9, 108, 100, 32, 98, 99, 44, 36, 48, 52, 48, 48, 10, 9, 108, 100, 32, 97, 44, 99, 10, 9, 108, 100, 32, 101, 44, 40, 104, 108, 41, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 80, 83, 71, 10, 9, 105, 110, 99, 32, 104, 108, 10, 9, 105, 110, 99, 32, 99, 10, 9, 100, 106, 110, 122, 32, 36, 45, 55, 10, 9, 105, 110, 99, 32, 104, 108, 10, 9, 105, 110, 99, 32, 104, 108, 10, 9, 105, 110, 99, 32, 99, 10, 9, 105, 110, 99, 32, 99, 10, 9, 108, 100, 32, 97, 44, 40, 109, 117, 115, 105, 99, 95, 109, 111, 100, 101, 41, 10, 9, 97, 110, 100, 32, 49, 10, 9, 106, 114, 32, 122, 44, 46, 57, 10, 9, 108, 100, 32, 97, 44, 99, 10, 9, 108, 100, 32, 101, 44, 40, 104, 108, 41, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 80, 83, 71, 10, 9, 105, 110, 99, 32, 104, 108, 10, 9, 105, 110, 99, 32, 99, 10, 9, 108, 100, 32, 97, 44, 99, 10, 9, 108, 100, 32, 101, 44, 40, 104, 108, 41, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 80, 83, 71, 10, 9, 105, 110, 99, 32, 104, 108, 10, 9, 105, 110, 99, 32, 99, 10, 9, 106, 114, 32, 46, 49, 48, 10, 46, 57, 58, 9, 105, 110, 99, 32, 104, 108, 10, 9, 105, 110, 99, 32, 99, 10, 9, 105, 110, 99, 32, 104, 108, 10, 9, 105, 110, 99, 32, 99, 10, 46, 49, 48, 58, 9, 108, 100, 32, 98, 44, 36, 48, 50, 10, 9, 108, 100, 32, 97, 44, 99, 10, 9, 108, 100, 32, 101, 44, 40, 104, 108, 41, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 80, 83, 71, 10, 9, 105, 110, 99, 32, 104, 108, 10, 9, 105, 110, 99, 32, 99, 10, 9, 100, 106, 110, 122, 32, 36, 45, 55, 10, 9, 114, 101, 116, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 69, 110, 97, 98, 108, 101, 32, 100, 114, 117, 109, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 10, 101, 110, 97, 98, 108, 101, 95, 100, 114, 117, 109, 58, 10, 32, 32, 32, 32, 105, 102, 32, 67, 79, 76, 69, 67, 79, 43, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 43, 83, 79, 82, 68, 43, 77, 69, 77, 79, 84, 69, 67, 72, 43, 80, 86, 50, 48, 48, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 102, 53, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 97, 117, 100, 105, 111, 95, 118, 111, 108, 52, 104, 119, 41, 44, 97, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 108, 44, 97, 117, 100, 105, 111, 95, 109, 105, 120, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 97, 117, 100, 105, 111, 95, 118, 111, 108, 50, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 114, 32, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 46, 49, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 49, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 97, 117, 100, 105, 111, 95, 118, 111, 108, 50, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 116, 32, 49, 44, 40, 104, 108, 41, 10, 46, 49, 58, 32, 32, 32, 32, 32, 114, 101, 115, 32, 52, 44, 40, 104, 108, 41, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 10, 9, 59, 32, 77, 117, 115, 105, 99, 97, 108, 32, 110, 111, 116, 101, 115, 32, 116, 97, 98, 108, 101, 46, 10, 9, 59, 10, 109, 117, 115, 105, 99, 95, 110, 111, 116, 101, 115, 95, 116, 97, 98, 108, 101, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 83, 105, 108, 101, 110, 99, 101, 32, 45, 32, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 119, 32, 48, 10, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 43, 69, 73, 78, 83, 84, 69, 73, 78, 10, 9, 59, 32, 86, 97, 108, 117, 101, 115, 32, 102, 111, 114, 32, 52, 46, 48, 48, 32, 109, 104, 122, 46, 10, 9, 59, 32, 50, 110, 100, 32, 111, 99, 116, 97, 118, 101, 32, 45, 32, 73, 110, 100, 101, 120, 32, 49, 10, 9, 100, 119, 32, 49, 57, 49, 49, 44, 49, 56, 48, 52, 44, 49, 55, 48, 51, 44, 49, 54, 48, 55, 44, 49, 53, 49, 55, 44, 49, 52, 51, 50, 44, 49, 51, 53, 49, 44, 49, 50, 55, 54, 44, 49, 50, 48, 52, 44, 49, 49, 51, 54, 44, 49, 48, 55, 51, 44, 49, 48, 49, 50, 10, 9, 59, 32, 51, 114, 100, 32, 111, 99, 116, 97, 118, 101, 32, 45, 32, 73, 110, 100, 101, 120, 32, 49, 51, 10, 9, 100, 119, 32, 57, 53, 54, 44, 57, 48, 50, 44, 56, 53, 49, 44, 56, 48, 52, 44, 55, 53, 56, 44, 55, 49, 54, 44, 54, 55, 54, 44, 54, 51, 56, 44, 54, 48, 50, 44, 53, 54, 56, 44, 53, 51, 54, 44, 53, 48, 54, 10, 9, 59, 32, 52, 116, 104, 32, 111, 99, 116, 97, 118, 101, 32, 45, 32, 73, 110, 100, 101, 120, 32, 50, 53, 10, 9, 100, 119, 32, 52, 55, 56, 44, 52, 53, 49, 44, 52, 50, 54, 44, 52, 48, 50, 44, 51, 55, 57, 44, 51, 53, 56, 44, 51, 51, 56, 44, 51, 49, 57, 44, 51, 48, 49, 44, 50, 56, 52, 44, 50, 54, 56, 44, 50, 53, 51, 10, 9, 59, 32, 53, 116, 104, 32, 111, 99, 116, 97, 118, 101, 32, 45, 32, 73, 110, 100, 101, 120, 32, 51, 55, 10, 9, 100, 119, 32, 50, 51, 57, 44, 50, 50, 53, 44, 50, 49, 51, 44, 50, 48, 49, 44, 49, 57, 48, 44, 49, 55, 57, 44, 49, 54, 57, 44, 49, 53, 57, 44, 49, 53, 48, 44, 49, 52, 50, 44, 49, 51, 52, 44, 49, 50, 55, 10, 9, 59, 32, 54, 116, 104, 32, 111, 99, 116, 97, 118, 101, 32, 45, 32, 73, 110, 100, 101, 120, 32, 52, 57, 10, 9, 100, 119, 32, 49, 49, 57, 44, 49, 49, 51, 44, 49, 48, 54, 44, 49, 48, 48, 44, 57, 53, 44, 56, 57, 44, 56, 52, 44, 56, 48, 44, 55, 53, 44, 55, 49, 44, 54, 55, 44, 54, 51, 10, 9, 59, 32, 55, 116, 104, 32, 111, 99, 116, 97, 118, 101, 32, 45, 32, 73, 110, 100, 101, 120, 32, 54, 49, 10, 9, 100, 119, 32, 54, 48, 44, 53, 54, 44, 53, 51, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 9, 59, 32, 86, 97, 108, 117, 101, 115, 32, 102, 111, 114, 32, 51, 46, 53, 56, 32, 109, 104, 122, 46, 10, 9, 59, 32, 50, 110, 100, 32, 111, 99, 116, 97, 118, 101, 32, 45, 32, 73, 110, 100, 101, 120, 32, 49, 10, 9, 100, 119, 32, 49, 55, 49, 48, 44, 49, 54, 49, 52, 44, 49, 53, 50, 52, 44, 49, 52, 51, 56, 44, 49, 51, 53, 55, 44, 49, 50, 56, 49, 44, 49, 50, 48, 57, 44, 49, 49, 52, 49, 44, 49, 48, 55, 55, 44, 49, 48, 49, 55, 44, 57, 54, 48, 44, 57, 48, 54, 10, 9, 59, 32, 51, 114, 100, 32, 111, 99, 116, 97, 118, 101, 32, 45, 32, 73, 110, 100, 101, 120, 32, 49, 51, 10, 9, 100, 119, 32, 56, 53, 53, 44, 56, 48, 55, 44, 55, 54, 50, 44, 55, 49, 57, 44, 54, 55, 57, 44, 54, 52, 49, 44, 54, 48, 53, 44, 53, 55, 49, 44, 53, 51, 57, 44, 53, 48, 56, 44, 52, 56, 48, 44, 52, 53, 51, 10, 9, 59, 32, 52, 116, 104, 32, 111, 99, 116, 97, 118, 101, 32, 45, 32, 73, 110, 100, 101, 120, 32, 50, 53, 10, 9, 100, 119, 32, 52, 50, 56, 44, 52, 48, 52, 44, 51, 56, 49, 44, 51, 54, 48, 44, 51, 51, 57, 44, 51, 50, 48, 44, 51, 48, 50, 44, 50, 56, 53, 44, 50, 54, 57, 44, 50, 53, 52, 44, 50, 52, 48, 44, 50, 50, 54, 10, 9, 59, 32, 53, 116, 104, 32, 111, 99, 116, 97, 118, 101, 32, 45, 32, 73, 110, 100, 101, 120, 32, 51, 55, 10, 9, 100, 119, 32, 50, 49, 52, 44, 50, 48, 50, 44, 49, 57, 48, 44, 49, 56, 48, 44, 49, 55, 48, 44, 49, 54, 48, 44, 49, 53, 49, 44, 49, 52, 51, 44, 49, 51, 53, 44, 49, 50, 55, 44, 49, 50, 48, 44, 49, 49, 51, 10, 9, 59, 32, 54, 116, 104, 32, 111, 99, 116, 97, 118, 101, 32, 45, 32, 73, 110, 100, 101, 120, 32, 52, 57, 10, 9, 100, 119, 32, 49, 48, 55, 44, 49, 48, 49, 44, 57, 53, 44, 57, 48, 44, 56, 53, 44, 56, 48, 44, 55, 54, 44, 55, 49, 44, 54, 55, 44, 54, 52, 44, 54, 48, 44, 53, 55, 10, 9, 59, 32, 55, 116, 104, 32, 111, 99, 116, 97, 118, 101, 32, 45, 32, 73, 110, 100, 101, 120, 32, 54, 49, 10, 9, 100, 119, 32, 53, 51, 44, 53, 48, 44, 52, 56, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 32, 32, 32, 32, 105, 102, 32, 67, 79, 76, 69, 67, 79, 43, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 43, 83, 79, 82, 68, 43, 77, 69, 77, 79, 84, 69, 67, 72, 43, 80, 86, 50, 48, 48, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 67, 111, 110, 118, 101, 114, 116, 115, 32, 65, 89, 45, 51, 45, 56, 57, 49, 48, 32, 118, 111, 108, 117, 109, 101, 32, 116, 111, 32, 83, 78, 55, 54, 52, 56, 57, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 10, 97, 121, 50, 115, 110, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 98, 32, 36, 48, 102, 44, 36, 48, 102, 44, 36, 48, 102, 44, 36, 48, 101, 44, 36, 48, 101, 44, 36, 48, 101, 44, 36, 48, 100, 44, 36, 48, 98, 44, 36, 48, 97, 44, 36, 48, 56, 44, 36, 48, 55, 44, 36, 48, 53, 44, 36, 48, 52, 44, 36, 48, 51, 44, 36, 48, 49, 44, 36, 48, 48, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 109, 117, 115, 105, 99, 95, 115, 105, 108, 101, 110, 99, 101, 58, 10, 9, 100, 98, 32, 56, 10, 9, 100, 98, 32, 48, 44, 48, 44, 48, 44, 48, 10, 9, 100, 98, 32, 45, 50, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 32, 32, 32, 32, 105, 102, 32, 67, 86, 66, 65, 83, 73, 67, 95, 67, 79, 77, 80, 82, 69, 83, 83, 73, 79, 78, 10, 100, 101, 102, 105, 110, 101, 95, 99, 104, 97, 114, 95, 117, 110, 112, 97, 99, 107, 58, 10, 9, 101, 120, 32, 100, 101, 44, 104, 108, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 112, 111, 112, 32, 104, 108, 10, 9, 112, 117, 115, 104, 32, 97, 102, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 50, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 52, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 56, 10, 32, 32, 32, 32, 105, 102, 32, 83, 77, 83, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 32, 32, 32, 32, 32, 32, 32, 59, 32, 120, 49, 54, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 32, 32, 32, 32, 32, 32, 32, 59, 32, 120, 51, 50, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 101, 120, 32, 100, 101, 44, 104, 108, 10, 32, 32, 32, 32, 105, 102, 32, 83, 77, 83, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 9, 108, 100, 32, 97, 44, 40, 109, 111, 100, 101, 41, 10, 9, 97, 110, 100, 32, 56, 10, 9, 106, 112, 32, 122, 44, 117, 110, 112, 97, 99, 107, 51, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 106, 112, 32, 117, 110, 112, 97, 99, 107, 10, 10, 32, 32, 32, 32, 105, 102, 32, 83, 77, 83, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 100, 101, 102, 105, 110, 101, 95, 99, 111, 108, 111, 114, 95, 117, 110, 112, 97, 99, 107, 58, 10, 9, 101, 120, 32, 100, 101, 44, 104, 108, 10, 9, 112, 111, 112, 32, 97, 102, 10, 9, 112, 111, 112, 32, 104, 108, 10, 9, 112, 117, 115, 104, 32, 97, 102, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 50, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 52, 10, 9, 97, 100, 100, 32, 104, 108, 44, 104, 108, 9, 59, 32, 120, 56, 10, 9, 101, 120, 32, 100, 101, 44, 104, 108, 10, 9, 115, 101, 116, 32, 53, 44, 100, 10, 117, 110, 112, 97, 99, 107, 51, 58, 10, 9, 99, 97, 108, 108, 32, 46, 49, 10, 9, 99, 97, 108, 108, 32, 46, 49, 10, 46, 49, 58, 10, 9, 112, 117, 115, 104, 32, 100, 101, 10, 9, 112, 117, 115, 104, 32, 104, 108, 10, 9, 99, 97, 108, 108, 32, 117, 110, 112, 97, 99, 107, 10, 9, 112, 111, 112, 32, 104, 108, 10, 9, 112, 111, 112, 32, 100, 101, 10, 9, 108, 100, 32, 97, 44, 100, 10, 9, 97, 100, 100, 32, 97, 44, 56, 9, 10, 9, 108, 100, 32, 100, 44, 97, 10, 9, 114, 101, 116, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 80, 108, 101, 116, 116, 101, 114, 45, 48, 46, 53, 99, 32, 100, 101, 99, 111, 109, 112, 114, 101, 115, 115, 111, 114, 32, 40, 88, 76, 50, 83, 32, 69, 110, 116, 101, 114, 116, 97, 105, 110, 109, 101, 110, 116, 32, 38, 32, 84, 101, 97, 109, 32, 66, 111, 109, 98, 97, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 59, 10, 117, 110, 112, 97, 99, 107, 58, 10, 59, 32, 73, 110, 105, 116, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 104, 108, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 104, 108, 10, 9, 101, 120, 120, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 100, 101, 44, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 97, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 108, 32, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 97, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 108, 32, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 97, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 108, 32, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 108, 32, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 108, 44, 46, 109, 111, 100, 101, 115, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 104, 108, 44, 100, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 99, 44, 40, 104, 108, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 44, 40, 104, 108, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 117, 115, 104, 32, 98, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 111, 112, 32, 105, 120, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 101, 44, 49, 10, 9, 101, 120, 120, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 105, 121, 44, 46, 108, 111, 111, 112, 10, 10, 59, 32, 77, 97, 105, 110, 32, 100, 101, 112, 97, 99, 107, 32, 108, 111, 111, 112, 10, 46, 108, 105, 116, 101, 114, 97, 108, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 97, 102, 44, 97, 102, 39, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 110, 109, 105, 95, 111, 102, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 104, 108, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 100, 101, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 87, 82, 84, 86, 82, 77, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 100, 101, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 100, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 110, 109, 105, 95, 111, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 97, 102, 44, 97, 102, 39, 10, 46, 108, 111, 111, 112, 58, 32, 32, 32, 97, 100, 100, 32, 97, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 122, 44, 46, 103, 101, 116, 98, 105, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 99, 44, 46, 108, 105, 116, 101, 114, 97, 108, 10, 10, 59, 32, 67, 111, 109, 112, 114, 101, 115, 115, 101, 100, 32, 100, 97, 116, 97, 10, 9, 101, 120, 120, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 44, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 108, 44, 101, 10, 46, 103, 101, 116, 108, 101, 110, 58, 32, 97, 100, 100, 32, 97, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 122, 44, 46, 103, 101, 116, 98, 105, 116, 101, 120, 120, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 99, 44, 46, 108, 101, 110, 111, 107, 10, 46, 108, 117, 115, 58, 32, 32, 32, 32, 97, 100, 100, 32, 97, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 122, 44, 46, 103, 101, 116, 98, 105, 116, 101, 120, 120, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 99, 32, 104, 108, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 32, 99, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 97, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 122, 44, 46, 103, 101, 116, 98, 105, 116, 101, 120, 120, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 99, 44, 46, 108, 101, 110, 111, 107, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 97, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 122, 44, 46, 103, 101, 116, 98, 105, 116, 101, 120, 120, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 99, 32, 104, 108, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 116, 32, 99, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 97, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 122, 44, 46, 103, 101, 116, 98, 105, 116, 101, 120, 120, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 99, 44, 46, 108, 117, 115, 10, 46, 108, 101, 110, 111, 107, 58, 32, 32, 105, 110, 99, 32, 104, 108, 10, 9, 101, 120, 120, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 99, 44, 40, 104, 108, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 44, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 55, 44, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 122, 44, 46, 111, 102, 102, 115, 111, 107, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 112, 32, 40, 105, 120, 41, 10, 10, 46, 109, 111, 100, 101, 54, 58, 32, 32, 97, 100, 100, 32, 97, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 122, 44, 46, 103, 101, 116, 98, 105, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 108, 32, 98, 10, 46, 109, 111, 100, 101, 53, 58, 32, 32, 97, 100, 100, 32, 97, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 122, 44, 46, 103, 101, 116, 98, 105, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 108, 32, 98, 10, 46, 109, 111, 100, 101, 52, 58, 32, 32, 97, 100, 100, 32, 97, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 122, 44, 46, 103, 101, 116, 98, 105, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 108, 32, 98, 10, 46, 109, 111, 100, 101, 51, 58, 32, 32, 97, 100, 100, 32, 97, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 122, 44, 46, 103, 101, 116, 98, 105, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 108, 32, 98, 10, 46, 109, 111, 100, 101, 50, 58, 32, 32, 97, 100, 100, 32, 97, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 122, 44, 46, 103, 101, 116, 98, 105, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 108, 32, 98, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 100, 100, 32, 97, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 122, 44, 46, 103, 101, 116, 98, 105, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 99, 44, 46, 111, 102, 102, 115, 111, 107, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 114, 32, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 98, 10, 32, 32, 32, 32, 32, 32, 32, 32, 114, 101, 115, 32, 55, 44, 99, 10, 46, 111, 102, 102, 115, 111, 107, 58, 32, 105, 110, 99, 32, 98, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 117, 115, 104, 32, 104, 108, 10, 9, 101, 120, 120, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 117, 115, 104, 32, 104, 108, 10, 9, 101, 120, 120, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 108, 44, 101, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 44, 100, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 98, 99, 32, 104, 108, 44, 98, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 111, 112, 32, 98, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 97, 102, 44, 97, 102, 39, 10, 46, 108, 111, 111, 112, 50, 58, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 110, 109, 105, 95, 111, 102, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 82, 68, 86, 82, 77, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 117, 110, 112, 97, 99, 107, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 100, 101, 44, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 87, 82, 84, 86, 82, 77, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 100, 101, 44, 104, 108, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 110, 109, 105, 95, 111, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 104, 108, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 54, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 100, 101, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 54, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 101, 99, 32, 98, 99, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 54, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 98, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 114, 32, 99, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 46, 108, 111, 111, 112, 50, 32, 32, 32, 32, 32, 59, 32, 49, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 101, 120, 32, 97, 102, 44, 97, 102, 39, 10, 32, 32, 32, 32, 32, 32, 32, 32, 112, 111, 112, 32, 104, 108, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 112, 32, 40, 105, 121, 41, 10, 10, 46, 103, 101, 116, 98, 105, 116, 58, 32, 108, 100, 32, 97, 44, 40, 104, 108, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 104, 108, 10, 9, 114, 108, 97, 10, 9, 114, 101, 116, 10, 10, 46, 103, 101, 116, 98, 105, 116, 101, 120, 120, 58, 10, 9, 101, 120, 120, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 104, 108, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 104, 108, 10, 9, 101, 120, 120, 10, 9, 114, 108, 97, 10, 9, 114, 101, 116, 10, 10, 46, 109, 111, 100, 101, 115, 58, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 119, 32, 32, 32, 32, 32, 32, 46, 111, 102, 102, 115, 111, 107, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 119, 32, 32, 32, 32, 32, 32, 46, 109, 111, 100, 101, 50, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 119, 32, 32, 32, 32, 32, 32, 46, 109, 111, 100, 101, 51, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 119, 32, 32, 32, 32, 32, 32, 46, 109, 111, 100, 101, 52, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 119, 32, 32, 32, 32, 32, 32, 46, 109, 111, 100, 101, 53, 10, 32, 32, 32, 32, 32, 32, 32, 32, 100, 119, 32, 32, 32, 32, 32, 32, 46, 109, 111, 100, 101, 54, 10, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 83, 84, 65, 82, 84, 58, 10, 32, 32, 32, 32, 105, 102, 32, 83, 86, 73, 43, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 10, 9, 105, 109, 32, 49, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 10, 90, 56, 48, 95, 67, 84, 67, 58, 9, 101, 113, 117, 32, 36, 48, 56, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 69, 73, 78, 83, 84, 69, 73, 78, 10, 90, 56, 48, 95, 67, 84, 67, 58, 9, 101, 113, 117, 32, 36, 50, 56, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 32, 32, 32, 32, 105, 102, 32, 69, 73, 78, 83, 84, 69, 73, 78, 43, 77, 69, 77, 79, 84, 69, 67, 72, 10, 9, 100, 105, 10, 9, 105, 109, 32, 50, 10, 9, 108, 100, 32, 97, 44, 114, 111, 109, 95, 115, 116, 97, 114, 116, 62, 62, 56, 10, 9, 108, 100, 32, 105, 44, 97, 10, 9, 108, 100, 32, 97, 44, 36, 48, 51, 9, 59, 32, 82, 101, 115, 101, 116, 32, 90, 56, 48, 32, 67, 84, 67, 10, 9, 111, 117, 116, 32, 40, 90, 56, 48, 95, 67, 84, 67, 43, 48, 41, 44, 97, 10, 9, 111, 117, 116, 32, 40, 90, 56, 48, 95, 67, 84, 67, 43, 49, 41, 44, 97, 10, 9, 111, 117, 116, 32, 40, 90, 56, 48, 95, 67, 84, 67, 43, 50, 41, 44, 97, 10, 9, 111, 117, 116, 32, 40, 90, 56, 48, 95, 67, 84, 67, 43, 51, 41, 44, 97, 10, 9, 111, 117, 116, 32, 40, 90, 56, 48, 95, 67, 84, 67, 43, 48, 41, 44, 97, 10, 9, 111, 117, 116, 32, 40, 90, 56, 48, 95, 67, 84, 67, 43, 49, 41, 44, 97, 10, 9, 111, 117, 116, 32, 40, 90, 56, 48, 95, 67, 84, 67, 43, 50, 41, 44, 97, 10, 9, 111, 117, 116, 32, 40, 90, 56, 48, 95, 67, 84, 67, 43, 51, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 36, 48, 56, 9, 59, 32, 73, 110, 116, 101, 114, 114, 117, 112, 116, 32, 118, 101, 99, 116, 111, 114, 32, 111, 102, 102, 115, 101, 116, 10, 9, 111, 117, 116, 32, 40, 90, 56, 48, 95, 67, 84, 67, 43, 48, 41, 44, 97, 9, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 10, 9, 108, 100, 32, 97, 44, 36, 50, 53, 9, 59, 32, 68, 105, 115, 97, 98, 108, 101, 32, 99, 104, 97, 110, 110, 101, 108, 32, 50, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 46, 10, 9, 111, 117, 116, 32, 40, 90, 56, 48, 95, 67, 84, 67, 43, 50, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 36, 57, 99, 10, 9, 111, 117, 116, 32, 40, 90, 56, 48, 95, 67, 84, 67, 43, 50, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 36, 50, 53, 9, 59, 32, 68, 105, 115, 97, 98, 108, 101, 32, 99, 104, 97, 110, 110, 101, 108, 32, 49, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 46, 10, 9, 111, 117, 116, 32, 40, 90, 56, 48, 95, 67, 84, 67, 43, 49, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 36, 57, 99, 10, 9, 111, 117, 116, 32, 40, 90, 56, 48, 95, 67, 84, 67, 43, 49, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 36, 99, 53, 9, 59, 32, 69, 110, 97, 98, 108, 101, 32, 99, 104, 97, 110, 110, 101, 108, 32, 48, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 32, 40, 86, 68, 80, 41, 46, 10, 9, 111, 117, 116, 32, 40, 90, 56, 48, 95, 67, 84, 67, 43, 48, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 36, 48, 49, 10, 9, 111, 117, 116, 32, 40, 90, 56, 48, 95, 67, 84, 67, 43, 48, 41, 44, 97, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 79, 82, 68, 10, 9, 108, 100, 32, 104, 108, 44, 36, 49, 56, 54, 99, 9, 59, 32, 68, 105, 115, 97, 98, 108, 101, 32, 104, 97, 110, 100, 108, 105, 110, 103, 32, 111, 102, 32, 67, 84, 67, 32, 67, 104, 97, 110, 110, 101, 108, 32, 49, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 105, 111, 110, 46, 10, 9, 108, 100, 32, 40, 36, 55, 48, 48, 50, 41, 44, 104, 108, 10, 9, 108, 100, 32, 104, 108, 44, 36, 55, 48, 52, 48, 10, 9, 115, 101, 116, 32, 48, 44, 40, 104, 108, 41, 9, 59, 32, 65, 118, 111, 105, 100, 32, 66, 73, 79, 83, 32, 86, 68, 80, 32, 104, 97, 110, 100, 108, 105, 110, 103, 46, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 86, 73, 10, 9, 108, 100, 32, 101, 44, 36, 48, 48, 10, 9, 108, 100, 32, 97, 44, 36, 48, 56, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 80, 83, 71, 10, 9, 108, 100, 32, 97, 44, 36, 48, 57, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 80, 83, 71, 10, 9, 108, 100, 32, 97, 44, 36, 48, 65, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 80, 83, 71, 10, 9, 108, 100, 32, 97, 44, 36, 48, 55, 10, 9, 108, 100, 32, 101, 44, 36, 98, 56, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 80, 83, 71, 10, 9, 108, 100, 32, 97, 44, 36, 57, 50, 9, 59, 32, 83, 101, 116, 117, 112, 32, 56, 50, 53, 53, 32, 102, 111, 114, 32, 107, 101, 121, 98, 111, 97, 114, 100, 47, 106, 111, 121, 115, 116, 105, 99, 107, 32, 114, 101, 97, 100, 105, 110, 103, 46, 10, 9, 111, 117, 116, 32, 40, 36, 57, 55, 41, 44, 97, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 10, 9, 59, 32, 67, 111, 110, 116, 114, 105, 98, 117, 116, 101, 100, 32, 98, 121, 32, 83, 105, 82, 105, 111, 75, 68, 10, 9, 108, 100, 32, 97, 44, 36, 57, 70, 9, 59, 32, 84, 117, 114, 110, 32, 111, 102, 102, 32, 80, 83, 71, 10, 9, 111, 117, 116, 32, 40, 80, 83, 71, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 36, 66, 70, 9, 10, 9, 111, 117, 116, 32, 40, 80, 83, 71, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 36, 68, 70, 10, 9, 111, 117, 116, 32, 40, 80, 83, 71, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 36, 70, 70, 10, 9, 111, 117, 116, 32, 40, 80, 83, 71, 41, 44, 97, 9, 10, 9, 108, 100, 32, 97, 44, 36, 57, 50, 9, 59, 32, 83, 101, 116, 117, 112, 32, 56, 50, 53, 53, 32, 102, 111, 114, 32, 83, 67, 51, 48, 48, 48, 46, 10, 9, 111, 117, 116, 32, 40, 36, 100, 102, 41, 44, 97, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 43, 83, 86, 73, 10, 9, 59, 32, 87, 97, 105, 116, 32, 102, 111, 114, 32, 86, 68, 80, 32, 114, 101, 97, 100, 121, 32, 40, 97, 114, 111, 117, 110, 100, 32, 49, 48, 48, 48, 32, 109, 115, 41, 10, 9, 108, 100, 32, 98, 44, 49, 49, 10, 9, 108, 100, 32, 100, 101, 44, 36, 70, 70, 70, 70, 10, 46, 100, 101, 108, 97, 121, 49, 58, 10, 9, 108, 100, 32, 104, 108, 44, 36, 51, 57, 68, 69, 10, 46, 100, 101, 108, 97, 121, 50, 58, 10, 9, 97, 100, 100, 32, 104, 108, 44, 100, 101, 10, 9, 106, 114, 32, 99, 44, 46, 100, 101, 108, 97, 121, 50, 10, 9, 100, 106, 110, 122, 32, 46, 100, 101, 108, 97, 121, 49, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 9, 100, 105, 10, 9, 108, 100, 32, 115, 112, 44, 83, 84, 65, 67, 75, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 78, 65, 66, 85, 10, 9, 105, 109, 32, 50, 10, 9, 108, 100, 32, 97, 44, 110, 97, 98, 117, 95, 105, 110, 116, 62, 62, 56, 10, 9, 108, 100, 32, 105, 44, 97, 10, 9, 108, 100, 32, 97, 44, 36, 48, 51, 9, 59, 32, 68, 105, 115, 97, 98, 108, 101, 32, 82, 79, 77, 10, 9, 111, 117, 116, 32, 40, 36, 48, 48, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 36, 48, 55, 10, 9, 111, 117, 116, 32, 40, 36, 52, 49, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 36, 55, 56, 9, 59, 32, 83, 101, 116, 117, 112, 32, 111, 117, 116, 112, 117, 116, 32, 112, 111, 114, 116, 115, 32, 97, 110, 100, 32, 109, 105, 120, 101, 114, 46, 10, 9, 111, 117, 116, 32, 40, 36, 52, 48, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 36, 48, 101, 10, 9, 111, 117, 116, 32, 40, 36, 52, 49, 41, 44, 97, 10, 9, 108, 100, 32, 97, 44, 36, 51, 48, 9, 59, 32, 69, 110, 97, 98, 108, 101, 32, 118, 105, 100, 101, 111, 32, 97, 110, 100, 32, 107, 101, 121, 98, 111, 97, 114, 100, 46, 10, 9, 111, 117, 116, 32, 40, 36, 52, 48, 41, 44, 97, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 80, 86, 50, 48, 48, 48, 10, 9, 108, 100, 32, 104, 108, 44, 110, 109, 105, 95, 104, 97, 110, 100, 108, 101, 114, 10, 9, 108, 100, 32, 40, 36, 55, 52, 57, 57, 41, 44, 104, 108, 10, 9, 108, 100, 32, 97, 44, 40, 86, 68, 80, 82, 43, 49, 41, 10, 9, 108, 100, 32, 98, 99, 44, 36, 56, 50, 48, 49, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 86, 68, 80, 10, 9, 108, 100, 32, 97, 44, 40, 86, 68, 80, 82, 43, 49, 41, 10, 9, 108, 100, 32, 98, 99, 44, 36, 56, 50, 48, 49, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 86, 68, 80, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 9, 105, 110, 32, 97, 44, 40, 86, 68, 80, 82, 43, 49, 41, 10, 9, 108, 100, 32, 98, 99, 44, 36, 56, 50, 48, 49, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 86, 68, 80, 10, 9, 105, 110, 32, 97, 44, 40, 86, 68, 80, 82, 43, 49, 41, 10, 9, 108, 100, 32, 98, 99, 44, 36, 56, 50, 48, 49, 10, 9, 99, 97, 108, 108, 32, 87, 82, 84, 86, 68, 80, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 105, 102, 32, 67, 86, 66, 65, 83, 73, 67, 95, 66, 65, 78, 75, 95, 83, 87, 73, 84, 67, 72, 73, 78, 71, 10, 32, 32, 32, 32, 105, 102, 32, 67, 79, 76, 69, 67, 79, 10, 9, 108, 100, 32, 97, 44, 40, 36, 102, 102, 99, 48, 41, 9, 59, 32, 77, 101, 103, 97, 99, 97, 114, 116, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 49, 9, 9, 59, 32, 83, 101, 103, 97, 32, 109, 97, 112, 112, 101, 114, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 36, 102, 102, 102, 101, 41, 44, 97, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 77, 83, 88, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 49, 9, 9, 59, 32, 65, 83, 67, 73, 73, 32, 49, 54, 75, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 36, 55, 48, 48, 48, 41, 44, 97, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 43, 69, 73, 78, 83, 84, 69, 73, 78, 43, 78, 65, 66, 85, 10, 9, 108, 100, 32, 105, 120, 44, 40, 108, 102, 115, 114, 41, 10, 9, 108, 100, 32, 104, 108, 44, 114, 97, 109, 95, 115, 116, 97, 114, 116, 10, 9, 108, 100, 32, 100, 101, 44, 114, 97, 109, 95, 115, 116, 97, 114, 116, 43, 49, 10, 9, 108, 100, 32, 98, 99, 44, 114, 97, 109, 95, 101, 110, 100, 45, 114, 97, 109, 95, 115, 116, 97, 114, 116, 45, 49, 10, 9, 108, 100, 32, 40, 104, 108, 41, 44, 48, 10, 9, 108, 100, 105, 114, 10, 9, 108, 100, 32, 40, 108, 102, 115, 114, 41, 44, 105, 120, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 77, 83, 88, 43, 83, 86, 73, 43, 83, 77, 83, 10, 9, 108, 100, 32, 105, 120, 44, 40, 108, 102, 115, 114, 41, 10, 9, 108, 100, 32, 104, 108, 44, 66, 65, 83, 69, 95, 82, 65, 77, 10, 9, 108, 100, 32, 100, 101, 44, 66, 65, 83, 69, 95, 82, 65, 77, 43, 49, 10, 9, 108, 100, 32, 98, 99, 44, 82, 65, 77, 95, 83, 73, 90, 69, 45, 49, 10, 9, 108, 100, 32, 40, 104, 108, 41, 44, 48, 10, 9, 108, 100, 105, 114, 10, 9, 108, 100, 32, 40, 108, 102, 115, 114, 41, 44, 105, 120, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 67, 79, 76, 69, 67, 79, 43, 83, 71, 49, 48, 48, 48, 43, 83, 79, 82, 68, 43, 80, 69, 78, 67, 73, 76, 43, 80, 86, 50, 48, 48, 48, 10, 9, 108, 100, 32, 104, 108, 44, 40, 108, 102, 115, 114, 41, 9, 59, 32, 83, 97, 118, 101, 32, 82, 65, 77, 32, 116, 114, 97, 115, 104, 32, 102, 111, 114, 32, 114, 97, 110, 100, 111, 109, 32, 103, 101, 110, 101, 114, 97, 116, 111, 114, 46, 10, 9, 108, 100, 32, 100, 101, 44, 66, 65, 83, 69, 95, 82, 65, 77, 10, 9, 120, 111, 114, 32, 97, 10, 9, 108, 100, 32, 40, 100, 101, 41, 44, 97, 10, 9, 105, 110, 99, 32, 100, 101, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 80, 86, 50, 48, 48, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 55, 44, 100, 9, 9, 59, 32, 50, 46, 53, 75, 32, 111, 102, 32, 82, 65, 77, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 80, 69, 78, 67, 73, 76, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 51, 44, 100, 9, 9, 59, 32, 50, 75, 32, 111, 102, 32, 82, 65, 77, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 32, 32, 105, 102, 32, 67, 79, 76, 69, 67, 79, 43, 83, 71, 49, 48, 48, 48, 43, 83, 79, 82, 68, 10, 9, 98, 105, 116, 32, 50, 44, 100, 9, 9, 59, 32, 49, 75, 32, 111, 102, 32, 82, 65, 77, 10, 32, 32, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 106, 112, 32, 122, 44, 36, 45, 52, 10, 9, 108, 100, 32, 40, 108, 102, 115, 114, 41, 44, 104, 108, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 32, 32, 32, 32, 105, 102, 32, 83, 71, 77, 10, 87, 82, 73, 84, 69, 95, 82, 69, 71, 73, 83, 84, 69, 82, 58, 9, 101, 113, 117, 32, 36, 49, 102, 100, 57, 10, 70, 73, 76, 76, 95, 86, 82, 65, 77, 58, 9, 101, 113, 117, 32, 36, 49, 102, 56, 50, 10, 87, 82, 73, 84, 69, 95, 86, 82, 65, 77, 58, 9, 101, 113, 117, 32, 36, 49, 102, 100, 102, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 44, 36, 48, 48, 9, 59, 32, 70, 105, 114, 115, 116, 32, 115, 116, 101, 112, 46, 10, 46, 48, 58, 32, 32, 32, 32, 32, 108, 100, 32, 104, 108, 44, 36, 50, 48, 48, 48, 9, 59, 32, 82, 65, 77, 32, 97, 116, 32, 36, 50, 48, 48, 48, 46, 10, 46, 49, 58, 32, 32, 32, 32, 32, 108, 100, 32, 40, 104, 108, 41, 44, 104, 9, 59, 32, 84, 114, 121, 32, 116, 111, 32, 119, 114, 105, 116, 101, 32, 97, 32, 98, 121, 116, 101, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 112, 32, 112, 44, 46, 49, 9, 9, 59, 32, 82, 101, 112, 101, 97, 116, 32, 117, 110, 116, 105, 108, 32, 114, 101, 97, 99, 104, 105, 110, 103, 32, 36, 56, 48, 48, 48, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 44, 36, 50, 48, 9, 59, 32, 71, 111, 32, 98, 97, 99, 107, 32, 97, 116, 32, 36, 50, 48, 48, 48, 46, 10, 46, 50, 58, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 40, 104, 108, 41, 9, 59, 32, 82, 101, 97, 100, 32, 98, 97, 99, 107, 32, 98, 121, 116, 101, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 112, 32, 104, 9, 9, 59, 32, 73, 115, 32, 105, 116, 32, 99, 111, 114, 114, 101, 99, 116, 63, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 110, 122, 44, 46, 51, 9, 59, 32, 78, 111, 44, 32, 106, 117, 109, 112, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 112, 32, 112, 44, 46, 50, 9, 9, 59, 32, 82, 101, 112, 101, 97, 116, 32, 117, 110, 116, 105, 108, 32, 114, 101, 97, 99, 104, 105, 110, 103, 32, 36, 56, 48, 48, 48, 46, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 112, 32, 46, 52, 9, 9, 59, 32, 77, 101, 109, 111, 114, 121, 32, 118, 97, 108, 105, 100, 33, 10, 10, 46, 51, 58, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 48, 49, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 69, 110, 97, 98, 108, 101, 32, 83, 71, 77, 10, 32, 32, 32, 32, 32, 32, 32, 32, 111, 117, 116, 32, 40, 36, 53, 51, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 99, 32, 98, 10, 32, 32, 32, 32, 32, 32, 32, 32, 98, 105, 116, 32, 49, 44, 98, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 65, 108, 114, 101, 97, 100, 121, 32, 101, 110, 97, 98, 108, 101, 100, 63, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 122, 44, 46, 48, 9, 9, 59, 32, 78, 111, 44, 32, 116, 101, 115, 116, 32, 82, 65, 77, 32, 97, 103, 97, 105, 110, 46, 10, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 99, 44, 36, 48, 48, 48, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 87, 82, 73, 84, 69, 95, 82, 69, 71, 73, 83, 84, 69, 82, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 99, 44, 36, 48, 49, 56, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 87, 82, 73, 84, 69, 95, 82, 69, 71, 73, 83, 84, 69, 82, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 99, 44, 36, 48, 50, 48, 54, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 87, 82, 73, 84, 69, 95, 82, 69, 71, 73, 83, 84, 69, 82, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 99, 44, 36, 48, 51, 56, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 87, 82, 73, 84, 69, 95, 82, 69, 71, 73, 83, 84, 69, 82, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 99, 44, 36, 48, 52, 48, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 87, 82, 73, 84, 69, 95, 82, 69, 71, 73, 83, 84, 69, 82, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 99, 44, 36, 48, 53, 51, 54, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 87, 82, 73, 84, 69, 95, 82, 69, 71, 73, 83, 84, 69, 82, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 99, 44, 36, 48, 54, 48, 55, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 87, 82, 73, 84, 69, 95, 82, 69, 71, 73, 83, 84, 69, 82, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 99, 44, 36, 48, 55, 48, 68, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 87, 82, 73, 84, 69, 95, 82, 69, 71, 73, 83, 84, 69, 82, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 99, 44, 36, 48, 51, 70, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 100, 101, 44, 36, 48, 48, 69, 56, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 108, 44, 36, 49, 53, 56, 66, 32, 32, 32, 32, 32, 59, 32, 78, 111, 116, 101, 33, 32, 100, 105, 114, 101, 99, 116, 32, 97, 99, 99, 101, 115, 115, 32, 116, 111, 32, 67, 111, 108, 101, 99, 111, 118, 105, 115, 105, 111, 110, 32, 82, 79, 77, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 87, 82, 73, 84, 69, 95, 86, 82, 65, 77, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 108, 44, 36, 50, 48, 48, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 100, 101, 44, 51, 50, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 70, 68, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 70, 73, 76, 76, 95, 86, 82, 65, 77, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 108, 44, 36, 49, 66, 48, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 100, 101, 44, 49, 50, 56, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 68, 49, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 70, 73, 76, 76, 95, 86, 82, 65, 77, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 108, 44, 36, 49, 56, 48, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 100, 101, 44, 55, 54, 57, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 97, 44, 36, 50, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 70, 73, 76, 76, 95, 86, 82, 65, 77, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 99, 44, 36, 48, 48, 50, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 100, 101, 44, 36, 49, 57, 56, 48, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 108, 44, 46, 53, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 87, 82, 73, 84, 69, 95, 86, 82, 65, 77, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 99, 44, 36, 48, 49, 67, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 87, 82, 73, 84, 69, 95, 82, 69, 71, 73, 83, 84, 69, 82, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 114, 32, 36, 10, 10, 46, 53, 58, 32, 32, 32, 32, 32, 100, 98, 32, 34, 32, 83, 85, 80, 69, 82, 32, 71, 65, 77, 69, 32, 77, 79, 68, 85, 76, 69, 32, 78, 79, 84, 32, 68, 69, 84, 69, 67, 84, 69, 68, 32, 34, 10, 10, 46, 52, 58, 10, 9, 108, 100, 32, 105, 120, 44, 40, 108, 102, 115, 114, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 108, 44, 36, 50, 48, 48, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 100, 101, 44, 36, 50, 48, 48, 49, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 99, 44, 36, 53, 70, 70, 70, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 104, 108, 41, 44, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 105, 114, 10, 9, 108, 100, 32, 40, 108, 102, 115, 114, 41, 44, 105, 120, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 67, 79, 76, 69, 67, 79, 10, 9, 108, 100, 32, 97, 44, 40, 36, 48, 48, 54, 57, 41, 10, 9, 99, 112, 32, 53, 48, 10, 9, 108, 100, 32, 97, 44, 49, 10, 9, 106, 114, 32, 110, 122, 44, 36, 43, 51, 10, 9, 100, 101, 99, 32, 97, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 71, 49, 48, 48, 48, 43, 83, 77, 83, 43, 83, 86, 73, 43, 83, 79, 82, 68, 43, 80, 86, 50, 48, 48, 48, 43, 78, 65, 66, 85, 10, 9, 108, 100, 32, 97, 44, 49, 9, 9, 59, 32, 65, 108, 119, 97, 121, 115, 32, 78, 84, 83, 67, 46, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 77, 69, 77, 79, 84, 69, 67, 72, 43, 69, 73, 78, 83, 84, 69, 73, 78, 10, 9, 108, 100, 32, 97, 44]);
fileData5.push.apply(fileData5, [48, 9, 9, 59, 32, 65, 108, 119, 97, 121, 115, 32, 80, 65, 76, 46, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 77, 83, 88, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 82, 83, 76, 82, 69, 71, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 98, 44, 49, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 36, 52, 48, 48, 48, 45, 36, 55, 102, 102, 102, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 103, 101, 116, 95, 115, 108, 111, 116, 95, 109, 97, 112, 112, 105, 110, 103, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 104, 44, 36, 56, 48, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 108, 108, 32, 69, 78, 65, 83, 76, 84, 32, 32, 32, 32, 32, 59, 32, 77, 97, 112, 32, 105, 110, 116, 111, 32, 36, 56, 48, 48, 48, 45, 36, 66, 70, 70, 70, 10, 10, 9, 108, 100, 32, 97, 44, 40, 36, 48, 48, 50, 98, 41, 10, 9, 99, 112, 108, 10, 9, 114, 108, 99, 97, 10, 9, 97, 110, 100, 32, 36, 48, 49, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 108, 100, 32, 40, 110, 116, 115, 99, 41, 44, 97, 10, 10, 9, 99, 97, 108, 108, 32, 109, 117, 115, 105, 99, 95, 105, 110, 105, 116, 10, 10, 9, 120, 111, 114, 32, 97, 10, 9, 108, 100, 32, 40, 109, 111, 100, 101, 41, 44, 97, 10, 32, 32, 32, 32, 105, 102, 32, 83, 77, 83, 10, 9, 99, 97, 108, 108, 32, 109, 111, 100, 101, 95, 52, 10, 32, 32, 32, 32, 101, 108, 115, 101, 10, 9, 99, 97, 108, 108, 32, 109, 111, 100, 101, 95, 48, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 9, 120, 111, 114, 32, 97, 10, 9, 108, 100, 32, 40, 106, 111, 121, 49, 95, 100, 97, 116, 97, 41, 44, 97, 10, 9, 108, 100, 32, 40, 106, 111, 121, 50, 95, 100, 97, 116, 97, 41, 44, 97, 10, 32, 32, 32, 32, 105, 102, 32, 78, 65, 66, 85, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 110, 97, 98, 117, 95, 100, 97, 116, 97, 48, 41, 44, 97, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 110, 97, 98, 117, 95, 100, 97, 116, 97, 49, 41, 44, 97, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 9, 108, 100, 32, 97, 44, 36, 48, 102, 10, 9, 108, 100, 32, 40, 107, 101, 121, 49, 95, 100, 97, 116, 97, 41, 44, 97, 10, 9, 108, 100, 32, 40, 107, 101, 121, 50, 95, 100, 97, 116, 97, 41, 44, 97, 10, 32, 32, 32, 32, 105, 102, 32, 78, 65, 66, 85, 10, 32, 32, 32, 32, 32, 32, 32, 32, 108, 100, 32, 40, 110, 97, 98, 117, 95, 100, 97, 116, 97, 50, 41, 44, 97, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 32, 32, 32, 32, 105, 102, 32, 77, 83, 88, 10, 9, 108, 100, 32, 104, 108, 44, 110, 109, 105, 95, 104, 97, 110, 100, 108, 101, 114, 10, 9, 108, 100, 32, 40, 36, 102, 100, 57, 98, 41, 44, 104, 108, 10, 9, 108, 100, 32, 97, 44, 36, 99, 51, 10, 9, 108, 100, 32, 40, 36, 102, 100, 57, 97, 41, 44, 97, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 32, 32, 32, 32, 105, 102, 32, 83, 79, 82, 68, 10, 9, 108, 100, 32, 104, 108, 44, 110, 109, 105, 95, 104, 97, 110, 100, 108, 101, 114, 10, 9, 108, 100, 32, 40, 36, 55, 48, 48, 54, 41, 44, 104, 108, 10, 32, 32, 32, 32, 101, 110, 100, 105, 102, 10, 10, 9, 59, 32, 67, 86, 66, 97, 115, 105, 99, 32, 112, 114, 111, 103, 114, 97, 109, 32, 115, 116, 97, 114, 116, 46, 10]);
Module['FS_createDataFile']('/', 'cvbasic_prologue.asm', fileData5, true, true);
fileData6 = [];
fileData6.push.apply(fileData6, [9, 39, 13, 10, 9, 39, 32, 74, 111, 121, 115, 116, 105, 99, 107, 32, 109, 111, 118, 105, 110, 103, 32, 119, 105, 116, 104, 32, 106, 111, 121, 115, 116, 105, 99, 107, 32, 40, 100, 101, 109, 111, 32, 102, 111, 114, 32, 67, 86, 66, 97, 115, 105, 99, 41, 13, 10, 9, 39, 13, 10, 9, 39, 32, 98, 121, 32, 79, 115, 99, 97, 114, 32, 84, 111, 108, 101, 100, 111, 32, 71, 46, 13, 10, 9, 39, 32, 104, 116, 116, 112, 115, 58, 47, 47, 110, 97, 110, 111, 99, 104, 101, 115, 115, 46, 111, 114, 103, 47, 13, 10, 9, 39, 13, 10, 9, 39, 32, 67, 114, 101, 97, 116, 105, 111, 110, 32, 100, 97, 116, 101, 58, 32, 77, 97, 114, 47, 48, 51, 47, 50, 48, 50, 52, 46, 13, 10, 9, 39, 13, 10, 13, 10, 9, 68, 69, 70, 73, 78, 69, 32, 83, 80, 82, 73, 84, 69, 32, 48, 44, 49, 44, 104, 97, 112, 112, 121, 95, 102, 97, 99, 101, 13, 10, 13, 10, 9, 80, 82, 73, 78, 84, 32, 65, 84, 32, 51, 54, 44, 34, 72, 97, 112, 112, 121, 32, 102, 97, 99, 101, 33, 34, 13, 10, 13, 10, 9, 120, 32, 61, 32, 53, 48, 13, 10, 9, 121, 32, 61, 32, 49, 48, 48, 13, 10, 13, 10, 9, 83, 80, 82, 73, 84, 69, 32, 49, 44, 32, 57, 54, 44, 32, 49, 50, 56, 44, 32, 48, 44, 32, 49, 52, 13, 10, 13, 10, 103, 97, 109, 101, 95, 108, 111, 111, 112, 58, 13, 10, 9, 87, 65, 73, 84, 13, 10, 9, 80, 82, 73, 78, 84, 32, 65, 84, 32, 48, 44, 32, 34, 86, 68, 80, 46, 83, 84, 65, 84, 85, 83, 32, 61, 32, 34, 44, 32, 60, 62, 86, 68, 80, 46, 83, 84, 65, 84, 85, 83, 32, 44, 32, 34, 32, 32, 34, 13, 10, 13, 10, 9, 83, 80, 82, 73, 84, 69, 32, 48, 44, 32, 121, 32, 45, 32, 49, 44, 32, 120, 44, 32, 48, 44, 32, 102, 97, 99, 101, 95, 99, 111, 108, 111, 114, 13, 10, 13, 10, 9, 73, 70, 32, 70, 82, 65, 77, 69, 32, 65, 78, 68, 32, 49, 32, 84, 72, 69, 78, 13, 10, 9, 9, 102, 97, 99, 101, 95, 99, 111, 108, 111, 114, 32, 61, 32, 49, 48, 13, 10, 9, 9, 73, 70, 32, 99, 111, 110, 116, 49, 46, 117, 112, 32, 84, 72, 69, 78, 32, 73, 70, 32, 121, 32, 62, 32, 48, 32, 84, 72, 69, 78, 32, 121, 32, 61, 32, 121, 32, 45, 32, 49, 13, 10, 9, 9, 73, 70, 32, 99, 111, 110, 116, 49, 46, 108, 101, 102, 116, 32, 84, 72, 69, 78, 32, 73, 70, 32, 120, 32, 62, 32, 48, 32, 84, 72, 69, 78, 32, 120, 32, 61, 32, 120, 32, 45, 32, 49, 13, 10, 9, 9, 73, 70, 32, 99, 111, 110, 116, 49, 46, 114, 105, 103, 104, 116, 32, 84, 72, 69, 78, 32, 73, 70, 32, 120, 32, 60, 32, 50, 52, 48, 32, 84, 72, 69, 78, 32, 120, 32, 61, 32, 120, 32, 43, 32, 49, 13, 10, 9, 9, 73, 70, 32, 99, 111, 110, 116, 49, 46, 100, 111, 119, 110, 32, 84, 72, 69, 78, 32, 73, 70, 32, 121, 32, 60, 32, 49, 55, 54, 32, 84, 72, 69, 78, 32, 121, 32, 61, 32, 121, 32, 43, 32, 49, 13, 10, 9, 9, 73, 70, 32, 99, 111, 110, 116, 49, 46, 98, 117, 116, 116, 111, 110, 32, 84, 72, 69, 78, 32, 102, 97, 99, 101, 95, 99, 111, 108, 111, 114, 32, 61, 32, 53, 13, 10, 9, 9, 73, 70, 32, 99, 111, 110, 116, 49, 46, 98, 117, 116, 116, 111, 110, 50, 32, 84, 72, 69, 78, 32, 102, 97, 99, 101, 95, 99, 111, 108, 111, 114, 32, 61, 32, 54, 13, 10, 9, 69, 78, 68, 32, 73, 70, 13, 10, 13, 10, 9, 71, 79, 84, 79, 32, 103, 97, 109, 101, 95, 108, 111, 111, 112, 13, 10, 13, 10, 104, 97, 112, 112, 121, 95, 102, 97, 99, 101, 58, 13, 10, 9, 66, 73, 84, 77, 65, 80, 32, 34, 46, 46, 46, 46, 46, 46, 88, 88, 88, 88, 46, 46, 46, 46, 46, 46, 34, 13, 10, 9, 66, 73, 84, 77, 65, 80, 32, 34, 46, 46, 46, 46, 88, 88, 88, 88, 88, 88, 88, 88, 46, 46, 46, 46, 34, 13, 10, 9, 66, 73, 84, 77, 65, 80, 32, 34, 46, 46, 46, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 46, 46, 46, 34, 13, 10, 9, 66, 73, 84, 77, 65, 80, 32, 34, 46, 46, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 46, 46, 34, 13, 10, 9, 66, 73, 84, 77, 65, 80, 32, 34, 46, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 46, 34, 13, 10, 9, 66, 73, 84, 77, 65, 80, 32, 34, 46, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 46, 34, 13, 10, 9, 66, 73, 84, 77, 65, 80, 32, 34, 88, 88, 88, 88, 46, 46, 88, 88, 88, 88, 46, 46, 88, 88, 88, 88, 34, 13, 10, 9, 66, 73, 84, 77, 65, 80, 32, 34, 88, 88, 88, 88, 46, 46, 88, 88, 88, 88, 46, 46, 88, 88, 88, 88, 34, 13, 10, 9, 66, 73, 84, 77, 65, 80, 32, 34, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 34, 13, 10, 9, 66, 73, 84, 77, 65, 80, 32, 34, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 34, 13, 10, 9, 66, 73, 84, 77, 65, 80, 32, 34, 46, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 46, 34, 13, 10, 9, 66, 73, 84, 77, 65, 80, 32, 34, 46, 88, 88, 88, 46, 46, 88, 88, 88, 88, 46, 46, 88, 88, 88, 46, 34, 13, 10, 9, 66, 73, 84, 77, 65, 80, 32, 34, 46, 46, 88, 88, 88, 46, 46, 46, 46, 46, 46, 88, 88, 88, 46, 46, 34, 13, 10, 9, 66, 73, 84, 77, 65, 80, 32, 34, 46, 46, 46, 88, 88, 88, 46, 46, 46, 46, 88, 88, 88, 46, 46, 46, 34, 13, 10, 9, 66, 73, 84, 77, 65, 80, 32, 34, 46, 46, 46, 46, 88, 88, 88, 88, 88, 88, 88, 88, 46, 46, 46, 46, 34, 13, 10, 9, 66, 73, 84, 77, 65, 80, 32, 34, 46, 46, 46, 46, 46, 46, 88, 88, 88, 88, 46, 46, 46, 46, 46, 46, 34, 13, 10]);
Module['FS_createDataFile']('/', 'face_joystick.bas', fileData6, true, true);

  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  } else {
    Module['thisProgram'] = 'unknown-program';
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          (((codePoint - 0x10000) / 0x400)|0) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var stack = 0;
  var JSfuncs = {
    'stackSave' : function() {
      stack = Runtime.stackSave();
    },
    'stackRestore' : function() {
      Runtime.stackRestore(stack);
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) JSfuncs['stackRestore']();
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;


function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;


function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var final = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    final = parse();
  } catch(e) {
    final += '?';
  }
  if (final.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return final;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 79280;
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocate([99,111,108,101,99,111,118,105,115,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,83,116,97,110,100,97,114,100,32,67,111,108,101,99,111,118,105,115,105,111,110,32,40,49,75,32,82,65,77,41,0,0,67,111,108,101,99,111,118,105,115,105,111,110,0,0,0,0,115,103,49,48,48,48,0,0,83,101,103,97,32,83,71,45,49,48,48,48,47,83,67,45,51,48,48,48,32,40,49,75,32,82,65,77,41,0,0,0,83,101,103,97,32,83,71,45,49,48,48,48,47,83,67,45,51,48,48,48,0,0,0,0,109,115,120,0,0,0,0,0,45,114,97,109,49,54,0,0,77,83,88,32,40,56,75,32,82,65,77,41,44,32,117,115,101,32,45,114,97,109,49,54,32,102,111,114,32,49,54,75,32,111,102,32,82,65,77,0,77,83,88,0,0,0,0,0,115,103,109,0,0,0,0,0,67,111,108,101,99,111,118,105,115,105,111,110,32,119,105,116,104,32,79,112,99,111,100,101,39,115,32,83,117,112,101,114,32,71,97,109,101,32,77,111,100,117,108,101,0,0,0,0,67,111,108,101,99,111,118,105,115,105,111,110,32,119,105,116,104,32,83,71,77,0,0,0,115,118,105,0,0,0,0,0,83,112,101,99,116,114,97,118,105,100,101,111,32,83,86,73,45,51,49,56,47,51,50,56,32,40,49,54,75,32,111,102,32,82,65,77,41,0,0,0,83,112,101,99,116,114,97,118,105,100,101,111,32,83,86,73,45,51,49,56,47,51,50,56,0,0,0,0,0,0,0,0,115,111,114,100,0,0,0,0,83,111,114,100,32,77,53,32,40,49,75,32,82,65,77,41,0,0,0,0,0,0,0,0,83,111,114,100,32,77,53,0,109,101,109,111,116,101,99,104,0,0,0,0,0,0,0,0,45,99,112,109,0,0,0,0,77,101,109,111,116,101,99,104,32,77,84,88,32,40,54,52,75,32,82,65,77,41,44,32,103,101,110,101,114,97,116,101,115,32,46,114,117,110,32,102,105,108,101,115,44,32,117,115,101,32,45,99,112,109,32,102,111,114,32,46,99,111,109,32,102,105,108,101,115,0,0,0,77,101,109,111,116,101,99,104,32,77,84,88,0,0,0,0,99,114,101,97,116,105,118,105,115,105,111,110,0,0,0,0,45,114,111,109,49,54,0,0,86,116,101,99,104,32,67,114,101,97,116,105,118,105,115,105,111,110,32,40,68,105,99,107,32,83,109,105,116,104,39,115,32,87,105,122,122,97,114,100,47,76,97,115,101,114,32,50,48,48,49,41,44,32,54,53,48,50,43,49,75,32,82,65,77,46,0,0,0,0,0,0,67,114,101,97,116,105,118,105,115,105,111,110,47,87,105,122,122,97,114,100,0,0,0,0,112,101,110,99,105,108,0,0,83,111,117,110,100,105,99,47,72,97,110,105,109,101,120,32,80,101,110,99,105,108,32,73,73,32,40,50,75,32,82,65,77,41,0,0,0,0,0,0,83,111,117,110,100,105,99,32,80,101,110,99,105,108,32,73,73,0,0,0,0,0,0,0,101,105,110,115,116,101,105,110,0,0,0,0,0,0,0,0,84,97,116,117,110,103,32,69,105,110,115,116,101,105,110,44,32,103,101,110,101,114,97,116,101,115,32,46,99,111,109,32,102,105,108,101,115,0,0,0,84,97,116,117,110,103,32,69,105,110,115,116,101,105,110,0,112,118,50,48,48,48,0,0,67,97,115,105,111,32,80,86,45,50,48,48,48,0,0,0,116,105,57,57,52,97,0,0,84,101,120,97,115,32,73,110,115,116,114,117,109,101,110,116,115,32,84,73,45,57,57,47,52,65,32,40,51,50,75,32,82,65,77,41,46,32,83,117,112,112,111,114,116,32,98,121,32,116,117,114,115,105,108,105,111,110,0,0,0,0,0,0,84,73,45,57,57,47,52,65,32,40,115,117,112,112,111,114,116,32,98,121,32,116,117,114,115,105,108,105,111,110,41,0,110,97,98,117,0,0,0,0,78,65,66,85,32,80,67,32,40,54,52,75,32,82,65,77,41,0,0,0,0,0,0,0,78,97,98,117,32,80,67,0,115,109,115,0,0,0,0,0,83,101,103,97,32,77,97,115,116,101,114,32,83,121,115,116,101,109,32,40,56,75,32,82,65,77,41,0,0,0,0,0,83,101,103,97,32,77,97,115,116,101,114,32,83,121,115,116,101,109,0,0,0,0,0,0,8,0,0,0,24,0,0,0,32,0,0,0,64,0,0,0,0,112,0,0,0,116,0,0,0,4,0,0,190,0,0,0,190,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,24,0,0,0,88,0,0,0,120,0,0,0,0,192,0,0,0,196,0,0,0,4,0,0,190,0,0,0,190,0,0,0,127,0,0,0,1,0,0,0,0,0,0,0,144,0,0,0,152,0,0,0,160,0,0,0,200,0,0,0,0,224,0,0,128,243,0,0,128,19,0,0,152,0,0,0,152,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,208,0,0,0,24,0,0,0,216,0,0,0,8,1,0,0,0,124,0,0,0,128,0,0,0,92,0,0,190,0,0,0,190,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,32,1,0,0,24,0,0,0,40,1,0,0,80,1,0,0,0,192,0,0,0,240,0,0,0,48,0,0,128,0,0,0,132,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,112,1,0,0,24,0,0,0,120,1,0,0,144,1,0,0,128,112,0,0,128,112,0,0,128,3,0,0,16,0,0,0,16,0,0,0,32,0,0,0,1,0,0,0,0,0,0,0,152,1,0,0,168,1,0,0,176,1,0,0,248,1,0,0,0,0,0,0,0,160,0,0,0,0,0,0,1,0,0,0,1,0,0,0,6,0,0,0,1,0,0,0,0,0,0,0,8,2,0,0,24,2,0,0,32,2,0,0,104,2,0,0,80,0,0,0,127,1,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,128,2,0,0,24,0,0,0,136,2,0,0,176,2,0,0,0,112,0,0,0,120,0,0,0,8,0,0,190,0,0,0,190,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,200,2,0,0,24,0,0,0,216,2,0,0,0,3,0,0,0,0,0,0,0,160,0,0,0,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,3,0,0,24,0,0,0,24,3,0,0,24,3,0,0,0,118,0,0,0,128,0,0,0,10,0,0,0,64,0,0,0,64,0,0,64,0,0,0,0,0,0,0,0,0,0,0,40,3,0,0,24,0,0,0,48,3,0,0,112,3,0,0,128,32,0,0,0,64,0,0,128,31,0,0,0,136,0,0,0,140,0,0,255,0,0,0,1,0,0,0,2,0,0,0,144,3,0,0,168,1,0,0,152,3,0,0,176,3,0,0,0,0,0,0,0,224,0,0,0,0,0,0,160,0,0,0,160,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,184,3,0,0,24,0,0,0,192,3,0,0,224,3,0,0,0,192,0,0,240,223,0,0,240,31,0,0,190,0,0,0,190,0,0,0,127,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,69,82,82,79,82,58,32,37,115,32,97,116,32,108,105,110,101,32,37,100,32,40,37,115,41,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([87,97,114,110,105,110,103,58,32,37,115,32,97,116,32,108,105,110,101,32,37,100,32,40,37,115,41,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,65,78,75,95,48,95,70,82,69,69,58,9,69,81,85,32,36,51,102,98,102,45,36,10,0,0,0,0,0,0,0,9,84,73,77,69,83,32,36,51,102,98,102,45,36,32,68,66,32,36,102,102,10,0,0,66,65,78,75,95,37,100,95,70,82,69,69,58,9,69,81,85,32,36,55,102,98,102,45,36,10,0,0,0,0,0,0,9,84,73,77,69,83,32,36,55,102,98,102,45,36,32,68,66,32,36,102,102,10,0,0,9,68,66,32,36,37,48,50,120,10,0,0,0,0,0,0,9,84,73,77,69,83,32,36,52,48,32,68,66,32,36,102,102,10,0,0,0,0,0,0,66,65,78,75,95,48,95,70,82,69,69,58,9,69,81,85,32,36,55,102,102,102,45,36,10,0,0,0,0,0,0,0,9,84,73,77,69,83,32,36,55,102,102,102,45,36,32,68,66,32,36,102,102,10,0,0,66,65,78,75,95,37,100,95,70,82,69,69,58,9,69,81,85,32,36,98,102,102,102,45,36,10,0,0,0,0,0,0,9,84,73,77,69,83,32,36,98,102,102,102,45,36,32,68,66,32,36,102,102,10,0,0,66,65,78,75,95,48,95,70,82,69,69,58,9,69,81,85,32,62,102,102,102,101,45,36,10,0,0,0,0,0,0,0,9,46,114,101,112,116,32,62,102,102,102,101,45,36,10,0,9,98,121,116,101,32,50,53,53,10,0,0,0,0,0,0,9,46,101,110,100,114,10,0,66,65,78,75,95,37,100,95,70,82,69,69,58,9,69,81,85,32,62,55,102,102,101,45,36,10,0,0,0,0,0,0,9,46,114,101,112,116,32,62,55,102,102,101,45,36,10,0,9,100,97,116,97,32,62,37,48,52,120,10,0,0,0,0,66,65,78,75,95,48,95,70,82,69,69,58,9,69,81,85,32,36,98,102,98,102,45,36,10,0,0,0,0,0,0,0,9,84,73,77,69,83,32,36,98,102,98,102,45,36,32,68,66,32,36,102,102,10,0,0,66,65,78,75,95,37,100,95,70,82,69,69,58,9,69,81,85,32,36,102,102,98,102,45,36,10,0,0,0,0,0,0,9,84,73,77,69,83,32,36,102,102,98,102,45,36,32,68,66,32,36,102,102,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+2768);
/* memory initializer */ allocate([79,117,116,32,111,102,32,109,101,109,111,114,121,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+7760);
/* memory initializer */ allocate([82,69,84,85,82,78,0,0,67,76,83,0,0,0,0,0,87,65,73,84,0,0,0,0,82,69,83,84,79,82,69,0,87,69,78,68,0,0,0,0,68,79,0,0,0,0,0,0,78,69,88,84,0,0,0,0,49,0,0,0,0,0,0,0,117,110,102,105,110,105,115,104,101,100,32,115,116,114,105,110,103], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+33000);
/* memory initializer */ allocate([118,97,114,105,97,98,108,101,32,39,37,115,39,32,110,111,116,32,100,101,102,105,110,101,100,32,112,114,101,118,105,111,117,115,108,121,0,0,0,0,0,0,0,0,0,0,0,0,99,118,37,100,0,0,0,0,79,82,0,0,0,0,0,0,88,79,82,0,0,0,0,0,65,78,68,0,0,0,0,0,78,79,84,0,0,0,0,0,109,105,115,115,105,110,103,32,114,105,103,104,116,32,112,97,114,101,110,116,104,101,115,105,115,0,0,0,0,0,0,0,101,109,112,116,121,32,115,116,114,105,110,103,0,0,0,0,73,78,80,0,0,0,0,0,109,105,115,115,105,110,103,32,108,101,102,116,32,112,97,114,101,110,116,104,101,115,105,115,32,105,110,32,73,78,80,0,109,105,115,115,105,110,103,32,114,105,103,104,116,32,112,97,114,101,110,116,104,101,115,105,115,32,105,110,32,73,78,80,0,0,0,0,0,0,0,0,73,103,110,111,114,105,110,103,32,73,78,80,32,40,110,111,116,32,115,117,112,112,111,114,116,101,100,32,105,110,32,67,114,101,97,116,105,118,105,115,105,111,110,32,111,114,32,84,73,57,57,52,65,41,0,0,80,69,69,75,0,0,0,0,109,105,115,115,105,110,103,32,108,101,102,116,32,112,97,114,101,110,116,104,101,115,105,115,32,105,110,32,80,69,69,75,0,0,0,0,0,0,0,0,109,105,115,115,105,110,103,32,114,105,103,104,116,32,112,97,114,101,110,116,104,101,115,105,115,32,105,110,32,80,69,69,75,0,0,0,0,0,0,0,86,80,69,69,75,0,0,0,109,105,115,115,105,110,103,32,108,101,102,116,32,112,97,114,101,110,116,104,101,115,105,115,32,105,110,32,86,80,69,69,75,0,0,0,0,0,0,0,109,105,115,115,105,110,103,32,114,105,103,104,116,32,112,97,114,101,110,116,104,101,115,105,115,32,105,110,32,86,80,69,69,75,0,0,0,0,0,0,65,66,83,0,0,0,0,0,109,105,115,115,105,110,103,32,108,101,102,116,32,112,97,114,101,110,116,104,101,115,105,115,32,105,110,32,65,66,83,0,109,105,115,115,105,110,103,32,114,105,103,104,116,32,112,97,114,101,110,116,104,101,115,105,115,32,105,110,32,65,66,83,0,0,0,0,0,0,0,0,83,71,78,0,0,0,0,0,109,105,115,115,105,110,103,32,108,101,102,116,32,112,97,114,101,110,116,104,101,115,105,115,32,105,110,32,83,71,78,0,109,105,115,115,105,110,103,32,114,105,103,104,116,32,112,97,114,101,110,116,104,101,115,105,115,32,105,110,32,83,71,78,0,0,0,0,0,0,0,0,67,79,78,84,0,0,0,0,67,79,78,84,49,0,0,0,67,79,78,84,50,0,0,0,75,69,89,0,0,0,0,0,67,79,78,84,32,115,121,110,116,97,120,32,101,114,114,111,114,0,0,0,0,0,0,0,85,80,0,0,0,0,0,0,82,73,71,72,84,0,0,0,68,79,87,78,0,0,0,0,76,69,70,84,0,0,0,0,66,85,84,84,79,78,0,0,66,85,84,84,79,78,50,0,87,114,111,110,103,32,102,105,101,108,100,32,102,111,114,32,67,79,78,84,0,0,0,0,82,65,78,68,79,77,0,0,109,105,115,115,105,110,103,32,114,105,103,104,116,32,112,97,114,101,110,116,104,101,115,105,115,32,105,110,32,82,65,78,68,79,77,0,0,0,0,0,70,82,65,77,69,0,0,0,77,85,83,73,67,0,0,0,109,105,115,115,105,110,103,32,112,101,114,105,111,100,32,105,110,32,77,85,83,73,67,0,80,76,65,89,73,78,71,0,111,110,108,121,32,97,108,108,111,119,101,100,32,77,85,83,73,67,46,80,76,65,89,73,78,71,0,0,0,0,0,0,86,68,80,0,0,0,0,0,109,105,115,115,105,110,103,32,112,101,114,105,111,100,32,105,110,32,86,68,80,0,0,0,83,84,65,84,85,83,0,0,111,110,108,121,32,97,108,108,111,119,101,100,32,86,68,80,46,83,84,65,84,85,83,0,78,84,83,67,0,0,0,0,85,83,82,0,0,0,0,0,86,65,82,80,84,82,0,0,109,105,115,115,105,110,103,32,118,97,114,105,97,98,108,101,32,110,97,109,101,32,102,111,114,32,86,65,82,80,84,82,0,0,0,0,0,0,0,0,117,115,105,110,103,32,97,114,114,97,121,32,98,117,116,32,110,111,116,32,100,101,102,105,110,101,100,0,0,0,0,0,109,105,115,115,105,110,103,32,108,101,102,116,32,112,97,114,101,110,116,104,101,115,105,115,32,105,110,32,97,114,114,97,121,32,97,99,99,101,115,115,0,0,0,0,0,0,0,0,109,105,115,115,105,110,103,32,114,105,103,104,116,32,112,97,114,101,110,116,104,101,115,105,115,32,105,110,32,97,114,114,97,121,32,97,99,99,101,115,115,0,0,0,0,0,0,0,99,111,110,115,116,97,110,116,115,32,100,111,101,115,110,39,116,32,104,97,118,101,32,97,100,100,114,101,115,115,32,102,111,114,32,86,65,82,80,84,82,0,0,0,0,0,0,0,118,97,114,105,97,98,108,101,32,110,97,109,101,32,39,37,115,39,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,32,119,105,116,104,32,111,116,104,101,114,32,112,117,114,112,111,115,101,0,0,0,76,69,78,0,0,0,0,0,109,105,115,115,105,110,103,32,108,101,102,116,32,112,97,114,101,110,116,104,101,115,105,115,32,105,110,32,76,69,78,0,109,105,115,115,105,110,103,32,115,116,114,105,110,103,32,105,110,115,105,100,101,32,76,69,78,0,0,0,0,0,0,0,109,105,115,115,105,110,103,32,114,105,103,104,116,32,112,97,114,101,110,116,104,101,115,105,115,32,105,110,32,76,69,78,0,0,0,0,0,0,0,0,80,79,83,0,0,0,0,0,109,105,115,115,105,110,103,32,108,101,102,116,32,112,97,114,101,110,116,104,101,115,105,115,32,105,110,32,80,79,83,0,109,105,115,115,105,110,103,32,114,105,103,104,116,32,112,97,114,101,110,116,104,101,115,105,115,32,105,110,32,80,79,83,0,0,0,0,0,0,0,0,98,97,100,32,115,121,110,116,97,120,32,112,111,114,32,101,120,112,114,101,115,115,105,111,110,0,0,0,0,0,0,0,109,105,115,115,105,110,103,32,102,117,110,99,116,105,111,110,32,110,97,109,101,32,105,110,32,67,65,76,76,0,0,0,109,105,115,115,105,110,103,32,102,117,110,99,116,105,111,110,32,110,97,109,101,32,105,110,32,85,83,82,0,0,0,0,0,0,0,0,0,0,0,0,109,111,114,101,32,116,104,97,110,32,111,110,101,32,97,114,103,117,109,101,110,116,32,102,111,114,32,85,83,82,32,40,110,111,110,45,90,56,48,32,116,97,114,103,101,116,41,0,109,111,114,101,32,116,104,97,110,32,102,105,118,101,32,97,114,103,117,109,101,110,116,115,32,102,111,114,32,85,83,82,32,40,90,56,48,32,116,97,114,103,101,116,41,0,0,0,111,117,116,32,111,102,32,109,101,109,111,114,121,32,105,110,32,97,99,99,117,109,117,108,97,116,101,100,95,112,117,115,104,0,0,0,0,0,0,0,82,101,99,117,114,115,105,111,110,32,105,110,32,70,78,32,110,97,109,101,0,0,0,0,111,117,116,32,111,102,32,109,101,109,111,114,121,32,105,110,32,99,97,108,108,32,116,111,32,70,78,0,0,0,0,0,109,105,115,115,105,110,103,32,108,101,102,116,32,112,97,114,101,110,116,104,101,115,105,115,32,105,110,32,99,97,108,108,32,116,111,32,70,78,0,0,115,121,110,116,97,120,32,101,114,114,111,114,32,105,110,32,99,97,108,108,32,116,111,32,70,78,0,0,0,0,0,0,110,97,109,101,32,114,101,113,117,105,114,101,100,32,102,111,114,32,97,115,115,105,103,110,109,101,110,116,0,0,0,0,117,115,105,110,103,32,97,114,114,97,121,32,119,105,116,104,111,117,116,32,112,114,101,118,105,111,117,115,32,68,73,77,44,32,97,117,116,111,97,115,115,105,103,110,105,110,103,32,68,73,77,40,49,48,41,0,114,101,113,117,105,114,101,100,32,39,61,39,32,102,111,114,32,97,115,115,105,103,110,109,101,110,116], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+34120);
/* memory initializer */ allocate([71,79,84,79,0,0,0,0,98,97,100,32,115,121,110,116,97,120,32,102,111,114,32,71,79,84,79,0,0,0,0,0,99,118,98,95,0,0,0,0,71,79,83,85,66,0,0,0,98,97,100,32,115,121,110,116,97,120,32,102,111,114,32,71,79,83,85,66,0,0,0,0,73,70,0,0,0,0,0,0,84,72,69,78,0,0,0,0,109,105,115,115,105,110,103,32,84,72,69,78,32,105,110,32,73,70,0,0,0,0,0,0,111,117,116,32,111,102,32,109,101,109,111,114,121,10,0,0,0,0,0,0,0,0,0,0,69,76,83,69,0,0,0,0,69,76,83,69,73,70,0,0,69,76,83,69,73,70,32,119,105,116,104,111,117,116,32,73,70,0,0,0,0,0,0,0,98,97,100,32,110,101,115,116,101,100,32,69,76,83,69,73,70,0,0,0,0,0,0,0,109,105,115,115,105,110,103,32,84,72,69,78,32,105,110,32,69,76,83,69,73,70,0,0,69,76,83,69,32,119,105,116,104,111,117,116,32,73,70,0,98,97,100,32,110,101,115,116,101,100,32,69,76,83,69,0,109,111,114,101,32,116,104,97,110,32,111,110,101,32,69,76,83,69,0,0,0,0,0,0,69,78,68,0,0,0,0,0,66,97,100,32,110,101,115,116,101,100,32,69,78,68,32,73,70,0,0,0,0,0,0,0,83,69,76,69,67,84,0,0,66,97,100,32,110,101,115,116,101,100,32,69,78,68,32,83,69,76,69,67,84,0,0,0,119,114,111,110,103,32,69,78,68,0,0,0,0,0,0,0,70,79,82,0,0,0,0,0,84,79,0,0,0,0,0,0,109,105,115,115,105,110,103,32,84,79,32,105,110,32,70,79,82,0,0,0,0,0,0,0,83,84,69,80,0,0,0,0,78,69,88,84,32,119,105,116,104,111,117,116,32,70,79,82,0,0,0,0,0,0,0,0,98,97,100,32,110,101,115,116,101,100,32,78,69,88,84,0,87,72,73,76,69,0,0,0,87,69,78,68,32,119,105,116,104,111,117,116,32,87,72,73,76,69,0,0,0,0,0,0,98,97,100,32,110,101,115,116,101,100,32,87,69,78,68,0,85,78,84,73,76,0,0,0,76,79,79,80,0,0,0,0,76,79,79,80,32,119,105,116,104,111,117,116,32,68,79,0,76,79,79,80,32,119,105,116,104,111,117,116,32,99,111,110,100,105,116,105,111,110,0,0,98,97,100,32,110,101,115,116,101,100,32,76,79,79,80,0,67,65,83,69,0,0,0,0,109,105,115,115,105,110,103,32,67,65,83,69,32,97,102,116,101,114,32,83,69,76,69,67,84,0,0,0,0,0,0,0,67,65,83,69,32,119,105,116,104,111,117,116,32,83,69,76,69,67,84,32,67,65,83,69,0,0,0,0,0,0,0,0,77,111,114,101,32,116,104,97,110,32,111,110,101,32,67,65,83,69,32,69,76,83,69,0,78,111,116,32,97,32,99,111,110,115,116,97,110,116,32,101,120,112,114,101,115,115,105,111,110,32,105,110,32,67,65,83,69,0,0,0,0,0,0,0,78,111,116,32,97,32,99,111,110,115,116,97,110,116,32,101,120,112,114,101,115,115,105,111,110,32,105,110,32,67,65,83,69,32,84,79,0,0,0,0,77,97,120,105,109,117,109,32,114,97,110,103,101,32,111,102,32,67,65,83,69,32,105,115,32,108,101,115,115,101,114,32,116,104,97,110,32,109,105,110,105,109,117,109,0,0,0,0,69,88,73,84,0,0,0,0,110,111,119,104,101,114,101,32,116,111,32,69,88,73,84,0,109,105,115,115,105,110,103,32,116,121,112,101,32,111,102,32,69,88,73,84,44,32,87,72,73,76,69,47,70,79,82,47,68,79,0,0,0,0,0,0,69,88,73,84,32,70,79,82,32,119,105,116,104,111,117,116,32,70,79,82,0,0,0,0,69,88,73,84,32,87,72,73,76,69,32,119,105,116,104,111,117,116,32,87,72,73,76,69,0,0,0,0,0,0,0,0,69,88,73,84,32,68,79,32,119,105,116,104,111,117,116,32,68,79,0,0,0,0,0,0,69,88,73,84,32,83,69,76,69,67,84,32,119,105,116,104,111,117,116,32,83,69,76,69,67,84,0,0,0,0,0,0,111,110,108,121,32,115,117,112,112,111,114,116,101,100,32,69,88,73,84,32,87,72,73,76,69,47,70,79,82,47,68,79,47,83,69,76,69,67,84,0,80,79,75,69,0,0,0,0,109,105,115,115,105,110,103,32,99,111,109,109,97,32,105,110,32,80,79,75,69,0,0,0,80,72,65,0,0,0,0,0,83,84,65,0,0,0,0,0,116,101,109,112,0,0,0,0,83,84,89,0,0,0,0,0,116,101,109,112,43,49,0,0,80,76,65,0,0,0,0,0,76,68,89,0,0,0,0,0,35,48,0,0,0,0,0,0,40,116,101,109,112,41,44,89,0,0,0,0,0,0,0,0,100,101,99,116,0,0,0,0,114,49,48,0,0,0,0,0,109,111,118,0,0,0,0,0,114,48,0,0,0,0,0,0,42,114,49,48,0,0,0,0,42,114,49,48,43,0,0,0,114,49,0,0,0,0,0,0,109,111,118,98,0,0,0,0,42,114,48,0,0,0,0,0,80,85,83,72,0,0,0,0,72,76,0,0,0,0,0,0,80,79,80,0,0,0,0,0,76,68,0,0,0,0,0,0,40,72,76,41,0,0,0,0,65,0,0,0,0,0,0,0,86,80,79,75,69,0,0,0,109,105,115,115,105,110,103,32,99,111,109,109,97,32,105,110,32,86,80,79,75,69,0,0,84,65,88,0,0,0,0,0,76,68,65,0,0,0,0,0,74,83,82,0,0,0,0,0,87,82,84,86,82,77,0,0,114,50,0,0,0,0,0,0,98,108,0,0,0,0,0,0,64,74,83,82,0,0,0,0,100,97,116,97,0,0,0,0,67,65,76,76,0,0,0,0,82,69,77,0,0,0,0,0,99,108,115,0,0,0,0,0,119,97,105,116,0,0,0,0,72,65,76,84,0,0,0,0,98,97,100,32,115,121,110,116,97,120,32,102,111,114,32,82,69,83,84,79,82,69,0,0,35,99,118,98,95,37,115,0,62,62,56,0,0,0,0,0,114,101,97,100,95,112,111,105,110,116,101,114,0,0,0,0,114,101,97,100,95,112,111,105,110,116,101,114,43,49,0,0,99,118,98,95,37,115,0,0,108,105,0,0,0,0,0,0,64,114,101,97,100,95,112,111,105,110,116,101,114,0,0,0,40,114,101,97,100,95,112,111,105,110,116,101,114,41,0,0,82,69,65,68,0,0,0,0,66,89,84,69,0,0,0,0,68,65,84,65,0,0,0,0,9,98,121,116,101,32,0,0,9,68,66,32,0,0,0,0,44,0,0,0,0,0,0,0,62,37,48,50,120,0,0,0,36,37,48,50,120,0,0,0,10,0,0,0,0,0,0,0,110,111,116,32,97,32,99,111,110,115,116,97,110,116,32,101,120,112,114,101,115,115,105,111,110,32,105,110,32,67,79,78,83,84,0,0,0,0,0,0,110,111,116,32,97,32,99,111,110,115,116,97,110,116,32,101,120,112,114,101,115,115,105,111,110,32,105,110,32,97,114,114,97,121,32,97,99,99,101,115,115,0,0,0,0,0,0,0,9,100,97,116,97,32,0,0,9,68,87,32,0,0,0,0,37,115,37,115,43,37,100,0,97,114,114,97,121,95,0,0,37,115,37,115,0,0,0,0,62,37,48,52,120,0,0,0,36,37,48,52,120,0,0,0,79,85,84,0,0,0,0,0,109,105,115,115,105,110,103,32,99,111,109,109,97,32,105,110,32,79,85,84,0,0,0,0,73,103,110,111,114,105,110,103,32,79,85,84,32,40,110,111,116,32,115,117,112,112,111,114,116,101,100,32,102,111,114,32,54,53,48,50,41,0,0,0,64,83,79,85,78,68,0,0,79,85,84,32,116,111,32,48,120,102,102,32,102,111,114,32,97,117,100,105,111,32,105,115,32,116,104,101,32,111,110,108,121,32,115,117,112,112,111,114,116,101,100,32,117,115,101,46,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,66,67,0,0,0,0,0,0,40,67,41,0,0,0,0,0,80,82,73,78,84,0,0,0,65,84,0,0,0,0,0,0,64,99,117,114,115,111,114,0,40,99,117,114,115,111,114,41,0,0,0,0,0,0,0,0,35,37,100,0,0,0,0,0,99,117,114,115,111,114,0,0,99,117,114,115,111,114,43,49,0,0,0,0,0,0,0,0,112,114,105,110,116,95,115,116,114,105,110,103,95,99,117,114,115,111,114,95,99,111,110,115,116,97,110,116,0,0,0,0,9,68,66,32,36,37,48,50,120,44,36,37,48,50,120,44,36,37,48,50,120,10,0,0,112,114,105,110,116,95,115,116,114,105,110,103,95,99,117,114,115,111,114,0,0,0,0,0,112,114,105,110,116,95,115,116,114,105,110,103,0,0,0,0,37,100,0,0,0,0,0,0,114,51,0,0,0,0,0,0,9,101,118,101,110,10,0,0,109,105,115,115,105,110,103,32,115,105,122,101,32,102,111,114,32,110,117,109,98,101,114,0,109,105,115,115,105,110,103,32,62,32,105,110,32,80,82,73,78,84,32,102,111,114,32,110,117,109,98,101,114,0,0,0,112,114,105,110,116,95,110,117,109,98,101,114,0,0,0,0,76,68,88,0,0,0,0,0,35,50,0,0,0,0,0,0,83,84,88,0,0,0,0,0,35,51,50,0,0,0,0,0,112,114,105,110,116,95,110,117,109,98,101,114,37,100,0,0,35,52,56,0,0,0,0,0,114,53,0,0,0,0,0,0,62,48,50,50,48,0,0,0,62,48,50,51,48,0,0,0,36,48,50,50,48,0,0,0,36,48,50,51,48,0,0,0,67,72,82,36,0,0,0,0,115,121,110,116,97,120,32,101,114,114,111,114,32,105,110,32,67,72,82,36,0,0,0,0,115,119,112,98,0,0,0,0,112,114,105,110,116,95,99,104,97,114,0,0,0,0,0,0,68,69,70,73,78,69,0,0,115,121,110,116,97,120,32,101,114,114,111,114,32,105,110,32,68,69,70,73,78,69,0,0,83,80,82,73,84,69,0,0,80,76,69,84,84,69,82,0,65,83,76,0,0,0,0,0,35,55,0,0,0,0,0,0,112,111,105,110,116,101,114,43,49,0,0,0,0,0,0,0,82,79,76,0,0,0,0,0,112,111,105,110,116,101,114,0,114,52,0,0,0,0,0,0,115,108,97,0,0,0,0,0,53,0,0,0,0,0,0,0,97,105,0,0,0,0,0,0,62,51,56,48,48,0,0,0,65,68,68,0,0,0,0,0,83,69,84,0,0,0,0,0,72,0,0,0,0,0,0,0,36,48,55,0,0,0,0,0,69,88,0,0,0,0,0,0,68,69,0,0,0,0,0,0,109,105,115,115,105,110,103,32,99,111,109,109,97,32,105,110,32,68,69,70,73,78,69,0,109,105,115,115,105,110,103,32,108,97,98,101,108,32,105,110,32,68,69,70,73,78,69,0,35,99,118,98,95,0,0,0,117,110,112,97,99,107,0,0,0,0,0,0,0,0,0,0,65,70,0,0,0,0,0,0,100,101,102,105,110,101,95,115,112,114,105,116,101,0,0,0,67,72,65,82,0,0,0,0,67,79,76,79,82,0,0,0,100,101,102,105,110,101,95,99,111,108,111,114,95,117,110,112,97,99,107,0,0,0,0,0,100,101,102,105,110,101,95,99,104,97,114,95,117,110,112,97,99,107,0,0,0,0,0,0,100,101,102,105,110,101,95,99,111,108,111,114,0,0,0,0,100,101,102,105,110,101,95,99,104,97,114,0,0,0,0,0,86,82,65,77,0,0,0,0,84,89,65,0,0,0,0,0,116,101,109,112,50,43,49,0,116,101,109,112,50,0,0,0,66,0,0,0,0,0,0,0,76,0,0,0,0,0,0,0,76,68,73,82,77,86,0,0,76,68,73,82,86,77,0,0,70,76,73,67,75,69,82,0,79,78,0,0,0,0,0,0,109,111,100,101,0,0,0,0,35,50,53,49,0,0,0,0,62,48,52,48,48,0,0,0,115,122,99,98,0,0,0,0,64,109,111,100,101,0,0,0,82,69,83,0,0,0,0,0,50,0,0,0,0,0,0,0,79,70,70,0,0,0,0,0,79,82,65,0,0,0,0,0,35,52,0,0,0,0,0,0,115,111,99,98,0,0,0,0,111,110,108,121,32,97,108,108,111,119,101,100,32,83,80,82,73,84,69,32,70,76,73,67,75,69,82,32,79,78,47,79,70,70,0,0,0,0,0,0,109,105,115,115,105,110,103,32,99,111,109,109,97,32,105,110,32,83,80,82,73,84,69,0,115,112,114,105,116,101,95,100,97,116,97,0,0,0,0,0,115,112,114,105,116,101,95,100,97,116,97,43,49,0,0,0,114,54,0,0,0,0,0,0,115,112,114,105,116,101,95,100,97,116,97,43,50,0,0,0,114,55,0,0,0,0,0,0,115,112,114,105,116,101,95,100,97,116,97,43,51,0,0,0,117,112,100,97,116,101,95,115,112,114,105,116,101,0,0,0,66,73,84,77,65,80,0,0,115,121,110,116,97,120,32,101,114,114,111,114,32,105,110,32,66,73,84,77,65,80,0,0,105,110,118,97,108,105,100,32,104,101,120,97,100,101,99,105,109,97,108,32,118,97,108,117,101,32,105,110,32,66,73,84,77,65,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,68,66,32,36,37,48,50,120,44,36,37,48,50,120,44,36,37,48,50,120,44,36,37,48,50,120,44,36,37,48,50,120,44,36,37,48,50,120,44,36,37,48,50,120,44,36,37,48,50,120,10,0,0,0,0,37,115,0,0,0,0,0,0,9,98,121,116,101,32,62,37,48,50,120,44,62,37,48,50,120,44,62,37,48,50,120,44,62,37,48,50,120,44,62,37,48,50,120,44,62,37,48,50,120,44,62,37,48,50,120,44,62,37,48,50,120,10,0,0,119,105,100,116,104,32,101,114,114,111,114,32,105,110,32,66,73,84,77,65,80,0,0,0,66,79,82,68,69,82,0,0,87,82,84,86,68,80,0,0,115,114,108,0,0,0,0,0,56,0,0,0,0,0,0,0,111,114,105,0,0,0,0,0,62,56,55,48,48,0,0,0,64,86,68,80,87,65,68,82,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,84,104,101,32,50,110,100,32,66,79,82,68,69,82,32,97,114,103,117,109,101,110,116,32,111,110,108,121,32,97,118,97,105,108,97,98,108,101,32,111,110,32,83,101,103,97,32,77,97,115,116,101,114,32,83,121,115,116,101,109,0,0,0,0,36,50,48,0,0,0,0,0,82,82,67,65,0,0,0,0,48,0,0,0,0,0,0,0,83,67,82,79,76,76,0,0,84,104,101,32,83,67,82,79,76,76,32,115,101,110,116,101,110,99,101,32,105,115,32,111,110,108,121,32,97,118,97,105,108,97,98,108,101,32,111,110,32,83,101,103,97,32,77,97,115,116,101,114,32,83,121,115,116,101,109,0,0,0,0,0,57,0,0,0,0,0,0,0,80,65,76,69,84,84,69,0,84,104,101,32,80,65,76,69,84,84,69,32,115,101,110,116,101,110,99,101,32,105,115,32,111,110,108,121,32,97,118,97,105,108,97,98,108,101,32,111,110,32,83,101,103,97,32,77,97,115,116,101,114,32,83,121,115,116,101,109,0,0,0,0,76,79,65,68,0,0,0,0,109,105,115,115,105,110,103,32,108,97,98,101,108,32,105,110,32,80,65,76,69,84,84,69,32,76,79,65,68,0,0,0,112,97,108,101,116,116,101,95,108,111,97,100,0,0,0,0,36,67,48,0,0,0,0,0,83,69,84,87,82,84,0,0,109,105,115,115,105,110,103,32,99,111,109,109,97,32,105,110,32,80,65,76,69,84,84,69,0,0,0,0,0,0,0,0,40,86,68,80,41,0,0,0,83,73,71,78,69,68,0,0,109,105,115,115,105,110,103,32,110,97,109,101,32,105,110,32,83,73,71,78,69,68,0,0,118,97,114,105,97,98,108,101,32,97,108,114,101,97,100,121,32,83,73,71,78,69,68,47,85,78,83,73,71,78,69,68,0,0,0,0,0,0,0,0,85,78,83,73,71,78,69,68,0,0,0,0,0,0,0,0,109,105,115,115,105,110,103,32,110,97,109,101,32,105,110,32,85,78,83,73,71,78,69,68,0,0,0,0,0,0,0,0,67,79,78,83,84,0,0,0,110,97,109,101,32,114,101,113,117,105,114,101,100,32,102,111,114,32,99,111,110,115,116,97,110,116,32,97,115,115,105,103,110,109,101,110,116,0,0,0,99,111,110,115,116,97,110,116,32,114,101,100,101,102,105,110,101,100,0,0,0,0,0,0,114,101,113,117,105,114,101,100,32,39,61,39,32,102,111,114,32,99,111,110,115,116,97,110,116,32,97,115,115,105,103,110,109,101,110,116,0,0,0,0,99,111,110,115,116,95,37,115,58,9,101,113,117,32,36,37,48,52,120,0,0,0,0,0,37,115,10,0,0,0,0,0,99,111,110,115,116,95,37,115,9,101,113,117,32,62,37,48,52,120,0,0,0,0,0,0,68,73,77,0,0,0,0,0,109,105,115,115,105,110,103,32,110,97,109,101,32,105,110,32,68,73,77,0,0,0,0,0,110,111,116,32,97,32,99,111,110,115,116,97,110,116,32,101,120,112,114,101,115,115,105,111,110,32,105,110,32,68,73,77,0,0,0,0,0,0,0,0,109,105,115,115,105,110,103,32,114,105,103,104,116,32,112,97,114,101,110,116,104,101,115,105,115,32,105,110,32,68,73,77,0,0,0,0,0,0,0,0,97,114,114,97,121,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,0,0,0,77,79,68,69,0,0,0,0,98,97,100,32,115,121,110,116,97,120,32,102,111,114,32,77,79,68,69,0,0,0,0,0,85,115,101,32,83,71,49,48,48,48,32,105,102,32,121,111,117,32,119,97,110,116,32,116,111,32,117,115,101,32,77,79,68,69,32,48,0,0,0,0,109,111,100,101,95,48,0,0,85,115,101,32,83,71,49,48,48,48,32,105,102,32,121,111,117,32,119,97,110,116,32,116,111,32,117,115,101,32,77,79,68,69,32,49,0,0,0,0,109,111,100,101,95,49,0,0,85,115,101,32,83,71,49,48,48,48,32,105,102,32,121,111,117,32,119,97,110,116,32,116,111,32,117,115,101,32,77,79,68,69,32,50,0,0,0,0,109,111,100,101,95,50,0,0,77,79,68,69,32,52,32,111,110,108,121,32,115,117,112,112,111,114,116,101,100,32,102,111,114,32,83,101,103,97,32,77,97,115,116,101,114,32,83,121,115,116,101,109,0,0,0,0,109,111,100,101,95,52,0,0,83,67,82,69,69,78,0,0,98,97,100,32,115,121,110,116,97,120,32,102,111,114,32,83,67,82,69,69,78,0,0,0,69,78,65,66,76,69,0,0,69,78,65,83,67,82,0,0,68,73,83,65,66,76,69,0,68,73,83,83,67,82,0,0,114,57,0,0,0,0,0,0,109,105,115,115,105,110,103,32,99,111,109,109,97,32,97,102,116,101,114,32,115,101,99,111,110,100,32,112,97,114,97,109,101,116,101,114,32,105,110,32,83,67,82,69,69,78,0,0,114,56,0,0,0,0,0,0,109,105,115,115,105,110,103,32,99,111,109,109,97,32,97,102,116,101,114,32,116,104,105,114,100,32,112,97,114,97,109,101,116,101,114,32,105,110,32,83,67,82,69,69,78,0,0,0,109,105,115,115,105,110,103,32,99,111,109,109,97,32,97,102,116,101,114,32,102,111,117,114,116,104,32,112,97,114,97,109,101,116,101,114,32,105,110,32,83,67,82,69,69,78,0,0,67,80,89,66,76,75,0,0,35,37,115,0,0,0,0,0,35,51,0,0,0,0,0,0,35,50,52,0,0,0,0,0,62,49,56,48,48,0,0,0,62,48,51,48,48,0,0,0,64,106,115,114,0,0,0,0,36,51,56,48,48,0,0,0,36,49,56,48,48,0,0,0,36,48,54,48,48,0,0,0,36,48,51,48,48,0,0,0,80,76,65,89,0,0,0,0,98,97,100,32,115,121,110,116,97,120,32,102,111,114,32,80,76,65,89,0,0,0,0,0,0,0,0,0,0,0,0,0,35,109,117,115,105,99,95,115,105,108,101,110,99,101,0,0,35,109,117,115,105,99,95,115,105,108,101,110,99,101,62,62,56,0,0,0,0,0,0,0,109,117,115,105,99,95,115,105,108,101,110,99,101,0,0,0,109,117,115,105,99,95,112,108,97,121,0,0,0,0,0,0,78,79,78,69,0,0,0,0,109,117,115,105,99,95,109,111,100,101,0,0,0,0,0,0,99,108,114,0,0,0,0,0,64,109,117,115,105,99,95,109,111,100,101,0,0,0,0,0,40,109,117,115,105,99,95,109,111,100,101,41,0,0,0,0,83,73,77,80,76,69,0,0,78,79,0,0,0,0,0,0,68,82,85,77,83,0,0,0,111,110,108,121,32,97,108,108,111,119,101,100,32,80,76,65,89,32,83,73,77,80,76,69,32,78,79,32,68,82,85,77,83,0,0,0,0,0,0,0,37,100,32,32,32,59,32,37,100,42,50,53,54,0,0,0,70,85,76,76,0,0,0,0,111,110,108,121,32,97,108,108,111,119,101,100,32,80,76,65,89,32,70,85,76,76,32,78,79,32,68,82,85,77,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,97,100,32,115,121,110,116,97,120,32,102,111,114,32,77,85,83,73,67,0,0,0,0,82,69,80,69,65,84,0,0,83,84,79,80,0,0,0,0,98,97,100,32,115,121,110,116,97,120,32,102,111,114,32,100,114,117,109,32,105,110,32,77,85,83,73,67,0,0,0,0,83,0,0,0,0,0,0,0,98,97,100,32,115,121,110,116,97,120,32,102,111,114,32,110,111,116,101,32,105,110,32,77,85,83,73,67,0,0,0,0,116,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,32,102,111,114,32,77,85,83,73,67,0,0,0,0,9,98,121,116,101,32,62,37,48,50,120,44,62,37,48,50,120,44,62,37,48,50,120,44,62,37,48,50,120,10,0,0,9,100,98,32,36,37,48,50,120,44,36,37,48,50,120,44,36,37,48,50,120,44,36,37,48,50,120,10,0,0,0,0,66,97,100,32,115,121,110,116,97,120,32,102,111,114,32,79,78,32,70,82,65,77,69,32,71,79,83,85,66,0,0,0,77,105,115,115,105,110,103,32,108,97,98,101,108,32,102,111,114,32,79,78,32,70,82,65,77,69,32,71,79,83,85,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,111,114,101,32,116,104,97,110,32,111,110,101,32,79,78,32,70,82,65,77,69,32,71,79,83,85,66,0,0,0,0,70,65,83,84,0,0,0,0,114,101,113,117,105,114,101,100,32,71,79,84,79,32,111,114,32,71,79,83,85,66,32,97,102,116,101,114,32,79,78,0,116,111,111,32,109,97,110,121,32,111,112,116,105,111,110,115,32,102,111,114,32,79,78,32,115,116,97,116,101,109,101,110,116,0,0,0,0,0,0,0,67,77,80,0,0,0,0,0,83,69,67,0,0,0,0,0,83,66,67,0,0,0,0,0,66,67,83,46,76,0,0,0,99,105,0,0,0,0,0,0,64,99,118,37,100,0,0,0,106,108,0,0,0,0,0,0,98,0,0,0,0,0,0,0,67,80,0,0,0,0,0,0,74,80,0,0,0,0,0,0,78,67,0,0,0,0,0,0,35,40,99,118,37,100,45,49,41,62,62,56,0,0,0,0,35,99,118,37,100,45,49,0,67,76,67,0,0,0,0,0,35,99,118,37,100,0,0,0,65,68,67,0,0,0,0,0,73,78,89,0,0,0,0,0,74,77,80,0,0,0,0,0,40,116,101,109,112,50,41,0,64,99,118,37,100,40,114,49,41,0,0,0,0,0,0,0,82,76,65,0,0,0,0,0,73,78,67,0,0,0,0,0,68,87,0,0,0,0,0,0,83,79,85,78,68,0,0,0,115,121,110,116,97,120,32,101,114,114,111,114,32,105,110,32,83,79,85,78,68,0,0,0,117,115,105,110,103,32,83,79,85,78,68,32,48,45,51,32,119,105,116,104,32,65,89,45,51,45,56,57,49,48,32,116,97,114,103,101,116,0,0,0,117,115,105,110,103,32,83,79,85,78,68,32,53,45,57,32,119,105,116,104,32,83,78,55,54,52,56,57,32,116,97,114,103,101,116,0,0,0,0,0,109,105,115,115,105,110,103,32,99,111,109,109,97,32,105,110,32,115,111,117,110,100,0,0,35,49,50,56,0,0,0,0,62,56,48,48,48,0,0,0,36,56,48,0,0,0,0,0,115,110,55,54,52,56,57,95,102,114,101,113,0,0,0,0,35,49,52,52,0,0,0,0,62,57,48,48,48,0,0,0,36,57,48,0,0,0,0,0,115,110,55,54,52,56,57,95,118,111,108,0,0,0,0,0,35,49,54,48,0,0,0,0,62,97,48,48,48,0,0,0,36,97,48,0,0,0,0,0,35,49,55,54,0,0,0,0,62,98,48,48,48,0,0,0,36,98,48,0,0,0,0,0,35,49,57,50,0,0,0,0,62,99,48,48,48,0,0,0,36,99,48,0,0,0,0,0,35,50,48,56,0,0,0,0,62,100,48,48,48,0,0,0,36,100,48,0,0,0,0,0,115,110,55,54,52,56,57,95,99,111,110,116,114,111,108,0,35,50,52,48,0,0,0,0,62,102,48,48,48,0,0,0,36,102,48,0,0,0,0,0,36,48,48,0,0,0,0,0,97,121,51,95,102,114,101,113,0,0,0,0,0,0,0,0,36,48,56,0,0,0,0,0,97,121,51,95,114,101,103,0,36,48,50,0,0,0,0,0,36,48,57,0,0,0,0,0,36,48,52,0,0,0,0,0,36,48,97,0,0,0,0,0,36,48,98,0,0,0,0,0,36,48,100,0,0,0,0,0,36,48,54,0,0,0,0,0,36,51,102,0,0,0,0,0,36,52,48,0,0,0,0,0,65,83,77,0,0,0,0,0,32,73,78,67,66,73,78,0,32,32,98,99,111,112,121,0,68,69,70,0,0,0,0,0,70,78,0,0,0,0,0,0,115,121,110,116,97,120,32,101,114,114,111,114,32,102,111,114,32,68,69,70,32,70,78,0,109,105,115,115,105,110,103,32,102,117,110,99,116,105,111,110,32,110,97,109,101,32,102,111,114,32,68,69,70,32,70,78,0,0,0,0,0,0,0,0,68,69,70,32,70,78,32,110,97,109,101,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,0,0,0,0,0,115,121,110,116,97,120,32,101,114,114,111,114,32,105,110,32,97,114,103,117,109,101,110,116,32,108,105,115,116,32,102,111,114,32,68,69,70,32,70,78,0,0,0,0,0,0,0,0,77,111,114,101,32,116,104,97,110,32,51,50,32,97,114,103,117,109,101,110,116,115,32,105,110,32,68,69,70,32,70,78,0,0,0,0,0,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,32,105,110,32,68,69,70,32,70,78,0,109,105,115,115,105,110,103,32,61,32,105,110,32,68,69,70,32,70,78,0,0,0,0,0,98,97,100,32,115,121,110,116,97,120,32,105,110,115,105,100,101,32,68,69,70,32,70,78,32,114,101,112,108,97,99,101,109,101,110,116,32,116,101,120,116,0,0,0,0,0,0,0,79,80,84,73,79,78,0,0,114,101,113,117,105,114,101,100,32,110,97,109,101,32,97,102,116,101,114,32,79,80,84,73,79,78,0,0,0,0,0,0,69,88,80,76,73,67,73,84,0,0,0,0,0,0,0,0,87,65,82,78,73,78,71,83,0,0,0,0,0,0,0,0,109,105,115,115,105,110,103,32,79,78,47,79,70,70,32,105,110,32,79,80,84,73,79,78,32,87,65,82,78,73,78,71,83,0,0,0,0,0,0,0,110,111,110,45,114,101,99,111,103,110,105,122,101,100,32,79,80,84,73,79,78,0,0,0,66,65,78,75,0,0,0,0,82,79,77,0,0,0,0,0,66,97,100,32,115,121,110,116,97,120,32,102,111,114,32,66,65,78,75,32,82,79,77,0,66,65,78,75,32,82,79,77,32,110,111,116,32,49,50,56,44,32,50,53,54,44,32,53,49,50,32,111,114,32,49,48,50,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,65,78,75,32,82,79,77,32,117,115,101,100,32,116,119,105,99,101,0,0,0,0,0,66,97,110,107,45,115,119,105,116,99,104,105,110,103,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,119,105,116,104,32,99,117,114,114,101,110,116,32,112,108,97,116,102,111,114,109,0,0,0,0,0,0,110,111,116,32,97,32,99,111,110,115,116,97,110,116,32,101,120,112,114,101,115,115,105,111,110,32,105,110,32,66,65,78,75,32,83,69,76,69,67,84,0,0,0,0,0,0,0,0,85,115,105,110,103,32,66,65,78,75,32,83,69,76,69,67,84,32,119,105,116,104,111,117,116,32,66,65,78,75,32,82,79,77,0,0,0,0,0,0,64,62,37,120,0,0,0,0,40,36,102,102,102,101,41,0,40,36,55,48,48,48,41,0,40,36,37,48,52,120,41,0,85,115,105,110,103,32,66,65,78,75,32,119,105,116,104,111,117,116,32,66,65,78,75,32,82,79,77,0,0,0,0,0,98,97,110,107,0,0,0,0,36,37,48,53,120,0,0,0,70,79,82,71,0,0,0,0,79,82,71,0,0,0,0,0,36,52,48,48,48,0,0,0,36,56,48,48,48,0,0,0,36,99,48,48,48,0,0,0,77,105,115,115,105,110,103,32,108,101,102,116,32,112,97,114,101,110,116,104,101,115,105,115,32,105,110,32,86,68,80,0,78,111,116,32,97,32,99,111,110,115,116,97,110,116,32,105,110,32,86,68,80,0,0,0,77,105,115,115,105,110,103,32,114,105,103,104,116,32,112,97,114,101,110,116,104,101,115,105,115,32,105,110,32,86,68,80,0,0,0,0,0,0,0,0,77,105,115,115,105,110,103,32,101,113,117,97,108,32,115,105,103,110,32,105,110,32,86,68,80,0,0,0,0,0,0,0,37,100,32,32,32,59,32,37,100,42,50,53,54,43,48,120,56,48,48,48,0,0,0,0,115,121,110,116,97,120,32,101,114,114,111,114,32,105,110,32,115,116,97,116,101,109,101,110,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,59,32,37,115,10,0,0,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,32,39,37,115,39,32,108,97,98,101,108,0,0,0,0,0,0,80,82,79,67,69,68,85,82,69,0,0,0,0,0,0,0,101,118,101,110,0,0,0,0,80,82,79,67,69,68,85,82,69,32,119,105,116,104,111,117,116,32,108,97,98,101,108,32,105,110,32,115,97,109,101,32,108,105,110,101,0,0,0,0,0,0,0,0,0,0,0,0,115,116,97,114,116,105,110,103,32,80,82,79,67,69,68,85,82,69,32,119,105,116,104,111,117,116,32,69,78,68,105,110,103,32,112,114,101,118,105,111,117,115,32,80,82,79,67,69,68,85,82,69,0,0,0,0,69,78,68,32,119,105,116,104,111,117,116,32,80,82,79,67,69,68,85,82,69,0,0,0,69,110,100,105,110,103,32,80,82,79,67,69,68,85,82,69,32,119,105,116,104,32,99,111,110,116,114,111,108,32,98,108,111,99,107,32,115,116,105,108,108,32,111,112,101,110,0,0,73,78,67,76,85,68,69], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+37056);
/* memory initializer */ allocate([109,105,115,115,105,110,103,32,113,117,111,116,101,115,32,105,110,32,73,78,67,76,85,68,69,0,0,0,0,0,0,0,114,0,0,0,0,0,0,0,73,78,67,76,85,68,69,32,110,111,116,32,115,117,99,99,101,115,115,102,117,108,0,0,69,120,116,114,97,32,99,104,97,114,97,99,116,101,114,115,0,0,0,0,0,0,0,0,69,114,114,111,114,58,32,80,82,79,67,69,68,85,82,69,32,39,37,115,39,32,106,117,109,112,101,100,32,105,110,32,98,121,32,71,79,84,79,10,0,0,0,0,0,0,0,0,69,114,114,111,114,58,32,67,111,109,109,111,110,32,108,97,98,101,108,32,39,37,115,39,32,106,117,109,112,101,100,32,105,110,32,98,121,32,71,79,83,85,66,10,0,0,0,0,37,115,37,115,58,9,101,113,117,32,36,37,48,52,120,0,58,0,0,0,0,0,0,0,98,115,115,0,0,0,0,0,58,9,0,0,0,0,0,0,114,98,32,49,0,0,0,0,114,98,32,50,0,0,0,0,87,97,114,110,105,110,103,58,32,118,97,114,105,97,98,108,101,32,39,37,115,39,32,114,101,97,100,32,98,117,116,32,110,101,118,101,114,32,97,115,115,105,103,110,101,100,10,0,87,97,114,110,105,110,103,58,32,118,97,114,105,97,98,108,101,32,39,37,115,39,32,97,115,115,105,103,110,101,100,32,98,117,116,32,110,101,118,101,114,32,114,101,97,100,10,0,97,114,114,97,121,95,37,115,58,9,101,113,117,32,36,37,48,52,120,0,0,0,0,0,97,114,114,97,121,95,37,115,58,9,114,98,32,37,100,0,114,97,109,95,101,110,100,58,10,0,0,0,0,0,0,0,10,67,86,66,97,115,105,99,32,99,111,109,112,105,108,101,114,32,118,48,46,56,46,48,32,65,112,114,47,50,54,47,50,48,50,53,10,0,0,0,40,99,41,32,50,48,50,52,45,50,48,50,53,32,79,115,99,97,114,32,84,111,108,101,100,111,32,71,46,32,104,116,116,112,115,58,47,47,110,97,110,111,99,104,101,115,115,46,111,114,103,47,10,10,0,0,85,115,97,103,101,58,10,0,32,32,32,32,99,118,98,97,115,105,99,32,91,45,68,77,89,67,79,78,83,84,61,49,50,51,93,32,105,110,112,117,116,46,98,97,115,32,111,117,116,112,117,116,46,97,115,109,32,91,108,105,98,114,97,114,121,95,112,97,116,104,93,10,0,0,0,0,0,0,0,0,32,32,32,32,99,118,98,97,115,105,99,32,45,45,37,115,32,91,45,68,77,89,67,79,78,83,84,61,49,50,51,93,32,105,110,112,117,116,46,98,97,115,32,111,117,116,112,117,116,46,97,115,109,32,91,108,105,98,114,97,114,121,95,112,97,116,104,93,10,0,0,0,32,32,32,32,99,118,98,97,115,105,99,32,45,45,37,115,32,37,115,32,91,45,68,77,89,67,79,78,83,84,61,49,50,51,93,32,105,110,112,117,116,46,98,97,115,32,111,117,116,112,117,116,46,97,115,109,32,91,108,105,98,114,97,114,121,95,112,97,116,104,93,10,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,37,115,10,0,0,0,0,0,32,32,32,32,66,121,32,100,101,102,97,117,108,116,44,32,105,116,32,119,105,108,108,32,103,101,110,101,114,97,116,101,32,97,115,115,101,109,98,108,101,114,32,102,105,108,101,115,32,102,111,114,32,67,111,108,101,99,111,118,105,115,105,111,110,46,10,0,0,0,0,0,32,32,32,32,84,104,101,32,108,105,98,114,97,114,121,95,112,97,116,104,32,97,114,103,117,109,101,110,116,32,105,115,32,111,112,116,105,111,110,97,108,32,115,111,32,121,111,117,32,99,97,110,32,112,114,111,118,105,100,101,32,97,10,0,32,32,32,32,112,97,116,104,32,119,104,101,114,101,32,116,104,101,32,112,114,111,108,111,103,117,101,32,97,110,100,32,101,112,105,108,111,103,117,101,32,102,105,108,101,115,32,97,114,101,32,97,118,97,105,108,97,98,108,101,46,10,0,0,32,32,32,32,73,116,32,119,105,108,108,32,114,101,116,117,114,110,32,97,32,122,101,114,111,32,101,114,114,111,114,32,99,111,100,101,32,105,102,32,99,111,109,112,105,108,97,116,105,111,110,32,119,97,115,10,0,0,0,0,0,0,0,0,32,32,32,32,115,117,99,99,101,115,115,102,117,108,44,32,111,114,32,110,111,110,45,122,101,114,111,32,111,116,104,101,114,119,105,115,101,46,10,10,0,0,0,0,0,0,0,0,77,97,110,121,32,116,104,97,110,107,115,32,116,111,32,65,108,98,101,114,116,44,32,97,98,101,107,101,114,44,32,97,111,116,116,97,44,32,97,114,116,114,97,103,44,32,97,116,97,114,105,50,54,48,48,108,97,110,100,44,10,0,0,0,99,97,114,108,115,115,111,110,44,32,99,104,97,108,107,121,119,54,52,44,32,67,114,97,122,121,66,111,115,115,44,32,100,114,102,108,111,121,100,44,32,103,101,109,105,110,116,114,111,110,105,99,44,32,74,101,115,115,32,82,97,103,97,110,44,10,0,0,0,0,0,0,75,97,109,115,104,97,102,116,44,32,75,105,119,105,44,32,77,65,68,114,105,103,97,108,44,32,112,105,120,101,108,98,111,121,44,32,83,105,82,105,111,75,68,44,32,84,97,114,122,105,108,108,97,44,10,0,84,111,110,121,32,67,114,117,105,115,101,44,32,116,117,114,115,105,108,105,111,110,44,32,118,105,115,114,101,97,108,109,44,32,119,97,118,101,109,111,116,105,111,110,44,32,97,110,100,32,121,111,117,107,105,46,10,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,116,97,114,103,101,116,58,32,37,115,10,0,0,0,0,0,45,114,97,109,49,54,32,111,112,116,105,111,110,32,111,110,108,121,32,97,112,112,108,105,101,115,32,116,111,32,77,83,88,46,10,0,0,0,0,0,45,99,112,109,32,111,112,116,105,111,110,32,111,110,108,121,32,97,112,112,108,105,101,115,32,116,111,32,77,101,109,111,116,101,99,104,32,111,114,32,78,65,66,85,46,10,0,0,45,114,111,109,49,54,32,111,112,116,105,111,110,32,111,110,108,121,32,97,112,112,108,105,101,115,32,116,111,32,67,114,101,97,116,105,118,105,115,105,111,110,46,10,0,0,0,0,37,115,32,110,97,109,101,32,105,110,99,108,117,100,101,115,32,105,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,115,46,10,0,0,0,99,111,110,115,116,97,110,116,32,114,101,100,101,102,105,110,101,100,32,37,115,10,0,0,37,115,32,109,105,115,115,105,110,103,32,97,115,115,105,103,110,109,101,110,116,46,32,83,121,110,116,97,120,58,32,45,68,77,89,67,79,78,83,84,65,78,84,61,49,50,51,32,45,68,35,77,89,66,73,71,67,79,78,83,84,65,78,84,61,49,50,51,52,53,10,0,67,111,117,108,100,110,39,116,32,111,112,101,110,32,39,37,115,39,32,115,111,117,114,99,101,32,102,105,108,101,46,10,0,0,0,0,0,0,0,0,99,118,98,97,115,105,99,95,116,101,109,112,111,114,97,114,121,46,97,115,109,0,0,0,119,0,0,0,0,0,0,0,67,111,117,108,100,110,39,116,32,111,112,101,110,32,39,37,115,39,32,116,101,109,112,111,114,97,114,121,32,102,105,108,101,46,10,0,0,0,0,0,69,110,100,32,111,102,32,115,111,117,114,99,101,32,119,105,116,104,32,99,111,110,116,114,111,108,32,98,108,111,99,107,32,115,116,105,108,108,32,111,112,101,110,0,0,0,0,0,69,110,100,32,111,102,32,115,111,117,114,99,101,32,119,105,116,104,111,117,116,32,101,110,100,105,110,103,32,80,82,79,67,69,68,85,82,69,0,0,67,111,117,108,100,110,39,116,32,111,112,101,110,32,39,37,115,39,32,111,117,116,112,117,116,32,102,105,108,101,46,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+48536);
/* memory initializer */ allocate([47,0,0,0,0,0,0,0,9,59,32,67,86,66,97,115,105,99,32,99,111,109,112,105,108,101,114,32,118,48,46,56,46,48,32,65,112,114,47,50,54,47,50,48,50,53,10,0,9,59,32,67,111,109,109,97,110,100,58,32,0,0,0,0,34,37,115,34,32,0,0,0,37,115,32,0,0,0,0,0,9,59,32,67,114,101,97,116,101,100,58,32,37,115,10,0,67,79,76,69,67,79,58,9,101,113,117,32,37,100,10,0,83,71,49,48,48,48,58,9,101,113,117,32,37,100,10,0,77,83,88,58,9,101,113,117,32,37,100,10,0,0,0,0,83,71,77,58,9,101,113,117,32,37,100,10,0,0,0,0,83,86,73,58,9,101,113,117,32,37,100,10,0,0,0,0,83,79,82,68,58,9,101,113,117,32,37,100,10,0,0,0,77,69,77,79,84,69,67,72,58,9,101,113,117,32,37,100,10,0,0,0,0,0,0,0,69,73,78,83,84,69,73,78,58,9,101,113,117,32,37,100,10,0,0,0,0,0,0,0,67,80,77,58,9,101,113,117,32,37,100,10,0,0,0,0,80,69,78,67,73,76,58,9,101,113,117,32,37,100,10,0,80,86,50,48,48,48,58,9,101,113,117,32,37,100,10,0,84,73,57,57,58,9,101,113,117,32,37,100,10,0,0,0,78,65,66,85,58,9,101,113,117,32,37,100,10,0,0,0,83,77,83,58,9,101,113,117,32,37,100,10,0,0,0,0,67,86,66,65,83,73,67,95,77,85,83,73,67,95,80,76,65,89,69,82,58,9,101,113,117,32,37,100,10,0,0,0,67,86,66,65,83,73,67,95,67,79,77,80,82,69,83,83,73,79,78,58,9,101,113,117,32,37,100,10,0,0,0,0,67,86,66,65,83,73,67,95,66,65,78,75,95,83,87,73,84,67,72,73,78,71,58,9,101,113,117,32,37,100,10,0,67,86,66,65,83,73,67,95,66,65,78,75,95,82,79,77,95,83,73,90,69,58,9,101,113,117,32,37,100,10,0,0,66,65,83,69,95,82,65,77,58,9,101,113,117,32,37,99,37,48,52,120,9,59,32,66,97,115,101,32,111,102,32,82,65,77,10,0,0,0,0,0,82,65,77,95,83,73,90,69,58,9,101,113,117,32,37,99,37,48,52,120,9,59,32,66,97,115,101,32,111,102,32,82,65,77,10,0,0,0,0,0,83,84,65,67,75,58,9,101,113,117,32,37,99,37,48,52,120,9,59,32,66,97,115,101,32,115,116,97,99,107,32,112,111,105,110,116,101,114,10,0,86,68,80,58,9,101,113,117,32,37,99,37,48,50,120,9,59,32,86,68,80,32,112,111,114,116,32,40,119,114,105,116,101,41,10,0,0,0,0,0,86,68,80,82,58,9,101,113,117,32,37,99,37,48,50,120,9,59,32,86,68,80,32,112,111,114,116,32,40,114,101,97,100,41,10,0,0,0,0,0,80,83,71,58,9,101,113,117,32,37,99,37,48,50,120,9,59,32,80,83,71,32,112,111,114,116,32,40,119,114,105,116,101,41,10,0,0,0,0,0,83,77,65,76,76,95,82,79,77,58,9,101,113,117,32,37,100,10,0,0,0,0,0,0,9,102,111,114,103,32,36,37,48,53,120,10,0,0,0,0,9,102,111,114,103,32,36,48,48,48,48,48,10,0,0,0,99,118,98,97,115,105,99,95,54,53,48,50,95,112,114,111,108,111,103,117,101,46,97,115,109,0,0,0,0,0,0,0,99,118,98,97,115,105,99,95,57,57,48,48,95,112,114,111,108,111,103,117,101,46,97,115,109,0,0,0,0,0,0,0,99,118,98,97,115,105,99,95,112,114,111,108,111,103,117,101,46,97,115,109,0,0,0,0,85,110,97,98,108,101,32,116,111,32,111,112,101,110,32,39,37,115,39,46,10,0,0,0,59,67,86,66,65,83,73,67,32,77,65,82,75,32,68,79,78,39,84,32,67,72,65,78,71,69,0,0,0,0,0,0,9,74,83,82,32,99,118,98,95,37,115,10,0,0,0,0,9,109,111,118,32,64,62,56,51,49,52,44,114,49,48,10,0,0,0,0,0,0,0,0,9,98,108,32,64,106,115,114,10,0,0,0,0,0,0,0,9,100,97,116,97,32,99,118,98,95,37,115,10,0,0,0,9,67,65,76,76,32,99,118,98,95,37,115,10,0,0,0,85,110,97,98,108,101,32,116,111,32,114,101,111,112,101,110,32,39,37,115,39,46,10,0,99,118,98,97,115,105,99,95,54,53,48,50,95,101,112,105,108,111,103,117,101,46,97,115,109,0,0,0,0,0,0,0,99,118,98,97,115,105,99,95,57,57,48,48,95,101,112,105,108,111,103,117,101,46,97,115,109,0,0,0,0,0,0,0,99,118,98,97,115,105,99,95,101,112,105,108,111,103,117,101,46,97,115,109,0,0,0,0,37,100,32,82,65,77,32,98,121,116,101,115,32,117,115,101,100,32,102,111,114,32,118,97,114,105,97,98,108,101,115,46,10,0,0,0,0,0,0,0,69,82,82,79,82,58,32,0,37,100,32,82,65,77,32,98,121,116,101,115,32,117,115,101,100,32,111,102,32,37,100,32,98,121,116,101,115,32,97,118,97,105,108,97,98,108,101,46,10,0,0,0,0,0,0,0,67,111,109,112,105,108,97,116,105,111,110,32,102,105,110,105,115,104,101,100,32,102,111,114,32,37,115,46,10,10,0,0,111,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,40,0,0,0,0,0,0,0,35,0,0,0,0,0,0,0,35,40,0,0,0,0,0,0,64,0,0,0,0,0,0,0,97,114,114,97,121,95,0,0,99,118,98,95,0,0,0,0,41,0,0,0,0,0,0,0,67,77,80,0,0,0,0,0,35,48,0,0,0,0,0,0,109,111,118,98,0,0,0,0,114,48,0,0,0,0,0,0,79,82,0,0,0,0,0,0,65,0,0,0,0,0,0,0,83,84,89,0,0,0,0,0,116,101,109,112,0,0,0,0,79,82,65,0,0,0,0,0,109,111,118,0,0,0,0,0,76,68,0,0,0,0,0,0,72,0,0,0,0,0,0,0,76,0,0,0,0,0,0,0,74,83,82,0,0,0,0,0,98,108,0,0,0,0,0,0,64,106,115,114,0,0,0,0,100,97,116,97,0,0,0,0,67,65,76,76,0,0,0,0,82,84,83,0,0,0,0,0,42,114,49,48,43,0,0,0,98,0,0,0,0,0,0,0,42,114,48,0,0,0,0,0,82,69,84,0,0,0,0,0,74,77,80,0,0,0,0,0,64,37,115,0,0,0,0,0,74,80,0,0,0,0,0,0,66,69,81,46,76,0,0,0,99,118,37,100,0,0,0,0,106,110,101,0,0,0,0,0,90,0,0,0,0,0,0,0,37,100,0,0,0,0,0,0,67,80,0,0,0,0,0,0,78,90,0,0,0,0,0,0,35,37,100,0,0,0,0,0,66,78,69,46,76,0,0,0,99,105,0,0,0,0,0,0,67,0,0,0,0,0,0,0,78,67,0,0,0,0,0,0,66,67,67,46,76,0,0,0,66,67,83,46,76,0,0,0,106,108,0,0,0,0,0,0,106,104,0,0,0,0,0,0,68,69,0,0,0,0,0,0,83,66,67,0,0,0,0,0,72,76,0,0,0,0,0,0,65,68,68,0,0,0,0,0,67,80,89,0,0,0,0,0,80,72,65,0,0,0,0,0,83,69,67,0,0,0,0,0,84,89,65,0,0,0,0,0,80,76,65,0,0,0,0,0,110,109,105,95,111,102,102,0,68,73,0,0,0,0,0,0,83,69,73,0,0,0,0,0,108,105,109,105,0,0,0,0,48,0,0,0,0,0,0,0,110,109,105,95,111,110,0,0,69,73,0,0,0,0,0,0,67,76,73,0,0,0,0,0,50], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+54472);
/* memory initializer */ allocate([37,115,58,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+57280);
/* memory initializer */ allocate([9,37,115,10,0,0,0,0,80,72,65,0,0,0,0,0,83,69,73,0,0,0,0,0,67,76,73,0,0,0,0,0,83,69,67,0,0,0,0,0,67,76,67,0,0,0,0,0,80,76,65,0,0,0,0,0,84,65,88,0,0,0,0,0,84,65,89,0,0,0,0,0,84,88,65,0,0,0,0,0,84,89,65,0,0,0,0,0,73,78,88,0,0,0,0,0,68,69,88,0,0,0,0,0,73,78,89,0,0,0,0,0,68,69,89,0,0,0,0,0,82,84,83,0,0,0,0,0,99,112,117,54,53,48,50,95,110,111,111,112,58,32,110,111,116,32,102,111,117,110,100,32,109,110,101,109,111,110,105,99,32,37,115,10,0,0,0,0,76,68,65,0,0,0,0,0,76,68,88,0,0,0,0,0,76,68,89,0,0,0,0,0,9,37,115,32,37,115,10,0,67,77,80,0,0,0,0,0,67,80,88,0,0,0,0,0,67,80,89,0,0,0,0,0,65,68,67,0,0,0,0,0,83,66,67,0,0,0,0,0,79,82,65,0,0,0,0,0,69,79,82,0,0,0,0,0,65,78,68,0,0,0,0,0,82,79,82,0,0,0,0,0,82,79,76,0,0,0,0,0,65,83,76,0,0,0,0,0,76,83,82,0,0,0,0,0,65,0,0,0,0,0,0,0,73,78,67,0,0,0,0,0,68,69,67,0,0,0,0,0,74,83,82,0,0,0,0,0,74,77,80,0,0,0,0,0,83,84,65,0,0,0,0,0,83,84,88,0,0,0,0,0,83,84,89,0,0,0,0,0,66,69,81,0,0,0,0,0,66,69,81,46,76,0,0,0,66,78,69,0,0,0,0,0,66,78,69,46,76,0,0,0,66,67,67,0,0,0,0,0,66,67,67,46,76,0,0,0,66,67,83,0,0,0,0,0,66,67,83,46,76,0,0,0,66,77,73,0,0,0,0,0,66,80,76,0,0,0,0,0,68,66,0,0,0,0,0,0,68,87,0,0,0,0,0,0,99,112,117,54,53,48,50,95,49,111,112,58,32,110,111,116,32,102,111,117,110,100,32,109,110,101,109,111,110,105,99,32,37,115,10,0,0,0,0,0,62,62,56,0,0,0,0,0,35,50,53,53,0,0,0,0,35,49,0,0,0,0,0,0,35,48,0,0,0,0,0,0,95,97,98,115,49,54,0,0,95,115,103,110,49,54,0,0,99,117,114,115,111,114,0,0,99,117,114,115,111,114,43,49,0,0,0,0,0,0,0,0,99,118,37,100,0,0,0,0,35,49,50,56,0,0,0,0,95,114,101,97,100,56,0,0,95,114,101,97,100,49,54,0,99,118,98,95,0,0,0,0,43,49,0,0,0,0,0,0,35,37,100,0,0,0,0,0,37,100,0,0,0,0,0,0,95,112,101,101,107,56,0,0,95,112,101,101,107,49,54,0,82,68,86,82,77,0,0,0,106,111,121,49,95,100,97,116,97,0,0,0,0,0,0,0,106,111,121,50,95,100,97,116,97,0,0,0,0,0,0,0,107,101,121,49,95,100,97,116,97,0,0,0,0,0,0,0,107,101,121,50,95,100,97,116,97,0,0,0,0,0,0,0,114,97,110,100,111,109,0,0,102,114,97,109,101,0,0,0,102,114,97,109,101,43,49,0,109,117,115,105,99,95,112,108,97,121,105,110,103,0,0,0,110,116,115,99,0,0,0,0,118,100,112,95,115,116,97,116,117,115,0,0,0,0,0,0,116,101,109,112,0,0,0,0,36,50,99], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+60368);
/* memory initializer */ allocate([116,101,109,112,43,49,0,0,40,116,101,109,112,41,44,89,0,0,0,0,0,0,0,0,43,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,37,100,41,62,62,56,0,0,36,43,51,0,0,0,0,0,95,109,117,108,49,54,0,0,95,100,105,118,49,54,0,0,95,109,111,100,49,54,0,0,95,100,105,118,49,54,115,0,95,109,111,100,49,54,115,0,37,115], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+62192);
/* memory initializer */ allocate([37,115], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+63320);
/* memory initializer */ allocate([37,115,58,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+66400);
/* memory initializer */ allocate([9,37,115,10,0,0,0,0,78,69,71,0,0,0,0,0,83,85,66,0,0,0,0,0,65,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,65,78,68,0,0,0,0,0,9,37,115,32,37,115,10,0,80,85,83,72,0,0,0,0,67,80,0,0,0,0,0,0,80,79,80,0,0,0,0,0,65,70,0,0,0,0,0,0,72,76,0,0,0,0,0,0,67,65,76,76,0,0,0,0,74,80,0,0,0,0,0,0,79,82,0,0,0,0,0,0,88,79,82,0,0,0,0,0,83,82,76,0,0,0,0,0,72,0,0,0,0,0,0,0,82,82,0,0,0,0,0,0,76,0,0,0,0,0,0,0,73,78,67,0,0,0,0,0,40,72,76,41,0,0,0,0,68,69,67,0,0,0,0,0,68,87,0,0,0,0,0,0,79,82,71,0,0,0,0,0,70,79,82,71,0,0,0,0,99,112,117,122,56,48,95,49,111,112,58,32,110,111,116,32,102,111,117,110,100,32,109,110,101,109,111,110,105,99,32,37,115,10,0,0,0,0,0,0,76,68,0,0,0,0,0,0,9,37,115,32,37,115,44,37,115,10,0,0,0,0,0,0,74,82,0,0,0,0,0,0,79,85,84,0,0,0,0,0,82,69,83,0,0,0,0,0,83,69,84,0,0,0,0,0,69,88,0,0,0,0,0,0,73,78,0,0,0,0,0,0,65,68,68,0,0,0,0,0,65,68,67,0,0,0,0,0,83,66,67,0,0,0,0,0,122,56,48,95,50,111,112,58,32,110,111,116,32,102,111,117,110,100,32,109,110,101,109,111,110,105,99,32,37,115,10,0,68,69,0,0,0,0,0,0,66,67,0,0,0,0,0,0,73,88,0,0,0,0,0,0,73,89,0,0,0,0,0,0,67,80,76,0,0,0,0,0,95,97,98,115,49,54,0,0,95,115,103,110,49,54,0,0,40,99,117,114,115,111,114,41,0,0,0,0,0,0,0,0,82,76,65,0,0,0,0,0,40,114,101,97,100,95,112,111,105,110,116,101,114,41,0,0,69,0,0,0,0,0,0,0,68,0,0,0,0,0,0,0,40,99,118,98,95,0,0,0,41,0,0,0,0,0,0,0,37,100,0,0,0,0,0,0,37,100,41,0,0,0,0,0,110,109,105,95,111,102,102,0,82,68,86,82,77,0,0,0,110,109,105,95,111,110,0,0,67,0,0,0,0,0,0,0,40,67,41,0,0,0,0,0,40,106,111,121,49,95,100,97,116,97,41,0,0,0,0,0,40,106,111,121,50,95,100,97,116,97,41,0,0,0,0,0,40,107,101,121,49,95,100,97,116,97,41,0,0,0,0,0,40,107,101,121,50,95,100,97,116,97,41,0,0,0,0,0,114,97,110,100,111,109,0,0,40,102,114,97,109,101,41,0,40,109,117,115,105,99,95,112,108,97,121,105,110,103,41,0,40,110,116,115,99,41,0,0,40,118,100,112,95,115,116,97,116,117,115,41,0,0,0,0,82,82,67,65,0,0,0,0,51,49,0,0,0,0,0,0,49,53,0,0,0,0,0,0,82,76,67,65,0,0,0,0,55,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,66,0,0,0,0,0,0,0,99,118,37,100,0,0,0,0,90,0,0,0,0,0,0,0,78,90,0,0,0,0,0,0,36,43,51,0,0,0,0,0,78,67,0,0,0,0,0,0,50,53,53,0,0,0,0,0,40,68,69,41,0,0,0,0,45,0,0,0,0,0,0,0,43,37,100,0,0,0,0,0,43,0,0,0,0,0,0,0,82,82,65,0,0,0,0,0,95,109,117,108,49,54,0,0,95,100,105,118,49,54,0,0,95,109,111,100,49,54,0,0,95,100,105,118,49,54,115,0,95,109,111,100,49,54,115,0,9,74,80,32,78,90,44,99,118,0,0,0,0,0,0,0,9,74,80,32,0,0,0,0,9,67,65,76,76,32,0,0,99,118,0,0,0,0,0,0,9,74,80,32,90,44,0,0,9,67,65,76,76,32,90,44,0,0,0,0,0,0,0,0,9,67,65,76,76,32,99,118,0,0,0,0,0,0,0,0,9,82,69,84,10,0,0,0,0,0,0,0,0,0,0,0,110,111,109,97,116,99,104,37,100,0,0,0,0,0,0,0,108,105,0,0,0,0,0,0,114,48,0,0,0,0,0,0,109,111,118,0,0,0,0,0,99,108,114,0,0,0,0,0,115,101,116,111], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+68464);
/* memory initializer */ allocate([37,115,10,0,0,0,0,0,9,37,115,10,0,0,0,0,9,37,115,32,37,115,10,0,9,37,115,32,37,115,44,37,115,10,0,0,0,0,0,0,98,108,0,0,0,0,0,0,64,74,83,82,0,0,0,0,100,97,116,97,0,0,0,0,97,110,100,105,0,0,0,0,62,102,102,48,48,0,0,0,110,101,103,0,0,0,0,0,105,110,118,0,0,0,0,0,97,98,115,0,0,0,0,0,95,115,103,110,49,54,0,0,64,99,117,114,115,111,114,0,115,114,97,0,0,0,0,0,56,0,0,0,0,0,0,0,115,114,108,0,0,0,0,0,115,108,97,0,0,0,0,0,64,114,101,97,100,95,112,111,105,110,116,101,114,0,0,0,114,49,0,0,0,0,0,0,109,111,118,98,0,0,0,0,42,114,49,0,0,0,0,0,105,110,99,0,0,0,0,0,105,110,99,116,0,0,0,0,64,0,0,0,0,0,0,0,99,118,98,95,0,0,0,0,37,100,32,32,32,59,32,37,100,42,50,53,54,0,0,0,37,100,0,0,0,0,0,0,42,114,48,0,0,0,0,0,108,105,109,105,0,0,0,0,48,0,0,0,0,0,0,0,64,106,115,114,0,0,0,0,82,68,86,82,77,0,0,0,50,0,0,0,0,0,0,0,64,106,111,121,49,95,100,97,116,97,0,0,0,0,0,0,64,106,111,121,50,95,100,97,116,97,0,0,0,0,0,0,64,107,101,121,49,95,100,97,116,97,0,0,0,0,0,0,64,107,101,121,50,95,100,97,116,97,0,0,0,0,0,0,114,97,110,100,111,109,0,0,64,102,114,97,109,101,0,0,64,109,117,115,105,99,95,112,108,97,121,105,110,103,0,0,64,110,116,115,99,0,0,0,64,118,100,112,95,115,116,97,116,117,115,0,0,0,0,0,100,101,99,116,0,0,0,0,114,49,48,0,0,0,0,0,42,114,49,48,0,0,0,0,42,114,49,48,43,0,0,0,115,111,99,98,0,0,0,0,64,99,118,37,100,0,0,0,99,118,37,100,0,0,0,0,106,110,101,0,0,0,0,0,98,0,0,0,0,0,0,0,120,111,114,0,0,0,0,0,115,122,99,98,0,0,0,0,99,98,0,0,0,0,0,0,106,101,113,0,0,0,0,0,106,109,112,0,0,0,0,0,36,43,52,0,0,0,0,0,106,108,0,0,0,0,0,0,106,104,101,0,0,0,0,0,97,98,0,0,0,0,0,0,115,98,0,0,0,0,0,0,43,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,97,105,0,0,0,0,0,0,45,37,100,0,0,0,0,0,111,114,105,0,0,0,0,0,115,111,99,0,0,0,0,0,115,122,99,0,0,0,0,0,99,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,115,0,0,0,0,0,0,0,109,112,121,0,0,0,0,0,114,50,0,0,0,0,0,0,100,105,118,0,0,0,0,0,95,100,105,118,49,54,115,0,95,109,111,100,49,54,115], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+70512);
/* memory initializer */ allocate([9,99,108,114,32,37,115,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,9,105,110,99,32,114,48,10,0,0,0,0,0,0,0,0,9,105,110,99,116,32,114,48,10,0,0,0,0,0,0,0,45,49,0,0,0,0,0,0,9,100,101,99,32,114,48,10,0,0,0,0,0,0,0,0,45,50,0,0,0,0,0,0,9,100,101,99,116,32,114,48,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+75808);
/* memory initializer */ allocate([9,109,111,118,32,114,48,44,114,49,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+76960);
/* memory initializer */ allocate([115,114,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,115,108,97,32,37,115,44,56,10,0,0,0,0,0,0,100,101,99,0,0,0,0,0,9,108,105,32,114,49,44,37,115,10,0,0,0,0,0,0,37,115,0,0,0,0,0,0,9,37,115,32,114,49,44,37,115,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+78000);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


   
  Module["_i64Subtract"] = _i64Subtract;

  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_memset"] = _memset;

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  
   
  Module["_strlen"] = _strlen; 
  Module["_strcat"] = _strcat;

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  
  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return 0;
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != 10; i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error || (streamObj.eof && i == 0)) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[(((s)+(i))>>0)]=byte_;
      }
      HEAP8[(((s)+(i))>>0)]=0;
      return s;
    }


  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }


   
  Module["_strncpy"] = _strncpy;

   
  Module["_i64Add"] = _i64Add;

  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }

  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      var fd = _fileno(stream);
      return _write(fd, s, _strlen(s));
    }

  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  
  var ___tm_formatted=allocate(44, "i8", ALLOC_STATIC);
  
  
  
  
  var _tzname=allocate(8, "i32*", ALLOC_STATIC);
  
  var _daylight=allocate(1, "i32*", ALLOC_STATIC);
  
  var _timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((_tzname)>>2)]=winterNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((_tzname)>>2)]=summerNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=winterNamePtr;
      }
    }function _mktime(tmPtr) {
      _tzset();
      var date = new Date(HEAP32[(((tmPtr)+(20))>>2)] + 1900,
                          HEAP32[(((tmPtr)+(16))>>2)],
                          HEAP32[(((tmPtr)+(12))>>2)],
                          HEAP32[(((tmPtr)+(8))>>2)],
                          HEAP32[(((tmPtr)+(4))>>2)],
                          HEAP32[((tmPtr)>>2)],
                          0);
  
      // There's an ambiguous hour when the time goes back; the tm_isdst field is
      // used to disambiguate it.  Date() basically guesses, so we fix it up if it
      // guessed wrong, or fill in tm_isdst with the guess if it's -1.
      var dst = HEAP32[(((tmPtr)+(32))>>2)];
      var guessedOffset = date.getTimezoneOffset();
      var start = new Date(date.getFullYear(), 0, 1);
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dstOffset = Math.min(winterOffset, summerOffset); // DST is in December in South
      if (dst < 0) {
        HEAP32[(((tmPtr)+(32))>>2)]=Number(winterOffset != guessedOffset);
      } else if ((dst > 0) != (winterOffset != guessedOffset)) {
        var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
        var trueOffset = dst > 0 ? summerOffset : winterOffset;
        // Don't try setMinutes(date.getMinutes() + ...) -- it's messed up.
        date.setTime(date.getTime() + (trueOffset - guessedOffset)*60000);
      }
  
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
  
      return (date.getTime() / 1000)|0;
    }function _asctime_r(tmPtr, buf) {
      var date = {
        tm_sec: HEAP32[((tmPtr)>>2)],
        tm_min: HEAP32[(((tmPtr)+(4))>>2)],
        tm_hour: HEAP32[(((tmPtr)+(8))>>2)],
        tm_mday: HEAP32[(((tmPtr)+(12))>>2)],
        tm_mon: HEAP32[(((tmPtr)+(16))>>2)],
        tm_year: HEAP32[(((tmPtr)+(20))>>2)],
        tm_wday: HEAP32[(((tmPtr)+(24))>>2)]
      };
      var days = [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ];
      var months = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                     "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];
      var s = days[date.tm_wday] + ' ' + months[date.tm_mon] +
          (date.tm_mday < 10 ? '  ' : ' ') + date.tm_mday +
          (date.tm_hour < 10 ? ' 0' : ' ') + date.tm_hour +
          (date.tm_min < 10 ? ':0' : ':') + date.tm_min +
          (date.tm_sec < 10 ? ':0' : ':') + date.tm_sec +
          ' ' + (1900 + date.tm_year) + "\n";
      writeStringToMemory(s, buf);
      return buf;
    }function _asctime(tmPtr) {
      return _asctime_r(tmPtr, ___tm_formatted);
    }

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
      Browser.mainLoop.scheduler();
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  
  var ___tm_current=allocate(44, "i8", ALLOC_STATIC);
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // DST is in December in South
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((_tzname)+(dst ? Runtime.QUANTUM_SIZE : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  var _BDtoILow=true;

  var _BDtoIHigh=true;

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  function ___errno_location() {
      return ___errno_state;
    }

  var _BItoD=true;

  
  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = Pointer_stringify(path);
      try {
        FS.unlink(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _rmdir(path) {
      // int rmdir(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rmdir.html
      path = Pointer_stringify(path);
      try {
        FS.rmdir(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _remove(path) {
      // int remove(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/remove.html
      var ret = _unlink(path);
      if (ret == -1) ret = _rmdir(path);
      return ret;
    }

   
  Module["_strcpy"] = _strcpy;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "min": Math_min, "nullFunc_iiii": nullFunc_iiii, "invoke_iiii": invoke_iiii, "_send": _send, "_fread": _fread, "_lseek": _lseek, "_open": _open, "_asctime": _asctime, "_rmdir": _rmdir, "_fopen": _fopen, "_fsync": _fsync, "_remove": _remove, "_fflush": _fflush, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "_localtime_r": _localtime_r, "_tzset": _tzset, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "_unlink": _unlink, "_sysconf": _sysconf, "_close": _close, "__formatString": __formatString, "_fseek": _fseek, "_asctime_r": _asctime_r, "_pread": _pread, "_mkport": _mkport, "_fclose": _fclose, "__reallyNegative": __reallyNegative, "_write": _write, "_ftell": _ftell, "___errno_location": ___errno_location, "_recv": _recv, "_fgetc": _fgetc, "__exit": __exit, "_read": _read, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_abort": _abort, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_strerror": _strerror, "_fgets": _fgets, "_fputs": _fputs, "_localtime": _localtime, "_exit": _exit, "_mktime": _mktime, "___setErrNo": ___setErrNo, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "_stderr": _stderr };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var _stderr=env._stderr|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = +env.NaN, inf = +env.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var Math_min=env.min;
  var nullFunc_iiii=env.nullFunc_iiii;
  var invoke_iiii=env.invoke_iiii;
  var _send=env._send;
  var _fread=env._fread;
  var _lseek=env._lseek;
  var _open=env._open;
  var _asctime=env._asctime;
  var _rmdir=env._rmdir;
  var _fopen=env._fopen;
  var _fsync=env._fsync;
  var _remove=env._remove;
  var _fflush=env._fflush;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var _localtime_r=env._localtime_r;
  var _tzset=env._tzset;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var _unlink=env._unlink;
  var _sysconf=env._sysconf;
  var _close=env._close;
  var __formatString=env.__formatString;
  var _fseek=env._fseek;
  var _asctime_r=env._asctime_r;
  var _pread=env._pread;
  var _mkport=env._mkport;
  var _fclose=env._fclose;
  var __reallyNegative=env.__reallyNegative;
  var _write=env._write;
  var _ftell=env._ftell;
  var ___errno_location=env.___errno_location;
  var _recv=env._recv;
  var _fgetc=env._fgetc;
  var __exit=env.__exit;
  var _read=env._read;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _abort=env._abort;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _strerror=env._strerror;
  var _fgets=env._fgets;
  var _fputs=env._fputs;
  var _localtime=env._localtime;
  var _exit=env._exit;
  var _mktime=env._mktime;
  var ___setErrNo=env.___setErrNo;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _emit_error($string) {
 $string = $string|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $string;
 $1 = HEAP32[_stderr>>2]|0;
 $2 = $0;
 $3 = HEAP32[1728>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 1736;
 (_fprintf(($1|0),(1696|0),($vararg_buffer|0))|0);
 HEAP32[2760>>2] = 1;
 STACKTOP = sp;return;
}
function _emit_warning($string) {
 $string = $string|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $string;
 $1 = HEAP32[2768>>2]|0;
 $2 = ($1|0)!=(0);
 if ($2) {
  $3 = HEAP32[_stderr>>2]|0;
  $4 = $0;
  $5 = HEAP32[1728>>2]|0;
  HEAP32[$vararg_buffer>>2] = $4;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 1736;
  (_fprintf(($3|0),(2776|0),($vararg_buffer|0))|0);
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function _bank_finish() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $c = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0;
 var $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer39 = 0, $vararg_buffer41 = 0, $vararg_buffer44 = 0, $vararg_buffer46 = 0, $vararg_buffer48 = 0, $vararg_buffer5 = 0, $vararg_buffer51 = 0, $vararg_buffer53 = 0, $vararg_buffer56 = 0, $vararg_buffer7 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer56 = sp + 104|0;
 $vararg_buffer53 = sp + 200|0;
 $vararg_buffer51 = sp + 192|0;
 $vararg_buffer48 = sp + 184|0;
 $vararg_buffer46 = sp + 176|0;
 $vararg_buffer44 = sp + 168|0;
 $vararg_buffer41 = sp + 160|0;
 $vararg_buffer39 = sp + 152|0;
 $vararg_buffer37 = sp + 144|0;
 $vararg_buffer35 = sp + 136|0;
 $vararg_buffer32 = sp + 128|0;
 $vararg_buffer30 = sp + 120|0;
 $vararg_buffer28 = sp + 112|0;
 $vararg_buffer26 = sp + 96|0;
 $vararg_buffer24 = sp + 40|0;
 $vararg_buffer21 = sp;
 $vararg_buffer19 = sp + 8|0;
 $vararg_buffer16 = sp + 16|0;
 $vararg_buffer14 = sp + 24|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer10 = sp + 48|0;
 $vararg_buffer7 = sp + 56|0;
 $vararg_buffer5 = sp + 64|0;
 $vararg_buffer3 = sp + 72|0;
 $vararg_buffer1 = sp + 80|0;
 $vararg_buffer = sp + 88|0;
 $0 = HEAP32[2808>>2]|0;
 $1 = ($0|0)==(1);
 if (!($1)) {
  $2 = HEAP32[2808>>2]|0;
  $3 = ($2|0)==(13);
  if (!($3)) {
   $14 = HEAP32[2808>>2]|0;
   $15 = ($14|0)==(2);
   if ($15) {
    $16 = HEAP32[2816>>2]|0;
    $17 = ($16|0)==(0);
    if ($17) {
     $18 = HEAP32[2824>>2]|0;
     (_fprintf(($18|0),(2984|0),($vararg_buffer12|0))|0);
     $19 = HEAP32[2824>>2]|0;
     (_fprintf(($19|0),(3016|0),($vararg_buffer14|0))|0);
    } else {
     $20 = HEAP32[2824>>2]|0;
     $21 = HEAP32[2816>>2]|0;
     HEAP32[$vararg_buffer16>>2] = $21;
     (_fprintf(($20|0),(3040|0),($vararg_buffer16|0))|0);
     $22 = HEAP32[2824>>2]|0;
     (_fprintf(($22|0),(3072|0),($vararg_buffer19|0))|0);
    }
    $23 = HEAP32[2824>>2]|0;
    $24 = HEAP32[2816>>2]|0;
    HEAP32[$vararg_buffer21>>2] = $24;
    (_fprintf(($23|0),(2944|0),($vararg_buffer21|0))|0);
   } else {
    $25 = HEAP32[2808>>2]|0;
    $26 = ($25|0)==(11);
    if ($26) {
     $27 = HEAP32[2816>>2]|0;
     $28 = ($27|0)==(0);
     if ($28) {
      $29 = HEAP32[2824>>2]|0;
      (_fprintf(($29|0),(3096|0),($vararg_buffer24|0))|0);
      $30 = HEAP32[2824>>2]|0;
      (_fprintf(($30|0),(3128|0),($vararg_buffer26|0))|0);
      $31 = HEAP32[2824>>2]|0;
      (_fprintf(($31|0),(3144|0),($vararg_buffer28|0))|0);
      $32 = HEAP32[2824>>2]|0;
      (_fprintf(($32|0),(3160|0),($vararg_buffer30|0))|0);
     } else {
      $33 = HEAP32[2824>>2]|0;
      $34 = HEAP32[2816>>2]|0;
      HEAP32[$vararg_buffer32>>2] = $34;
      (_fprintf(($33|0),(3168|0),($vararg_buffer32|0))|0);
      $35 = HEAP32[2824>>2]|0;
      (_fprintf(($35|0),(3200|0),($vararg_buffer35|0))|0);
      $36 = HEAP32[2824>>2]|0;
      (_fprintf(($36|0),(3144|0),($vararg_buffer37|0))|0);
      $37 = HEAP32[2824>>2]|0;
      (_fprintf(($37|0),(3160|0),($vararg_buffer39|0))|0);
     }
     $38 = HEAP32[2824>>2]|0;
     $39 = HEAP32[2816>>2]|0;
     $40 = (($39) + 2)|0;
     $41 = $40<<1;
     $42 = (($41) + 24576)|0;
     HEAP32[$vararg_buffer41>>2] = $42;
     (_fprintf(($38|0),(3216|0),($vararg_buffer41|0))|0);
    } else {
     $43 = HEAP32[2816>>2]|0;
     $44 = ($43|0)==(0);
     if ($44) {
      $45 = HEAP32[2824>>2]|0;
      (_fprintf(($45|0),(3232|0),($vararg_buffer44|0))|0);
      $46 = HEAP32[2824>>2]|0;
      (_fprintf(($46|0),(3264|0),($vararg_buffer46|0))|0);
     } else {
      $47 = HEAP32[2824>>2]|0;
      $48 = HEAP32[2816>>2]|0;
      HEAP32[$vararg_buffer48>>2] = $48;
      (_fprintf(($47|0),(3288|0),($vararg_buffer48|0))|0);
      $49 = HEAP32[2824>>2]|0;
      (_fprintf(($49|0),(3320|0),($vararg_buffer51|0))|0);
     }
     $50 = HEAP32[2816>>2]|0;
     $51 = (($50) - 1)|0;
     $52 = $51 & 63;
     $c = $52;
     $53 = HEAP32[3344>>2]|0;
     $54 = ($53|0)==(128);
     if ($54) {
      $55 = $c;
      $56 = $55 | 248;
      $c = $56;
     } else {
      $57 = HEAP32[3344>>2]|0;
      $58 = ($57|0)==(256);
      if ($58) {
       $59 = $c;
       $60 = $59 | 240;
       $c = $60;
      } else {
       $61 = HEAP32[3344>>2]|0;
       $62 = ($61|0)==(512);
       if ($62) {
        $63 = $c;
        $64 = $63 | 224;
        $c = $64;
       } else {
        $65 = HEAP32[3344>>2]|0;
        $66 = ($65|0)==(1024);
        if ($66) {
         $67 = $c;
         $68 = $67 | 192;
         $c = $68;
        }
       }
      }
     }
     $69 = HEAP32[2824>>2]|0;
     $70 = $c;
     HEAP32[$vararg_buffer53>>2] = $70;
     (_fprintf(($69|0),(2944|0),($vararg_buffer53|0))|0);
     $71 = HEAP32[2824>>2]|0;
     (_fprintf(($71|0),(2960|0),($vararg_buffer56|0))|0);
    }
   }
   STACKTOP = sp;return;
  }
 }
 $4 = HEAP32[2816>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[2824>>2]|0;
  (_fprintf(($6|0),(2832|0),($vararg_buffer|0))|0);
  $7 = HEAP32[2824>>2]|0;
  (_fprintf(($7|0),(2864|0),($vararg_buffer1|0))|0);
 } else {
  $8 = HEAP32[2824>>2]|0;
  $9 = HEAP32[2816>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $9;
  (_fprintf(($8|0),(2888|0),($vararg_buffer3|0))|0);
  $10 = HEAP32[2824>>2]|0;
  (_fprintf(($10|0),(2920|0),($vararg_buffer5|0))|0);
 }
 $11 = HEAP32[2824>>2]|0;
 $12 = HEAP32[2816>>2]|0;
 HEAP32[$vararg_buffer7>>2] = $12;
 (_fprintf(($11|0),(2944|0),($vararg_buffer7|0))|0);
 $13 = HEAP32[2824>>2]|0;
 (_fprintf(($13|0),(2960|0),($vararg_buffer10|0))|0);
 STACKTOP = sp;return;
}
function _label_hash_value($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $value = 0;
 while(1) {
  $1 = $0;
  $2 = HEAP8[$1>>0]|0;
  $3 = ($2<<24>>24)!=(0);
  if (!($3)) {
   break;
  }
  $4 = $value;
  $5 = ($4*11)|0;
  $value = $5;
  $6 = $0;
  $7 = (($6) + 1|0);
  $0 = $7;
  $8 = HEAP8[$6>>0]|0;
  $9 = $8 << 24 >> 24;
  $10 = $value;
  $11 = (($10) + ($9))|0;
  $value = $11;
 }
 $12 = $value;
 $13 = (($12>>>0) % 1103)&-1;
 STACKTOP = sp;return ($13|0);
}
function _function_search($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $explore = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name;
 $2 = $1;
 $3 = (_label_hash_value($2)|0);
 $4 = (3352 + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $explore = $5;
 while(1) {
  $6 = $explore;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = $explore;
  $9 = (($8) + 12|0);
  $10 = $1;
  $11 = (_strcmp($9,$10)|0);
  $12 = ($11|0)==(0);
  if ($12) {
   label = 4;
   break;
  }
  $14 = $explore;
  $15 = HEAP32[$14>>2]|0;
  $explore = $15;
 }
 if ((label|0) == 4) {
  $13 = $explore;
  $0 = $13;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return 0|0;
}
function _function_add($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_one = 0, $previous = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $name;
 $1 = $0;
 $2 = (_strlen(($1|0))|0);
 $3 = (16 + ($2))|0;
 $4 = (_malloc($3)|0);
 $new_one = $4;
 $5 = $new_one;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = HEAP32[_stderr>>2]|0;
  (_fprintf(($7|0),(7768|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 } else {
  $8 = $new_one;
  $9 = (($8) + 4|0);
  HEAP32[$9>>2] = 0;
  $10 = $new_one;
  $11 = (($10) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = $new_one;
  $13 = (($12) + 12|0);
  $14 = $0;
  (_strcpy(($13|0),($14|0))|0);
  $15 = $0;
  $16 = (_label_hash_value($15)|0);
  $17 = (3352 + ($16<<2)|0);
  $previous = $17;
  $18 = $previous;
  $19 = HEAP32[$18>>2]|0;
  $20 = $new_one;
  HEAP32[$20>>2] = $19;
  $21 = $new_one;
  $22 = $previous;
  HEAP32[$22>>2] = $21;
  $23 = $new_one;
  STACKTOP = sp;return ($23|0);
 }
 return 0|0;
}
function _signed_search($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $explore = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name;
 $2 = $1;
 $3 = (_label_hash_value($2)|0);
 $4 = (7784 + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $explore = $5;
 while(1) {
  $6 = $explore;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = $explore;
  $9 = (($8) + 8|0);
  $10 = $1;
  $11 = (_strcmp($9,$10)|0);
  $12 = ($11|0)==(0);
  if ($12) {
   label = 4;
   break;
  }
  $14 = $explore;
  $15 = HEAP32[$14>>2]|0;
  $explore = $15;
 }
 if ((label|0) == 4) {
  $13 = $explore;
  $0 = $13;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return 0|0;
}
function _signed_add($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $new_one = 0, $previous = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $name;
 $1 = $0;
 $2 = (_strlen(($1|0))|0);
 $3 = (12 + ($2))|0;
 $4 = (_malloc($3)|0);
 $new_one = $4;
 $5 = $new_one;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = HEAP32[_stderr>>2]|0;
  (_fprintf(($7|0),(7768|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 } else {
  $8 = $new_one;
  $9 = (($8) + 4|0);
  HEAP32[$9>>2] = 0;
  $10 = $new_one;
  $11 = (($10) + 8|0);
  $12 = $0;
  (_strcpy(($11|0),($12|0))|0);
  $13 = $0;
  $14 = (_label_hash_value($13)|0);
  $15 = (7784 + ($14<<2)|0);
  $previous = $15;
  $16 = $previous;
  $17 = HEAP32[$16>>2]|0;
  $18 = $new_one;
  HEAP32[$18>>2] = $17;
  $19 = $new_one;
  $20 = $previous;
  HEAP32[$20>>2] = $19;
  $21 = $new_one;
  STACKTOP = sp;return ($21|0);
 }
 return 0|0;
}
function _constant_search($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $explore = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name;
 $2 = $1;
 $3 = (_label_hash_value($2)|0);
 $4 = (12200 + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $explore = $5;
 while(1) {
  $6 = $explore;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = $explore;
  $9 = (($8) + 8|0);
  $10 = $1;
  $11 = (_strcmp($9,$10)|0);
  $12 = ($11|0)==(0);
  if ($12) {
   label = 4;
   break;
  }
  $14 = $explore;
  $15 = HEAP32[$14>>2]|0;
  $explore = $15;
 }
 if ((label|0) == 4) {
  $13 = $explore;
  $0 = $13;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return 0|0;
}
function _constant_add($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $new_one = 0, $previous = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $name;
 $1 = $0;
 $2 = (_strlen(($1|0))|0);
 $3 = (12 + ($2))|0;
 $4 = (_malloc($3)|0);
 $new_one = $4;
 $5 = $new_one;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = HEAP32[_stderr>>2]|0;
  (_fprintf(($7|0),(7768|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 } else {
  $8 = $new_one;
  $9 = (($8) + 4|0);
  HEAP32[$9>>2] = 0;
  $10 = $new_one;
  $11 = (($10) + 8|0);
  $12 = $0;
  (_strcpy(($11|0),($12|0))|0);
  $13 = $0;
  $14 = (_label_hash_value($13)|0);
  $15 = (12200 + ($14<<2)|0);
  $previous = $15;
  $16 = $previous;
  $17 = HEAP32[$16>>2]|0;
  $18 = $new_one;
  HEAP32[$18>>2] = $17;
  $19 = $new_one;
  $20 = $previous;
  HEAP32[$20>>2] = $19;
  $21 = $new_one;
  STACKTOP = sp;return ($21|0);
 }
 return 0|0;
}
function _label_search($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $explore = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name;
 $2 = $1;
 $3 = (_label_hash_value($2)|0);
 $4 = (16616 + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $explore = $5;
 while(1) {
  $6 = $explore;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = $explore;
  $9 = (($8) + 12|0);
  $10 = $1;
  $11 = (_strcmp($9,$10)|0);
  $12 = ($11|0)==(0);
  if ($12) {
   label = 4;
   break;
  }
  $14 = $explore;
  $15 = HEAP32[$14>>2]|0;
  $explore = $15;
 }
 if ((label|0) == 4) {
  $13 = $explore;
  $0 = $13;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return 0|0;
}
function _label_add($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_one = 0, $previous = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $name;
 $1 = $0;
 $2 = (_strlen(($1|0))|0);
 $3 = (16 + ($2))|0;
 $4 = (_malloc($3)|0);
 $new_one = $4;
 $5 = $new_one;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = HEAP32[_stderr>>2]|0;
  (_fprintf(($7|0),(7768|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 } else {
  $8 = $new_one;
  $9 = (($8) + 4|0);
  HEAP32[$9>>2] = 0;
  $10 = $new_one;
  $11 = (($10) + 12|0);
  $12 = $0;
  (_strcpy(($11|0),($12|0))|0);
  $13 = $0;
  $14 = (_label_hash_value($13)|0);
  $15 = (16616 + ($14<<2)|0);
  $previous = $15;
  $16 = $new_one;
  $17 = (($16) + 8|0);
  HEAP32[$17>>2] = 0;
  $18 = $previous;
  $19 = HEAP32[$18>>2]|0;
  $20 = $new_one;
  HEAP32[$20>>2] = $19;
  $21 = $new_one;
  $22 = $previous;
  HEAP32[$22>>2] = $21;
  $23 = $new_one;
  STACKTOP = sp;return ($23|0);
 }
 return 0|0;
}
function _array_search($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $explore = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name;
 $2 = $1;
 $3 = (_label_hash_value($2)|0);
 $4 = (21032 + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $explore = $5;
 while(1) {
  $6 = $explore;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = $explore;
  $9 = (($8) + 12|0);
  $10 = $1;
  $11 = (_strcmp($9,$10)|0);
  $12 = ($11|0)==(0);
  if ($12) {
   label = 4;
   break;
  }
  $14 = $explore;
  $15 = HEAP32[$14>>2]|0;
  $explore = $15;
 }
 if ((label|0) == 4) {
  $13 = $explore;
  $0 = $13;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return 0|0;
}
function _array_add($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $new_one = 0, $previous = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $name;
 $1 = $0;
 $2 = (_strlen(($1|0))|0);
 $3 = (16 + ($2))|0;
 $4 = (_malloc($3)|0);
 $new_one = $4;
 $5 = $new_one;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = HEAP32[_stderr>>2]|0;
  (_fprintf(($7|0),(7768|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 } else {
  $8 = $new_one;
  $9 = (($8) + 4|0);
  HEAP32[$9>>2] = 0;
  $10 = $new_one;
  $11 = (($10) + 12|0);
  $12 = $0;
  (_strcpy(($11|0),($12|0))|0);
  $13 = $0;
  $14 = (_label_hash_value($13)|0);
  $15 = (21032 + ($14<<2)|0);
  $previous = $15;
  $16 = $previous;
  $17 = HEAP32[$16>>2]|0;
  $18 = $new_one;
  HEAP32[$18>>2] = $17;
  $19 = $new_one;
  $20 = $previous;
  HEAP32[$20>>2] = $19;
  $21 = $new_one;
  STACKTOP = sp;return ($21|0);
 }
 return 0|0;
}
function _macro_search($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $explore = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name;
 $2 = $1;
 $3 = (_label_hash_value($2)|0);
 $4 = (25448 + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $explore = $5;
 while(1) {
  $6 = $explore;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = $explore;
  $9 = (($8) + 24|0);
  $10 = $1;
  $11 = (_strcmp($9,$10)|0);
  $12 = ($11|0)==(0);
  if ($12) {
   label = 4;
   break;
  }
  $14 = $explore;
  $15 = HEAP32[$14>>2]|0;
  $explore = $15;
 }
 if ((label|0) == 4) {
  $13 = $explore;
  $0 = $13;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return 0|0;
}
function _macro_add($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_one = 0, $previous = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $name;
 $1 = $0;
 $2 = (_strlen(($1|0))|0);
 $3 = (28 + ($2))|0;
 $4 = (_malloc($3)|0);
 $new_one = $4;
 $5 = $new_one;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = HEAP32[_stderr>>2]|0;
  (_fprintf(($7|0),(7768|0),($vararg_buffer|0))|0);
  _exit(1);
  // unreachable;
 } else {
  $8 = $new_one;
  $9 = (($8) + 4|0);
  HEAP32[$9>>2] = 0;
  $10 = $new_one;
  $11 = (($10) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = $new_one;
  $13 = (($12) + 12|0);
  HEAP32[$13>>2] = 0;
  $14 = $new_one;
  $15 = (($14) + 16|0);
  HEAP32[$15>>2] = 0;
  $16 = $new_one;
  $17 = (($16) + 20|0);
  HEAP32[$17>>2] = 0;
  $18 = $new_one;
  $19 = (($18) + 24|0);
  $20 = $0;
  (_strcpy(($19|0),($20|0))|0);
  $21 = $0;
  $22 = (_label_hash_value($21)|0);
  $23 = (25448 + ($22<<2)|0);
  $previous = $23;
  $24 = $previous;
  $25 = HEAP32[$24>>2]|0;
  $26 = $new_one;
  HEAP32[$26>>2] = $25;
  $27 = $new_one;
  $28 = $previous;
  HEAP32[$28>>2] = $27;
  $29 = $new_one;
  STACKTOP = sp;return ($29|0);
 }
 return 0|0;
}
function _lex_skip_spaces() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $something = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $something = 0;
 $0 = HEAP32[29864>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $something = 1;
 }
 while(1) {
  $2 = HEAP32[29864>>2]|0;
  $3 = HEAP32[29872>>2]|0;
  $4 = ($2|0)<($3|0);
  if ($4) {
   $5 = HEAP32[29864>>2]|0;
   $6 = (29880 + ($5)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = $7 << 24 >> 24;
   $9 = (_isspace($8)|0);
   $10 = ($9|0)!=(0);
   $14 = $10;
  } else {
   $14 = 0;
  }
  if (!($14)) {
   break;
  }
  $11 = HEAP32[29864>>2]|0;
  $12 = (($11) + 1)|0;
  HEAP32[29864>>2] = $12;
  $something = 1;
 }
 $13 = $something;
 STACKTOP = sp;return ($13|0);
}
function _lex_sneak_peek() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[30912>>2]|0;
 $2 = ($1|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[30912>>2]|0;
   $4 = (($3) - 1)|0;
   $5 = HEAP32[30904>>2]|0;
   $6 = (($5) + (($4*12)|0)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(17);
   if ($8) {
    $0 = 40;
    break;
   } else {
    $0 = 0;
    break;
   }
  } else {
   (_lex_skip_spaces()|0);
   $9 = HEAP32[29864>>2]|0;
   $10 = HEAP32[29872>>2]|0;
   $11 = ($9|0)==($10|0);
   if ($11) {
    $0 = 0;
    break;
   } else {
    $12 = HEAP32[29864>>2]|0;
    $13 = (29880 + ($12)|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = $14 << 24 >> 24;
    $16 = (_toupper($15)|0);
    $0 = $16;
    break;
   }
  }
 } while(0);
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _get_lex() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $c = 0, $digits = 0, $p = 0, $spaces = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[30912>>2]|0;
 $1 = ($0|0)>(0);
 if ($1) {
  $2 = HEAP32[30912>>2]|0;
  $3 = (($2) + -1)|0;
  HEAP32[30912>>2] = $3;
  $4 = HEAP32[30912>>2]|0;
  $5 = HEAP32[30904>>2]|0;
  $6 = (($5) + (($4*12)|0)|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[30928>>2] = $7;
  $8 = HEAP32[30912>>2]|0;
  $9 = HEAP32[30904>>2]|0;
  $10 = (($9) + (($8*12)|0)|0);
  $11 = (($10) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[30936>>2] = $12;
  $13 = HEAP32[30928>>2]|0;
  $14 = ($13|0)==(2);
  if ($14) {
   $15 = HEAP32[30936>>2]|0;
   HEAP32[30944>>2] = $15;
   $16 = HEAP32[30944>>2]|0;
   $17 = ($16|0)!=(0);
   if ($17) {
    $18 = HEAP32[30912>>2]|0;
    $19 = HEAP32[30904>>2]|0;
    $20 = (($19) + (($18*12)|0)|0);
    $21 = (($20) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP32[30944>>2]|0;
    _memcpy((30952|0),($22|0),($23|0))|0;
   }
  } else {
   $24 = HEAP32[30912>>2]|0;
   $25 = HEAP32[30904>>2]|0;
   $26 = (($25) + (($24*12)|0)|0);
   $27 = (($26) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   (_strcpy((30952|0),($28|0))|0);
  }
  $29 = HEAP32[30912>>2]|0;
  $30 = HEAP32[30904>>2]|0;
  $31 = (($30) + (($29*12)|0)|0);
  $32 = (($31) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  _free($33);
  STACKTOP = sp;return;
 }
 HEAP8[30952>>0] = 0;
 $34 = (_lex_skip_spaces()|0);
 $spaces = $34;
 $35 = HEAP32[29864>>2]|0;
 $36 = HEAP32[29872>>2]|0;
 $37 = ($35|0)==($36|0);
 if ($37) {
  HEAP32[30928>>2] = 0;
  STACKTOP = sp;return;
 }
 $38 = HEAP32[29864>>2]|0;
 $39 = (29880 + ($38)|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40 << 24 >> 24;
 $42 = (_isalpha($41)|0);
 $43 = ($42|0)!=(0);
 do {
  if (!($43)) {
   $44 = HEAP32[29864>>2]|0;
   $45 = (29880 + ($44)|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46 << 24 >> 24;
   $48 = ($47|0)==(35);
   if (!($48)) {
    $49 = $spaces;
    $50 = ($49|0)!=(0);
    if ($50) {
     $51 = HEAP32[29864>>2]|0;
     $52 = (29880 + ($51)|0);
     $53 = HEAP8[$52>>0]|0;
     $54 = $53 << 24 >> 24;
     $55 = ($54|0)==(46);
     if ($55) {
      break;
     }
    }
    $56 = HEAP32[29864>>2]|0;
    $57 = ($56|0)>(0);
    if ($57) {
     $58 = HEAP32[29864>>2]|0;
     $59 = (($58) - 1)|0;
     $60 = (29880 + ($59)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61 << 24 >> 24;
     $63 = ($62|0)==(44);
     if ($63) {
      $64 = HEAP32[29864>>2]|0;
      $65 = (29880 + ($64)|0);
      $66 = HEAP8[$65>>0]|0;
      $67 = $66 << 24 >> 24;
      $68 = ($67|0)==(46);
      if ($68) {
       break;
      }
     }
    }
    $69 = HEAP32[29864>>2]|0;
    $70 = ($69|0)>(0);
    if ($70) {
     $71 = HEAP32[29864>>2]|0;
     $72 = (($71) - 1)|0;
     $73 = (29880 + ($72)|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = $74 << 24 >> 24;
     $76 = ($75|0)==(58);
     if ($76) {
      $77 = HEAP32[29864>>2]|0;
      $78 = (29880 + ($77)|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = $79 << 24 >> 24;
      $81 = ($80|0)==(46);
      if ($81) {
       break;
      }
     }
    }
    $193 = HEAP32[29864>>2]|0;
    $194 = (29880 + ($193)|0);
    $195 = HEAP8[$194>>0]|0;
    $196 = $195 << 24 >> 24;
    $197 = (_isdigit($196)|0);
    $198 = ($197|0)!=(0);
    if ($198) {
     HEAP32[30936>>2] = 0;
     while(1) {
      $199 = HEAP32[29864>>2]|0;
      $200 = HEAP32[29872>>2]|0;
      $201 = ($199|0)<($200|0);
      if ($201) {
       $202 = HEAP32[29864>>2]|0;
       $203 = (29880 + ($202)|0);
       $204 = HEAP8[$203>>0]|0;
       $205 = $204 << 24 >> 24;
       $206 = (_isdigit($205)|0);
       $207 = ($206|0)!=(0);
       $476 = $207;
      } else {
       $476 = 0;
      }
      if (!($476)) {
       break;
      }
      $208 = HEAP32[30936>>2]|0;
      $209 = ($208*10)|0;
      $210 = HEAP32[29864>>2]|0;
      $211 = (($210) + 1)|0;
      HEAP32[29864>>2] = $211;
      $212 = (29880 + ($210)|0);
      $213 = HEAP8[$212>>0]|0;
      $214 = $213 << 24 >> 24;
      $215 = (($209) + ($214))|0;
      $216 = (($215) - 48)|0;
      HEAP32[30936>>2] = $216;
     }
     $217 = HEAP32[29864>>2]|0;
     $218 = (29880 + ($217)|0);
     $219 = HEAP8[$218>>0]|0;
     $220 = $219 << 24 >> 24;
     $221 = ($220|0)==(46);
     if ($221) {
      $222 = HEAP32[29864>>2]|0;
      $223 = (($222) + 1)|0;
      HEAP32[29864>>2] = $223;
      (_strcpy((30952|0),(33064|0))|0);
     }
     HEAP32[30928>>2] = 4;
     HEAP32[33000>>2] = 0;
     STACKTOP = sp;return;
    }
    $224 = HEAP32[29864>>2]|0;
    $225 = (29880 + ($224)|0);
    $226 = HEAP8[$225>>0]|0;
    $227 = $226 << 24 >> 24;
    $228 = ($227|0)==(36);
    if ($228) {
     $229 = HEAP32[29864>>2]|0;
     $230 = (($229) + 1)|0;
     $231 = HEAP32[29872>>2]|0;
     $232 = ($230|0)<($231|0);
     if ($232) {
      $233 = HEAP32[29864>>2]|0;
      $234 = (($233) + 1)|0;
      $235 = (29880 + ($234)|0);
      $236 = HEAP8[$235>>0]|0;
      $237 = $236 << 24 >> 24;
      $238 = (_isxdigit($237)|0);
      $239 = ($238|0)!=(0);
      if ($239) {
       HEAP32[30936>>2] = 0;
       $240 = HEAP32[29864>>2]|0;
       $241 = (($240) + 1)|0;
       HEAP32[29864>>2] = $241;
       while(1) {
        $242 = HEAP32[29864>>2]|0;
        $243 = HEAP32[29872>>2]|0;
        $244 = ($242|0)<($243|0);
        if ($244) {
         $245 = HEAP32[29864>>2]|0;
         $246 = (29880 + ($245)|0);
         $247 = HEAP8[$246>>0]|0;
         $248 = $247 << 24 >> 24;
         $249 = (_isxdigit($248)|0);
         $250 = ($249|0)!=(0);
         $477 = $250;
        } else {
         $477 = 0;
        }
        if (!($477)) {
         break;
        }
        $251 = HEAP32[29864>>2]|0;
        $252 = (29880 + ($251)|0);
        $253 = HEAP8[$252>>0]|0;
        $254 = $253 << 24 >> 24;
        $255 = (_toupper($254)|0);
        $256 = (($255) - 48)|0;
        $temp = $256;
        $257 = $temp;
        $258 = ($257|0)>(9);
        if ($258) {
         $259 = $temp;
         $260 = (($259) - 7)|0;
         $temp = $260;
        }
        $261 = HEAP32[30936>>2]|0;
        $262 = $261 << 4;
        $263 = $temp;
        $264 = $262 | $263;
        HEAP32[30936>>2] = $264;
        $265 = HEAP32[29864>>2]|0;
        $266 = (($265) + 1)|0;
        HEAP32[29864>>2] = $266;
       }
       $267 = HEAP32[29864>>2]|0;
       $268 = (29880 + ($267)|0);
       $269 = HEAP8[$268>>0]|0;
       $270 = $269 << 24 >> 24;
       $271 = ($270|0)==(46);
       if ($271) {
        $272 = HEAP32[29864>>2]|0;
        $273 = (($272) + 1)|0;
        HEAP32[29864>>2] = $273;
        (_strcpy((30952|0),(33064|0))|0);
       }
       HEAP32[30928>>2] = 4;
       HEAP32[33000>>2] = 0;
       STACKTOP = sp;return;
      }
     }
    }
    $274 = HEAP32[29864>>2]|0;
    $275 = (29880 + ($274)|0);
    $276 = HEAP8[$275>>0]|0;
    $277 = $276 << 24 >> 24;
    $278 = ($277|0)==(38);
    do {
     if ($278) {
      $279 = HEAP32[29864>>2]|0;
      $280 = (($279) + 1)|0;
      $281 = HEAP32[29872>>2]|0;
      $282 = ($280|0)<($281|0);
      if ($282) {
       $283 = HEAP32[29864>>2]|0;
       $284 = (($283) + 1)|0;
       $285 = (29880 + ($284)|0);
       $286 = HEAP8[$285>>0]|0;
       $287 = $286 << 24 >> 24;
       $288 = ($287|0)==(48);
       if (!($288)) {
        $289 = HEAP32[29864>>2]|0;
        $290 = (($289) + 1)|0;
        $291 = (29880 + ($290)|0);
        $292 = HEAP8[$291>>0]|0;
        $293 = $292 << 24 >> 24;
        $294 = ($293|0)==(49);
        if (!($294)) {
         break;
        }
       }
       HEAP32[30936>>2] = 0;
       $295 = HEAP32[29864>>2]|0;
       $296 = (($295) + 1)|0;
       HEAP32[29864>>2] = $296;
       while(1) {
        $297 = HEAP32[29864>>2]|0;
        $298 = HEAP32[29872>>2]|0;
        $299 = ($297|0)<($298|0);
        if ($299) {
         $300 = HEAP32[29864>>2]|0;
         $301 = (29880 + ($300)|0);
         $302 = HEAP8[$301>>0]|0;
         $303 = $302 << 24 >> 24;
         $304 = ($303|0)==(48);
         if ($304) {
          $479 = 1;
         } else {
          $305 = HEAP32[29864>>2]|0;
          $306 = (29880 + ($305)|0);
          $307 = HEAP8[$306>>0]|0;
          $308 = $307 << 24 >> 24;
          $309 = ($308|0)==(49);
          $479 = $309;
         }
         $478 = $479;
        } else {
         $478 = 0;
        }
        if (!($478)) {
         break;
        }
        $310 = HEAP32[30936>>2]|0;
        $311 = $310 << 1;
        $312 = HEAP32[29864>>2]|0;
        $313 = (29880 + ($312)|0);
        $314 = HEAP8[$313>>0]|0;
        $315 = $314 << 24 >> 24;
        $316 = $315 & 1;
        $317 = $311 | $316;
        HEAP32[30936>>2] = $317;
        $318 = HEAP32[29864>>2]|0;
        $319 = (($318) + 1)|0;
        HEAP32[29864>>2] = $319;
       }
       $320 = HEAP32[29864>>2]|0;
       $321 = (29880 + ($320)|0);
       $322 = HEAP8[$321>>0]|0;
       $323 = $322 << 24 >> 24;
       $324 = ($323|0)==(46);
       if ($324) {
        $325 = HEAP32[29864>>2]|0;
        $326 = (($325) + 1)|0;
        HEAP32[29864>>2] = $326;
        (_strcpy((30952|0),(33064|0))|0);
       }
       HEAP32[30928>>2] = 4;
       HEAP32[33000>>2] = 0;
       STACKTOP = sp;return;
      }
     }
    } while(0);
    $327 = HEAP32[29864>>2]|0;
    $328 = (29880 + ($327)|0);
    $329 = HEAP8[$328>>0]|0;
    $330 = $329 << 24 >> 24;
    $331 = ($330|0)==(34);
    if ($331) {
     $332 = HEAP32[29864>>2]|0;
     $333 = (($332) + 1)|0;
     HEAP32[29864>>2] = $333;
     $p = 30952;
     while(1) {
      $334 = HEAP32[29864>>2]|0;
      $335 = HEAP32[29872>>2]|0;
      $336 = ($334|0)<($335|0);
      if ($336) {
       $337 = HEAP32[29864>>2]|0;
       $338 = (29880 + ($337)|0);
       $339 = HEAP8[$338>>0]|0;
       $340 = $339 << 24 >> 24;
       $341 = ($340|0)!=(34);
       $480 = $341;
      } else {
       $480 = 0;
      }
      if (!($480)) {
       break;
      }
      $342 = HEAP32[29864>>2]|0;
      $343 = (29880 + ($342)|0);
      $344 = HEAP8[$343>>0]|0;
      $345 = $344 << 24 >> 24;
      $346 = ($345|0)==(92);
      if ($346) {
       $347 = HEAP32[29864>>2]|0;
       $348 = (($347) + 1)|0;
       HEAP32[29864>>2] = $348;
       $349 = HEAP32[29864>>2]|0;
       $350 = HEAP32[29872>>2]|0;
       $351 = ($349|0)<($350|0);
       do {
        if ($351) {
         $352 = HEAP32[29864>>2]|0;
         $353 = (29880 + ($352)|0);
         $354 = HEAP8[$353>>0]|0;
         $355 = $354 << 24 >> 24;
         $356 = ($355|0)==(34);
         if (!($356)) {
          $357 = HEAP32[29864>>2]|0;
          $358 = (29880 + ($357)|0);
          $359 = HEAP8[$358>>0]|0;
          $360 = $359 << 24 >> 24;
          $361 = ($360|0)==(92);
          if (!($361)) {
           label = 99;
           break;
          }
         }
         $362 = HEAP32[29864>>2]|0;
         $363 = (($362) + 1)|0;
         HEAP32[29864>>2] = $363;
         $364 = (29880 + ($362)|0);
         $365 = HEAP8[$364>>0]|0;
         $366 = $365 << 24 >> 24;
         $c = $366;
        } else {
         label = 99;
        }
       } while(0);
       if ((label|0) == 99) {
        label = 0;
        $c = 0;
        $digits = 0;
        while(1) {
         $367 = HEAP32[29864>>2]|0;
         $368 = HEAP32[29872>>2]|0;
         $369 = ($367|0)<($368|0);
         if ($369) {
          $370 = HEAP32[29864>>2]|0;
          $371 = (29880 + ($370)|0);
          $372 = HEAP8[$371>>0]|0;
          $373 = $372 << 24 >> 24;
          $374 = (_isdigit($373)|0);
          $375 = ($374|0)!=(0);
          $481 = $375;
         } else {
          $481 = 0;
         }
         if (!($481)) {
          break;
         }
         $376 = $c;
         $377 = ($376*10)|0;
         $378 = HEAP32[29864>>2]|0;
         $379 = (29880 + ($378)|0);
         $380 = HEAP8[$379>>0]|0;
         $381 = $380 << 24 >> 24;
         $382 = (($381) - 48)|0;
         $383 = (($377) + ($382))|0;
         $c = $383;
         $384 = HEAP32[29864>>2]|0;
         $385 = (($384) + 1)|0;
         HEAP32[29864>>2] = $385;
         $386 = $digits;
         $387 = (($386) + 1)|0;
         $digits = $387;
         $388 = ($387|0)==(3);
         if ($388) {
          label = 104;
          break;
         }
        }
        if ((label|0) == 104) {
         label = 0;
        }
        $389 = $c;
        $390 = ($389|0)<(0);
        if ($390) {
         $c = 0;
        }
        $391 = $c;
        $392 = ($391|0)>(255);
        if ($392) {
         $c = 255;
        }
       }
      } else {
       $393 = HEAP32[29864>>2]|0;
       $394 = (($393) + 1)|0;
       HEAP32[29864>>2] = $394;
       $395 = (29880 + ($393)|0);
       $396 = HEAP8[$395>>0]|0;
       $397 = $396 << 24 >> 24;
       $c = $397;
      }
      $398 = $p;
      $399 = $398;
      $400 = (($399) - (30952))|0;
      $401 = ($400|0)<(1023);
      if ($401) {
       $402 = $c;
       $403 = $402&255;
       $404 = $p;
       $405 = (($404) + 1|0);
       $p = $405;
       HEAP8[$404>>0] = $403;
      }
     }
     $406 = $p;
     HEAP8[$406>>0] = 0;
     $407 = $p;
     $408 = $407;
     $409 = (($408) - (30952))|0;
     HEAP32[30944>>2] = $409;
     $410 = HEAP32[29864>>2]|0;
     $411 = HEAP32[29872>>2]|0;
     $412 = ($410|0)<($411|0);
     if ($412) {
      $413 = HEAP32[29864>>2]|0;
      $414 = (29880 + ($413)|0);
      $415 = HEAP8[$414>>0]|0;
      $416 = $415 << 24 >> 24;
      $417 = ($416|0)==(34);
      if ($417) {
       $418 = HEAP32[29864>>2]|0;
       $419 = (($418) + 1)|0;
       HEAP32[29864>>2] = $419;
      } else {
       label = 119;
      }
     } else {
      label = 119;
     }
     if ((label|0) == 119) {
      _emit_error(33072);
     }
     HEAP32[30928>>2] = 2;
     HEAP32[33000>>2] = 0;
     STACKTOP = sp;return;
    }
    HEAP32[33000>>2] = 0;
    $420 = HEAP32[29864>>2]|0;
    $421 = (29880 + ($420)|0);
    $422 = HEAP8[$421>>0]|0;
    $423 = $422 << 24 >> 24;
    do {
     switch ($423|0) {
     case 44:  {
      $469 = HEAP32[29864>>2]|0;
      $470 = (($469) + 1)|0;
      HEAP32[29864>>2] = $470;
      HEAP32[30928>>2] = 21;
      STACKTOP = sp;return;
      break;
     }
     case 45:  {
      $428 = HEAP32[29864>>2]|0;
      $429 = (($428) + 1)|0;
      HEAP32[29864>>2] = $429;
      HEAP32[30928>>2] = 13;
      STACKTOP = sp;return;
      break;
     }
     case 42:  {
      $459 = HEAP32[29864>>2]|0;
      $460 = (($459) + 1)|0;
      HEAP32[29864>>2] = $460;
      HEAP32[30928>>2] = 14;
      STACKTOP = sp;return;
      break;
     }
     case 40:  {
      $430 = HEAP32[29864>>2]|0;
      $431 = (($430) + 1)|0;
      HEAP32[29864>>2] = $431;
      HEAP32[30928>>2] = 17;
      STACKTOP = sp;return;
      break;
     }
     case 58:  {
      $465 = HEAP32[29864>>2]|0;
      $466 = (($465) + 1)|0;
      HEAP32[29864>>2] = $466;
      HEAP32[30928>>2] = 19;
      STACKTOP = sp;return;
      break;
     }
     case 61:  {
      $424 = HEAP32[29864>>2]|0;
      $425 = (($424) + 1)|0;
      HEAP32[29864>>2] = $425;
      HEAP32[30928>>2] = 6;
      STACKTOP = sp;return;
      break;
     }
     case 37:  {
      $463 = HEAP32[29864>>2]|0;
      $464 = (($463) + 1)|0;
      HEAP32[29864>>2] = $464;
      HEAP32[30928>>2] = 16;
      STACKTOP = sp;return;
      break;
     }
     case 41:  {
      $432 = HEAP32[29864>>2]|0;
      $433 = (($432) + 1)|0;
      HEAP32[29864>>2] = $433;
      HEAP32[30928>>2] = 18;
      STACKTOP = sp;return;
      break;
     }
     case 62:  {
      $450 = HEAP32[29864>>2]|0;
      $451 = (($450) + 1)|0;
      HEAP32[29864>>2] = $451;
      HEAP32[30928>>2] = 10;
      $452 = HEAP32[29864>>2]|0;
      $453 = (29880 + ($452)|0);
      $454 = HEAP8[$453>>0]|0;
      $455 = $454 << 24 >> 24;
      $456 = ($455|0)==(61);
      if ($456) {
       $457 = HEAP32[29864>>2]|0;
       $458 = (($457) + 1)|0;
       HEAP32[29864>>2] = $458;
       HEAP32[30928>>2] = 11;
      }
      STACKTOP = sp;return;
      break;
     }
     case 60:  {
      $434 = HEAP32[29864>>2]|0;
      $435 = (($434) + 1)|0;
      HEAP32[29864>>2] = $435;
      HEAP32[30928>>2] = 8;
      $436 = HEAP32[29864>>2]|0;
      $437 = (29880 + ($436)|0);
      $438 = HEAP8[$437>>0]|0;
      $439 = $438 << 24 >> 24;
      $440 = ($439|0)==(61);
      if ($440) {
       $441 = HEAP32[29864>>2]|0;
       $442 = (($441) + 1)|0;
       HEAP32[29864>>2] = $442;
       HEAP32[30928>>2] = 9;
      } else {
       $443 = HEAP32[29864>>2]|0;
       $444 = (29880 + ($443)|0);
       $445 = HEAP8[$444>>0]|0;
       $446 = $445 << 24 >> 24;
       $447 = ($446|0)==(62);
       if ($447) {
        $448 = HEAP32[29864>>2]|0;
        $449 = (($448) + 1)|0;
        HEAP32[29864>>2] = $449;
        HEAP32[30928>>2] = 7;
       }
      }
      STACKTOP = sp;return;
      break;
     }
     case 46:  {
      $467 = HEAP32[29864>>2]|0;
      $468 = (($467) + 1)|0;
      HEAP32[29864>>2] = $468;
      HEAP32[30928>>2] = 20;
      STACKTOP = sp;return;
      break;
     }
     case 43:  {
      $426 = HEAP32[29864>>2]|0;
      $427 = (($426) + 1)|0;
      HEAP32[29864>>2] = $427;
      HEAP32[30928>>2] = 12;
      STACKTOP = sp;return;
      break;
     }
     case 47:  {
      $461 = HEAP32[29864>>2]|0;
      $462 = (($461) + 1)|0;
      HEAP32[29864>>2] = $462;
      HEAP32[30928>>2] = 15;
      STACKTOP = sp;return;
      break;
     }
     case 39:  {
      $471 = HEAP32[29872>>2]|0;
      HEAP32[29864>>2] = $471;
      HEAP32[30928>>2] = 0;
      STACKTOP = sp;return;
      break;
     }
     default: {
      $472 = HEAP32[29864>>2]|0;
      $473 = (($472) + 1)|0;
      HEAP32[29864>>2] = $473;
      HEAP32[30928>>2] = 22;
      STACKTOP = sp;return;
     }
     }
    } while(0);
   }
  }
 } while(0);
 $82 = HEAP32[29864>>2]|0;
 $83 = (29880 + ($82)|0);
 $84 = HEAP8[$83>>0]|0;
 $85 = $84 << 24 >> 24;
 $86 = ($85|0)==(46);
 if ($86) {
  (_strcpy((30952|0),(31976|0))|0);
  $87 = (_strlen((30952|0))|0);
  $88 = (30952 + ($87)|0);
  $p = $88;
  HEAP32[30936>>2] = 1;
 } else {
  HEAP8[30952>>0] = 0;
  $p = 30952;
  HEAP32[30936>>2] = 0;
 }
 $89 = HEAP32[29864>>2]|0;
 $90 = (29880 + ($89)|0);
 $91 = HEAP8[$90>>0]|0;
 $92 = $91 << 24 >> 24;
 $93 = (_toupper($92)|0);
 $94 = $93&255;
 $95 = $p;
 $96 = (($95) + 1|0);
 $p = $96;
 HEAP8[$95>>0] = $94;
 $97 = HEAP32[29864>>2]|0;
 $98 = (($97) + 1)|0;
 HEAP32[29864>>2] = $98;
 while(1) {
  $99 = HEAP32[29864>>2]|0;
  $100 = HEAP32[29872>>2]|0;
  $101 = ($99|0)<($100|0);
  if ($101) {
   $102 = HEAP32[29864>>2]|0;
   $103 = (29880 + ($102)|0);
   $104 = HEAP8[$103>>0]|0;
   $105 = $104 << 24 >> 24;
   $106 = (_isalnum($105)|0);
   $107 = ($106|0)!=(0);
   if ($107) {
    $475 = 1;
   } else {
    $108 = HEAP32[29864>>2]|0;
    $109 = (29880 + ($108)|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = $110 << 24 >> 24;
    $112 = ($111|0)==(95);
    if ($112) {
     $475 = 1;
    } else {
     $113 = HEAP32[29864>>2]|0;
     $114 = (29880 + ($113)|0);
     $115 = HEAP8[$114>>0]|0;
     $116 = $115 << 24 >> 24;
     $117 = ($116|0)==(35);
     $475 = $117;
    }
   }
   $474 = $475;
  } else {
   $474 = 0;
  }
  if (!($474)) {
   break;
  }
  $118 = $p;
  $119 = $118;
  $120 = (($119) - (30952))|0;
  $121 = ($120|0)<(1023);
  if ($121) {
   $122 = HEAP32[29864>>2]|0;
   $123 = (29880 + ($122)|0);
   $124 = HEAP8[$123>>0]|0;
   $125 = $124 << 24 >> 24;
   $126 = (_toupper($125)|0);
   $127 = $126&255;
   $128 = $p;
   $129 = (($128) + 1|0);
   $p = $129;
   HEAP8[$128>>0] = $127;
  }
  $130 = HEAP32[29864>>2]|0;
  $131 = (($130) + 1)|0;
  HEAP32[29864>>2] = $131;
  $132 = $p;
  $133 = $132;
  $134 = (($133) - (30952))|0;
  $135 = ($134|0)==(3);
  if ($135) {
   $136 = HEAP8[30952>>0]|0;
   $137 = $136 << 24 >> 24;
   $138 = ($137|0)==(67);
   if ($138) {
    $139 = HEAP8[((30952 + 1|0))>>0]|0;
    $140 = $139 << 24 >> 24;
    $141 = ($140|0)==(72);
    if ($141) {
     $142 = HEAP8[((30952 + 2|0))>>0]|0;
     $143 = $142 << 24 >> 24;
     $144 = ($143|0)==(82);
     if ($144) {
      $145 = HEAP32[29864>>2]|0;
      $146 = (29880 + ($145)|0);
      $147 = HEAP8[$146>>0]|0;
      $148 = $147 << 24 >> 24;
      $149 = ($148|0)==(36);
      if ($149) {
       $150 = HEAP32[29864>>2]|0;
       $151 = (($150) + 1)|0;
       $152 = (29880 + ($151)|0);
       $153 = HEAP8[$152>>0]|0;
       $154 = $153 << 24 >> 24;
       $155 = ($154|0)!=(58);
       if ($155) {
        $156 = HEAP32[29864>>2]|0;
        $157 = (29880 + ($156)|0);
        $158 = HEAP8[$157>>0]|0;
        $159 = $p;
        $160 = (($159) + 1|0);
        $p = $160;
        HEAP8[$159>>0] = $158;
        $161 = HEAP32[29864>>2]|0;
        $162 = (($161) + 1)|0;
        HEAP32[29864>>2] = $162;
       }
      }
     }
    }
   }
  }
 }
 $163 = $p;
 HEAP8[$163>>0] = 0;
 $164 = $p;
 $165 = $164;
 $166 = (($165) - (30952))|0;
 HEAP32[30944>>2] = $166;
 $167 = HEAP32[29864>>2]|0;
 $168 = HEAP32[29872>>2]|0;
 $169 = ($167|0)<($168|0);
 if ($169) {
  $170 = HEAP32[29864>>2]|0;
  $171 = (29880 + ($170)|0);
  $172 = HEAP8[$171>>0]|0;
  $173 = $172 << 24 >> 24;
  $174 = ($173|0)==(58);
  if ($174) {
   $175 = HEAP32[33000>>2]|0;
   $176 = ($175|0)!=(0);
   if ($176) {
    $177 = (_strcmp(30952,33008)|0);
    $178 = ($177|0)!=(0);
    if ($178) {
     $179 = (_strcmp(30952,33016)|0);
     $180 = ($179|0)!=(0);
     if ($180) {
      $181 = (_strcmp(30952,33024)|0);
      $182 = ($181|0)!=(0);
      if ($182) {
       $183 = (_strcmp(30952,33032)|0);
       $184 = ($183|0)!=(0);
       if ($184) {
        $185 = (_strcmp(30952,33040)|0);
        $186 = ($185|0)!=(0);
        if ($186) {
         $187 = (_strcmp(30952,33048)|0);
         $188 = ($187|0)!=(0);
         if ($188) {
          $189 = (_strcmp(30952,33056)|0);
          $190 = ($189|0)!=(0);
          if ($190) {
           HEAP32[30928>>2] = 3;
           $191 = HEAP32[29864>>2]|0;
           $192 = (($191) + 1)|0;
           HEAP32[29864>>2] = $192;
          } else {
           label = 51;
          }
         } else {
          label = 51;
         }
        } else {
         label = 51;
        }
       } else {
        label = 51;
       }
      } else {
       label = 51;
      }
     } else {
      label = 51;
     }
    } else {
     label = 51;
    }
   } else {
    label = 51;
   }
  } else {
   label = 51;
  }
 } else {
  label = 51;
 }
 if ((label|0) == 51) {
  HEAP32[30928>>2] = 1;
 }
 HEAP32[33000>>2] = 0;
 STACKTOP = sp;return;
}
function _check_for_explicit($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $name;
 $1 = HEAP32[33096>>2]|0;
 $2 = ($1|0)!=(0);
 if ($2) {
  $3 = $0;
  HEAP32[$vararg_buffer>>2] = $3;
  (_sprintf(33104,34128,$vararg_buffer)|0);
  _emit_error(33104);
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function _extend_types($node1,$type1,$node2,$type2) {
 $node1 = $node1|0;
 $type1 = $type1|0;
 $node2 = $node2|0;
 $type2 = $type2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $final_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $node1;
 $1 = $type1;
 $2 = $node2;
 $3 = $type2;
 $final_type = 1;
 $4 = $1;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = $1;
  $8 = $7 & 4;
  $9 = ($8|0)!=(0);
  if ($9) {
   $10 = $0;
   $11 = HEAP32[$10>>2]|0;
   $12 = (_node_create(42,0,$11,0)|0);
   $13 = $0;
   HEAP32[$13>>2] = $12;
  } else {
   $14 = $0;
   $15 = HEAP32[$14>>2]|0;
   $16 = (_node_create(41,0,$15,0)|0);
   $17 = $0;
   HEAP32[$17>>2] = $16;
  }
 }
 $18 = $1;
 $19 = $18 & 4;
 $20 = ($19|0)!=(0);
 if ($20) {
  $21 = $final_type;
  $22 = $21 | 4;
  $final_type = $22;
 }
 $23 = $3;
 $24 = $23 & 3;
 $25 = ($24|0)==(0);
 if ($25) {
  $26 = $3;
  $27 = $26 & 4;
  $28 = ($27|0)!=(0);
  if ($28) {
   $29 = $2;
   $30 = HEAP32[$29>>2]|0;
   $31 = (_node_create(42,0,$30,0)|0);
   $32 = $2;
   HEAP32[$32>>2] = $31;
  } else {
   $33 = $2;
   $34 = HEAP32[$33>>2]|0;
   $35 = (_node_create(41,0,$34,0)|0);
   $36 = $2;
   HEAP32[$36>>2] = $35;
  }
 }
 $37 = $3;
 $38 = $37 & 4;
 $39 = ($38|0)!=(0);
 if (!($39)) {
  $42 = $final_type;
  STACKTOP = sp;return ($42|0);
 }
 $40 = $final_type;
 $41 = $40 | 4;
 $final_type = $41;
 $42 = $final_type;
 STACKTOP = sp;return ($42|0);
}
function _mix_types($node1,$type1,$node2,$type2) {
 $node1 = $node1|0;
 $type1 = $type1|0;
 $node2 = $node2|0;
 $type2 = $type2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $node1;
 $2 = $type1;
 $3 = $node2;
 $4 = $type2;
 $5 = $2;
 $6 = $5 & 4;
 $7 = $4;
 $8 = $7 & 4;
 $9 = $6 | $8;
 $c = $9;
 $10 = $2;
 $11 = $10 & 3;
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = $4;
  $14 = $13 & 3;
  $15 = ($14|0)==(0);
  if ($15) {
   $16 = $c;
   $17 = 0 | $16;
   $0 = $17;
   $31 = $0;
   STACKTOP = sp;return ($31|0);
  }
 }
 $18 = $2;
 $19 = $18 & 3;
 $20 = ($19|0)==(1);
 if ($20) {
  $21 = $4;
  $22 = $21 & 3;
  $23 = ($22|0)==(1);
  if ($23) {
   $24 = $c;
   $25 = 1 | $24;
   $0 = $25;
   $31 = $0;
   STACKTOP = sp;return ($31|0);
  }
 }
 $26 = $1;
 $27 = $2;
 $28 = $3;
 $29 = $4;
 $30 = (_extend_types($26,$27,$28,$29)|0);
 $0 = $30;
 $31 = $0;
 STACKTOP = sp;return ($31|0);
}
function _evaluate_save_expression($cast,$to_type) {
 $cast = $cast|0;
 $to_type = $to_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tree = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $type = sp + 8|0;
 $0 = $cast;
 $1 = $to_type;
 HEAP32[34168>>2] = 0;
 $2 = (_evaluate_level_0($type)|0);
 $tree = $2;
 $3 = $0;
 $4 = ($3|0)!=(0);
 if (!($4)) {
  $23 = $tree;
  _node_label($23);
  $24 = $tree;
  STACKTOP = sp;return ($24|0);
 }
 $5 = $1;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = HEAP32[$type>>2]|0;
  $8 = $7 & 3;
  $9 = ($8|0)==(1);
  if ($9) {
   $10 = $tree;
   $11 = (_node_create(43,0,$10,0)|0);
   $tree = $11;
   HEAP32[$type>>2] = 0;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $12 = $1;
  $13 = ($12|0)==(1);
  if ($13) {
   $14 = HEAP32[$type>>2]|0;
   $15 = $14 & 3;
   $16 = ($15|0)==(0);
   if ($16) {
    $17 = HEAP32[$type>>2]|0;
    $18 = $17 & 4;
    $19 = ($18|0)!=(0);
    $20 = $19 ? 42 : 41;
    $21 = $tree;
    $22 = (_node_create($20,0,$21,0)|0);
    $tree = $22;
    HEAP32[$type>>2] = 1;
   }
  }
 }
 $23 = $tree;
 _node_label($23);
 $24 = $tree;
 STACKTOP = sp;return ($24|0);
}
function _evaluate_level_0($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $left = 0, $right = 0, $type2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $left = sp;
 $right = sp + 4|0;
 $type2 = sp + 8|0;
 $0 = $type;
 _check_for_macro();
 $1 = $0;
 $2 = (_evaluate_level_1($1)|0);
 HEAP32[$left>>2] = $2;
 while(1) {
  $3 = HEAP32[30928>>2]|0;
  $4 = ($3|0)==(1);
  if (!($4)) {
   break;
  }
  $5 = (_strcmp(30952,34184)|0);
  $6 = ($5|0)==(0);
  if (!($6)) {
   break;
  }
  _get_lex();
  _check_for_macro();
  $7 = (_evaluate_level_1($type2)|0);
  HEAP32[$right>>2] = $7;
  $8 = $0;
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$type2>>2]|0;
  $11 = (_mix_types($left,$9,$right,$10)|0);
  $12 = $0;
  HEAP32[$12>>2] = $11;
  $13 = $0;
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 & 3;
  $16 = ($15|0)==(0);
  if ($16) {
   $17 = HEAP32[$left>>2]|0;
   $18 = HEAP32[$right>>2]|0;
   $19 = (_node_create(0,0,$17,$18)|0);
   HEAP32[$left>>2] = $19;
  } else {
   $20 = HEAP32[$left>>2]|0;
   $21 = HEAP32[$right>>2]|0;
   $22 = (_node_create(1,0,$20,$21)|0);
   HEAP32[$left>>2] = $22;
  }
 }
 $23 = HEAP32[$left>>2]|0;
 STACKTOP = sp;return ($23|0);
}
function _evaluate_expression($cast,$to_type,$label) {
 $cast = $cast|0;
 $to_type = $to_type|0;
 $label = $label|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $tree = 0, $type = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $type = sp + 28|0;
 $1 = $cast;
 $2 = $to_type;
 $3 = $label;
 HEAP32[34168>>2] = 0;
 $4 = (_evaluate_level_0($type)|0);
 $tree = $4;
 $5 = $1;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $2;
  $8 = ($7|0)==(0);
  if ($8) {
   $9 = HEAP32[$type>>2]|0;
   $10 = $9 & 3;
   $11 = ($10|0)==(1);
   if ($11) {
    $12 = $tree;
    $13 = (_node_create(43,0,$12,0)|0);
    $tree = $13;
    HEAP32[$type>>2] = 0;
   } else {
    label = 5;
   }
  } else {
   label = 5;
  }
  if ((label|0) == 5) {
   $14 = $2;
   $15 = ($14|0)==(1);
   if ($15) {
    $16 = HEAP32[$type>>2]|0;
    $17 = $16 & 3;
    $18 = ($17|0)==(0);
    if ($18) {
     $19 = HEAP32[$type>>2]|0;
     $20 = $19 & 4;
     $21 = ($20|0)!=(0);
     $22 = $21 ? 42 : 41;
     $23 = $tree;
     $24 = (_node_create($22,0,$23,0)|0);
     $tree = $24;
     HEAP32[$type>>2] = 1;
    }
   }
  }
 }
 $25 = $3;
 $26 = ($25|0)!=(0);
 if ($26) {
  $27 = $tree;
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)==(5);
  if ($29) {
   $30 = $tree;
   $31 = (($30) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)==(51);
   if ($34) {
    $35 = $tree;
    $36 = (($35) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $39 & -256;
    $41 = ($40|0)==(0);
    if ($41) {
     $42 = $tree;
     $43 = (($42) + 8|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45|0)==(45);
     if ($46) {
      $47 = $tree;
      $48 = (($47) + 8|0);
      $49 = HEAP32[$48>>2]|0;
      HEAP32[$49>>2] = 44;
      $50 = $tree;
      $51 = (($50) + 12|0);
      $52 = HEAP32[$51>>2]|0;
      HEAP32[$52>>2] = 50;
      $53 = $tree;
      HEAP32[$53>>2] = 4;
      HEAP32[$type>>2] = 0;
     }
    }
   }
  }
 }
 $54 = $3;
 $55 = ($54|0)!=(0);
 do {
  if ($55) {
   $56 = $tree;
   $57 = HEAP32[$56>>2]|0;
   $58 = ($57|0)==(50);
   if (!($58)) {
    $59 = $tree;
    $60 = HEAP32[$59>>2]|0;
    $61 = ($60|0)==(51);
    if (!($61)) {
     break;
    }
   }
   $62 = $tree;
   $63 = (($62) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($64|0)==(0);
   if ($65) {
    $66 = $3;
    HEAP32[$vararg_buffer>>2] = $66;
    (_sprintf(33104,34176,$vararg_buffer)|0);
    _generic_jump(33104);
   } else {
   }
   $67 = $tree;
   _node_delete($67);
   $68 = HEAP32[$type>>2]|0;
   $0 = $68;
   $85 = $0;
   STACKTOP = sp;return ($85|0);
  }
 } while(0);
 $69 = $1;
 $70 = ($69|0)==(2);
 if ($70) {
  $71 = HEAP32[$type>>2]|0;
  $0 = $71;
  $85 = $0;
  STACKTOP = sp;return ($85|0);
 }
 $72 = $tree;
 _node_label($72);
 $73 = $tree;
 $74 = $3;
 _node_generate($73,$74);
 $75 = $tree;
 _node_delete($75);
 $76 = $3;
 $77 = ($76|0)!=(0);
 if ($77) {
  $78 = HEAP32[34168>>2]|0;
  $79 = ($78|0)!=(0);
  if (!($79)) {
   $80 = HEAP32[$type>>2]|0;
   $81 = $80 & 3;
   $82 = ($81|0)==(0);
   if ($82) {
    _generic_test_8();
   } else {
    _generic_test_16();
   }
   $83 = $3;
   HEAP32[$vararg_buffer1>>2] = $83;
   (_sprintf(33104,34176,$vararg_buffer1)|0);
   _generic_jump_zero(33104);
  }
 }
 $84 = HEAP32[$type>>2]|0;
 $0 = $84;
 $85 = $0;
 STACKTOP = sp;return ($85|0);
}
function _check_for_macro() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[30928>>2]|0;
 $1 = ($0|0)==(1);
 if ($1) {
  $2 = (_macro_search(30952)|0);
  $3 = ($2|0)!=(0|0);
  if ($3) {
   (_replace_macro()|0);
  }
 }
 STACKTOP = sp;return;
}
function _replace_macro() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $arg = 0, $argument = 0, $c = 0, $d = 0, $function = 0, $level = 0, $macro = 0, $total_arguments = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $function = sp + 32|0;
 (_strcpy(($function|0),(30952|0))|0);
 $1 = (_macro_search($function)|0);
 $macro = $1;
 _get_lex();
 $2 = $macro;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  _emit_error(35784);
  $0 = 1;
  $302 = $0;
  STACKTOP = sp;return ($302|0);
 }
 $6 = $macro;
 $7 = (($6) + 8|0);
 HEAP32[$7>>2] = 1;
 $8 = $macro;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $total_arguments = $10;
 $11 = $total_arguments;
 $12 = ($11|0)>(0);
 if ($12) {
  $13 = $total_arguments;
  $14 = (_calloc($13,12)|0);
  $argument = $14;
  $15 = $argument;
  $16 = ($15|0)==(0|0);
  if ($16) {
   _emit_error(35808);
   $0 = 1;
   $302 = $0;
   STACKTOP = sp;return ($302|0);
  }
  $17 = HEAP32[30928>>2]|0;
  $18 = ($17|0)!=(17);
  if ($18) {
   _emit_error(35840);
   $0 = 1;
   $302 = $0;
   STACKTOP = sp;return ($302|0);
  }
  _get_lex();
  $c = 0;
  $level = 0;
  L15: while(1) {
   $19 = $c;
   $20 = $total_arguments;
   $21 = ($19|0)<($20|0);
   if (!($21)) {
    break;
   }
   while(1) {
    $22 = $level;
    $23 = ($22|0)==(0);
    if ($23) {
     $24 = HEAP32[30928>>2]|0;
     $25 = ($24|0)==(18);
     if ($25) {
      label = 14;
      break;
     }
     $26 = HEAP32[30928>>2]|0;
     $27 = ($26|0)==(21);
     if ($27) {
      label = 14;
      break;
     }
    }
    $28 = HEAP32[30928>>2]|0;
    $29 = ($28|0)==(0);
    if ($29) {
     label = 16;
     break;
    }
    $30 = HEAP32[30928>>2]|0;
    $31 = ($30|0)==(17);
    if ($31) {
     $32 = $level;
     $33 = (($32) + 1)|0;
     $level = $33;
    }
    $34 = HEAP32[30928>>2]|0;
    $35 = ($34|0)==(18);
    if ($35) {
     $36 = $level;
     $37 = (($36) + -1)|0;
     $level = $37;
    }
    $38 = $c;
    $39 = $argument;
    $40 = (($39) + (($38*12)|0)|0);
    $41 = (($40) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $c;
    $44 = $argument;
    $45 = (($44) + (($43*12)|0)|0);
    $46 = (($45) + 8|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($42|0)>=($47|0);
    if ($48) {
     $49 = $c;
     $50 = $argument;
     $51 = (($50) + (($49*12)|0)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = $c;
     $54 = $argument;
     $55 = (($54) + (($53*12)|0)|0);
     $56 = (($55) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = (($57) + 1)|0;
     $59 = $58<<1;
     $60 = ($59*12)|0;
     $61 = (_realloc($52,$60)|0);
     $62 = $c;
     $63 = $argument;
     $64 = (($63) + (($62*12)|0)|0);
     HEAP32[$64>>2] = $61;
     $65 = $c;
     $66 = $argument;
     $67 = (($66) + (($65*12)|0)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($68|0)==(0|0);
     if ($69) {
      label = 23;
      break L15;
     }
     $70 = $c;
     $71 = $argument;
     $72 = (($71) + (($70*12)|0)|0);
     $73 = (($72) + 8|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = (($74) + 1)|0;
     $76 = $75<<1;
     $77 = $c;
     $78 = $argument;
     $79 = (($78) + (($77*12)|0)|0);
     $80 = (($79) + 8|0);
     HEAP32[$80>>2] = $76;
    }
    $81 = HEAP32[30928>>2]|0;
    $82 = $c;
    $83 = $argument;
    $84 = (($83) + (($82*12)|0)|0);
    $85 = (($84) + 4|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $c;
    $88 = $argument;
    $89 = (($88) + (($87*12)|0)|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (($90) + (($86*12)|0)|0);
    HEAP32[$91>>2] = $81;
    $92 = HEAP32[30928>>2]|0;
    $93 = ($92|0)==(2);
    if ($93) {
     $94 = HEAP32[30944>>2]|0;
     HEAP32[30936>>2] = $94;
    }
    $95 = HEAP32[30936>>2]|0;
    $96 = $c;
    $97 = $argument;
    $98 = (($97) + (($96*12)|0)|0);
    $99 = (($98) + 4|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $c;
    $102 = $argument;
    $103 = (($102) + (($101*12)|0)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = (($104) + (($100*12)|0)|0);
    $106 = (($105) + 4|0);
    HEAP32[$106>>2] = $95;
    $107 = HEAP32[30928>>2]|0;
    $108 = ($107|0)==(2);
    if ($108) {
     $109 = HEAP32[30944>>2]|0;
     $110 = (($109) + 1)|0;
     $111 = (_malloc($110)|0);
     $112 = $c;
     $113 = $argument;
     $114 = (($113) + (($112*12)|0)|0);
     $115 = (($114) + 4|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = $c;
     $118 = $argument;
     $119 = (($118) + (($117*12)|0)|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = (($120) + (($116*12)|0)|0);
     $122 = (($121) + 8|0);
     HEAP32[$122>>2] = $111;
    } else {
     $123 = (_strlen((30952|0))|0);
     $124 = (($123) + 1)|0;
     $125 = (_malloc($124)|0);
     $126 = $c;
     $127 = $argument;
     $128 = (($127) + (($126*12)|0)|0);
     $129 = (($128) + 4|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = $c;
     $132 = $argument;
     $133 = (($132) + (($131*12)|0)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = (($134) + (($130*12)|0)|0);
     $136 = (($135) + 8|0);
     HEAP32[$136>>2] = $125;
    }
    $137 = $c;
    $138 = $argument;
    $139 = (($138) + (($137*12)|0)|0);
    $140 = (($139) + 4|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $c;
    $143 = $argument;
    $144 = (($143) + (($142*12)|0)|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = (($145) + (($141*12)|0)|0);
    $147 = (($146) + 8|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($148|0)==(0|0);
    if ($149) {
     label = 31;
     break L15;
    }
    $150 = HEAP32[30928>>2]|0;
    $151 = ($150|0)==(2);
    if ($151) {
     $152 = HEAP32[30944>>2]|0;
     $153 = ($152|0)!=(0);
     if ($153) {
      $154 = $c;
      $155 = $argument;
      $156 = (($155) + (($154*12)|0)|0);
      $157 = (($156) + 4|0);
      $158 = HEAP32[$157>>2]|0;
      $159 = $c;
      $160 = $argument;
      $161 = (($160) + (($159*12)|0)|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = (($162) + (($158*12)|0)|0);
      $164 = (($163) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = HEAP32[30944>>2]|0;
      _memcpy(($165|0),(30952|0),($166|0))|0;
     }
    } else {
     $167 = $c;
     $168 = $argument;
     $169 = (($168) + (($167*12)|0)|0);
     $170 = (($169) + 4|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = $c;
     $173 = $argument;
     $174 = (($173) + (($172*12)|0)|0);
     $175 = HEAP32[$174>>2]|0;
     $176 = (($175) + (($171*12)|0)|0);
     $177 = (($176) + 8|0);
     $178 = HEAP32[$177>>2]|0;
     (_strcpy(($178|0),(30952|0))|0);
    }
    $179 = $c;
    $180 = $argument;
    $181 = (($180) + (($179*12)|0)|0);
    $182 = (($181) + 4|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = (($183) + 1)|0;
    HEAP32[$182>>2] = $184;
    _get_lex();
   }
   if ((label|0) == 14) {
    label = 0;
   }
   else if ((label|0) == 16) {
    label = 0;
   }
   $185 = HEAP32[30928>>2]|0;
   $186 = ($185|0)==(21);
   if (!($186)) {
    label = 41;
    break;
   }
   $187 = $c;
   $188 = (($187) + 1)|0;
   $189 = $total_arguments;
   $190 = ($188|0)<($189|0);
   if (!($190)) {
    label = 41;
    break;
   }
   _get_lex();
   $191 = $c;
   $192 = (($191) + 1)|0;
   $c = $192;
  }
  do {
   if ((label|0) == 23) {
    _emit_error(35808);
    $0 = 1;
    $302 = $0;
    STACKTOP = sp;return ($302|0);
   }
   else if ((label|0) == 31) {
    _emit_error(35808);
    $0 = 1;
    $302 = $0;
    STACKTOP = sp;return ($302|0);
   }
   else if ((label|0) == 41) {
    $193 = HEAP32[30928>>2]|0;
    $194 = ($193|0)==(18);
    if ($194) {
     $195 = $c;
     $196 = (($195) + 1)|0;
     $197 = $total_arguments;
     $198 = ($196|0)==($197|0);
     if ($198) {
      _get_lex();
      break;
     }
    }
    _emit_error(35880);
   }
  } while(0);
 } else {
  $argument = 0;
 }
 $199 = HEAP32[30928>>2]|0;
 $200 = HEAP32[30936>>2]|0;
 _accumulated_push($199,$200,30952);
 $201 = $macro;
 $202 = (($201) + 16|0);
 $203 = HEAP32[$202>>2]|0;
 $204 = (($203) - 1)|0;
 $c = $204;
 while(1) {
  $205 = $c;
  $206 = ($205|0)>=(0);
  if (!($206)) {
   break;
  }
  $207 = $c;
  $208 = $macro;
  $209 = (($208) + 12|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = (($210) + (($207*12)|0)|0);
  $212 = HEAP32[$211>>2]|0;
  $213 = ($212|0)==(22);
  if ($213) {
   $214 = $c;
   $215 = $macro;
   $216 = (($215) + 12|0);
   $217 = HEAP32[$216>>2]|0;
   $218 = (($217) + (($214*12)|0)|0);
   $219 = (($218) + 4|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = $argument;
   $222 = (($221) + (($220*12)|0)|0);
   $arg = $222;
   $223 = $arg;
   $224 = (($223) + 4|0);
   $225 = HEAP32[$224>>2]|0;
   $226 = (($225) - 1)|0;
   $d = $226;
   while(1) {
    $227 = $d;
    $228 = ($227|0)>=(0);
    if (!($228)) {
     break;
    }
    $229 = $d;
    $230 = $arg;
    $231 = HEAP32[$230>>2]|0;
    $232 = (($231) + (($229*12)|0)|0);
    $233 = HEAP32[$232>>2]|0;
    $234 = $d;
    $235 = $arg;
    $236 = HEAP32[$235>>2]|0;
    $237 = (($236) + (($234*12)|0)|0);
    $238 = (($237) + 4|0);
    $239 = HEAP32[$238>>2]|0;
    $240 = $d;
    $241 = $arg;
    $242 = HEAP32[$241>>2]|0;
    $243 = (($242) + (($240*12)|0)|0);
    $244 = (($243) + 8|0);
    $245 = HEAP32[$244>>2]|0;
    _accumulated_push($233,$239,$245);
    $246 = $d;
    $247 = (($246) + -1)|0;
    $d = $247;
   }
  } else {
   $248 = $c;
   $249 = $macro;
   $250 = (($249) + 12|0);
   $251 = HEAP32[$250>>2]|0;
   $252 = (($251) + (($248*12)|0)|0);
   $253 = HEAP32[$252>>2]|0;
   $254 = $c;
   $255 = $macro;
   $256 = (($255) + 12|0);
   $257 = HEAP32[$256>>2]|0;
   $258 = (($257) + (($254*12)|0)|0);
   $259 = (($258) + 4|0);
   $260 = HEAP32[$259>>2]|0;
   $261 = $c;
   $262 = $macro;
   $263 = (($262) + 12|0);
   $264 = HEAP32[$263>>2]|0;
   $265 = (($264) + (($261*12)|0)|0);
   $266 = (($265) + 8|0);
   $267 = HEAP32[$266>>2]|0;
   _accumulated_push($253,$260,$267);
  }
  $268 = $c;
  $269 = (($268) + -1)|0;
  $c = $269;
 }
 $c = 0;
 while(1) {
  $270 = $c;
  $271 = $total_arguments;
  $272 = ($270|0)<($271|0);
  if (!($272)) {
   break;
  }
  $273 = $c;
  $274 = $argument;
  $275 = (($274) + (($273*12)|0)|0);
  $276 = HEAP32[$275>>2]|0;
  _free($276);
  $277 = $c;
  $278 = (($277) + 1)|0;
  $c = $278;
 }
 $279 = HEAP32[30912>>2]|0;
 $280 = (($279) + -1)|0;
 HEAP32[30912>>2] = $280;
 $c = $280;
 $281 = $c;
 $282 = HEAP32[30904>>2]|0;
 $283 = (($282) + (($281*12)|0)|0);
 $284 = HEAP32[$283>>2]|0;
 HEAP32[30928>>2] = $284;
 $285 = $c;
 $286 = HEAP32[30904>>2]|0;
 $287 = (($286) + (($285*12)|0)|0);
 $288 = (($287) + 4|0);
 $289 = HEAP32[$288>>2]|0;
 HEAP32[30936>>2] = $289;
 $290 = $c;
 $291 = HEAP32[30904>>2]|0;
 $292 = (($291) + (($290*12)|0)|0);
 $293 = (($292) + 8|0);
 $294 = HEAP32[$293>>2]|0;
 (_strcpy((30952|0),($294|0))|0);
 $295 = $c;
 $296 = HEAP32[30904>>2]|0;
 $297 = (($296) + (($295*12)|0)|0);
 $298 = (($297) + 8|0);
 $299 = HEAP32[$298>>2]|0;
 _free($299);
 $300 = $macro;
 $301 = (($300) + 8|0);
 HEAP32[$301>>2] = 0;
 $0 = 0;
 $302 = $0;
 STACKTOP = sp;return ($302|0);
}
function _evaluate_level_1($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $left = 0, $right = 0, $type2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $left = sp;
 $right = sp + 4|0;
 $type2 = sp + 8|0;
 $0 = $type;
 _check_for_macro();
 $1 = $0;
 $2 = (_evaluate_level_2($1)|0);
 HEAP32[$left>>2] = $2;
 while(1) {
  $3 = HEAP32[30928>>2]|0;
  $4 = ($3|0)==(1);
  if (!($4)) {
   break;
  }
  $5 = (_strcmp(30952,34192)|0);
  $6 = ($5|0)==(0);
  if (!($6)) {
   break;
  }
  _get_lex();
  _check_for_macro();
  $7 = (_evaluate_level_2($type2)|0);
  HEAP32[$right>>2] = $7;
  $8 = $0;
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$type2>>2]|0;
  $11 = (_mix_types($left,$9,$right,$10)|0);
  $12 = $0;
  HEAP32[$12>>2] = $11;
  $13 = $0;
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 & 3;
  $16 = ($15|0)==(0);
  if ($16) {
   $17 = HEAP32[$left>>2]|0;
   $18 = HEAP32[$right>>2]|0;
   $19 = (_node_create(2,0,$17,$18)|0);
   HEAP32[$left>>2] = $19;
  } else {
   $20 = HEAP32[$left>>2]|0;
   $21 = HEAP32[$right>>2]|0;
   $22 = (_node_create(3,0,$20,$21)|0);
   HEAP32[$left>>2] = $22;
  }
 }
 $23 = HEAP32[$left>>2]|0;
 STACKTOP = sp;return ($23|0);
}
function _evaluate_level_2($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $left = 0, $right = 0, $type2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $left = sp;
 $right = sp + 4|0;
 $type2 = sp + 8|0;
 $0 = $type;
 _check_for_macro();
 $1 = $0;
 $2 = (_evaluate_level_3($1)|0);
 HEAP32[$left>>2] = $2;
 while(1) {
  $3 = HEAP32[30928>>2]|0;
  $4 = ($3|0)==(1);
  if (!($4)) {
   break;
  }
  $5 = (_strcmp(30952,34200)|0);
  $6 = ($5|0)==(0);
  if (!($6)) {
   break;
  }
  _get_lex();
  _check_for_macro();
  $7 = (_evaluate_level_3($type2)|0);
  HEAP32[$right>>2] = $7;
  $8 = $0;
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$type2>>2]|0;
  $11 = (_mix_types($left,$9,$right,$10)|0);
  $12 = $0;
  HEAP32[$12>>2] = $11;
  $13 = $0;
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 & 3;
  $16 = ($15|0)==(0);
  if ($16) {
   $17 = HEAP32[$left>>2]|0;
   $18 = HEAP32[$right>>2]|0;
   $19 = (_node_create(4,0,$17,$18)|0);
   HEAP32[$left>>2] = $19;
  } else {
   $20 = HEAP32[$left>>2]|0;
   $21 = HEAP32[$right>>2]|0;
   $22 = (_node_create(5,0,$20,$21)|0);
   HEAP32[$left>>2] = $22;
  }
 }
 $23 = HEAP32[$left>>2]|0;
 STACKTOP = sp;return ($23|0);
}
function _evaluate_level_3($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $left = 0, $operation16 = 0, $operation16s = 0, $operation8 = 0, $operation8s = 0, $right = 0, $type2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $left = sp;
 $right = sp + 4|0;
 $type2 = sp + 8|0;
 $0 = $type;
 _check_for_macro();
 $1 = $0;
 $2 = (_evaluate_level_4($1)|0);
 HEAP32[$left>>2] = $2;
 while(1) {
  $3 = HEAP32[30928>>2]|0;
  $4 = ($3|0)==(6);
  if ($4) {
   $operation8 = 6;
   $operation16 = 7;
   $operation8s = 6;
   $operation16s = 7;
  } else {
   $5 = HEAP32[30928>>2]|0;
   $6 = ($5|0)==(7);
   if ($6) {
    $operation8 = 8;
    $operation16 = 9;
    $operation8s = 8;
    $operation16s = 9;
   } else {
    $7 = HEAP32[30928>>2]|0;
    $8 = ($7|0)==(8);
    if ($8) {
     $operation8 = 10;
     $operation16 = 11;
     $operation8s = 18;
     $operation16s = 19;
    } else {
     $9 = HEAP32[30928>>2]|0;
     $10 = ($9|0)==(9);
     if ($10) {
      $operation8 = 12;
      $operation16 = 13;
      $operation8s = 20;
      $operation16s = 21;
     } else {
      $11 = HEAP32[30928>>2]|0;
      $12 = ($11|0)==(10);
      if ($12) {
       $operation8 = 14;
       $operation16 = 15;
       $operation8s = 22;
       $operation16s = 23;
      } else {
       $13 = HEAP32[30928>>2]|0;
       $14 = ($13|0)==(11);
       if (!($14)) {
        break;
       }
       $operation8 = 16;
       $operation16 = 17;
       $operation8s = 24;
       $operation16s = 25;
      }
     }
    }
   }
  }
  _get_lex();
  _check_for_macro();
  $15 = (_evaluate_level_4($type2)|0);
  HEAP32[$right>>2] = $15;
  $16 = $0;
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$type2>>2]|0;
  $19 = (_mix_types($left,$17,$right,$18)|0);
  $20 = $0;
  HEAP32[$20>>2] = $19;
  $21 = $0;
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 3;
  $24 = ($23|0)==(0);
  if ($24) {
   $25 = $0;
   $26 = HEAP32[$25>>2]|0;
   $27 = $26 & 4;
   $28 = ($27|0)!=(0);
   if ($28) {
    $29 = $operation8s;
    $33 = $29;
   } else {
    $30 = $operation8;
    $33 = $30;
   }
   $31 = HEAP32[$left>>2]|0;
   $32 = HEAP32[$right>>2]|0;
   $34 = (_node_create($33,0,$31,$32)|0);
   HEAP32[$left>>2] = $34;
  } else {
   $35 = $0;
   $36 = HEAP32[$35>>2]|0;
   $37 = $36 & 4;
   $38 = ($37|0)!=(0);
   if ($38) {
    $39 = $operation16s;
    $43 = $39;
   } else {
    $40 = $operation16;
    $43 = $40;
   }
   $41 = HEAP32[$left>>2]|0;
   $42 = HEAP32[$right>>2]|0;
   $44 = (_node_create($43,0,$41,$42)|0);
   HEAP32[$left>>2] = $44;
  }
  $45 = $0;
  HEAP32[$45>>2] = 0;
 }
 $46 = HEAP32[$left>>2]|0;
 STACKTOP = sp;return ($46|0);
}
function _evaluate_level_4($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $left = 0, $operation16 = 0, $operation8 = 0, $right = 0, $type2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $left = sp;
 $right = sp + 4|0;
 $type2 = sp + 8|0;
 $0 = $type;
 _check_for_macro();
 $1 = $0;
 $2 = (_evaluate_level_5($1)|0);
 HEAP32[$left>>2] = $2;
 while(1) {
  $3 = HEAP32[30928>>2]|0;
  $4 = ($3|0)==(12);
  if ($4) {
   $operation8 = 26;
   $operation16 = 27;
  } else {
   $5 = HEAP32[30928>>2]|0;
   $6 = ($5|0)==(13);
   if (!($6)) {
    break;
   }
   $operation8 = 28;
   $operation16 = 29;
  }
  _get_lex();
  _check_for_macro();
  $7 = (_evaluate_level_5($type2)|0);
  HEAP32[$right>>2] = $7;
  $8 = $0;
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$type2>>2]|0;
  $11 = (_mix_types($left,$9,$right,$10)|0);
  $12 = $0;
  HEAP32[$12>>2] = $11;
  $13 = $0;
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 & 3;
  $16 = ($15|0)==(0);
  if ($16) {
   $17 = $operation8;
   $18 = HEAP32[$left>>2]|0;
   $19 = HEAP32[$right>>2]|0;
   $20 = (_node_create($17,0,$18,$19)|0);
   HEAP32[$left>>2] = $20;
  } else {
   $21 = $operation16;
   $22 = HEAP32[$left>>2]|0;
   $23 = HEAP32[$right>>2]|0;
   $24 = (_node_create($21,0,$22,$23)|0);
   HEAP32[$left>>2] = $24;
  }
 }
 $25 = HEAP32[$left>>2]|0;
 STACKTOP = sp;return ($25|0);
}
function _evaluate_level_5($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $left = 0, $operation16 = 0, $operation16s = 0, $right = 0, $type2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $left = sp;
 $right = sp + 4|0;
 $type2 = sp + 8|0;
 $0 = $type;
 _check_for_macro();
 $1 = $0;
 $2 = (_evaluate_level_6($1)|0);
 HEAP32[$left>>2] = $2;
 while(1) {
  $3 = HEAP32[30928>>2]|0;
  $4 = ($3|0)==(14);
  if ($4) {
   $operation16 = 31;
   $operation16s = 31;
  } else {
   $5 = HEAP32[30928>>2]|0;
   $6 = ($5|0)==(15);
   if ($6) {
    $operation16 = 33;
    $operation16s = 34;
   } else {
    $7 = HEAP32[30928>>2]|0;
    $8 = ($7|0)==(16);
    if (!($8)) {
     break;
    }
    $operation16 = 35;
    $operation16s = 36;
   }
  }
  _get_lex();
  _check_for_macro();
  $9 = (_evaluate_level_6($type2)|0);
  HEAP32[$right>>2] = $9;
  $10 = $0;
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$type2>>2]|0;
  $13 = (_extend_types($left,$11,$right,$12)|0);
  $14 = $0;
  HEAP32[$14>>2] = $13;
  $15 = $0;
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 & 4;
  $18 = ($17|0)!=(0);
  if ($18) {
   $19 = $operation16s;
   $20 = HEAP32[$left>>2]|0;
   $21 = HEAP32[$right>>2]|0;
   $22 = (_node_create($19,0,$20,$21)|0);
   HEAP32[$left>>2] = $22;
  } else {
   $23 = $operation16;
   $24 = HEAP32[$left>>2]|0;
   $25 = HEAP32[$right>>2]|0;
   $26 = (_node_create($23,0,$24,$25)|0);
   HEAP32[$left>>2] = $26;
  }
 }
 $27 = HEAP32[$left>>2]|0;
 STACKTOP = sp;return ($27|0);
}
function _evaluate_level_6($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $left = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $type;
 $1 = HEAP32[30928>>2]|0;
 $2 = ($1|0)==(13);
 if ($2) {
  _get_lex();
  _check_for_macro();
  $3 = $0;
  $4 = (_evaluate_level_6($3)|0);
  $left = $4;
  $5 = $0;
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 & 3;
  $8 = ($7|0)==(0);
  if ($8) {
   $9 = $left;
   $10 = (_node_create(37,0,$9,0)|0);
   $left = $10;
  } else {
   $11 = $left;
   $12 = (_node_create(38,0,$11,0)|0);
   $left = $12;
  }
  $29 = $left;
  STACKTOP = sp;return ($29|0);
 }
 $13 = HEAP32[30928>>2]|0;
 $14 = ($13|0)==(1);
 if ($14) {
  $15 = (_strcmp(30952,34208)|0);
  $16 = ($15|0)==(0);
  if ($16) {
   _get_lex();
   _check_for_macro();
   $17 = $0;
   $18 = (_evaluate_level_6($17)|0);
   $left = $18;
   $19 = $0;
   $20 = HEAP32[$19>>2]|0;
   $21 = $20 & 3;
   $22 = ($21|0)==(0);
   if ($22) {
    $23 = $left;
    $24 = (_node_create(39,0,$23,0)|0);
    $left = $24;
   } else {
    $25 = $left;
    $26 = (_node_create(40,0,$25,0)|0);
    $left = $26;
   }
  } else {
   label = 12;
  }
 } else {
  label = 12;
 }
 if ((label|0) == 12) {
  _check_for_macro();
  $27 = $0;
  $28 = (_evaluate_level_7($27)|0);
  $left = $28;
 }
 $29 = $left;
 STACKTOP = sp;return ($29|0);
}
function _evaluate_level_7($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $addr = 0, $addr4 = 0, $buffer = 0, $buffer6 = 0;
 var $c = 0, $constant = 0, $cont = 0, $label = 0, $sign = 0, $sign5 = 0, $temp = 0, $temp7 = 0, $tree = 0, $tree1 = 0, $type2 = 0, $type22 = 0, $type23 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $type2 = sp + 16|0;
 $buffer = sp + 1104|0;
 $type22 = sp + 20|0;
 $type23 = sp + 36|0;
 $buffer6 = sp + 80|0;
 $1 = $type;
 $2 = HEAP32[30928>>2]|0;
 $3 = ($2|0)==(17);
 if ($3) {
  _get_lex();
  $4 = $1;
  $5 = (_evaluate_level_0($4)|0);
  $tree = $5;
  $6 = HEAP32[30928>>2]|0;
  $7 = ($6|0)!=(18);
  if ($7) {
   _emit_error(34216);
  } else {
   _get_lex();
  }
  $8 = $tree;
  $0 = $8;
  $535 = $0;
  STACKTOP = sp;return ($535|0);
 }
 $9 = HEAP32[30928>>2]|0;
 $10 = ($9|0)==(2);
 if ($10) {
  $11 = HEAP32[30944>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   _emit_error(34248);
   $temp = 0;
  } else {
   $13 = HEAP8[30952>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = $14 & 255;
   $temp = $15;
  }
  _get_lex();
  $16 = $1;
  HEAP32[$16>>2] = 0;
  $17 = $temp;
  $18 = (_node_create(50,$17,0,0)|0);
  $0 = $18;
  $535 = $0;
  STACKTOP = sp;return ($535|0);
 }
 $19 = HEAP32[30928>>2]|0;
 $20 = ($19|0)==(1);
 if (!($20)) {
  $519 = HEAP32[30928>>2]|0;
  $520 = ($519|0)==(4);
  if (!($520)) {
   _emit_error(35544);
   $533 = $1;
   HEAP32[$533>>2] = 1;
   $534 = (_node_create(51,0,0,0)|0);
   $0 = $534;
   $535 = $0;
   STACKTOP = sp;return ($535|0);
  }
  $521 = HEAP32[30936>>2]|0;
  $temp7 = $521;
  $522 = HEAP8[30952>>0]|0;
  $523 = $522 << 24 >> 24;
  $524 = ($523|0)==(49);
  if ($524) {
   _get_lex();
   $525 = $1;
   HEAP32[$525>>2] = 0;
   $526 = $temp7;
   $527 = $526 & 255;
   $528 = (_node_create(50,$527,0,0)|0);
   $0 = $528;
   $535 = $0;
   STACKTOP = sp;return ($535|0);
  } else {
   _get_lex();
   $529 = $1;
   HEAP32[$529>>2] = 1;
   $530 = $temp7;
   $531 = $530 & 65535;
   $532 = (_node_create(51,$531,0,0)|0);
   $0 = $532;
   $535 = $0;
   STACKTOP = sp;return ($535|0);
  }
 }
 $21 = (_strcmp(30952,34264)|0);
 $22 = ($21|0)==(0);
 if ($22) {
  _get_lex();
  $23 = HEAP32[30928>>2]|0;
  $24 = ($23|0)!=(17);
  if ($24) {
   _emit_error(34272);
  }
  _get_lex();
  $25 = $1;
  $26 = (_evaluate_level_0($25)|0);
  $tree = $26;
  $27 = $1;
  $28 = HEAP32[$27>>2]|0;
  $29 = $28 & 3;
  $30 = ($29|0)==(0);
  if ($30) {
   $31 = $1;
   $32 = HEAP32[$31>>2]|0;
   $33 = $32 & 4;
   $34 = ($33|0)!=(0);
   $35 = $34 ? 42 : 41;
   $36 = $tree;
   $37 = (_node_create($35,0,$36,0)|0);
   $tree = $37;
  }
  $38 = $tree;
  $39 = (_node_create(55,0,$38,0)|0);
  $tree = $39;
  $40 = HEAP32[30928>>2]|0;
  $41 = ($40|0)!=(18);
  if ($41) {
   _emit_error(34304);
  }
  _get_lex();
  $42 = $1;
  HEAP32[$42>>2] = 0;
  $43 = HEAP32[2808>>2]|0;
  $44 = ($43|0)==(7);
  if ($44) {
   label = 21;
  } else {
   $45 = HEAP32[2808>>2]|0;
   $46 = ($45|0)==(11);
   if ($46) {
    label = 21;
   }
  }
  if ((label|0) == 21) {
   _emit_warning(34344);
  }
  $47 = $tree;
  $0 = $47;
  $535 = $0;
  STACKTOP = sp;return ($535|0);
 }
 $48 = (_strcmp(30952,34400)|0);
 $49 = ($48|0)==(0);
 if ($49) {
  _get_lex();
  $50 = HEAP32[30928>>2]|0;
  $51 = ($50|0)!=(17);
  if ($51) {
   _emit_error(34408);
  }
  _get_lex();
  $52 = $1;
  $53 = (_evaluate_level_0($52)|0);
  $tree = $53;
  $54 = $1;
  $55 = HEAP32[$54>>2]|0;
  $56 = $55 & 3;
  $57 = ($56|0)==(0);
  if ($57) {
   $58 = $1;
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & 4;
   $61 = ($60|0)!=(0);
   $62 = $61 ? 42 : 41;
   $63 = $tree;
   $64 = (_node_create($62,0,$63,0)|0);
   $tree = $64;
  }
  $65 = $tree;
  $66 = (_node_create(52,0,$65,0)|0);
  $tree = $66;
  $67 = HEAP32[30928>>2]|0;
  $68 = ($67|0)!=(18);
  if ($68) {
   _emit_error(34448);
  }
  _get_lex();
  $69 = $1;
  HEAP32[$69>>2] = 0;
  $70 = $tree;
  $0 = $70;
  $535 = $0;
  STACKTOP = sp;return ($535|0);
 }
 $71 = (_strcmp(30952,34488)|0);
 $72 = ($71|0)==(0);
 if ($72) {
  _get_lex();
  $73 = HEAP32[30928>>2]|0;
  $74 = ($73|0)!=(17);
  if ($74) {
   _emit_error(34496);
  }
  _get_lex();
  $75 = $1;
  $76 = (_evaluate_level_0($75)|0);
  $tree = $76;
  $77 = $1;
  $78 = HEAP32[$77>>2]|0;
  $79 = $78 & 3;
  $80 = ($79|0)==(0);
  if ($80) {
   $81 = $1;
   $82 = HEAP32[$81>>2]|0;
   $83 = $82 & 4;
   $84 = ($83|0)!=(0);
   $85 = $84 ? 42 : 41;
   $86 = $tree;
   $87 = (_node_create($85,0,$86,0)|0);
   $tree = $87;
  }
  $88 = $tree;
  $89 = (_node_create(54,0,$88,0)|0);
  $tree = $89;
  $90 = HEAP32[30928>>2]|0;
  $91 = ($90|0)!=(18);
  if ($91) {
   _emit_error(34536);
  }
  _get_lex();
  $92 = $1;
  HEAP32[$92>>2] = 0;
  $93 = $tree;
  $0 = $93;
  $535 = $0;
  STACKTOP = sp;return ($535|0);
 }
 $94 = (_strcmp(30952,34576)|0);
 $95 = ($94|0)==(0);
 if ($95) {
  _get_lex();
  $96 = HEAP32[30928>>2]|0;
  $97 = ($96|0)!=(17);
  if ($97) {
   _emit_error(34584);
  }
  _get_lex();
  $98 = $1;
  $99 = (_evaluate_level_0($98)|0);
  $tree = $99;
  $100 = $1;
  $101 = HEAP32[$100>>2]|0;
  $102 = $101 & 3;
  $103 = ($102|0)==(0);
  if ($103) {
   $104 = $1;
   $105 = HEAP32[$104>>2]|0;
   $106 = $105 & 4;
   $107 = ($106|0)!=(0);
   $108 = $107 ? 42 : 41;
   $109 = $tree;
   $110 = (_node_create($108,0,$109,0)|0);
   $tree = $110;
  }
  $111 = $tree;
  $112 = (_node_create(56,0,$111,0)|0);
  $tree = $112;
  $113 = HEAP32[30928>>2]|0;
  $114 = ($113|0)!=(18);
  if ($114) {
   _emit_error(34616);
  }
  _get_lex();
  $115 = $1;
  HEAP32[$115>>2] = 1;
  $116 = $tree;
  $0 = $116;
  $535 = $0;
  STACKTOP = sp;return ($535|0);
 }
 $117 = (_strcmp(30952,34656)|0);
 $118 = ($117|0)==(0);
 if ($118) {
  _get_lex();
  $119 = HEAP32[30928>>2]|0;
  $120 = ($119|0)!=(17);
  if ($120) {
   _emit_error(34664);
  }
  _get_lex();
  $121 = $1;
  $122 = (_evaluate_level_0($121)|0);
  $tree = $122;
  $123 = $1;
  $124 = HEAP32[$123>>2]|0;
  $125 = $124 & 3;
  $126 = ($125|0)==(0);
  if ($126) {
   $127 = $1;
   $128 = HEAP32[$127>>2]|0;
   $129 = $128 & 4;
   $130 = ($129|0)!=(0);
   $131 = $130 ? 42 : 41;
   $132 = $tree;
   $133 = (_node_create($131,0,$132,0)|0);
   $tree = $133;
  }
  $134 = $tree;
  $135 = (_node_create(57,0,$134,0)|0);
  $tree = $135;
  $136 = HEAP32[30928>>2]|0;
  $137 = ($136|0)!=(18);
  if ($137) {
   _emit_error(34696);
  }
  _get_lex();
  $138 = $1;
  HEAP32[$138>>2] = 5;
  $139 = $tree;
  $0 = $139;
  $535 = $0;
  STACKTOP = sp;return ($535|0);
 }
 $140 = (_strcmp(30952,34736)|0);
 $141 = ($140|0)==(0);
 if (!($141)) {
  $142 = (_strcmp(30952,34744)|0);
  $143 = ($142|0)==(0);
  if (!($143)) {
   $144 = (_strcmp(30952,34752)|0);
   $145 = ($144|0)==(0);
   if (!($145)) {
    $220 = (_strcmp(30952,34864)|0);
    $221 = ($220|0)==(0);
    if ($221) {
     _get_lex();
     $222 = HEAP32[30928>>2]|0;
     $223 = ($222|0)==(17);
     if ($223) {
      _get_lex();
      $224 = $1;
      $225 = (_evaluate_level_0($224)|0);
      $tree = $225;
      $226 = $1;
      $227 = HEAP32[$226>>2]|0;
      $228 = $227 & 3;
      $229 = ($228|0)==(0);
      if ($229) {
       $230 = $tree;
       $231 = (_node_create(41,0,$230,0)|0);
       $tree = $231;
      }
      $232 = (_node_create(62,0,0,0)|0);
      $233 = $tree;
      $234 = (_node_create(35,0,$232,$233)|0);
      $tree = $234;
      $235 = HEAP32[30928>>2]|0;
      $236 = ($235|0)!=(18);
      if ($236) {
       _emit_error(34872);
      }
      _get_lex();
     } else {
      $237 = (_node_create(62,0,0,0)|0);
      $tree = $237;
     }
     $238 = $1;
     HEAP32[$238>>2] = 1;
     $239 = $tree;
     $0 = $239;
     $535 = $0;
     STACKTOP = sp;return ($535|0);
    }
    $240 = (_strcmp(30952,34912)|0);
    $241 = ($240|0)==(0);
    if ($241) {
     _get_lex();
     $242 = (_node_create(63,0,0,0)|0);
     $tree = $242;
     $243 = $1;
     HEAP32[$243>>2] = 1;
     $244 = $tree;
     $0 = $244;
     $535 = $0;
     STACKTOP = sp;return ($535|0);
    }
    $245 = (_strcmp(30952,34920)|0);
    $246 = ($245|0)==(0);
    if ($246) {
     _get_lex();
     $247 = HEAP32[30928>>2]|0;
     $248 = ($247|0)!=(20);
     if ($248) {
      _emit_error(34928);
     } else {
      _get_lex();
     }
     $249 = HEAP32[30928>>2]|0;
     $250 = ($249|0)!=(1);
     if ($250) {
      label = 130;
     } else {
      $251 = (_strcmp(30952,34952)|0);
      $252 = ($251|0)!=(0);
      if ($252) {
       label = 130;
      } else {
       _get_lex();
      }
     }
     if ((label|0) == 130) {
      _emit_error(34960);
     }
     $253 = (_node_create(64,0,0,0)|0);
     $tree = $253;
     $254 = $1;
     HEAP32[$254>>2] = 0;
     $255 = $tree;
     $0 = $255;
     $535 = $0;
     STACKTOP = sp;return ($535|0);
    }
    $256 = (_strcmp(30952,34992)|0);
    $257 = ($256|0)==(0);
    if ($257) {
     _get_lex();
     $258 = HEAP32[30928>>2]|0;
     $259 = ($258|0)!=(20);
     if ($259) {
      _emit_error(35000);
     } else {
      _get_lex();
     }
     $260 = HEAP32[30928>>2]|0;
     $261 = ($260|0)!=(1);
     do {
      if ($261) {
       label = 139;
      } else {
       $262 = (_strcmp(30952,35024)|0);
       $263 = ($262|0)!=(0);
       if ($263) {
        label = 139;
        break;
       }
       _get_lex();
      }
     } while(0);
     if ((label|0) == 139) {
      _emit_error(35032);
     }
     $264 = (_node_create(67,0,0,0)|0);
     $tree = $264;
     $265 = $1;
     HEAP32[$265>>2] = 0;
     $266 = $tree;
     $0 = $266;
     $535 = $0;
     STACKTOP = sp;return ($535|0);
    }
    $267 = (_strcmp(30952,35056)|0);
    $268 = ($267|0)==(0);
    if ($268) {
     _get_lex();
     $269 = (_node_create(65,0,0,0)|0);
     $tree = $269;
     $270 = $1;
     HEAP32[$270>>2] = 0;
     $271 = $tree;
     $0 = $271;
     $535 = $0;
     STACKTOP = sp;return ($535|0);
    }
    $272 = (_strcmp(30952,35064)|0);
    $273 = ($272|0)==(0);
    if ($273) {
     _get_lex();
     $274 = (_process_usr(0)|0);
     $tree = $274;
     $275 = $1;
     HEAP32[$275>>2] = 1;
     $276 = $tree;
     $0 = $276;
     $535 = $0;
     STACKTOP = sp;return ($535|0);
    }
    $277 = (_strcmp(30952,35072)|0);
    $278 = ($277|0)==(0);
    if ($278) {
     $279 = $1;
     HEAP32[$279>>2] = 1;
     _get_lex();
     $280 = HEAP32[30928>>2]|0;
     $281 = ($280|0)!=(1);
     if ($281) {
      _emit_error(35080);
      $282 = (_node_create(51,0,0,0)|0);
      $0 = $282;
      $535 = $0;
      STACKTOP = sp;return ($535|0);
     }
     $283 = (_lex_sneak_peek()|0);
     $284 = ($283|0)==(40);
     if (!($284)) {
      $322 = (_constant_search(30952)|0);
      $constant = $322;
      $323 = $constant;
      $324 = ($323|0)!=(0|0);
      if ($324) {
       _emit_error(35248);
       _get_lex();
       $325 = (_node_create(51,0,0,0)|0);
       $0 = $325;
       $535 = $0;
       STACKTOP = sp;return ($535|0);
      }
      $326 = (_label_search(30952)|0);
      $label = $326;
      $327 = $label;
      $328 = ($327|0)!=(0|0);
      do {
       if ($328) {
        $329 = $label;
        $330 = (($329) + 4|0);
        $331 = HEAP32[$330>>2]|0;
        $332 = $331 & 512;
        $333 = ($332|0)==(0);
        if (!($333)) {
         break;
        }
        HEAP32[$vararg_buffer>>2] = 30952;
        (_sprintf($buffer,35296,$vararg_buffer)|0);
        _emit_error($buffer);
        $label = 0;
       }
      } while(0);
      $334 = $label;
      $335 = ($334|0)==(0|0);
      if ($335) {
       _check_for_explicit(30952);
       $336 = (_label_add(30952)|0);
       $label = $336;
       $337 = HEAP8[30952>>0]|0;
       $338 = $337 << 24 >> 24;
       $339 = ($338|0)==(35);
       if ($339) {
        $340 = $label;
        $341 = (($340) + 4|0);
        HEAP32[$341>>2] = 1;
       } else {
        $342 = $label;
        $343 = (($342) + 4|0);
        HEAP32[$343>>2] = 0;
       }
       $344 = $label;
       $345 = (($344) + 4|0);
       $346 = HEAP32[$345>>2]|0;
       $347 = $346 | 512;
       HEAP32[$345>>2] = $347;
      }
      _get_lex();
      $348 = (_node_create(68,0,0,0)|0);
      $tree = $348;
      $349 = $label;
      $350 = $tree;
      $351 = (($350) + 16|0);
      HEAP32[$351>>2] = $349;
      $352 = $tree;
      $0 = $352;
      $535 = $0;
      STACKTOP = sp;return ($535|0);
     }
     $285 = (_array_search(30952)|0);
     $label = $285;
     $286 = $label;
     $287 = ($286|0)!=(0|0);
     if ($287) {
     } else {
      $288 = (_label_search(30952)|0);
      $label = $288;
      $289 = $label;
      $290 = ($289|0)!=(0|0);
      if ($290) {
       $291 = $label;
       $292 = (($291) + 4|0);
       $293 = HEAP32[$292>>2]|0;
       $294 = $293 & 512;
       $295 = ($294|0)!=(0);
       if ($295) {
        _emit_error(35120);
       }
      } else {
       $296 = (_label_add(30952)|0);
       $label = $296;
      }
     }
     _get_lex();
     $297 = HEAP32[30928>>2]|0;
     $298 = ($297|0)!=(17);
     if ($298) {
      _emit_error(35152);
     } else {
      _get_lex();
     }
     $299 = (_evaluate_level_0($type2)|0);
     $tree = $299;
     $300 = HEAP32[30928>>2]|0;
     $301 = ($300|0)!=(18);
     if ($301) {
      _emit_error(35200);
     } else {
      _get_lex();
     }
     $302 = (_node_create(68,0,0,0)|0);
     $addr = $302;
     $303 = $label;
     $304 = $addr;
     $305 = (($304) + 16|0);
     HEAP32[$305>>2] = $303;
     $306 = HEAP32[$type2>>2]|0;
     $307 = $306 & 3;
     $308 = ($307|0)==(0);
     if ($308) {
      $309 = $tree;
      $310 = (_node_create(41,0,$309,0)|0);
      $tree = $310;
     }
     $311 = $label;
     $312 = (($311) + 12|0);
     $313 = HEAP8[$312>>0]|0;
     $314 = $313 << 24 >> 24;
     $315 = ($314|0)==(35);
     if ($315) {
      $316 = $tree;
      $317 = (_node_create(51,2,0,0)|0);
      $318 = (_node_create(31,0,$316,$317)|0);
      $tree = $318;
     }
     $319 = $addr;
     $320 = $tree;
     $321 = (_node_create(27,0,$319,$320)|0);
     $0 = $321;
     $535 = $0;
     STACKTOP = sp;return ($535|0);
    }
    $353 = (_strcmp(30952,35352)|0);
    $354 = ($353|0)==(0);
    if ($354) {
     _get_lex();
     $355 = HEAP32[30928>>2]|0;
     $356 = ($355|0)!=(17);
     if ($356) {
      _emit_error(35360);
     } else {
      _get_lex();
     }
     $357 = HEAP32[30928>>2]|0;
     $358 = ($357|0)!=(2);
     if ($358) {
      $c = 0;
      _emit_error(35392);
     } else {
      $359 = HEAP32[30944>>2]|0;
      $c = $359;
      _get_lex();
     }
     $360 = HEAP32[30928>>2]|0;
     $361 = ($360|0)!=(18);
     if ($361) {
      _emit_error(35424);
     } else {
      _get_lex();
     }
     $362 = $1;
     HEAP32[$362>>2] = 1;
     $363 = $c;
     $364 = (_node_create(51,$363,0,0)|0);
     $0 = $364;
     $535 = $0;
     STACKTOP = sp;return ($535|0);
    }
    $365 = (_strcmp(30952,35464)|0);
    $366 = ($365|0)==(0);
    if ($366) {
     _get_lex();
     $367 = HEAP32[30928>>2]|0;
     $368 = ($367|0)!=(17);
     if ($368) {
      _emit_error(35472);
     } else {
      _get_lex();
     }
     $369 = (_evaluate_level_0($type22)|0);
     $tree = $369;
     $370 = $tree;
     _node_delete($370);
     $371 = HEAP32[30928>>2]|0;
     $372 = ($371|0)!=(18);
     if ($372) {
      _emit_error(35504);
     } else {
      _get_lex();
     }
     $373 = $1;
     HEAP32[$373>>2] = 1;
     $374 = (_node_create(66,0,0,0)|0);
     $tree = $374;
     $375 = $tree;
     $376 = HEAP32[2808>>2]|0;
     $377 = ($376|0)==(13);
     $378 = $377 ? 14336 : 6144;
     $379 = (_node_create(51,$378,0,0)|0);
     $380 = (_node_create(29,0,$375,$379)|0);
     $tree = $380;
     $381 = HEAP32[2808>>2]|0;
     $382 = ($381|0)==(13);
     if ($382) {
      $383 = $tree;
      $384 = (_node_create(51,2,0,0)|0);
      $385 = (_node_create(33,0,$383,$384)|0);
      $tree = $385;
     }
     $386 = $tree;
     $0 = $386;
     $535 = $0;
     STACKTOP = sp;return ($535|0);
    }
    $387 = (_lex_sneak_peek()|0);
    $388 = ($387|0)==(40);
    if (!($388)) {
     $447 = (_constant_search(30952)|0);
     $constant = $447;
     $448 = $constant;
     $449 = ($448|0)!=(0|0);
     if ($449) {
      _get_lex();
      $450 = $constant;
      $451 = (($450) + 8|0);
      $452 = HEAP8[$451>>0]|0;
      $453 = $452 << 24 >> 24;
      $454 = ($453|0)==(35);
      if ($454) {
       $455 = $1;
       HEAP32[$455>>2] = 1;
       $456 = $constant;
       $457 = (($456) + 4|0);
       $458 = HEAP32[$457>>2]|0;
       $459 = $458 & 65535;
       $460 = (_node_create(51,$459,0,0)|0);
       $0 = $460;
       $535 = $0;
       STACKTOP = sp;return ($535|0);
      } else {
       $461 = $1;
       HEAP32[$461>>2] = 0;
       $462 = $constant;
       $463 = (($462) + 4|0);
       $464 = HEAP32[$463>>2]|0;
       $465 = $464 & 255;
       $466 = (_node_create(50,$465,0,0)|0);
       $0 = $466;
       $535 = $0;
       STACKTOP = sp;return ($535|0);
      }
     }
     $467 = (_signed_search(30952)|0);
     $sign = $467;
     $468 = $sign;
     $469 = ($468|0)!=(0|0);
     do {
      if ($469) {
       $470 = $sign;
       $471 = (($470) + 4|0);
       $472 = HEAP32[$471>>2]|0;
       $473 = ($472|0)==(1);
       if (!($473)) {
        label = 234;
        break;
       }
       $474 = $1;
       HEAP32[$474>>2] = 4;
      } else {
       label = 234;
      }
     } while(0);
     if ((label|0) == 234) {
      $475 = $1;
      HEAP32[$475>>2] = 0;
     }
     $476 = (_label_search(30952)|0);
     $label = $476;
     $477 = $label;
     $478 = ($477|0)!=(0|0);
     do {
      if ($478) {
       $479 = $label;
       $480 = (($479) + 4|0);
       $481 = HEAP32[$480>>2]|0;
       $482 = $481 & 512;
       $483 = ($482|0)==(0);
       if (!($483)) {
        break;
       }
       HEAP32[$vararg_buffer1>>2] = 30952;
       (_sprintf($buffer6,35296,$vararg_buffer1)|0);
       _emit_error($buffer6);
       $label = 0;
      }
     } while(0);
     $484 = $label;
     $485 = ($484|0)==(0|0);
     if ($485) {
      _check_for_explicit(30952);
      $486 = (_label_add(30952)|0);
      $label = $486;
      $487 = HEAP8[30952>>0]|0;
      $488 = $487 << 24 >> 24;
      $489 = ($488|0)==(35);
      if ($489) {
       $490 = $label;
       $491 = (($490) + 4|0);
       HEAP32[$491>>2] = 1;
      } else {
       $492 = $label;
       $493 = (($492) + 4|0);
       HEAP32[$493>>2] = 0;
      }
      $494 = $label;
      $495 = (($494) + 4|0);
      $496 = HEAP32[$495>>2]|0;
      $497 = $496 | 512;
      HEAP32[$495>>2] = $497;
     }
     $498 = $label;
     $499 = (($498) + 4|0);
     $500 = HEAP32[$499>>2]|0;
     $501 = $500 | 2048;
     HEAP32[$499>>2] = $501;
     $502 = $label;
     $503 = (($502) + 4|0);
     $504 = HEAP32[$503>>2]|0;
     $505 = $504 & 3;
     $506 = $1;
     $507 = HEAP32[$506>>2]|0;
     $508 = $507 | $505;
     HEAP32[$506>>2] = $508;
     _get_lex();
     $509 = $1;
     $510 = HEAP32[$509>>2]|0;
     $511 = $510 & 3;
     $512 = ($511|0)==(0);
     if ($512) {
      $513 = (_node_create(44,0,0,0)|0);
      $tree = $513;
     } else {
      $514 = (_node_create(45,0,0,0)|0);
      $tree = $514;
     }
     $515 = $label;
     $516 = $tree;
     $517 = (($516) + 16|0);
     HEAP32[$517>>2] = $515;
     $518 = $tree;
     $0 = $518;
     $535 = $0;
     STACKTOP = sp;return ($535|0);
    }
    $389 = HEAP8[30952>>0]|0;
    $390 = $389 << 24 >> 24;
    $391 = ($390|0)==(35);
    if ($391) {
     $392 = $1;
     HEAP32[$392>>2] = 1;
    } else {
     $393 = $1;
     HEAP32[$393>>2] = 0;
    }
    $394 = (_signed_search(30952)|0);
    $sign5 = $394;
    $395 = $sign5;
    $396 = ($395|0)!=(0|0);
    do {
     if ($396) {
      $397 = $sign5;
      $398 = (($397) + 4|0);
      $399 = HEAP32[$398>>2]|0;
      $400 = ($399|0)==(1);
      if (!($400)) {
       break;
      }
      $401 = $1;
      $402 = HEAP32[$401>>2]|0;
      $403 = $402 | 4;
      HEAP32[$401>>2] = $403;
     }
    } while(0);
    $404 = (_array_search(30952)|0);
    $label = $404;
    $405 = $label;
    $406 = ($405|0)!=(0|0);
    if ($406) {
    } else {
     $407 = (_label_search(30952)|0);
     $label = $407;
     $408 = $label;
     $409 = ($408|0)!=(0|0);
     if ($409) {
      $410 = $label;
      $411 = (($410) + 4|0);
      $412 = HEAP32[$411>>2]|0;
      $413 = $412 & 512;
      $414 = ($413|0)!=(0);
      if ($414) {
       _emit_error(35120);
      }
     } else {
      $415 = (_label_add(30952)|0);
      $label = $415;
     }
    }
    _get_lex();
    $416 = HEAP32[30928>>2]|0;
    $417 = ($416|0)!=(17);
    if ($417) {
     _emit_error(35152);
    } else {
     _get_lex();
    }
    $418 = (_evaluate_level_0($type23)|0);
    $tree = $418;
    $419 = HEAP32[30928>>2]|0;
    $420 = ($419|0)!=(18);
    if ($420) {
     _emit_error(35200);
    } else {
     _get_lex();
    }
    $421 = (_node_create(68,0,0,0)|0);
    $addr4 = $421;
    $422 = $label;
    $423 = $addr4;
    $424 = (($423) + 16|0);
    HEAP32[$424>>2] = $422;
    $425 = HEAP32[$type23>>2]|0;
    $426 = $425 & 3;
    $427 = ($426|0)==(0);
    if ($427) {
     $428 = $tree;
     $429 = (_node_create(41,0,$428,0)|0);
     $tree = $429;
    }
    $430 = $1;
    $431 = HEAP32[$430>>2]|0;
    $432 = $431 & 3;
    $433 = ($432|0)==(1);
    if ($433) {
     $434 = $tree;
     $435 = (_node_create(51,2,0,0)|0);
     $436 = (_node_create(31,0,$434,$435)|0);
     $tree = $436;
    }
    $437 = $1;
    $438 = HEAP32[$437>>2]|0;
    $439 = $438 & 3;
    $440 = ($439|0)==(1);
    $441 = $440 ? 53 : 52;
    $442 = $addr4;
    $443 = $tree;
    $444 = (_node_create(27,0,$442,$443)|0);
    $445 = (_node_create($441,0,$444,0)|0);
    $tree = $445;
    $446 = $tree;
    $0 = $446;
    $535 = $0;
    STACKTOP = sp;return ($535|0);
   }
  }
 }
 $tree1 = 0;
 $146 = (_strcmp(30952,34744)|0);
 $147 = ($146|0)==(0);
 if ($147) {
  $cont = 1;
 } else {
  $148 = (_strcmp(30952,34752)|0);
  $149 = ($148|0)==(0);
  if ($149) {
   $cont = 2;
  } else {
   $cont = 0;
  }
 }
 _get_lex();
 $150 = HEAP32[30928>>2]|0;
 $151 = ($150|0)==(20);
 if ($151) {
  _get_lex();
  $152 = (_strcmp(30952,34760)|0);
  $153 = ($152|0)==(0);
  if ($153) {
   $154 = $cont;
   $155 = ($154|0)==(1);
   if ($155) {
    $156 = (_node_create(60,0,0,0)|0);
    $tree1 = $156;
   } else {
    $157 = $cont;
    $158 = ($157|0)==(2);
    if ($158) {
     $159 = (_node_create(61,0,0,0)|0);
     $tree1 = $159;
    } else {
     $160 = (_node_create(60,0,0,0)|0);
     $tree1 = $160;
     $161 = $tree1;
     $162 = (_node_create(61,0,0,0)|0);
     $163 = (_node_create(4,0,$161,$162)|0);
     $tree1 = $163;
    }
   }
  } else {
   $164 = $cont;
   $165 = ($164|0)==(1);
   if ($165) {
    $166 = (_node_create(58,0,0,0)|0);
    $tree1 = $166;
   } else {
    $167 = $cont;
    $168 = ($167|0)==(2);
    if ($168) {
     $169 = (_node_create(59,0,0,0)|0);
     $tree1 = $169;
    } else {
     $170 = (_node_create(58,0,0,0)|0);
     $tree1 = $170;
     $171 = $tree1;
     $172 = (_node_create(59,0,0,0)|0);
     $173 = (_node_create(0,0,$171,$172)|0);
     $tree1 = $173;
    }
   }
  }
  $174 = HEAP32[30928>>2]|0;
  $175 = ($174|0)!=(1);
  if ($175) {
   _emit_error(34768);
  } else {
   $176 = (_strcmp(30952,34792)|0);
   $177 = ($176|0)==(0);
   if ($177) {
    _get_lex();
    $178 = $tree1;
    $179 = (_node_create(50,1,0,0)|0);
    $180 = (_node_create(4,0,$178,$179)|0);
    $tree1 = $180;
   } else {
    $181 = (_strcmp(30952,34800)|0);
    $182 = ($181|0)==(0);
    if ($182) {
     _get_lex();
     $183 = $tree1;
     $184 = (_node_create(50,2,0,0)|0);
     $185 = (_node_create(4,0,$183,$184)|0);
     $tree1 = $185;
    } else {
     $186 = (_strcmp(30952,34808)|0);
     $187 = ($186|0)==(0);
     if ($187) {
      _get_lex();
      $188 = $tree1;
      $189 = (_node_create(50,4,0,0)|0);
      $190 = (_node_create(4,0,$188,$189)|0);
      $tree1 = $190;
     } else {
      $191 = (_strcmp(30952,34816)|0);
      $192 = ($191|0)==(0);
      if ($192) {
       _get_lex();
       $193 = $tree1;
       $194 = (_node_create(50,8,0,0)|0);
       $195 = (_node_create(4,0,$193,$194)|0);
       $tree1 = $195;
      } else {
       $196 = (_strcmp(30952,34824)|0);
       $197 = ($196|0)==(0);
       if ($197) {
        _get_lex();
        $198 = $tree1;
        $199 = (_node_create(50,64,0,0)|0);
        $200 = (_node_create(4,0,$198,$199)|0);
        $tree1 = $200;
       } else {
        $201 = (_strcmp(30952,34832)|0);
        $202 = ($201|0)==(0);
        if ($202) {
         _get_lex();
         $203 = $tree1;
         $204 = (_node_create(50,128,0,0)|0);
         $205 = (_node_create(4,0,$203,$204)|0);
         $tree1 = $205;
        } else {
         $206 = (_strcmp(30952,34760)|0);
         $207 = ($206|0)==(0);
         if ($207) {
          _get_lex();
         } else {
          _emit_error(34840);
         }
        }
       }
      }
     }
    }
   }
  }
 } else {
  $208 = $cont;
  $209 = ($208|0)==(1);
  if ($209) {
   $210 = (_node_create(58,0,0,0)|0);
   $tree1 = $210;
  } else {
   $211 = $cont;
   $212 = ($211|0)==(2);
   if ($212) {
    $213 = (_node_create(59,0,0,0)|0);
    $tree1 = $213;
   } else {
    $214 = (_node_create(58,0,0,0)|0);
    $tree1 = $214;
    $215 = $tree1;
    $216 = (_node_create(59,0,0,0)|0);
    $217 = (_node_create(0,0,$215,$216)|0);
    $tree1 = $217;
   }
  }
 }
 $218 = $1;
 HEAP32[$218>>2] = 0;
 $219 = $tree1;
 $0 = $219;
 $535 = $0;
 STACKTOP = sp;return ($535|0);
}
function _process_usr($is_call) {
 $is_call = $is_call|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $function = 0, $last_list = 0, $list = 0, $tree = 0, $type2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $type2 = sp + 20|0;
 $0 = $is_call;
 $1 = HEAP32[30928>>2]|0;
 $2 = ($1|0)!=(1);
 if ($2) {
  $3 = $0;
  $4 = ($3|0)!=(0);
  if ($4) {
   _emit_error(35576);
  } else {
   _emit_error(35608);
  }
 }
 $5 = (_function_search(30952)|0);
 $function = $5;
 $6 = $function;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = (_function_add(30952)|0);
  $function = $8;
 }
 _get_lex();
 $tree = 0;
 $list = 0;
 $last_list = 0;
 $c = 0;
 $9 = HEAP32[30928>>2]|0;
 $10 = ($9|0)==(17);
 if ($10) {
  _get_lex();
  while(1) {
   $11 = (_evaluate_level_0($type2)|0);
   $tree = $11;
   $12 = HEAP32[$type2>>2]|0;
   $13 = $12 & 3;
   $14 = ($13|0)==(0);
   if ($14) {
    $15 = HEAP32[$type2>>2]|0;
    $16 = $15 & 4;
    $17 = ($16|0)!=(0);
    $18 = $17 ? 42 : 41;
    $19 = $tree;
    $20 = (_node_create($18,0,$19,0)|0);
    $tree = $20;
   }
   $21 = $tree;
   $22 = (_node_create(70,0,$21,0)|0);
   $tree = $22;
   $23 = $list;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $25 = $tree;
    $list = $25;
   } else {
    $26 = $tree;
    $27 = $last_list;
    $28 = (($27) + 12|0);
    HEAP32[$28>>2] = $26;
   }
   $29 = $tree;
   $last_list = $29;
   $30 = $c;
   $31 = (($30) + 1)|0;
   $c = $31;
   $32 = HEAP32[30928>>2]|0;
   $33 = ($32|0)!=(21);
   if ($33) {
    break;
   }
   _get_lex();
  }
  $34 = HEAP32[30928>>2]|0;
  $35 = ($34|0)==(18);
  if ($35) {
   _get_lex();
  } else {
   _emit_error(34216);
  }
 }
 $36 = $c;
 $37 = ($36|0)>(1);
 if ($37) {
  $38 = HEAP32[35640>>2]|0;
  $39 = ($38|0)!=(0);
  if ($39) {
   _emit_error(35648);
   $44 = $c;
   $45 = $list;
   $46 = (_node_create(69,$44,$45,0)|0);
   $tree = $46;
   $47 = $function;
   $48 = $tree;
   $49 = (($48) + 16|0);
   HEAP32[$49>>2] = $47;
   $50 = $tree;
   STACKTOP = sp;return ($50|0);
  }
 }
 $40 = $c;
 $41 = ($40|0)>(5);
 if ($41) {
  $42 = HEAP32[35640>>2]|0;
  $43 = ($42|0)==(0);
  if ($43) {
   _emit_error(35696);
  }
 }
 $44 = $c;
 $45 = $list;
 $46 = (_node_create(69,$44,$45,0)|0);
 $tree = $46;
 $47 = $function;
 $48 = $tree;
 $49 = (($48) + 16|0);
 HEAP32[$49>>2] = $47;
 $50 = $tree;
 STACKTOP = sp;return ($50|0);
}
function _accumulated_push($lex,$value,$name) {
 $lex = $lex|0;
 $value = $value|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $lex;
 $1 = $value;
 $2 = $name;
 $3 = HEAP32[30912>>2]|0;
 $4 = HEAP32[30920>>2]|0;
 $5 = ($3|0)>=($4|0);
 do {
  if ($5) {
   $6 = HEAP32[30904>>2]|0;
   $7 = HEAP32[30920>>2]|0;
   $8 = (($7) + 1)|0;
   $9 = $8<<1;
   $10 = ($9*12)|0;
   $11 = (_realloc($6,$10)|0);
   HEAP32[30904>>2] = $11;
   $12 = HEAP32[30904>>2]|0;
   $13 = ($12|0)==(0|0);
   if ($13) {
    _emit_error(35744);
    _exit(1);
    // unreachable;
   } else {
    $14 = HEAP32[30920>>2]|0;
    $15 = (($14) + 1)|0;
    $16 = $15<<1;
    HEAP32[30920>>2] = $16;
    break;
   }
  }
 } while(0);
 $17 = $0;
 $18 = HEAP32[30912>>2]|0;
 $19 = HEAP32[30904>>2]|0;
 $20 = (($19) + (($18*12)|0)|0);
 HEAP32[$20>>2] = $17;
 $21 = $1;
 $22 = HEAP32[30912>>2]|0;
 $23 = HEAP32[30904>>2]|0;
 $24 = (($23) + (($22*12)|0)|0);
 $25 = (($24) + 4|0);
 HEAP32[$25>>2] = $21;
 $26 = $0;
 $27 = ($26|0)==(2);
 if ($27) {
  $28 = $1;
  $29 = (($28) + 1)|0;
  $30 = (_malloc($29)|0);
  $31 = HEAP32[30912>>2]|0;
  $32 = HEAP32[30904>>2]|0;
  $33 = (($32) + (($31*12)|0)|0);
  $34 = (($33) + 8|0);
  HEAP32[$34>>2] = $30;
 } else {
  $35 = $2;
  $36 = (_strlen(($35|0))|0);
  $37 = (($36) + 1)|0;
  $38 = (_malloc($37)|0);
  $39 = HEAP32[30912>>2]|0;
  $40 = HEAP32[30904>>2]|0;
  $41 = (($40) + (($39*12)|0)|0);
  $42 = (($41) + 8|0);
  HEAP32[$42>>2] = $38;
 }
 $43 = HEAP32[30912>>2]|0;
 $44 = HEAP32[30904>>2]|0;
 $45 = (($44) + (($43*12)|0)|0);
 $46 = (($45) + 8|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)==(0|0);
 if ($48) {
  _emit_error(35744);
  _exit(1);
  // unreachable;
 }
 $49 = $0;
 $50 = ($49|0)==(2);
 if (!($50)) {
  $60 = HEAP32[30912>>2]|0;
  $61 = HEAP32[30904>>2]|0;
  $62 = (($61) + (($60*12)|0)|0);
  $63 = (($62) + 8|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $2;
  (_strcpy(($64|0),($65|0))|0);
  $66 = HEAP32[30912>>2]|0;
  $67 = (($66) + 1)|0;
  HEAP32[30912>>2] = $67;
  STACKTOP = sp;return;
 }
 $51 = $1;
 $52 = ($51|0)>(0);
 if ($52) {
  $53 = HEAP32[30912>>2]|0;
  $54 = HEAP32[30904>>2]|0;
  $55 = (($54) + (($53*12)|0)|0);
  $56 = (($55) + 8|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $2;
  $59 = $1;
  _memcpy(($57|0),($58|0),($59|0))|0;
 }
 $66 = HEAP32[30912>>2]|0;
 $67 = (($66) + 1)|0;
 HEAP32[30912>>2] = $67;
 STACKTOP = sp;return;
}
function _compile_assignment($is_read) {
 $is_read = $is_read|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $addr = 0, $buffer = 0, $label = 0, $sign = 0, $tree = 0, $type = 0, $type2 = 0, $type21 = 0, $var = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $type = sp + 24|0;
 $buffer = sp + 40|0;
 $0 = $is_read;
 $1 = HEAP32[30928>>2]|0;
 $2 = ($1|0)!=(1);
 if ($2) {
  _emit_error(35912);
  STACKTOP = sp;return;
 }
 $3 = (_lex_sneak_peek()|0);
 $4 = ($3|0)==(40);
 if (!($4)) {
  (_strcpy((36032|0),(30952|0))|0);
  $96 = (_signed_search(30952)|0);
  $sign = $96;
  $97 = $sign;
  $98 = ($97|0)!=(0|0);
  if ($98) {
   $99 = $sign;
   $100 = (($99) + 4|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ($101|0)==(1);
   if ($102) {
    $type2 = 4;
   } else {
    label = 43;
   }
  } else {
   label = 43;
  }
  if ((label|0) == 43) {
   $type2 = 0;
  }
  $103 = (_label_search(30952)|0);
  $label = $103;
  $104 = $label;
  $105 = ($104|0)!=(0|0);
  if ($105) {
   $106 = $label;
   $107 = (($106) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $108 & 512;
   $110 = ($109|0)==(0);
   if ($110) {
    HEAP32[$vararg_buffer>>2] = 30952;
    (_sprintf($buffer,35296,$vararg_buffer)|0);
    _emit_error($buffer);
    $label = 0;
   }
  }
  $111 = $label;
  $112 = ($111|0)==(0|0);
  if ($112) {
   _check_for_explicit(30952);
   $113 = (_label_add(30952)|0);
   $label = $113;
   $114 = HEAP8[30952>>0]|0;
   $115 = $114 << 24 >> 24;
   $116 = ($115|0)==(35);
   if ($116) {
    $117 = $label;
    $118 = (($117) + 4|0);
    HEAP32[$118>>2] = 1;
   } else {
    $119 = $label;
    $120 = (($119) + 4|0);
    HEAP32[$120>>2] = 0;
   }
   $121 = $label;
   $122 = (($121) + 4|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = $123 | 512;
   HEAP32[$122>>2] = $124;
  }
  $125 = $label;
  $126 = (($125) + 4|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = $127 | 4096;
  HEAP32[$126>>2] = $128;
  $129 = $label;
  $130 = (($129) + 4|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = $131 & 3;
  $133 = $type2;
  $134 = $133 | $132;
  $type2 = $134;
  _get_lex();
  $135 = $0;
  $136 = ($135|0)!=(0);
  do {
   if ($136) {
    $137 = $0;
    $138 = ($137|0)==(1);
    $139 = $138 ? 49 : 48;
    $140 = (_node_create($139,0,0,0)|0);
    $tree = $140;
    $141 = $0;
    $142 = ($141|0)==(1);
    $143 = $142 ? 1 : 0;
    HEAP32[$type>>2] = $143;
   } else {
    $144 = HEAP32[30928>>2]|0;
    $145 = ($144|0)!=(6);
    if (!($145)) {
     _get_lex();
     $146 = (_evaluate_level_0($type)|0);
     $tree = $146;
     break;
    }
    _emit_error(36000);
    STACKTOP = sp;return;
   }
  } while(0);
  $147 = $type2;
  $148 = $147 & 3;
  $149 = ($148|0)==(1);
  if ($149) {
   $150 = HEAP32[$type>>2]|0;
   $151 = $150 & 3;
   $152 = ($151|0)==(0);
   if ($152) {
    $153 = HEAP32[$type>>2]|0;
    $154 = $153 & 4;
    $155 = ($154|0)!=(0);
    $156 = $155 ? 42 : 41;
    $157 = $tree;
    $158 = (_node_create($156,0,$157,0)|0);
    $tree = $158;
   } else {
    label = 60;
   }
  } else {
   label = 60;
  }
  if ((label|0) == 60) {
   $159 = $type2;
   $160 = $159 & 3;
   $161 = ($160|0)==(0);
   if ($161) {
    $162 = HEAP32[$type>>2]|0;
    $163 = $162 & 3;
    $164 = ($163|0)==(1);
    if ($164) {
     $165 = $tree;
     $166 = (_node_create(43,0,$165,0)|0);
     $tree = $166;
    }
   }
  }
  $167 = (_node_create(68,0,0,0)|0);
  $var = $167;
  $168 = $label;
  $169 = (($168) + 12|0);
  $170 = (_label_search($169)|0);
  $171 = $var;
  $172 = (($171) + 16|0);
  HEAP32[$172>>2] = $170;
  $173 = $type2;
  $174 = $173 & 3;
  $175 = ($174|0)==(0);
  $176 = $175 ? 46 : 47;
  $177 = $tree;
  $178 = $var;
  $179 = (_node_create($176,0,$177,$178)|0);
  $tree = $179;
  $180 = $tree;
  _node_label($180);
  $181 = $tree;
  _node_generate($181,0);
  $182 = $tree;
  _node_delete($182);
  STACKTOP = sp;return;
 }
 $5 = HEAP8[30952>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)==(35);
 if ($7) {
  $type21 = 1;
 } else {
  $type21 = 0;
 }
 $8 = (_signed_search(30952)|0);
 $sign = $8;
 $9 = $sign;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $sign;
  $12 = (($11) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(1);
  if ($14) {
   $15 = $type21;
   $16 = $15 | 4;
   $type21 = $16;
  }
 }
 $17 = (_array_search(30952)|0);
 $label = $17;
 $18 = $label;
 $19 = ($18|0)==(0|0);
 if ($19) {
  _emit_error(35944);
  $20 = (_array_add(30952)|0);
  $label = $20;
  $21 = $label;
  $22 = (($21) + 8|0);
  HEAP32[$22>>2] = 10;
 }
 _get_lex();
 $23 = HEAP32[30928>>2]|0;
 $24 = ($23|0)!=(17);
 if ($24) {
  _emit_error(35152);
 } else {
  _get_lex();
 }
 $25 = (_evaluate_level_0($type)|0);
 $tree = $25;
 $26 = HEAP32[30928>>2]|0;
 $27 = ($26|0)!=(18);
 if ($27) {
  _emit_error(35200);
 } else {
  _get_lex();
 }
 $28 = (_node_create(68,0,0,0)|0);
 $addr = $28;
 $29 = $label;
 $30 = $addr;
 $31 = (($30) + 16|0);
 HEAP32[$31>>2] = $29;
 $32 = HEAP32[$type>>2]|0;
 $33 = $32 & 3;
 $34 = ($33|0)==(0);
 if ($34) {
  $35 = $tree;
  $36 = (_node_create(41,0,$35,0)|0);
  $tree = $36;
 }
 $37 = $type21;
 $38 = $37 & 3;
 $39 = ($38|0)==(1);
 if ($39) {
  $40 = $tree;
  $41 = (_node_create(51,2,0,0)|0);
  $42 = (_node_create(31,0,$40,$41)|0);
  $tree = $42;
 }
 $43 = $addr;
 $44 = $tree;
 $45 = (_node_create(27,0,$43,$44)|0);
 $addr = $45;
 $46 = $0;
 $47 = ($46|0)!=(0);
 do {
  if ($47) {
   $48 = $0;
   $49 = ($48|0)==(1);
   $50 = $49 ? 49 : 48;
   $51 = (_node_create($50,0,0,0)|0);
   $tree = $51;
   $52 = $0;
   $53 = ($52|0)==(1);
   $54 = $53 ? 1 : 0;
   HEAP32[$type>>2] = $54;
  } else {
   $55 = HEAP32[30928>>2]|0;
   $56 = ($55|0)!=(6);
   if (!($56)) {
    _get_lex();
    $57 = (_evaluate_level_0($type)|0);
    $tree = $57;
    break;
   }
   _emit_error(36000);
   STACKTOP = sp;return;
  }
 } while(0);
 $58 = $type21;
 $59 = $58 & 3;
 $60 = ($59|0)==(1);
 if ($60) {
  $61 = HEAP32[$type>>2]|0;
  $62 = $61 & 3;
  $63 = ($62|0)==(0);
  if ($63) {
   $64 = HEAP32[$type>>2]|0;
   $65 = $64 & 4;
   $66 = ($65|0)!=(0);
   $67 = $66 ? 42 : 41;
   $68 = $tree;
   $69 = (_node_create($67,0,$68,0)|0);
   $tree = $69;
  } else {
   label = 30;
  }
 } else {
  label = 30;
 }
 if ((label|0) == 30) {
  $70 = $type21;
  $71 = $70 & 3;
  $72 = ($71|0)==(0);
  if ($72) {
   $73 = HEAP32[$type>>2]|0;
   $74 = $73 & 3;
   $75 = ($74|0)==(1);
   if ($75) {
    $76 = $tree;
    $77 = (_node_create(43,0,$76,0)|0);
    $tree = $77;
   }
  }
 }
 $78 = $type21;
 $79 = $78 & 3;
 $80 = ($79|0)==(1);
 if ($80) {
  $81 = $tree;
  $82 = $addr;
  $83 = (_node_create(47,0,$81,$82)|0);
  $tree = $83;
 } else {
  $84 = $type21;
  $85 = $84 & 3;
  $86 = ($85|0)==(0);
  if ($86) {
   $87 = $tree;
   $88 = $addr;
   $89 = (_node_create(46,0,$87,$88)|0);
   $tree = $89;
  }
 }
 $90 = $label;
 $91 = $tree;
 $92 = (($91) + 16|0);
 HEAP32[$92>>2] = $90;
 $93 = $tree;
 _node_label($93);
 $94 = $tree;
 _node_generate($94,0);
 $95 = $tree;
 _node_delete($95);
 STACKTOP = sp;return;
}
function _compile_statement($check_for_else) {
 $check_for_else = $check_for_else|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0;
 var $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0;
 var $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0;
 var $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0;
 var $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0;
 var $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0;
 var $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0;
 var $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0;
 var $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0;
 var $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0;
 var $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0;
 var $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0;
 var $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0;
 var $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0;
 var $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0;
 var $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0;
 var $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0;
 var $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0;
 var $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0;
 var $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0;
 var $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0;
 var $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0;
 var $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0;
 var $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0;
 var $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0;
 var $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0;
 var $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0;
 var $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0;
 var $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0;
 var $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0;
 var $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0;
 var $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0;
 var $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0;
 var $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0;
 var $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0;
 var $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0;
 var $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0;
 var $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0;
 var $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0;
 var $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0;
 var $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0;
 var $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0;
 var $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0;
 var $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0;
 var $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0;
 var $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0;
 var $2816 = 0, $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0;
 var $2834 = 0, $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0;
 var $2852 = 0, $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0;
 var $2870 = 0, $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0;
 var $2889 = 0, $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0;
 var $2906 = 0, $2907 = 0, $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0;
 var $2924 = 0, $2925 = 0, $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0;
 var $2942 = 0, $2943 = 0, $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0;
 var $2960 = 0, $2961 = 0, $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0;
 var $2979 = 0, $298 = 0, $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0;
 var $2997 = 0, $2998 = 0, $2999 = 0, $3 = 0, $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0;
 var $3013 = 0, $3014 = 0, $3015 = 0, $3016 = 0, $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0, $3030 = 0;
 var $3031 = 0, $3032 = 0, $3033 = 0, $3034 = 0, $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0, $3049 = 0;
 var $305 = 0, $3050 = 0, $3051 = 0, $3052 = 0, $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0, $3067 = 0;
 var $3068 = 0, $3069 = 0, $307 = 0, $3070 = 0, $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0, $3085 = 0;
 var $3086 = 0, $3087 = 0, $3088 = 0, $3089 = 0, $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0, $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0, $3101 = 0, $3102 = 0;
 var $3103 = 0, $3104 = 0, $3105 = 0, $3106 = 0, $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0, $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0, $3120 = 0;
 var $3121 = 0, $3122 = 0, $3123 = 0, $3124 = 0, $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0, $3129 = 0, $313 = 0, $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0, $3138 = 0, $3139 = 0;
 var $314 = 0, $3140 = 0, $3141 = 0, $3142 = 0, $3143 = 0, $3144 = 0, $3145 = 0, $3146 = 0, $3147 = 0, $3148 = 0, $3149 = 0, $315 = 0, $3150 = 0, $3151 = 0, $3152 = 0, $3153 = 0, $3154 = 0, $3155 = 0, $3156 = 0, $3157 = 0;
 var $3158 = 0, $3159 = 0, $316 = 0, $3160 = 0, $3161 = 0, $3162 = 0, $3163 = 0, $3164 = 0, $3165 = 0, $3166 = 0, $3167 = 0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0, $3171 = 0, $3172 = 0, $3173 = 0, $3174 = 0, $3175 = 0;
 var $3176 = 0, $3177 = 0, $3178 = 0, $3179 = 0, $318 = 0, $3180 = 0, $3181 = 0, $3182 = 0, $3183 = 0, $3184 = 0, $3185 = 0, $3186 = 0, $3187 = 0, $3188 = 0, $3189 = 0, $319 = 0, $3190 = 0, $3191 = 0, $3192 = 0, $3193 = 0;
 var $3194 = 0, $3195 = 0, $3196 = 0, $3197 = 0, $3198 = 0, $3199 = 0, $32 = 0, $320 = 0, $3200 = 0, $3201 = 0, $3202 = 0, $3203 = 0, $3204 = 0, $3205 = 0, $3206 = 0, $3207 = 0, $3208 = 0, $3209 = 0, $321 = 0, $3210 = 0;
 var $3211 = 0, $3212 = 0, $3213 = 0, $3214 = 0, $3215 = 0, $3216 = 0, $3217 = 0, $3218 = 0, $3219 = 0, $322 = 0, $3220 = 0, $3221 = 0, $3222 = 0, $3223 = 0, $3224 = 0, $3225 = 0, $3226 = 0, $3227 = 0, $3228 = 0, $3229 = 0;
 var $323 = 0, $3230 = 0, $3231 = 0, $3232 = 0, $3233 = 0, $3234 = 0, $3235 = 0, $3236 = 0, $3237 = 0, $3238 = 0, $3239 = 0, $324 = 0, $3240 = 0, $3241 = 0, $3242 = 0, $3243 = 0, $3244 = 0, $3245 = 0, $3246 = 0, $3247 = 0;
 var $3248 = 0, $3249 = 0, $325 = 0, $3250 = 0, $3251 = 0, $3252 = 0, $3253 = 0, $3254 = 0, $3255 = 0, $3256 = 0, $3257 = 0, $3258 = 0, $3259 = 0, $326 = 0, $3260 = 0, $3261 = 0, $3262 = 0, $3263 = 0, $3264 = 0, $3265 = 0;
 var $3266 = 0, $3267 = 0, $3268 = 0, $3269 = 0, $327 = 0, $3270 = 0, $3271 = 0, $3272 = 0, $3273 = 0, $3274 = 0, $3275 = 0, $3276 = 0, $3277 = 0, $3278 = 0, $3279 = 0, $328 = 0, $3280 = 0, $3281 = 0, $3282 = 0, $3283 = 0;
 var $3284 = 0, $3285 = 0, $3286 = 0, $3287 = 0, $3288 = 0, $3289 = 0, $329 = 0, $3290 = 0, $3291 = 0, $3292 = 0, $3293 = 0, $3294 = 0, $3295 = 0, $3296 = 0, $3297 = 0, $3298 = 0, $3299 = 0, $33 = 0, $330 = 0, $3300 = 0;
 var $3301 = 0, $3302 = 0, $3303 = 0, $3304 = 0, $3305 = 0, $3306 = 0, $3307 = 0, $3308 = 0, $3309 = 0, $331 = 0, $3310 = 0, $3311 = 0, $3312 = 0, $3313 = 0, $3314 = 0, $3315 = 0, $3316 = 0, $3317 = 0, $3318 = 0, $3319 = 0;
 var $332 = 0, $3320 = 0, $3321 = 0, $3322 = 0, $3323 = 0, $3324 = 0, $3325 = 0, $3326 = 0, $3327 = 0, $3328 = 0, $3329 = 0, $333 = 0, $3330 = 0, $3331 = 0, $3332 = 0, $3333 = 0, $3334 = 0, $3335 = 0, $3336 = 0, $3337 = 0;
 var $3338 = 0, $3339 = 0, $334 = 0, $3340 = 0, $3341 = 0, $3342 = 0, $3343 = 0, $3344 = 0, $3345 = 0, $3346 = 0, $3347 = 0, $3348 = 0, $3349 = 0, $335 = 0, $3350 = 0, $3351 = 0, $3352 = 0, $3353 = 0, $3354 = 0, $3355 = 0;
 var $3356 = 0, $3357 = 0, $3358 = 0, $3359 = 0, $336 = 0, $3360 = 0, $3361 = 0, $3362 = 0, $3363 = 0, $3364 = 0, $3365 = 0, $3366 = 0, $3367 = 0, $3368 = 0, $3369 = 0, $337 = 0, $3370 = 0, $3371 = 0, $3372 = 0, $3373 = 0;
 var $3374 = 0, $3375 = 0, $3376 = 0, $3377 = 0, $3378 = 0, $3379 = 0, $338 = 0, $3380 = 0, $3381 = 0, $3382 = 0, $3383 = 0, $3384 = 0, $3385 = 0, $3386 = 0, $3387 = 0, $3388 = 0, $3389 = 0, $339 = 0, $3390 = 0, $3391 = 0;
 var $3392 = 0, $3393 = 0, $3394 = 0, $3395 = 0, $3396 = 0, $3397 = 0, $3398 = 0, $3399 = 0, $34 = 0, $340 = 0, $3400 = 0, $3401 = 0, $3402 = 0, $3403 = 0, $3404 = 0, $3405 = 0, $3406 = 0, $3407 = 0, $3408 = 0, $3409 = 0;
 var $341 = 0, $3410 = 0, $3411 = 0, $3412 = 0, $3413 = 0, $3414 = 0, $3415 = 0, $3416 = 0, $3417 = 0, $3418 = 0, $3419 = 0, $342 = 0, $3420 = 0, $3421 = 0, $3422 = 0, $3423 = 0, $3424 = 0, $3425 = 0, $3426 = 0, $3427 = 0;
 var $3428 = 0, $3429 = 0, $343 = 0, $3430 = 0, $3431 = 0, $3432 = 0, $3433 = 0, $3434 = 0, $3435 = 0, $3436 = 0, $3437 = 0, $3438 = 0, $3439 = 0, $344 = 0, $3440 = 0, $3441 = 0, $3442 = 0, $3443 = 0, $3444 = 0, $3445 = 0;
 var $3446 = 0, $3447 = 0, $3448 = 0, $3449 = 0, $345 = 0, $3450 = 0, $3451 = 0, $3452 = 0, $3453 = 0, $3454 = 0, $3455 = 0, $3456 = 0, $3457 = 0, $3458 = 0, $3459 = 0, $346 = 0, $3460 = 0, $3461 = 0, $3462 = 0, $3463 = 0;
 var $3464 = 0, $3465 = 0, $3466 = 0, $3467 = 0, $3468 = 0, $3469 = 0, $347 = 0, $3470 = 0, $3471 = 0, $3472 = 0, $3473 = 0, $3474 = 0, $3475 = 0, $3476 = 0, $3477 = 0, $3478 = 0, $3479 = 0, $348 = 0, $3480 = 0, $3481 = 0;
 var $3482 = 0, $3483 = 0, $3484 = 0, $3485 = 0, $3486 = 0, $3487 = 0, $3488 = 0, $3489 = 0, $349 = 0, $3490 = 0, $3491 = 0, $3492 = 0, $3493 = 0, $3494 = 0, $3495 = 0, $3496 = 0, $3497 = 0, $3498 = 0, $3499 = 0, $35 = 0;
 var $350 = 0, $3500 = 0, $3501 = 0, $3502 = 0, $3503 = 0, $3504 = 0, $3505 = 0, $3506 = 0, $3507 = 0, $3508 = 0, $3509 = 0, $351 = 0, $3510 = 0, $3511 = 0, $3512 = 0, $3513 = 0, $3514 = 0, $3515 = 0, $3516 = 0, $3517 = 0;
 var $3518 = 0, $3519 = 0, $352 = 0, $3520 = 0, $3521 = 0, $3522 = 0, $3523 = 0, $3524 = 0, $3525 = 0, $3526 = 0, $3527 = 0, $3528 = 0, $3529 = 0, $353 = 0, $3530 = 0, $3531 = 0, $3532 = 0, $3533 = 0, $3534 = 0, $3535 = 0;
 var $3536 = 0, $3537 = 0, $3538 = 0, $3539 = 0, $354 = 0, $3540 = 0, $3541 = 0, $3542 = 0, $3543 = 0, $3544 = 0, $3545 = 0, $3546 = 0, $3547 = 0, $3548 = 0, $3549 = 0, $355 = 0, $3550 = 0, $3551 = 0, $3552 = 0, $3553 = 0;
 var $3554 = 0, $3555 = 0, $3556 = 0, $3557 = 0, $3558 = 0, $3559 = 0, $356 = 0, $3560 = 0, $3561 = 0, $3562 = 0, $3563 = 0, $3564 = 0, $3565 = 0, $3566 = 0, $3567 = 0, $3568 = 0, $3569 = 0, $357 = 0, $3570 = 0, $3571 = 0;
 var $3572 = 0, $3573 = 0, $3574 = 0, $3575 = 0, $3576 = 0, $3577 = 0, $3578 = 0, $3579 = 0, $358 = 0, $3580 = 0, $3581 = 0, $3582 = 0, $3583 = 0, $3584 = 0, $3585 = 0, $3586 = 0, $3587 = 0, $3588 = 0, $3589 = 0, $359 = 0;
 var $3590 = 0, $3591 = 0, $3592 = 0, $3593 = 0, $3594 = 0, $3595 = 0, $3596 = 0, $3597 = 0, $3598 = 0, $3599 = 0, $36 = 0, $360 = 0, $3600 = 0, $3601 = 0, $3602 = 0, $3603 = 0, $3604 = 0, $3605 = 0, $3606 = 0, $3607 = 0;
 var $3608 = 0, $3609 = 0, $361 = 0, $3610 = 0, $3611 = 0, $3612 = 0, $3613 = 0, $3614 = 0, $3615 = 0, $3616 = 0, $3617 = 0, $3618 = 0, $3619 = 0, $362 = 0, $3620 = 0, $3621 = 0, $3622 = 0, $3623 = 0, $3624 = 0, $3625 = 0;
 var $3626 = 0, $3627 = 0, $3628 = 0, $3629 = 0, $363 = 0, $3630 = 0, $3631 = 0, $3632 = 0, $3633 = 0, $3634 = 0, $3635 = 0, $3636 = 0, $3637 = 0, $3638 = 0, $3639 = 0, $364 = 0, $3640 = 0, $3641 = 0, $3642 = 0, $3643 = 0;
 var $3644 = 0, $3645 = 0, $3646 = 0, $3647 = 0, $3648 = 0, $3649 = 0, $365 = 0, $3650 = 0, $3651 = 0, $3652 = 0, $3653 = 0, $3654 = 0, $3655 = 0, $3656 = 0, $3657 = 0, $3658 = 0, $3659 = 0, $366 = 0, $3660 = 0, $3661 = 0;
 var $3662 = 0, $3663 = 0, $3664 = 0, $3665 = 0, $3666 = 0, $3667 = 0, $3668 = 0, $3669 = 0, $367 = 0, $3670 = 0, $3671 = 0, $3672 = 0, $3673 = 0, $3674 = 0, $3675 = 0, $3676 = 0, $3677 = 0, $3678 = 0, $3679 = 0, $368 = 0;
 var $3680 = 0, $3681 = 0, $3682 = 0, $3683 = 0, $3684 = 0, $3685 = 0, $3686 = 0, $3687 = 0, $3688 = 0, $3689 = 0, $369 = 0, $3690 = 0, $3691 = 0, $3692 = 0, $3693 = 0, $3694 = 0, $3695 = 0, $3696 = 0, $3697 = 0, $3698 = 0;
 var $3699 = 0, $37 = 0, $370 = 0, $3700 = 0, $3701 = 0, $3702 = 0, $3703 = 0, $3704 = 0, $3705 = 0, $3706 = 0, $3707 = 0, $3708 = 0, $3709 = 0, $371 = 0, $3710 = 0, $3711 = 0, $3712 = 0, $3713 = 0, $3714 = 0, $3715 = 0;
 var $3716 = 0, $3717 = 0, $3718 = 0, $3719 = 0, $372 = 0, $3720 = 0, $3721 = 0, $3722 = 0, $3723 = 0, $3724 = 0, $3725 = 0, $3726 = 0, $3727 = 0, $3728 = 0, $3729 = 0, $373 = 0, $3730 = 0, $3731 = 0, $3732 = 0, $3733 = 0;
 var $3734 = 0, $3735 = 0, $3736 = 0, $3737 = 0, $3738 = 0, $3739 = 0, $374 = 0, $3740 = 0, $3741 = 0, $3742 = 0, $3743 = 0, $3744 = 0, $3745 = 0, $3746 = 0, $3747 = 0, $3748 = 0, $3749 = 0, $375 = 0, $3750 = 0, $3751 = 0;
 var $3752 = 0, $3753 = 0, $3754 = 0, $3755 = 0, $3756 = 0, $3757 = 0, $3758 = 0, $3759 = 0, $376 = 0, $3760 = 0, $3761 = 0, $3762 = 0, $3763 = 0, $3764 = 0, $3765 = 0, $3766 = 0, $3767 = 0, $3768 = 0, $3769 = 0, $377 = 0;
 var $3770 = 0, $3771 = 0, $3772 = 0, $3773 = 0, $3774 = 0, $3775 = 0, $3776 = 0, $3777 = 0, $3778 = 0, $3779 = 0, $378 = 0, $3780 = 0, $3781 = 0, $3782 = 0, $3783 = 0, $3784 = 0, $3785 = 0, $3786 = 0, $3787 = 0, $3788 = 0;
 var $3789 = 0, $379 = 0, $3790 = 0, $3791 = 0, $3792 = 0, $3793 = 0, $3794 = 0, $3795 = 0, $3796 = 0, $3797 = 0, $3798 = 0, $3799 = 0, $38 = 0, $380 = 0, $3800 = 0, $3801 = 0, $3802 = 0, $3803 = 0, $3804 = 0, $3805 = 0;
 var $3806 = 0, $3807 = 0, $3808 = 0, $3809 = 0, $381 = 0, $3810 = 0, $3811 = 0, $3812 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0;
 var $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0;
 var $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0;
 var $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0;
 var $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0;
 var $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0;
 var $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0;
 var $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0;
 var $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0;
 var $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0;
 var $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0;
 var $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0;
 var $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0;
 var $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0;
 var $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0;
 var $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0;
 var $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0;
 var $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0;
 var $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0;
 var $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0;
 var $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0;
 var $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0;
 var $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0;
 var $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0;
 var $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0;
 var $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0;
 var $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0;
 var $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0;
 var $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0;
 var $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0;
 var $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $addr = 0, $address = 0, $address30 = 0, $arg = 0, $arguments = 0, $array = 0, $array64 = 0;
 var $block = 0, $buffer = 0, $c = 0, $c33 = 0, $c40 = 0, $c46 = 0, $c49 = 0, $c56 = 0, $c57 = 0, $c58 = 0, $c63 = 0, $c67 = 0, $c69 = 0, $c72 = 0, $c75 = 0, $c76 = 0, $c77 = 0, $c80 = 0, $color = 0, $comparison = 0;
 var $cursor_pos = 0, $cursor_value = 0, $d = 0, $d47 = 0, $d48 = 0, $d51 = 0, $d81 = 0, $fast = 0, $final = 0, $final65 = 0, $final9 = 0, $first_time = 0, $first_time50 = 0, $format = 0, $function = 0, $gosub = 0, $index = 0, $label = 0, $label2 = 0, $label23 = 0;
 var $label239 = 0, $label35 = 0, $label38 = 0, $label5 = 0, $label68 = 0, $label70 = 0, $label71 = 0, $label_exit = 0, $label_exit13 = 0, $label_exit18 = 0, $label_exit25 = 0, $label_loop = 0, $label_loop11 = 0, $label_loop12 = 0, $label_loop17 = 0, $label_temp = 0, $label_temp23 = 0, $length = 0, $length42 = 0, $length45 = 0;
 var $loop_explorer = 0, $macro = 0, $max = 0, $max_value = 0, $min = 0, $new_array = 0, $new_label = 0, $new_loop = 0, $new_loop15 = 0, $new_loop20 = 0, $new_loop27 = 0, $new_loop6 = 0, $note = 0, $notes = 0, $options = 0, $p = 0, $p36 = 0, $pletter = 0, $popping = 0, $popping16 = 0;
 var $popping21 = 0, $popping8 = 0, $port = 0, $positive = 0, $sign = 0, $size = 0, $source = 0, $source43 = 0, $source44 = 0, $source55 = 0, $start = 0, $step = 0, $step10 = 0, $table = 0, $target2 = 0, $there_is_else = 0, $total_arguments = 0, $tree = 0, $tree28 = 0, $tree32 = 0;
 var $tree34 = 0, $tree41 = 0, $tree59 = 0, $tree61 = 0, $tree74 = 0, $tree78 = 0, $tree82 = 0, $type = 0, $type1 = 0, $type14 = 0, $type19 = 0, $type2 = 0, $type22 = 0, $type26 = 0, $type29 = 0, $type4 = 0, $type52 = 0, $type53 = 0, $type54 = 0, $type60 = 0;
 var $type62 = 0, $type66 = 0, $type7 = 0, $type73 = 0, $type79 = 0, $type83 = 0, $type_var = 0, $value = 0, $value31 = 0, $value37 = 0, $var = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer101 = 0, $vararg_buffer104 = 0, $vararg_buffer107 = 0, $vararg_buffer110 = 0, $vararg_buffer113 = 0, $vararg_buffer115 = 0, $vararg_buffer117 = 0;
 var $vararg_buffer119 = 0, $vararg_buffer12 = 0, $vararg_buffer122 = 0, $vararg_buffer125 = 0, $vararg_buffer127 = 0, $vararg_buffer129 = 0, $vararg_buffer131 = 0, $vararg_buffer133 = 0, $vararg_buffer136 = 0, $vararg_buffer139 = 0, $vararg_buffer141 = 0, $vararg_buffer143 = 0, $vararg_buffer145 = 0, $vararg_buffer147 = 0, $vararg_buffer149 = 0, $vararg_buffer15 = 0, $vararg_buffer154 = 0, $vararg_buffer156 = 0, $vararg_buffer159 = 0, $vararg_buffer161 = 0;
 var $vararg_buffer163 = 0, $vararg_buffer165 = 0, $vararg_buffer169 = 0, $vararg_buffer171 = 0, $vararg_buffer173 = 0, $vararg_buffer175 = 0, $vararg_buffer177 = 0, $vararg_buffer18 = 0, $vararg_buffer180 = 0, $vararg_buffer183 = 0, $vararg_buffer185 = 0, $vararg_buffer187 = 0, $vararg_buffer190 = 0, $vararg_buffer193 = 0, $vararg_buffer198 = 0, $vararg_buffer201 = 0, $vararg_buffer204 = 0, $vararg_buffer207 = 0, $vararg_buffer21 = 0, $vararg_buffer210 = 0;
 var $vararg_buffer213 = 0, $vararg_buffer216 = 0, $vararg_buffer219 = 0, $vararg_buffer222 = 0, $vararg_buffer225 = 0, $vararg_buffer228 = 0, $vararg_buffer230 = 0, $vararg_buffer232 = 0, $vararg_buffer235 = 0, $vararg_buffer238 = 0, $vararg_buffer24 = 0, $vararg_buffer240 = 0, $vararg_buffer242 = 0, $vararg_buffer244 = 0, $vararg_buffer247 = 0, $vararg_buffer250 = 0, $vararg_buffer253 = 0, $vararg_buffer256 = 0, $vararg_buffer259 = 0, $vararg_buffer262 = 0;
 var $vararg_buffer265 = 0, $vararg_buffer268 = 0, $vararg_buffer27 = 0, $vararg_buffer271 = 0, $vararg_buffer274 = 0, $vararg_buffer277 = 0, $vararg_buffer280 = 0, $vararg_buffer283 = 0, $vararg_buffer286 = 0, $vararg_buffer296 = 0, $vararg_buffer299 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer309 = 0, $vararg_buffer319 = 0, $vararg_buffer322 = 0, $vararg_buffer33 = 0, $vararg_buffer332 = 0, $vararg_buffer342 = 0, $vararg_buffer345 = 0;
 var $vararg_buffer349 = 0, $vararg_buffer35 = 0, $vararg_buffer352 = 0, $vararg_buffer356 = 0, $vararg_buffer359 = 0, $vararg_buffer362 = 0, $vararg_buffer366 = 0, $vararg_buffer369 = 0, $vararg_buffer372 = 0, $vararg_buffer376 = 0, $vararg_buffer379 = 0, $vararg_buffer38 = 0, $vararg_buffer385 = 0, $vararg_buffer391 = 0, $vararg_buffer394 = 0, $vararg_buffer397 = 0, $vararg_buffer400 = 0, $vararg_buffer404 = 0, $vararg_buffer407 = 0, $vararg_buffer41 = 0;
 var $vararg_buffer410 = 0, $vararg_buffer413 = 0, $vararg_buffer416 = 0, $vararg_buffer419 = 0, $vararg_buffer422 = 0, $vararg_buffer425 = 0, $vararg_buffer428 = 0, $vararg_buffer431 = 0, $vararg_buffer434 = 0, $vararg_buffer437 = 0, $vararg_buffer44 = 0, $vararg_buffer440 = 0, $vararg_buffer443 = 0, $vararg_buffer446 = 0, $vararg_buffer449 = 0, $vararg_buffer452 = 0, $vararg_buffer455 = 0, $vararg_buffer458 = 0, $vararg_buffer461 = 0, $vararg_buffer464 = 0;
 var $vararg_buffer467 = 0, $vararg_buffer47 = 0, $vararg_buffer470 = 0, $vararg_buffer473 = 0, $vararg_buffer476 = 0, $vararg_buffer479 = 0, $vararg_buffer483 = 0, $vararg_buffer49 = 0, $vararg_buffer52 = 0, $vararg_buffer55 = 0, $vararg_buffer58 = 0, $vararg_buffer6 = 0, $vararg_buffer60 = 0, $vararg_buffer63 = 0, $vararg_buffer66 = 0, $vararg_buffer69 = 0, $vararg_buffer72 = 0, $vararg_buffer75 = 0, $vararg_buffer78 = 0, $vararg_buffer81 = 0;
 var $vararg_buffer83 = 0, $vararg_buffer86 = 0, $vararg_buffer89 = 0, $vararg_buffer9 = 0, $vararg_buffer92 = 0, $vararg_buffer95 = 0, $vararg_buffer98 = 0, $vararg_ptr152 = 0, $vararg_ptr153 = 0, $vararg_ptr168 = 0, $vararg_ptr196 = 0, $vararg_ptr197 = 0, $vararg_ptr289 = 0, $vararg_ptr290 = 0, $vararg_ptr291 = 0, $vararg_ptr292 = 0, $vararg_ptr293 = 0, $vararg_ptr294 = 0, $vararg_ptr295 = 0, $vararg_ptr302 = 0;
 var $vararg_ptr303 = 0, $vararg_ptr304 = 0, $vararg_ptr305 = 0, $vararg_ptr306 = 0, $vararg_ptr307 = 0, $vararg_ptr308 = 0, $vararg_ptr312 = 0, $vararg_ptr313 = 0, $vararg_ptr314 = 0, $vararg_ptr315 = 0, $vararg_ptr316 = 0, $vararg_ptr317 = 0, $vararg_ptr318 = 0, $vararg_ptr325 = 0, $vararg_ptr326 = 0, $vararg_ptr327 = 0, $vararg_ptr328 = 0, $vararg_ptr329 = 0, $vararg_ptr330 = 0, $vararg_ptr331 = 0;
 var $vararg_ptr335 = 0, $vararg_ptr336 = 0, $vararg_ptr337 = 0, $vararg_ptr338 = 0, $vararg_ptr339 = 0, $vararg_ptr340 = 0, $vararg_ptr341 = 0, $vararg_ptr348 = 0, $vararg_ptr355 = 0, $vararg_ptr365 = 0, $vararg_ptr375 = 0, $vararg_ptr382 = 0, $vararg_ptr383 = 0, $vararg_ptr384 = 0, $vararg_ptr388 = 0, $vararg_ptr389 = 0, $vararg_ptr390 = 0, $vararg_ptr403 = 0, $vararg_ptr482 = 0, $vdp_reg = 0;
 var $vram_read = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 6176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer483 = sp + 1264|0;
 $vararg_buffer479 = sp + 1392|0;
 $vararg_buffer476 = sp + 1384|0;
 $vararg_buffer473 = sp + 1376|0;
 $vararg_buffer470 = sp + 1368|0;
 $vararg_buffer467 = sp + 1360|0;
 $vararg_buffer464 = sp + 1352|0;
 $vararg_buffer461 = sp + 1344|0;
 $vararg_buffer458 = sp + 1336|0;
 $vararg_buffer455 = sp + 1256|0;
 $vararg_buffer452 = sp + 1248|0;
 $vararg_buffer449 = sp + 1240|0;
 $vararg_buffer446 = sp + 1232|0;
 $vararg_buffer443 = sp + 1224|0;
 $vararg_buffer440 = sp + 1216|0;
 $vararg_buffer437 = sp + 1208|0;
 $vararg_buffer434 = sp + 1200|0;
 $vararg_buffer431 = sp + 1192|0;
 $vararg_buffer428 = sp + 1184|0;
 $vararg_buffer425 = sp + 1176|0;
 $vararg_buffer422 = sp + 1168|0;
 $vararg_buffer419 = sp + 1160|0;
 $vararg_buffer416 = sp + 1152|0;
 $vararg_buffer413 = sp + 1144|0;
 $vararg_buffer410 = sp + 1136|0;
 $vararg_buffer407 = sp + 1128|0;
 $vararg_buffer404 = sp + 1120|0;
 $vararg_buffer400 = sp + 1112|0;
 $vararg_buffer397 = sp + 1104|0;
 $vararg_buffer394 = sp + 1096|0;
 $vararg_buffer391 = sp + 1088|0;
 $vararg_buffer385 = sp + 1072|0;
 $vararg_buffer379 = sp + 1056|0;
 $vararg_buffer376 = sp + 1048|0;
 $vararg_buffer372 = sp + 1040|0;
 $vararg_buffer369 = sp + 1032|0;
 $vararg_buffer366 = sp + 1024|0;
 $vararg_buffer362 = sp + 1016|0;
 $vararg_buffer359 = sp + 1008|0;
 $vararg_buffer356 = sp + 1000|0;
 $vararg_buffer352 = sp + 992|0;
 $vararg_buffer349 = sp + 984|0;
 $vararg_buffer345 = sp + 976|0;
 $vararg_buffer342 = sp + 968|0;
 $vararg_buffer332 = sp + 936|0;
 $vararg_buffer322 = sp + 904|0;
 $vararg_buffer319 = sp + 896|0;
 $vararg_buffer309 = sp + 864|0;
 $vararg_buffer299 = sp + 832|0;
 $vararg_buffer296 = sp + 824|0;
 $vararg_buffer286 = sp + 792|0;
 $vararg_buffer283 = sp + 784|0;
 $vararg_buffer280 = sp + 776|0;
 $vararg_buffer277 = sp + 768|0;
 $vararg_buffer274 = sp + 760|0;
 $vararg_buffer271 = sp + 752|0;
 $vararg_buffer268 = sp + 744|0;
 $vararg_buffer265 = sp + 736|0;
 $vararg_buffer262 = sp + 728|0;
 $vararg_buffer259 = sp + 720|0;
 $vararg_buffer256 = sp + 712|0;
 $vararg_buffer253 = sp + 704|0;
 $vararg_buffer250 = sp + 696|0;
 $vararg_buffer247 = sp + 688|0;
 $vararg_buffer244 = sp + 680|0;
 $vararg_buffer242 = sp + 672|0;
 $vararg_buffer240 = sp + 664|0;
 $vararg_buffer238 = sp + 656|0;
 $vararg_buffer235 = sp + 648|0;
 $vararg_buffer232 = sp + 640|0;
 $vararg_buffer230 = sp + 632|0;
 $vararg_buffer228 = sp + 624|0;
 $vararg_buffer225 = sp + 616|0;
 $vararg_buffer222 = sp + 608|0;
 $vararg_buffer219 = sp + 600|0;
 $vararg_buffer216 = sp + 296|0;
 $vararg_buffer213 = sp + 288|0;
 $vararg_buffer210 = sp + 280|0;
 $vararg_buffer207 = sp + 272|0;
 $vararg_buffer204 = sp + 264|0;
 $vararg_buffer201 = sp + 256|0;
 $vararg_buffer198 = sp + 248|0;
 $vararg_buffer193 = sp + 232|0;
 $vararg_buffer190 = sp + 224|0;
 $vararg_buffer187 = sp + 216|0;
 $vararg_buffer185 = sp + 208|0;
 $vararg_buffer183 = sp + 200|0;
 $vararg_buffer180 = sp + 192|0;
 $vararg_buffer177 = sp + 184|0;
 $vararg_buffer175 = sp + 176|0;
 $vararg_buffer173 = sp + 168|0;
 $vararg_buffer171 = sp + 160|0;
 $vararg_buffer169 = sp + 152|0;
 $vararg_buffer165 = sp + 144|0;
 $vararg_buffer163 = sp + 64|0;
 $vararg_buffer161 = sp;
 $vararg_buffer159 = sp + 8|0;
 $vararg_buffer156 = sp + 16|0;
 $vararg_buffer154 = sp + 24|0;
 $vararg_buffer149 = sp + 32|0;
 $vararg_buffer147 = sp + 48|0;
 $vararg_buffer145 = sp + 56|0;
 $vararg_buffer143 = sp + 72|0;
 $vararg_buffer141 = sp + 80|0;
 $vararg_buffer139 = sp + 88|0;
 $vararg_buffer136 = sp + 96|0;
 $vararg_buffer133 = sp + 104|0;
 $vararg_buffer131 = sp + 112|0;
 $vararg_buffer129 = sp + 120|0;
 $vararg_buffer127 = sp + 128|0;
 $vararg_buffer125 = sp + 136|0;
 $vararg_buffer122 = sp + 304|0;
 $vararg_buffer119 = sp + 312|0;
 $vararg_buffer117 = sp + 320|0;
 $vararg_buffer115 = sp + 328|0;
 $vararg_buffer113 = sp + 336|0;
 $vararg_buffer110 = sp + 344|0;
 $vararg_buffer107 = sp + 352|0;
 $vararg_buffer104 = sp + 360|0;
 $vararg_buffer101 = sp + 368|0;
 $vararg_buffer98 = sp + 376|0;
 $vararg_buffer95 = sp + 384|0;
 $vararg_buffer92 = sp + 392|0;
 $vararg_buffer89 = sp + 400|0;
 $vararg_buffer86 = sp + 408|0;
 $vararg_buffer83 = sp + 416|0;
 $vararg_buffer81 = sp + 424|0;
 $vararg_buffer78 = sp + 432|0;
 $vararg_buffer75 = sp + 440|0;
 $vararg_buffer72 = sp + 448|0;
 $vararg_buffer69 = sp + 456|0;
 $vararg_buffer66 = sp + 464|0;
 $vararg_buffer63 = sp + 472|0;
 $vararg_buffer60 = sp + 480|0;
 $vararg_buffer58 = sp + 488|0;
 $vararg_buffer55 = sp + 496|0;
 $vararg_buffer52 = sp + 504|0;
 $vararg_buffer49 = sp + 512|0;
 $vararg_buffer47 = sp + 520|0;
 $vararg_buffer44 = sp + 528|0;
 $vararg_buffer41 = sp + 536|0;
 $vararg_buffer38 = sp + 544|0;
 $vararg_buffer35 = sp + 552|0;
 $vararg_buffer33 = sp + 560|0;
 $vararg_buffer30 = sp + 568|0;
 $vararg_buffer27 = sp + 576|0;
 $vararg_buffer24 = sp + 584|0;
 $vararg_buffer21 = sp + 592|0;
 $vararg_buffer18 = sp + 1328|0;
 $vararg_buffer15 = sp + 1272|0;
 $vararg_buffer12 = sp + 1280|0;
 $vararg_buffer9 = sp + 1288|0;
 $vararg_buffer6 = sp + 1296|0;
 $vararg_buffer3 = sp + 1304|0;
 $vararg_buffer1 = sp + 1312|0;
 $vararg_buffer = sp + 1320|0;
 $type = sp + 2968|0;
 $type7 = sp + 2860|0;
 $type26 = sp + 3072|0;
 $type29 = sp + 3088|0;
 $type2 = sp + 3040|0;
 $buffer = sp + 3104|0;
 $type60 = sp + 1452|0;
 $array = sp + 5152|0;
 $type62 = sp + 1536|0;
 $type66 = sp + 1556|0;
 $options = sp + 1616|0;
 $function = sp + 4128|0;
 $arguments = sp + 2664|0;
 $type79 = sp + 2808|0;
 $type83 = sp + 2824|0;
 $0 = $check_for_else;
 L1: while(1) {
  $1 = HEAP32[30928>>2]|0;
  $2 = ($1|0)==(1);
  if ($2) {
   HEAP32[37056>>2] = 0;
   $3 = (_strcmp(30952,37064)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    _get_lex();
    $5 = HEAP32[30928>>2]|0;
    $6 = ($5|0)!=(1);
    if ($6) {
     _emit_error(37072);
    } else {
     $7 = (_label_search(30952)|0);
     $label = $7;
     $8 = $label;
     $9 = ($8|0)==(0|0);
     if ($9) {
      $10 = (_label_add(30952)|0);
      $label = $10;
     }
     $11 = $label;
     $12 = (($11) + 4|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = $13 | 16;
     HEAP32[$12>>2] = $14;
     $15 = $label;
     $16 = (($15) + 4|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = $17 | 64;
     HEAP32[$16>>2] = $18;
     (_strcpy((33104|0),(37096|0))|0);
     (_strcat((33104|0),(30952|0))|0);
     _generic_jump(33104);
     _get_lex();
    }
   } else {
    $19 = (_strcmp(30952,37104)|0);
    $20 = ($19|0)==(0);
    if ($20) {
     _get_lex();
     $21 = HEAP32[30928>>2]|0;
     $22 = ($21|0)!=(1);
     if ($22) {
      _emit_error(37112);
     } else {
      $23 = (_label_search(30952)|0);
      $label = $23;
      $24 = $label;
      $25 = ($24|0)==(0|0);
      if ($25) {
       $26 = (_label_add(30952)|0);
       $label = $26;
      }
      $27 = $label;
      $28 = (($27) + 4|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = $29 | 16;
      HEAP32[$28>>2] = $30;
      $31 = $label;
      $32 = (($31) + 4|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = $33 | 128;
      HEAP32[$32>>2] = $34;
      (_strcpy((33104|0),(37096|0))|0);
      (_strcat((33104|0),(30952|0))|0);
      _generic_call(33104);
      _get_lex();
     }
    } else {
     $35 = (_strcmp(30952,33008)|0);
     $36 = ($35|0)==(0);
     if ($36) {
      _get_lex();
      _generic_return();
      HEAP32[37056>>2] = 1;
     } else {
      $37 = (_strcmp(30952,37136)|0);
      $38 = ($37|0)==(0);
      if ($38) {
       _get_lex();
       $39 = HEAP32[1688>>2]|0;
       $40 = (($39) + 1)|0;
       HEAP32[1688>>2] = $40;
       $label2 = $39;
       $41 = $label2;
       $42 = (_evaluate_expression(0,0,$41)|0);
       $type1 = $42;
       $43 = HEAP32[30928>>2]|0;
       $44 = ($43|0)==(1);
       if ($44) {
        $45 = (_strcmp(30952,37064)|0);
        $46 = ($45|0)==(0);
        if ($46) {
         _compile_statement(0);
         $block = 0;
        } else {
         label = 23;
        }
       } else {
        label = 23;
       }
       if ((label|0) == 23) {
        label = 0;
        $47 = HEAP32[30928>>2]|0;
        $48 = ($47|0)!=(1);
        if ($48) {
         label = 25;
        } else {
         $49 = (_strcmp(30952,37144)|0);
         $50 = ($49|0)!=(0);
         if ($50) {
          label = 25;
         } else {
          _get_lex();
          $51 = HEAP32[30928>>2]|0;
          $52 = ($51|0)==(0);
          if ($52) {
           $block = 1;
           $53 = (_malloc(28)|0);
           $new_loop = $53;
           $54 = $new_loop;
           $55 = ($54|0)==(0|0);
           if ($55) {
            label = 28;
            break;
           }
           $57 = $new_loop;
           $58 = (($57) + 4|0);
           HEAP32[$58>>2] = 2;
           $59 = $new_loop;
           $60 = (($59) + 8|0);
           HEAP32[$60>>2] = 0;
           $61 = $new_loop;
           $62 = (($61) + 12|0);
           HEAP32[$62>>2] = 0;
           $63 = $new_loop;
           $64 = (($63) + 24|0);
           HEAP8[$64>>0] = 0;
           $65 = $label2;
           $66 = $new_loop;
           $67 = (($66) + 16|0);
           HEAP32[$67>>2] = $65;
           $68 = $new_loop;
           $69 = (($68) + 20|0);
           HEAP32[$69>>2] = 0;
           $70 = HEAP32[37192>>2]|0;
           $71 = $new_loop;
           HEAP32[$71>>2] = $70;
           $72 = $new_loop;
           HEAP32[37192>>2] = $72;
          } else {
           _compile_statement(1);
           $block = 0;
          }
         }
        }
        if ((label|0) == 25) {
         label = 0;
         _emit_error(37152);
         $block = 0;
        }
       }
       $73 = $block;
       $74 = ($73|0)!=(0);
       if ($74) {
        label = 34;
        break;
       }
       $75 = HEAP32[30928>>2]|0;
       $76 = ($75|0)==(1);
       if ($76) {
        $77 = (_strcmp(30952,37200)|0);
        $78 = ($77|0)==(0);
        if ($78) {
         $there_is_else = 1;
         _get_lex();
         $79 = HEAP32[1688>>2]|0;
         $80 = (($79) + 1)|0;
         HEAP32[1688>>2] = $80;
         $label23 = $79;
         $81 = $label23;
         HEAP32[$vararg_buffer1>>2] = $81;
         (_sprintf(33104,34176,$vararg_buffer1)|0);
         _generic_jump(33104);
        } else {
         label = 38;
        }
       } else {
        label = 38;
       }
       if ((label|0) == 38) {
        label = 0;
        $there_is_else = 0;
        $label23 = 0;
       }
       $82 = $label2;
       HEAP32[$vararg_buffer3>>2] = $82;
       (_sprintf(33104,34176,$vararg_buffer3)|0);
       _generic_label(33104);
       $83 = $there_is_else;
       $84 = ($83|0)!=(0);
       if ($84) {
        _compile_statement(1);
        $85 = $label23;
        HEAP32[$vararg_buffer6>>2] = $85;
        (_sprintf(33104,34176,$vararg_buffer6)|0);
        _generic_label(33104);
       }
       HEAP32[37056>>2] = 0;
      } else {
       $86 = (_strcmp(30952,37208)|0);
       $87 = ($86|0)==(0);
       if ($87) {
        _get_lex();
        $88 = HEAP32[37192>>2]|0;
        $89 = ($88|0)==(0|0);
        if ($89) {
         _emit_error(37216);
        } else {
         $90 = HEAP32[37192>>2]|0;
         $91 = (($90) + 4|0);
         $92 = HEAP32[$91>>2]|0;
         $93 = ($92|0)!=(2);
         if ($93) {
          label = 47;
         } else {
          $94 = HEAP32[37192>>2]|0;
          $95 = (($94) + 16|0);
          $96 = HEAP32[$95>>2]|0;
          $97 = ($96|0)==(0);
          if ($97) {
           label = 47;
          } else {
           $98 = HEAP32[37192>>2]|0;
           $99 = (($98) + 24|0);
           $100 = HEAP8[$99>>0]|0;
           $101 = $100 << 24 >> 24;
           $102 = ($101|0)!=(1);
           if ($102) {
            $103 = HEAP32[1688>>2]|0;
            $104 = (($103) + 1)|0;
            HEAP32[1688>>2] = $104;
            $105 = HEAP32[37192>>2]|0;
            $106 = (($105) + 20|0);
            HEAP32[$106>>2] = $103;
            $107 = HEAP32[37192>>2]|0;
            $108 = (($107) + 24|0);
            HEAP8[$108>>0] = 1;
           }
           $109 = HEAP32[37192>>2]|0;
           $110 = (($109) + 20|0);
           $111 = HEAP32[$110>>2]|0;
           HEAP32[$vararg_buffer9>>2] = $111;
           (_sprintf(33104,34176,$vararg_buffer9)|0);
           _generic_jump(33104);
           $112 = HEAP32[37192>>2]|0;
           $113 = (($112) + 16|0);
           $114 = HEAP32[$113>>2]|0;
           HEAP32[$vararg_buffer12>>2] = $114;
           (_sprintf(33104,34176,$vararg_buffer12)|0);
           _generic_label(33104);
           $115 = HEAP32[1688>>2]|0;
           $116 = (($115) + 1)|0;
           HEAP32[1688>>2] = $116;
           $117 = HEAP32[37192>>2]|0;
           $118 = (($117) + 16|0);
           HEAP32[$118>>2] = $115;
           $119 = HEAP32[37192>>2]|0;
           $120 = (($119) + 16|0);
           $121 = HEAP32[$120>>2]|0;
           $122 = (_evaluate_expression(0,0,$121)|0);
           $type4 = $122;
           $123 = HEAP32[30928>>2]|0;
           $124 = ($123|0)==(1);
           do {
            if ($124) {
             $125 = (_strcmp(30952,37064)|0);
             $126 = ($125|0)==(0);
             if (!($126)) {
              label = 53;
              break;
             }
             _compile_statement(0);
            } else {
             label = 53;
            }
           } while(0);
           if ((label|0) == 53) {
            label = 0;
            $127 = HEAP32[30928>>2]|0;
            $128 = ($127|0)!=(1);
            do {
             if ($128) {
              label = 55;
             } else {
              $129 = (_strcmp(30952,37144)|0);
              $130 = ($129|0)!=(0);
              if ($130) {
               label = 55;
               break;
              }
              _get_lex();
             }
            } while(0);
            if ((label|0) == 55) {
             label = 0;
             _emit_error(37264);
            }
           }
          }
         }
         if ((label|0) == 47) {
          label = 0;
          _emit_error(37240);
         }
        }
        $131 = HEAP32[30928>>2]|0;
        $132 = ($131|0)==(0);
        if ($132) {
         label = 61;
         break;
        }
        continue;
       }
       $133 = (_strcmp(30952,37200)|0);
       $134 = ($133|0)==(0);
       if ($134) {
        $135 = $0;
        $136 = ($135|0)!=(0);
        if ($136) {
         label = 65;
         break;
        }
        _get_lex();
        $137 = HEAP32[37192>>2]|0;
        $138 = ($137|0)==(0|0);
        if ($138) {
         _emit_error(37288);
        } else {
         $139 = HEAP32[37192>>2]|0;
         $140 = (($139) + 4|0);
         $141 = HEAP32[$140>>2]|0;
         $142 = ($141|0)!=(2);
         if ($142) {
          _emit_error(37304);
         } else {
          $143 = HEAP32[37192>>2]|0;
          $144 = (($143) + 16|0);
          $145 = HEAP32[$144>>2]|0;
          $146 = ($145|0)==(0);
          if ($146) {
           _emit_error(37320);
          } else {
           $147 = HEAP32[37192>>2]|0;
           $148 = (($147) + 24|0);
           $149 = HEAP8[$148>>0]|0;
           $150 = $149 << 24 >> 24;
           $151 = ($150|0)!=(1);
           if ($151) {
            $152 = HEAP32[1688>>2]|0;
            $153 = (($152) + 1)|0;
            HEAP32[1688>>2] = $153;
            $154 = HEAP32[37192>>2]|0;
            $155 = (($154) + 20|0);
            HEAP32[$155>>2] = $152;
            $156 = HEAP32[37192>>2]|0;
            $157 = (($156) + 24|0);
            HEAP8[$157>>0] = 1;
           }
           $158 = HEAP32[37192>>2]|0;
           $159 = (($158) + 20|0);
           $160 = HEAP32[$159>>2]|0;
           HEAP32[$vararg_buffer15>>2] = $160;
           (_sprintf(33104,34176,$vararg_buffer15)|0);
           _generic_jump(33104);
           $161 = HEAP32[37192>>2]|0;
           $162 = (($161) + 16|0);
           $163 = HEAP32[$162>>2]|0;
           HEAP32[$vararg_buffer18>>2] = $163;
           (_sprintf(33104,34176,$vararg_buffer18)|0);
           _generic_label(33104);
           $164 = HEAP32[37192>>2]|0;
           $165 = (($164) + 16|0);
           HEAP32[$165>>2] = 0;
          }
         }
        }
        $166 = HEAP32[30928>>2]|0;
        $167 = ($166|0)==(0);
        if ($167) {
         label = 78;
         break;
        }
        continue;
       }
       $168 = (_strcmp(30952,37344)|0);
       $169 = ($168|0)==(0);
       if ($169) {
        _get_lex();
        $170 = HEAP32[30928>>2]|0;
        $171 = ($170|0)==(1);
        if ($171) {
         $172 = (_strcmp(30952,37136)|0);
         $173 = ($172|0)==(0);
         if ($173) {
          _get_lex();
          $174 = HEAP32[37192>>2]|0;
          $175 = ($174|0)==(0|0);
          do {
           if ($175) {
            label = 85;
           } else {
            $176 = HEAP32[37192>>2]|0;
            $177 = (($176) + 4|0);
            $178 = HEAP32[$177>>2]|0;
            $179 = ($178|0)!=(2);
            if ($179) {
             label = 85;
             break;
            }
            $180 = HEAP32[37192>>2]|0;
            $181 = (($180) + 24|0);
            $182 = HEAP8[$181>>0]|0;
            $183 = $182 << 24 >> 24;
            $184 = ($183|0)==(1);
            if ($184) {
             $185 = HEAP32[37192>>2]|0;
             $186 = (($185) + 20|0);
             $187 = HEAP32[$186>>2]|0;
             HEAP32[$vararg_buffer21>>2] = $187;
             (_sprintf(33104,34176,$vararg_buffer21)|0);
             _generic_label(33104);
            }
            $188 = HEAP32[37192>>2]|0;
            $189 = (($188) + 16|0);
            $190 = HEAP32[$189>>2]|0;
            $191 = ($190|0)!=(0);
            if ($191) {
             $192 = HEAP32[37192>>2]|0;
             $193 = (($192) + 16|0);
             $194 = HEAP32[$193>>2]|0;
             HEAP32[$vararg_buffer24>>2] = $194;
             (_sprintf(33104,34176,$vararg_buffer24)|0);
             _generic_label(33104);
            }
            $195 = HEAP32[37192>>2]|0;
            $popping = $195;
            $196 = HEAP32[37192>>2]|0;
            $197 = HEAP32[$196>>2]|0;
            HEAP32[37192>>2] = $197;
            $198 = $popping;
            _free($198);
           }
          } while(0);
          if ((label|0) == 85) {
           label = 0;
           _emit_error(37352);
          }
         } else {
          label = 92;
         }
        } else {
         label = 92;
        }
        if ((label|0) == 92) {
         label = 0;
         $199 = HEAP32[30928>>2]|0;
         $200 = ($199|0)==(1);
         if ($200) {
          $201 = (_strcmp(30952,37376)|0);
          $202 = ($201|0)==(0);
          if ($202) {
           _get_lex();
           $203 = HEAP32[37192>>2]|0;
           $204 = ($203|0)==(0|0);
           do {
            if ($204) {
             label = 96;
            } else {
             $205 = HEAP32[37192>>2]|0;
             $206 = (($205) + 4|0);
             $207 = HEAP32[$206>>2]|0;
             $208 = ($207|0)!=(5);
             if ($208) {
              label = 96;
              break;
             }
             $209 = HEAP32[37192>>2]|0;
             $210 = (($209) + 16|0);
             $211 = HEAP32[$210>>2]|0;
             $212 = ($211|0)!=(0);
             if ($212) {
              $213 = HEAP32[37192>>2]|0;
              $214 = (($213) + 16|0);
              $215 = HEAP32[$214>>2]|0;
              HEAP32[$vararg_buffer27>>2] = $215;
              (_sprintf(33104,34176,$vararg_buffer27)|0);
              _generic_label(33104);
             }
             $216 = HEAP32[37192>>2]|0;
             $217 = (($216) + 20|0);
             $218 = HEAP32[$217>>2]|0;
             HEAP32[$vararg_buffer30>>2] = $218;
             (_sprintf(33104,34176,$vararg_buffer30)|0);
             _generic_label(33104);
             $219 = HEAP32[37192>>2]|0;
             $popping = $219;
             $220 = HEAP32[37192>>2]|0;
             $221 = HEAP32[$220>>2]|0;
             HEAP32[37192>>2] = $221;
             $222 = $popping;
             _free($222);
            }
           } while(0);
           if ((label|0) == 96) {
            label = 0;
            _emit_error(37384);
           }
          } else {
           label = 101;
          }
         } else {
          label = 101;
         }
         if ((label|0) == 101) {
          label = 0;
          _emit_error(37408);
         }
        }
       } else {
        $223 = (_strcmp(30952,37424)|0);
        $224 = ($223|0)==(0);
        if ($224) {
         $final = 0;
         $step = 0;
         _get_lex();
         _compile_assignment(0);
         $225 = (_label_search(36032)|0);
         $label5 = $225;
         $226 = $label5;
         $227 = ($226|0)!=(0|0);
         if ($227) {
          $228 = $label5;
          $229 = (($228) + 4|0);
          $230 = HEAP32[$229>>2]|0;
          $231 = $230 & 512;
          $232 = ($231|0)!=(0);
          if ($232) {
           $233 = $label5;
           $234 = (($233) + 4|0);
           $235 = HEAP32[$234>>2]|0;
           $236 = $235 | 2048;
           HEAP32[$234>>2] = $236;
          }
         }
         $237 = (_strlen((36032|0))|0);
         $238 = (28 + ($237))|0;
         $239 = (($238) + 1)|0;
         $240 = (_malloc($239)|0);
         $new_loop6 = $240;
         $241 = $new_loop6;
         $242 = ($241|0)==(0|0);
         if ($242) {
          label = 109;
          break;
         }
         $244 = $new_loop6;
         $245 = (($244) + 24|0);
         (_strcpy(($245|0),(36032|0))|0);
         $246 = HEAP8[36032>>0]|0;
         $247 = $246 << 24 >> 24;
         $248 = ($247|0)==(35);
         if ($248) {
          $type_var = 1;
         } else {
          $type_var = 0;
         }
         $249 = (_signed_search(36032)|0);
         $sign = $249;
         $250 = $sign;
         $251 = ($250|0)!=(0|0);
         do {
          if ($251) {
           $252 = $sign;
           $253 = (($252) + 4|0);
           $254 = HEAP32[$253>>2]|0;
           $255 = ($254|0)==(1);
           if (!($255)) {
            break;
           }
           $256 = $type_var;
           $257 = $256 | 4;
           $type_var = $257;
          }
         } while(0);
         $258 = HEAP32[1688>>2]|0;
         $259 = (($258) + 1)|0;
         HEAP32[1688>>2] = $259;
         $label_loop = $258;
         $260 = $label_loop;
         HEAP32[$vararg_buffer35>>2] = $260;
         (_sprintf(33104,34176,$vararg_buffer35)|0);
         _generic_label(33104);
         $261 = HEAP32[30928>>2]|0;
         $262 = ($261|0)!=(1);
         do {
          if ($262) {
           label = 118;
          } else {
           $263 = (_strcmp(30952,37432)|0);
           $264 = ($263|0)!=(0);
           if ($264) {
            label = 118;
            break;
           }
           _get_lex();
           $265 = (_evaluate_level_0($type7)|0);
           $final = $265;
           $266 = $type_var;
           $267 = $266 & 3;
           $268 = ($267|0)==(1);
           do {
            if ($268) {
             $269 = HEAP32[$type7>>2]|0;
             $270 = $269 & 3;
             $271 = ($270|0)==(0);
             if (!($271)) {
              label = 122;
              break;
             }
             $272 = HEAP32[$type7>>2]|0;
             $273 = $272 & 4;
             $274 = ($273|0)!=(0);
             $275 = $274 ? 42 : 41;
             $276 = $final;
             $277 = (_node_create($275,0,$276,0)|0);
             $final = $277;
            } else {
             label = 122;
            }
           } while(0);
           if ((label|0) == 122) {
            label = 0;
            $278 = $type_var;
            $279 = $278 & 3;
            $280 = ($279|0)==(0);
            do {
             if ($280) {
              $281 = HEAP32[$type7>>2]|0;
              $282 = $281 & 3;
              $283 = ($282|0)==(1);
              if (!($283)) {
               break;
              }
              $284 = $final;
              $285 = (_node_create(43,0,$284,0)|0);
              $final = $285;
             }
            } while(0);
           }
           $positive = 2;
           $286 = $type_var;
           $287 = $286 & 3;
           $288 = ($287|0)==(1);
           $289 = $288 ? 45 : 44;
           $290 = (_node_create($289,0,0,0)|0);
           $var = $290;
           $291 = $new_loop6;
           $292 = (($291) + 24|0);
           $293 = (_label_search($292)|0);
           $294 = $var;
           $295 = (($294) + 16|0);
           HEAP32[$295>>2] = $293;
           $296 = HEAP32[30928>>2]|0;
           $297 = ($296|0)==(1);
           do {
            if ($297) {
             $298 = (_strcmp(30952,37464)|0);
             $299 = ($298|0)==(0);
             if (!($299)) {
              label = 143;
              break;
             }
             _get_lex();
             $300 = HEAP32[30928>>2]|0;
             $301 = ($300|0)==(13);
             if ($301) {
              _get_lex();
              $positive = 0;
             }
             $302 = (_evaluate_level_0($type7)|0);
             $step = $302;
             $303 = $type_var;
             $304 = $303 & 3;
             $305 = ($304|0)==(1);
             do {
              if ($305) {
               $306 = HEAP32[$type7>>2]|0;
               $307 = $306 & 3;
               $308 = ($307|0)==(0);
               if (!($308)) {
                label = 133;
                break;
               }
               $309 = HEAP32[$type7>>2]|0;
               $310 = $309 & 4;
               $311 = ($310|0)!=(0);
               $312 = $311 ? 42 : 41;
               $313 = $step;
               $314 = (_node_create($312,0,$313,0)|0);
               $step = $314;
              } else {
               label = 133;
              }
             } while(0);
             if ((label|0) == 133) {
              label = 0;
              $315 = $type_var;
              $316 = $315 & 3;
              $317 = ($316|0)==(0);
              do {
               if ($317) {
                $318 = HEAP32[$type7>>2]|0;
                $319 = $318 & 3;
                $320 = ($319|0)==(1);
                if (!($320)) {
                 break;
                }
                $321 = $step;
                $322 = (_node_create(43,0,$321,0)|0);
                $step = $322;
               }
              } while(0);
             }
             $323 = $step;
             $324 = HEAP32[$323>>2]|0;
             $325 = ($324|0)==(50);
             if ($325) {
              $326 = $step;
              $327 = (($326) + 4|0);
              $328 = HEAP32[$327>>2]|0;
              $329 = ($328|0)==(1);
              if ($329) {
               label = 141;
              } else {
               label = 139;
              }
             } else {
              label = 139;
             }
             do {
              if ((label|0) == 139) {
               label = 0;
               $330 = $step;
               $331 = HEAP32[$330>>2]|0;
               $332 = ($331|0)==(51);
               if (!($332)) {
                break;
               }
               $333 = $step;
               $334 = (($333) + 4|0);
               $335 = HEAP32[$334>>2]|0;
               $336 = ($335|0)==(1);
               if ($336) {
                label = 141;
               }
              }
             } while(0);
             if ((label|0) == 141) {
              label = 0;
              $337 = $positive;
              $338 = $337 | 1;
              $positive = $338;
             }
            } else {
             label = 143;
            }
           } while(0);
           if ((label|0) == 143) {
            label = 0;
            $339 = $type_var;
            $340 = $339 & 3;
            $341 = ($340|0)==(1);
            $342 = $341 ? 51 : 50;
            $343 = (_node_create($342,1,0,0)|0);
            $step = $343;
            $344 = $positive;
            $345 = $344 | 1;
            $positive = $345;
           }
           $346 = $positive;
           $347 = $346 & 2;
           $348 = ($347|0)==(0);
           if ($348) {
            $349 = $type_var;
            $350 = $349 & 3;
            $351 = ($350|0)==(1);
            $352 = $351 ? 29 : 28;
            $353 = $var;
            $354 = $step;
            $355 = (_node_create($352,0,$353,$354)|0);
            $step = $355;
           } else {
            $356 = $type_var;
            $357 = $356 & 3;
            $358 = ($357|0)==(1);
            $359 = $358 ? 27 : 26;
            $360 = $var;
            $361 = $step;
            $362 = (_node_create($359,0,$360,$361)|0);
            $step = $362;
           }
           $363 = (_node_create(68,0,0,0)|0);
           $var = $363;
           $364 = $new_loop6;
           $365 = (($364) + 24|0);
           $366 = (_label_search($365)|0);
           $367 = $var;
           $368 = (($367) + 16|0);
           HEAP32[$368>>2] = $366;
           $369 = $type_var;
           $370 = $369 & 3;
           $371 = ($370|0)==(1);
           $372 = $371 ? 47 : 46;
           $373 = $step;
           $374 = $var;
           $375 = (_node_create($372,0,$373,$374)|0);
           $step = $375;
           $376 = $type_var;
           $377 = $376 & 3;
           $378 = ($377|0)==(1);
           $379 = $378 ? 45 : 44;
           $380 = (_node_create($379,0,0,0)|0);
           $var = $380;
           $381 = $new_loop6;
           $382 = (($381) + 24|0);
           $383 = (_label_search($382)|0);
           $384 = $var;
           $385 = (($384) + 16|0);
           HEAP32[$385>>2] = $383;
           $386 = $type_var;
           $387 = $386 & 3;
           $388 = ($387|0)==(1);
           if ($388) {
            $389 = $type_var;
            $390 = $389 & 4;
            $391 = ($390|0)!=(0);
            if ($391) {
             $392 = $final;
             $393 = HEAP32[$392>>2]|0;
             $394 = ($393|0)==(51);
             do {
              if ($394) {
               $395 = $final;
               $396 = (($395) + 4|0);
               $397 = HEAP32[$396>>2]|0;
               $398 = ($397|0)==(32768);
               if (!($398)) {
                label = 153;
                break;
               }
               $399 = $positive;
               $400 = $399 & 1;
               $401 = ($400|0)!=(0);
               if (!($401)) {
                label = 153;
                break;
               }
               $402 = $final;
               $403 = (($402) + 4|0);
               HEAP32[$403>>2] = 32767;
               $comparison = 7;
              } else {
               label = 153;
              }
             } while(0);
             if ((label|0) == 153) {
              label = 0;
              $404 = $positive;
              $405 = $404 & 2;
              $406 = ($405|0)!=(0);
              $407 = $406 ? 23 : 19;
              $comparison = $407;
             }
            } else {
             $408 = $final;
             $409 = HEAP32[$408>>2]|0;
             $410 = ($409|0)==(51);
             do {
              if ($410) {
               $411 = $final;
               $412 = (($411) + 4|0);
               $413 = HEAP32[$412>>2]|0;
               $414 = ($413|0)==(0);
               if (!($414)) {
                label = 159;
                break;
               }
               $415 = $positive;
               $416 = $415 & 1;
               $417 = ($416|0)!=(0);
               if (!($417)) {
                label = 159;
                break;
               }
               $418 = $final;
               $419 = (($418) + 4|0);
               HEAP32[$419>>2] = 65535;
               $comparison = 7;
              } else {
               label = 159;
              }
             } while(0);
             if ((label|0) == 159) {
              label = 0;
              $420 = $positive;
              $421 = $420 & 2;
              $422 = ($421|0)!=(0);
              $423 = $422 ? 15 : 11;
              $comparison = $423;
             }
            }
           } else {
            $424 = $type_var;
            $425 = $424 & 4;
            $426 = ($425|0)!=(0);
            if ($426) {
             $427 = $final;
             $428 = HEAP32[$427>>2]|0;
             $429 = ($428|0)==(50);
             do {
              if ($429) {
               $430 = $final;
               $431 = (($430) + 4|0);
               $432 = HEAP32[$431>>2]|0;
               $433 = ($432|0)==(128);
               if (!($433)) {
                label = 167;
                break;
               }
               $434 = $positive;
               $435 = $434 & 1;
               $436 = ($435|0)!=(0);
               if (!($436)) {
                label = 167;
                break;
               }
               $437 = $final;
               $438 = (($437) + 4|0);
               HEAP32[$438>>2] = 127;
               $comparison = 6;
              } else {
               label = 167;
              }
             } while(0);
             if ((label|0) == 167) {
              label = 0;
              $439 = $positive;
              $440 = $439 & 2;
              $441 = ($440|0)!=(0);
              $442 = $441 ? 22 : 18;
              $comparison = $442;
             }
            } else {
             $443 = $final;
             $444 = HEAP32[$443>>2]|0;
             $445 = ($444|0)==(50);
             do {
              if ($445) {
               $446 = $final;
               $447 = (($446) + 4|0);
               $448 = HEAP32[$447>>2]|0;
               $449 = ($448|0)==(0);
               if (!($449)) {
                label = 173;
                break;
               }
               $450 = $positive;
               $451 = $450 & 1;
               $452 = ($451|0)!=(0);
               if (!($452)) {
                label = 173;
                break;
               }
               $453 = $final;
               $454 = (($453) + 4|0);
               HEAP32[$454>>2] = 255;
               $comparison = 6;
              } else {
               label = 173;
              }
             } while(0);
             if ((label|0) == 173) {
              label = 0;
              $455 = $positive;
              $456 = $455 & 2;
              $457 = ($456|0)!=(0);
              $458 = $457 ? 14 : 10;
              $comparison = $458;
             }
            }
           }
           $459 = $comparison;
           $460 = $var;
           $461 = $final;
           $462 = (_node_create($459,0,$460,$461)|0);
           $final = $462;
          }
         } while(0);
         if ((label|0) == 118) {
          label = 0;
          _emit_error(37440);
         }
         $463 = $new_loop6;
         $464 = (($463) + 4|0);
         HEAP32[$464>>2] = 0;
         $465 = $step;
         $466 = $new_loop6;
         $467 = (($466) + 8|0);
         HEAP32[$467>>2] = $465;
         $468 = $final;
         $469 = $new_loop6;
         $470 = (($469) + 12|0);
         HEAP32[$470>>2] = $468;
         $471 = $label_loop;
         $472 = $new_loop6;
         $473 = (($472) + 16|0);
         HEAP32[$473>>2] = $471;
         $474 = $new_loop6;
         $475 = (($474) + 20|0);
         HEAP32[$475>>2] = 0;
         $476 = HEAP32[37192>>2]|0;
         $477 = $new_loop6;
         HEAP32[$477>>2] = $476;
         $478 = $new_loop6;
         HEAP32[37192>>2] = $478;
        } else {
         $479 = (_strcmp(30952,33056)|0);
         $480 = ($479|0)==(0);
         if ($480) {
          _get_lex();
          $481 = HEAP32[37192>>2]|0;
          $482 = ($481|0)==(0|0);
          if ($482) {
           _emit_error(37472);
          } else {
           $483 = HEAP32[37192>>2]|0;
           $484 = (($483) + 12|0);
           $485 = HEAP32[$484>>2]|0;
           $final9 = $485;
           $486 = HEAP32[37192>>2]|0;
           $487 = (($486) + 8|0);
           $488 = HEAP32[$487>>2]|0;
           $step10 = $488;
           $489 = HEAP32[37192>>2]|0;
           $490 = (($489) + 16|0);
           $491 = HEAP32[$490>>2]|0;
           $label_loop11 = $491;
           $492 = HEAP32[37192>>2]|0;
           $493 = (($492) + 20|0);
           $494 = HEAP32[$493>>2]|0;
           $label_exit = $494;
           $495 = HEAP32[37192>>2]|0;
           $496 = (($495) + 4|0);
           $497 = HEAP32[$496>>2]|0;
           $498 = ($497|0)!=(0);
           if ($498) {
            _emit_error(37496);
            $499 = HEAP32[30928>>2]|0;
            $500 = ($499|0)==(1);
            if ($500) {
             _get_lex();
            }
           } else {
            $501 = HEAP32[30928>>2]|0;
            $502 = ($501|0)==(1);
            if ($502) {
             $503 = HEAP32[37192>>2]|0;
             $504 = (($503) + 24|0);
             $505 = (_strcmp(30952,$504)|0);
             $506 = ($505|0)!=(0);
             if ($506) {
              _emit_error(37496);
             }
             _get_lex();
            }
            $507 = $step10;
            _node_label($507);
            $508 = $step10;
            _node_generate($508,0);
            $509 = $final9;
            $510 = ($509|0)!=(0|0);
            if ($510) {
             HEAP32[34168>>2] = 0;
             $511 = $final9;
             _node_label($511);
             $512 = $final9;
             $513 = $label_loop11;
             _node_generate($512,$513);
             $514 = HEAP32[34168>>2]|0;
             $515 = ($514|0)!=(0);
             if (!($515)) {
              _generic_test_8();
              $516 = $label_loop11;
              HEAP32[$vararg_buffer38>>2] = $516;
              (_sprintf(33104,34176,$vararg_buffer38)|0);
              _generic_jump_zero(33104);
             }
             $517 = $final9;
             _node_delete($517);
            }
            $518 = $step10;
            _node_delete($518);
            $519 = $label_exit;
            $520 = ($519|0)!=(0);
            if ($520) {
             $521 = $label_exit;
             HEAP32[$vararg_buffer41>>2] = $521;
             (_sprintf(33104,34176,$vararg_buffer41)|0);
             _generic_label(33104);
            }
            $522 = HEAP32[37192>>2]|0;
            $popping8 = $522;
            $523 = HEAP32[37192>>2]|0;
            $524 = HEAP32[$523>>2]|0;
            HEAP32[37192>>2] = $524;
            $525 = $popping8;
            _free($525);
           }
          }
         } else {
          $526 = (_strcmp(30952,37512)|0);
          $527 = ($526|0)==(0);
          if ($527) {
           _get_lex();
           $528 = HEAP32[1688>>2]|0;
           $529 = (($528) + 1)|0;
           HEAP32[1688>>2] = $529;
           $label_loop12 = $528;
           $530 = HEAP32[1688>>2]|0;
           $531 = (($530) + 1)|0;
           HEAP32[1688>>2] = $531;
           $label_exit13 = $530;
           $532 = $label_loop12;
           HEAP32[$vararg_buffer44>>2] = $532;
           (_sprintf(33104,34176,$vararg_buffer44)|0);
           _generic_label(33104);
           $533 = $label_exit13;
           $534 = (_evaluate_expression(0,0,$533)|0);
           $type14 = $534;
           $535 = (_malloc(28)|0);
           $new_loop15 = $535;
           $536 = $new_loop15;
           $537 = ($536|0)==(0|0);
           if ($537) {
            label = 200;
            break;
           }
           $539 = $new_loop15;
           $540 = (($539) + 4|0);
           HEAP32[$540>>2] = 1;
           $541 = $new_loop15;
           $542 = (($541) + 8|0);
           HEAP32[$542>>2] = 0;
           $543 = $new_loop15;
           $544 = (($543) + 12|0);
           HEAP32[$544>>2] = 0;
           $545 = $new_loop15;
           $546 = (($545) + 24|0);
           HEAP8[$546>>0] = 0;
           $547 = $label_loop12;
           $548 = $new_loop15;
           $549 = (($548) + 16|0);
           HEAP32[$549>>2] = $547;
           $550 = $label_exit13;
           $551 = $new_loop15;
           $552 = (($551) + 20|0);
           HEAP32[$552>>2] = $550;
           $553 = HEAP32[37192>>2]|0;
           $554 = $new_loop15;
           HEAP32[$554>>2] = $553;
           $555 = $new_loop15;
           HEAP32[37192>>2] = $555;
          } else {
           $556 = (_strcmp(30952,33040)|0);
           $557 = ($556|0)==(0);
           if ($557) {
            _get_lex();
            $558 = HEAP32[37192>>2]|0;
            $559 = ($558|0)==(0|0);
            if ($559) {
             _emit_error(37520);
            } else {
             $560 = HEAP32[37192>>2]|0;
             $561 = (($560) + 4|0);
             $562 = HEAP32[$561>>2]|0;
             $563 = ($562|0)!=(1);
             if ($563) {
              _emit_error(37544);
             } else {
              $564 = HEAP32[37192>>2]|0;
              $565 = (($564) + 16|0);
              $566 = HEAP32[$565>>2]|0;
              HEAP32[$vararg_buffer49>>2] = $566;
              (_sprintf(33104,34176,$vararg_buffer49)|0);
              _generic_jump(33104);
              $567 = HEAP32[37192>>2]|0;
              $568 = (($567) + 20|0);
              $569 = HEAP32[$568>>2]|0;
              HEAP32[$vararg_buffer52>>2] = $569;
              (_sprintf(33104,34176,$vararg_buffer52)|0);
              _generic_label(33104);
              $570 = HEAP32[37192>>2]|0;
              $popping16 = $570;
              $571 = HEAP32[37192>>2]|0;
              $572 = HEAP32[$571>>2]|0;
              HEAP32[37192>>2] = $572;
              $573 = $popping16;
              _free($573);
             }
            }
           } else {
            $574 = (_strcmp(30952,33048)|0);
            $575 = ($574|0)==(0);
            if ($575) {
             _get_lex();
             $576 = HEAP32[1688>>2]|0;
             $577 = (($576) + 1)|0;
             HEAP32[1688>>2] = $577;
             $label_loop17 = $576;
             $578 = HEAP32[1688>>2]|0;
             $579 = (($578) + 1)|0;
             HEAP32[1688>>2] = $579;
             $label_exit18 = $578;
             $580 = $label_loop17;
             HEAP32[$vararg_buffer55>>2] = $580;
             (_sprintf(33104,34176,$vararg_buffer55)|0);
             _generic_label(33104);
             $581 = (_malloc(28)|0);
             $new_loop20 = $581;
             $582 = $new_loop20;
             $583 = ($582|0)==(0|0);
             if ($583) {
              label = 212;
              break;
             }
             $585 = HEAP32[30928>>2]|0;
             $586 = ($585|0)==(1);
             do {
              if ($586) {
               $587 = (_strcmp(30952,37512)|0);
               $588 = ($587|0)==(0);
               if (!($588)) {
                label = 216;
                break;
               }
               _get_lex();
               $589 = $label_exit18;
               $590 = (_evaluate_expression(0,0,$589)|0);
               $type19 = $590;
               $591 = $new_loop20;
               $592 = (($591) + 24|0);
               HEAP8[$592>>0] = 49;
               $593 = $new_loop20;
               $594 = (($593) + 4|0);
               HEAP32[$594>>2] = 3;
              } else {
               label = 216;
              }
             } while(0);
             if ((label|0) == 216) {
              label = 0;
              $595 = HEAP32[30928>>2]|0;
              $596 = ($595|0)==(1);
              do {
               if ($596) {
                $597 = (_strcmp(30952,37560)|0);
                $598 = ($597|0)==(0);
                if (!($598)) {
                 label = 219;
                 break;
                }
                $599 = HEAP32[1688>>2]|0;
                $600 = (($599) + 1)|0;
                HEAP32[1688>>2] = $600;
                $label_temp = $599;
                _get_lex();
                $601 = $label_temp;
                $602 = (_evaluate_expression(0,0,$601)|0);
                $type19 = $602;
                $603 = $label_exit18;
                HEAP32[$vararg_buffer60>>2] = $603;
                (_sprintf(33104,34176,$vararg_buffer60)|0);
                _generic_jump(33104);
                $604 = $label_temp;
                HEAP32[$vararg_buffer63>>2] = $604;
                (_sprintf(33104,34176,$vararg_buffer63)|0);
                _generic_label(33104);
                $605 = $new_loop20;
                $606 = (($605) + 24|0);
                HEAP8[$606>>0] = 49;
                $607 = $new_loop20;
                $608 = (($607) + 4|0);
                HEAP32[$608>>2] = 3;
               } else {
                label = 219;
               }
              } while(0);
              if ((label|0) == 219) {
               label = 0;
               $609 = $new_loop20;
               $610 = (($609) + 24|0);
               HEAP8[$610>>0] = 0;
               $611 = $new_loop20;
               $612 = (($611) + 4|0);
               HEAP32[$612>>2] = 4;
              }
             }
             $613 = $new_loop20;
             $614 = (($613) + 8|0);
             HEAP32[$614>>2] = 0;
             $615 = $new_loop20;
             $616 = (($615) + 12|0);
             HEAP32[$616>>2] = 0;
             $617 = $label_loop17;
             $618 = $new_loop20;
             $619 = (($618) + 16|0);
             HEAP32[$619>>2] = $617;
             $620 = $label_exit18;
             $621 = $new_loop20;
             $622 = (($621) + 20|0);
             HEAP32[$622>>2] = $620;
             $623 = HEAP32[37192>>2]|0;
             $624 = $new_loop20;
             HEAP32[$624>>2] = $623;
             $625 = $new_loop20;
             HEAP32[37192>>2] = $625;
            } else {
             $626 = (_strcmp(30952,37568)|0);
             $627 = ($626|0)==(0);
             if ($627) {
              _get_lex();
              $628 = HEAP32[37192>>2]|0;
              $629 = ($628|0)==(0|0);
              if ($629) {
               _emit_error(37576);
              } else {
               $630 = HEAP32[37192>>2]|0;
               $631 = (($630) + 4|0);
               $632 = HEAP32[$631>>2]|0;
               $633 = ($632|0)==(3);
               if ($633) {
                $634 = HEAP32[37192>>2]|0;
                $635 = (($634) + 16|0);
                $636 = HEAP32[$635>>2]|0;
                HEAP32[$vararg_buffer66>>2] = $636;
                (_sprintf(33104,34176,$vararg_buffer66)|0);
                _generic_jump(33104);
                $637 = HEAP32[37192>>2]|0;
                $638 = (($637) + 20|0);
                $639 = HEAP32[$638>>2]|0;
                HEAP32[$vararg_buffer69>>2] = $639;
                (_sprintf(33104,34176,$vararg_buffer69)|0);
                _generic_label(33104);
                $640 = HEAP32[37192>>2]|0;
                $popping21 = $640;
                $641 = HEAP32[37192>>2]|0;
                $642 = HEAP32[$641>>2]|0;
                HEAP32[37192>>2] = $642;
                $643 = $popping21;
                _free($643);
               } else {
                $644 = HEAP32[37192>>2]|0;
                $645 = (($644) + 4|0);
                $646 = HEAP32[$645>>2]|0;
                $647 = ($646|0)==(4);
                if ($647) {
                 $648 = HEAP32[30928>>2]|0;
                 $649 = ($648|0)==(1);
                 do {
                  if ($649) {
                   $650 = (_strcmp(30952,37512)|0);
                   $651 = ($650|0)==(0);
                   if (!($651)) {
                    label = 231;
                    break;
                   }
                   $652 = HEAP32[1688>>2]|0;
                   $653 = (($652) + 1)|0;
                   HEAP32[1688>>2] = $653;
                   $label_temp23 = $652;
                   _get_lex();
                   $654 = $label_temp23;
                   $655 = (_evaluate_expression(0,0,$654)|0);
                   $type22 = $655;
                   $656 = HEAP32[37192>>2]|0;
                   $657 = (($656) + 16|0);
                   $658 = HEAP32[$657>>2]|0;
                   HEAP32[$vararg_buffer72>>2] = $658;
                   (_sprintf(33104,34176,$vararg_buffer72)|0);
                   _generic_jump(33104);
                   $659 = $label_temp23;
                   HEAP32[$vararg_buffer75>>2] = $659;
                   (_sprintf(33104,34176,$vararg_buffer75)|0);
                   _generic_label(33104);
                  } else {
                   label = 231;
                  }
                 } while(0);
                 if ((label|0) == 231) {
                  label = 0;
                  $660 = HEAP32[30928>>2]|0;
                  $661 = ($660|0)==(1);
                  do {
                   if ($661) {
                    $662 = (_strcmp(30952,37560)|0);
                    $663 = ($662|0)==(0);
                    if (!($663)) {
                     label = 234;
                     break;
                    }
                    _get_lex();
                    $664 = HEAP32[37192>>2]|0;
                    $665 = (($664) + 16|0);
                    $666 = HEAP32[$665>>2]|0;
                    $667 = (_evaluate_expression(0,0,$666)|0);
                    $type22 = $667;
                   } else {
                    label = 234;
                   }
                  } while(0);
                  if ((label|0) == 234) {
                   label = 0;
                   _emit_error(37592);
                  }
                 }
                 $668 = HEAP32[37192>>2]|0;
                 $669 = (($668) + 24|0);
                 $670 = HEAP8[$669>>0]|0;
                 $671 = $670 << 24 >> 24;
                 $672 = ($671|0)==(49);
                 if ($672) {
                  $673 = HEAP32[37192>>2]|0;
                  $674 = (($673) + 20|0);
                  $675 = HEAP32[$674>>2]|0;
                  HEAP32[$vararg_buffer78>>2] = $675;
                  (_sprintf(33104,34176,$vararg_buffer78)|0);
                  _generic_label(33104);
                 }
                 $676 = HEAP32[37192>>2]|0;
                 $popping21 = $676;
                 $677 = HEAP32[37192>>2]|0;
                 $678 = HEAP32[$677>>2]|0;
                 HEAP32[37192>>2] = $678;
                 $679 = $popping21;
                 _free($679);
                } else {
                 _emit_error(37616);
                }
               }
              }
             } else {
              $680 = (_strcmp(30952,37376)|0);
              $681 = ($680|0)==(0);
              if ($681) {
               _get_lex();
               $682 = HEAP32[1688>>2]|0;
               $683 = (($682) + 1)|0;
               HEAP32[1688>>2] = $683;
               $label_exit25 = $682;
               $684 = (_malloc(28)|0);
               $new_loop27 = $684;
               $685 = $new_loop27;
               $686 = ($685|0)==(0|0);
               if ($686) {
                label = 245;
                break;
               }
               $688 = $new_loop27;
               $689 = (($688) + 4|0);
               HEAP32[$689>>2] = 5;
               $690 = HEAP32[30928>>2]|0;
               $691 = ($690|0)==(1);
               do {
                if ($691) {
                 $692 = (_strcmp(30952,37632)|0);
                 $693 = ($692|0)==(0);
                 if (!($693)) {
                  label = 254;
                  break;
                 }
                 _get_lex();
                 HEAP32[34168>>2] = 0;
                 $694 = (_evaluate_level_0($type26)|0);
                 $tree = $694;
                 $695 = HEAP32[$type26>>2]|0;
                 $696 = $695 & 4;
                 $697 = ($696|0)!=(0);
                 if ($697) {
                  $698 = HEAP32[$type26>>2]|0;
                  $699 = $698 & 3;
                  $700 = ($699|0)==(0);
                  if ($700) {
                   $701 = $tree;
                   $702 = (_node_create(50,128,0,0)|0);
                   $703 = (_node_create(2,0,$701,$702)|0);
                   $tree = $703;
                  } else {
                   $704 = $tree;
                   $705 = (_node_create(51,32768,0,0)|0);
                   $706 = (_node_create(3,0,$704,$705)|0);
                   $tree = $706;
                  }
                 }
                 $707 = $tree;
                 _node_label($707);
                 $708 = $tree;
                 _node_generate($708,0);
                 $709 = $tree;
                 _node_delete($709);
                 $710 = HEAP32[$type26>>2]|0;
                 $711 = $710 & 7;
                 $712 = $711&255;
                 $713 = $new_loop27;
                 $714 = (($713) + 24|0);
                 HEAP8[$714>>0] = $712;
                } else {
                 label = 254;
                }
               } while(0);
               if ((label|0) == 254) {
                label = 0;
                _emit_error(37640);
                $715 = $new_loop27;
                $716 = (($715) + 24|0);
                HEAP8[$716>>0] = 0;
               }
               $717 = $new_loop27;
               $718 = (($717) + 8|0);
               HEAP32[$718>>2] = 0;
               $719 = $new_loop27;
               $720 = (($719) + 12|0);
               HEAP32[$720>>2] = 0;
               $721 = $new_loop27;
               $722 = (($721) + 16|0);
               HEAP32[$722>>2] = 0;
               $723 = $label_exit25;
               $724 = $new_loop27;
               $725 = (($724) + 20|0);
               HEAP32[$725>>2] = $723;
               $726 = HEAP32[37192>>2]|0;
               $727 = $new_loop27;
               HEAP32[$727>>2] = $726;
               $728 = $new_loop27;
               HEAP32[37192>>2] = $728;
              } else {
               $729 = (_strcmp(30952,37632)|0);
               $730 = ($729|0)==(0);
               if ($730) {
                _get_lex();
                $731 = HEAP32[37192>>2]|0;
                $732 = ($731|0)==(0|0);
                do {
                 if ($732) {
                  label = 259;
                 } else {
                  $733 = HEAP32[37192>>2]|0;
                  $734 = (($733) + 4|0);
                  $735 = HEAP32[$734>>2]|0;
                  $736 = ($735|0)!=(5);
                  if ($736) {
                   label = 259;
                   break;
                  }
                  $737 = HEAP32[37192>>2]|0;
                  $738 = (($737) + 16|0);
                  $739 = HEAP32[$738>>2]|0;
                  $740 = ($739|0)!=(0);
                  if ($740) {
                   $741 = HEAP32[37192>>2]|0;
                   $742 = (($741) + 20|0);
                   $743 = HEAP32[$742>>2]|0;
                   HEAP32[$vararg_buffer83>>2] = $743;
                   (_sprintf(33104,34176,$vararg_buffer83)|0);
                   _generic_jump(33104);
                   $744 = HEAP32[37192>>2]|0;
                   $745 = (($744) + 16|0);
                   $746 = HEAP32[$745>>2]|0;
                   HEAP32[$vararg_buffer86>>2] = $746;
                   (_sprintf(33104,34176,$vararg_buffer86)|0);
                   _generic_label(33104);
                  }
                  $747 = HEAP32[30928>>2]|0;
                  $748 = ($747|0)==(1);
                  do {
                   if ($748) {
                    $749 = (_strcmp(30952,37200)|0);
                    $750 = ($749|0)==(0);
                    if (!($750)) {
                     label = 268;
                     break;
                    }
                    _get_lex();
                    $751 = HEAP32[37192>>2]|0;
                    $752 = (($751) + 16|0);
                    $753 = HEAP32[$752>>2]|0;
                    $754 = ($753|0)==(0);
                    if ($754) {
                     _emit_error(37704);
                    } else {
                     $755 = HEAP32[37192>>2]|0;
                     $756 = (($755) + 16|0);
                     HEAP32[$756>>2] = 0;
                    }
                   } else {
                    label = 268;
                   }
                  } while(0);
                  if ((label|0) == 268) {
                   label = 0;
                   HEAP32[34168>>2] = 0;
                   $757 = (_evaluate_level_0($type29)|0);
                   $tree28 = $757;
                   $758 = HEAP32[37192>>2]|0;
                   $759 = (($758) + 24|0);
                   $760 = HEAP8[$759>>0]|0;
                   $761 = $760 << 24 >> 24;
                   $762 = $761 & 3;
                   $763 = ($762|0)==(0);
                   do {
                    if ($763) {
                     $764 = HEAP32[$type29>>2]|0;
                     $765 = $764 & 3;
                     $766 = ($765|0)==(1);
                     if (!($766)) {
                      label = 271;
                      break;
                     }
                     $767 = $tree28;
                     $768 = (_node_create(43,0,$767,0)|0);
                     $tree28 = $768;
                     HEAP32[$type29>>2] = 0;
                    } else {
                     label = 271;
                    }
                   } while(0);
                   if ((label|0) == 271) {
                    label = 0;
                    $769 = HEAP32[37192>>2]|0;
                    $770 = (($769) + 24|0);
                    $771 = HEAP8[$770>>0]|0;
                    $772 = $771 << 24 >> 24;
                    $773 = $772 & 3;
                    $774 = ($773|0)==(1);
                    do {
                     if ($774) {
                      $775 = HEAP32[$type29>>2]|0;
                      $776 = $775 & 3;
                      $777 = ($776|0)==(0);
                      if (!($777)) {
                       break;
                      }
                      $778 = HEAP32[$type29>>2]|0;
                      $779 = $778 & 4;
                      $780 = ($779|0)!=(0);
                      $781 = $780 ? 42 : 41;
                      $782 = $tree28;
                      $783 = (_node_create($781,0,$782,0)|0);
                      $tree28 = $783;
                      HEAP32[$type29>>2] = 1;
                     }
                    } while(0);
                   }
                   $784 = $tree28;
                   $785 = HEAP32[$784>>2]|0;
                   $786 = ($785|0)!=(50);
                   do {
                    if ($786) {
                     $787 = $tree28;
                     $788 = HEAP32[$787>>2]|0;
                     $789 = ($788|0)!=(51);
                     if (!($789)) {
                      label = 278;
                      break;
                     }
                     _emit_error(37728);
                     $min = 0;
                    } else {
                     label = 278;
                    }
                   } while(0);
                   if ((label|0) == 278) {
                    label = 0;
                    $790 = $tree28;
                    $791 = (($790) + 4|0);
                    $792 = HEAP32[$791>>2]|0;
                    $min = $792;
                   }
                   $793 = $tree28;
                   _node_delete($793);
                   $794 = HEAP32[30928>>2]|0;
                   $795 = ($794|0)==(1);
                   do {
                    if ($795) {
                     $796 = (_strcmp(30952,37432)|0);
                     $797 = ($796|0)==(0);
                     if (!($797)) {
                      label = 293;
                      break;
                     }
                     _get_lex();
                     HEAP32[34168>>2] = 0;
                     $798 = (_evaluate_level_0($type29)|0);
                     $tree28 = $798;
                     $799 = HEAP32[37192>>2]|0;
                     $800 = (($799) + 24|0);
                     $801 = HEAP8[$800>>0]|0;
                     $802 = $801 << 24 >> 24;
                     $803 = ($802|0)==(0);
                     do {
                      if ($803) {
                       $804 = HEAP32[$type29>>2]|0;
                       $805 = $804 & 3;
                       $806 = ($805|0)==(1);
                       if (!($806)) {
                        label = 284;
                        break;
                       }
                       $807 = $tree28;
                       $808 = (_node_create(43,0,$807,0)|0);
                       $tree28 = $808;
                       HEAP32[$type29>>2] = 0;
                      } else {
                       label = 284;
                      }
                     } while(0);
                     if ((label|0) == 284) {
                      label = 0;
                      $809 = HEAP32[37192>>2]|0;
                      $810 = (($809) + 24|0);
                      $811 = HEAP8[$810>>0]|0;
                      $812 = $811 << 24 >> 24;
                      $813 = ($812|0)==(1);
                      do {
                       if ($813) {
                        $814 = HEAP32[$type29>>2]|0;
                        $815 = $814 & 3;
                        $816 = ($815|0)==(0);
                        if (!($816)) {
                         break;
                        }
                        $817 = HEAP32[$type29>>2]|0;
                        $818 = $817 & 4;
                        $819 = ($818|0)!=(0);
                        $820 = $819 ? 42 : 41;
                        $821 = $tree28;
                        $822 = (_node_create($820,0,$821,0)|0);
                        $tree28 = $822;
                        HEAP32[$type29>>2] = 1;
                       }
                      } while(0);
                     }
                     $823 = $tree28;
                     $824 = HEAP32[$823>>2]|0;
                     $825 = ($824|0)!=(50);
                     do {
                      if ($825) {
                       $826 = $tree28;
                       $827 = HEAP32[$826>>2]|0;
                       $828 = ($827|0)!=(51);
                       if (!($828)) {
                        label = 291;
                        break;
                       }
                       _emit_error(37768);
                      } else {
                       label = 291;
                      }
                     } while(0);
                     if ((label|0) == 291) {
                      label = 0;
                      $829 = $tree28;
                      $830 = (($829) + 4|0);
                      $831 = HEAP32[$830>>2]|0;
                      $max = $831;
                     }
                     $832 = $tree28;
                     _node_delete($832);
                    } else {
                     label = 293;
                    }
                   } while(0);
                   if ((label|0) == 293) {
                    label = 0;
                    $833 = $min;
                    $max = $833;
                   }
                   $834 = HEAP32[37192>>2]|0;
                   $835 = (($834) + 24|0);
                   $836 = HEAP8[$835>>0]|0;
                   $837 = $836 << 24 >> 24;
                   $838 = ($837|0)==(4);
                   if ($838) {
                    $839 = $min;
                    $840 = $839 ^ 128;
                    $min = $840;
                    $841 = $max;
                    $842 = $841 ^ 128;
                    $max = $842;
                   } else {
                    $843 = HEAP32[37192>>2]|0;
                    $844 = (($843) + 24|0);
                    $845 = HEAP8[$844>>0]|0;
                    $846 = $845 << 24 >> 24;
                    $847 = ($846|0)==(5);
                    if ($847) {
                     $848 = $min;
                     $849 = $848 ^ 32768;
                     $min = $849;
                     $850 = $max;
                     $851 = $850 ^ 32768;
                     $max = $851;
                    }
                   }
                   $852 = $min;
                   $853 = $max;
                   $854 = ($852|0)>($853|0);
                   if ($854) {
                    _emit_error(37808);
                   }
                   $855 = HEAP32[1688>>2]|0;
                   $856 = (($855) + 1)|0;
                   HEAP32[1688>>2] = $856;
                   $857 = HEAP32[37192>>2]|0;
                   $858 = (($857) + 16|0);
                   HEAP32[$858>>2] = $855;
                   $859 = HEAP32[37192>>2]|0;
                   $860 = (($859) + 16|0);
                   $861 = HEAP32[$860>>2]|0;
                   HEAP32[$vararg_buffer89>>2] = $861;
                   (_sprintf(33104,34176,$vararg_buffer89)|0);
                   $862 = HEAP32[$type29>>2]|0;
                   $863 = ($862|0)==(0);
                   if ($863) {
                    $864 = $min;
                    $865 = $max;
                    _generic_comparison_8bit($864,$865,33104);
                   } else {
                    $866 = $min;
                    $867 = $max;
                    _generic_comparison_16bit($866,$867,33104);
                   }
                  }
                 }
                } while(0);
                if ((label|0) == 259) {
                 label = 0;
                 _emit_error(37672);
                }
               } else {
                $868 = (_strcmp(30952,37856)|0);
                $869 = ($868|0)==(0);
                if ($869) {
                 _get_lex();
                 $870 = HEAP32[37192>>2]|0;
                 $loop_explorer = $870;
                 while(1) {
                  $871 = $loop_explorer;
                  $872 = ($871|0)!=(0|0);
                  if (!($872)) {
                   break;
                  }
                  $873 = $loop_explorer;
                  $874 = (($873) + 4|0);
                  $875 = HEAP32[$874>>2]|0;
                  $876 = ($875|0)!=(2);
                  if ($876) {
                   label = 311;
                   break;
                  }
                  $877 = $loop_explorer;
                  $878 = HEAP32[$877>>2]|0;
                  $loop_explorer = $878;
                 }
                 if ((label|0) == 311) {
                  label = 0;
                 }
                 $879 = HEAP32[37192>>2]|0;
                 $880 = ($879|0)==(0|0);
                 do {
                  if ($880) {
                   label = 315;
                  } else {
                   $881 = $loop_explorer;
                   $882 = ($881|0)==(0|0);
                   if ($882) {
                    label = 315;
                    break;
                   }
                   $883 = HEAP32[30928>>2]|0;
                   $884 = ($883|0)!=(1);
                   if ($884) {
                    _emit_error(37880);
                   } else {
                    $885 = (_strcmp(30952,37424)|0);
                    $886 = ($885|0)==(0);
                    if ($886) {
                     _get_lex();
                     $887 = $loop_explorer;
                     $888 = (($887) + 4|0);
                     $889 = HEAP32[$888>>2]|0;
                     $890 = ($889|0)!=(0);
                     if ($890) {
                      _emit_error(37920);
                     } else {
                      $891 = $loop_explorer;
                      $892 = (($891) + 20|0);
                      $893 = HEAP32[$892>>2]|0;
                      $894 = ($893|0)==(0);
                      if ($894) {
                       $895 = HEAP32[1688>>2]|0;
                       $896 = (($895) + 1)|0;
                       HEAP32[1688>>2] = $896;
                       $897 = $loop_explorer;
                       $898 = (($897) + 20|0);
                       HEAP32[$898>>2] = $895;
                      }
                      $899 = $loop_explorer;
                      $900 = (($899) + 20|0);
                      $901 = HEAP32[$900>>2]|0;
                      HEAP32[$vararg_buffer92>>2] = $901;
                      (_sprintf(33104,34176,$vararg_buffer92)|0);
                      _generic_jump(33104);
                     }
                    } else {
                     $902 = (_strcmp(30952,37512)|0);
                     $903 = ($902|0)==(0);
                     if ($903) {
                      _get_lex();
                      $904 = $loop_explorer;
                      $905 = (($904) + 4|0);
                      $906 = HEAP32[$905>>2]|0;
                      $907 = ($906|0)!=(1);
                      if ($907) {
                       _emit_error(37944);
                      } else {
                       $908 = $loop_explorer;
                       $909 = (($908) + 20|0);
                       $910 = HEAP32[$909>>2]|0;
                       HEAP32[$vararg_buffer95>>2] = $910;
                       (_sprintf(33104,34176,$vararg_buffer95)|0);
                       _generic_jump(33104);
                      }
                     } else {
                      $911 = (_strcmp(30952,33048)|0);
                      $912 = ($911|0)==(0);
                      if ($912) {
                       _get_lex();
                       $913 = $loop_explorer;
                       $914 = (($913) + 4|0);
                       $915 = HEAP32[$914>>2]|0;
                       $916 = ($915|0)!=(3);
                       do {
                        if ($916) {
                         $917 = $loop_explorer;
                         $918 = (($917) + 4|0);
                         $919 = HEAP32[$918>>2]|0;
                         $920 = ($919|0)!=(4);
                         if (!($920)) {
                          label = 334;
                          break;
                         }
                         _emit_error(37976);
                        } else {
                         label = 334;
                        }
                       } while(0);
                       if ((label|0) == 334) {
                        label = 0;
                        $921 = $loop_explorer;
                        $922 = (($921) + 24|0);
                        HEAP8[$922>>0] = 49;
                        $923 = $loop_explorer;
                        $924 = (($923) + 20|0);
                        $925 = HEAP32[$924>>2]|0;
                        HEAP32[$vararg_buffer98>>2] = $925;
                        (_sprintf(33104,34176,$vararg_buffer98)|0);
                        _generic_jump(33104);
                       }
                      } else {
                       $926 = (_strcmp(30952,37376)|0);
                       $927 = ($926|0)==(0);
                       if ($927) {
                        _get_lex();
                        $928 = $loop_explorer;
                        $929 = (($928) + 4|0);
                        $930 = HEAP32[$929>>2]|0;
                        $931 = ($930|0)!=(5);
                        if ($931) {
                         _emit_error(38000);
                        } else {
                         $932 = $loop_explorer;
                         $933 = (($932) + 20|0);
                         $934 = HEAP32[$933>>2]|0;
                         HEAP32[$vararg_buffer101>>2] = $934;
                         (_sprintf(33104,34176,$vararg_buffer101)|0);
                         _generic_jump(33104);
                        }
                       } else {
                        _emit_error(38032);
                        _get_lex();
                       }
                      }
                     }
                    }
                   }
                  }
                 } while(0);
                 if ((label|0) == 315) {
                  label = 0;
                  _emit_error(37864);
                 }
                } else {
                 $935 = (_strcmp(30952,38072)|0);
                 $936 = ($935|0)==(0);
                 if ($936) {
                  _get_lex();
                  $937 = (_evaluate_save_expression(1,1)|0);
                  $address = $937;
                  $938 = HEAP32[30928>>2]|0;
                  $939 = ($938|0)==(21);
                  if ($939) {
                   _get_lex();
                  } else {
                   _emit_error(38080);
                  }
                  $940 = (_evaluate_save_expression(1,0)|0);
                  $value = $940;
                  $941 = HEAP32[35640>>2]|0;
                  $942 = ($941|0)==(1);
                  if ($942) {
                   $943 = $value;
                   _node_generate($943,0);
                   _cpu6502_noop(38104);
                   $944 = $address;
                   _node_generate($944,0);
                   _cpu6502_1op(38112,38120);
                   _cpu6502_1op(38128,38136);
                   _cpu6502_noop(38144);
                   _cpu6502_1op(38152,38160);
                   _cpu6502_1op(38112,38168);
                  } else {
                   $945 = HEAP32[35640>>2]|0;
                   $946 = ($945|0)==(2);
                   if ($946) {
                    $947 = $value;
                    _node_generate($947,0);
                    _cpu9900_1op(38184,38192);
                    _cpu9900_2op(38200,38208,38216);
                    $948 = $address;
                    _node_generate($948,0);
                    _cpu9900_2op(38200,38224,38232);
                    _cpu9900_2op(38240,38232,38248);
                   } else {
                    $949 = $value;
                    $950 = (($949) + 20|0);
                    $951 = HEAP32[$950>>2]|0;
                    $952 = $951 & 192;
                    $953 = ($952|0)==(0);
                    if ($953) {
                     $954 = $address;
                     _node_generate($954,0);
                     $955 = $value;
                     _node_generate($955,0);
                    } else {
                     $956 = $address;
                     $957 = (($956) + 20|0);
                     $958 = HEAP32[$957>>2]|0;
                     $959 = $958 & 1;
                     $960 = ($959|0)==(0);
                     if ($960) {
                      $961 = $value;
                      _node_generate($961,0);
                      $962 = $address;
                      _node_generate($962,0);
                     } else {
                      $963 = $address;
                      _node_generate($963,0);
                      _cpuz80_1op(38256,38264);
                      $964 = $value;
                      _node_generate($964,0);
                      _cpuz80_1op(38272,38264);
                     }
                    }
                    _cpuz80_2op(38280,38288,38296);
                   }
                  }
                  $965 = $address;
                  _node_delete($965);
                  $966 = $value;
                  _node_delete($966);
                 } else {
                  $967 = (_strcmp(30952,38304)|0);
                  $968 = ($967|0)==(0);
                  if ($968) {
                   _get_lex();
                   $969 = (_evaluate_save_expression(1,1)|0);
                   $address30 = $969;
                   $970 = HEAP32[30928>>2]|0;
                   $971 = ($970|0)==(21);
                   if ($971) {
                    _get_lex();
                   } else {
                    _emit_error(38312);
                   }
                   $972 = (_evaluate_save_expression(1,0)|0);
                   $value31 = $972;
                   $973 = HEAP32[35640>>2]|0;
                   $974 = ($973|0)==(1);
                   if ($974) {
                    $975 = $value31;
                    _node_generate($975,0);
                    _cpu6502_noop(38104);
                    $976 = $address30;
                    _node_generate($976,0);
                    _cpu6502_1op(38112,38120);
                    _cpu6502_1op(38128,38136);
                    _cpu6502_noop(38144);
                    _cpu6502_noop(38336);
                    _cpu6502_1op(38344,38120);
                    _generic_interrupt_disable();
                    _cpu6502_1op(38352,38360);
                    _generic_interrupt_enable();
                   } else {
                    $977 = HEAP32[35640>>2]|0;
                    $978 = ($977|0)==(2);
                    if ($978) {
                     $979 = $value31;
                     _node_generate($979,0);
                     _cpu9900_1op(38184,38192);
                     _cpu9900_2op(38200,38208,38216);
                     $980 = $address30;
                     _node_generate($980,0);
                     _cpu9900_2op(38200,38224,38368);
                     _generic_interrupt_disable();
                     _cpu9900_1op(38376,38384);
                     _cpu9900_1op(38392,38360);
                     _generic_interrupt_enable();
                    } else {
                     $981 = $value31;
                     $982 = (($981) + 20|0);
                     $983 = HEAP32[$982>>2]|0;
                     $984 = $983 & 192;
                     $985 = ($984|0)==(0);
                     if ($985) {
                      $986 = $address30;
                      _node_generate($986,0);
                      $987 = $value31;
                      _node_generate($987,0);
                     } else {
                      $988 = $address30;
                      $989 = (($988) + 20|0);
                      $990 = HEAP32[$989>>2]|0;
                      $991 = $990 & 1;
                      $992 = ($991|0)==(0);
                      if ($992) {
                       $993 = $value31;
                       _node_generate($993,0);
                       $994 = $address30;
                       _node_generate($994,0);
                      } else {
                       $995 = $address30;
                       _node_generate($995,0);
                       _cpuz80_1op(38256,38264);
                       $996 = $value31;
                       _node_generate($996,0);
                       _cpuz80_1op(38272,38264);
                      }
                     }
                     _generic_interrupt_disable();
                     _cpuz80_1op(38400,38360);
                     _generic_interrupt_enable();
                    }
                   }
                   $997 = $address30;
                   _node_delete($997);
                   $998 = $value31;
                   _node_delete($998);
                  } else {
                   $999 = (_strcmp(30952,38408)|0);
                   $1000 = ($999|0)==(0);
                   if ($1000) {
                    $1001 = HEAP32[29872>>2]|0;
                    HEAP32[29864>>2] = $1001;
                    _get_lex();
                   } else {
                    $1002 = (_strcmp(30952,33016)|0);
                    $1003 = ($1002|0)==(0);
                    if ($1003) {
                     _get_lex();
                     _generic_call(38416);
                    } else {
                     $1004 = (_strcmp(30952,33024)|0);
                     $1005 = ($1004|0)==(0);
                     if ($1005) {
                      _get_lex();
                      $1006 = HEAP32[2808>>2]|0;
                      $1007 = ($1006|0)==(5);
                      do {
                       if ($1007) {
                        label = 391;
                       } else {
                        $1008 = HEAP32[2808>>2]|0;
                        $1009 = ($1008|0)==(7);
                        if ($1009) {
                         label = 391;
                         break;
                        }
                        $1010 = HEAP32[2808>>2]|0;
                        $1011 = ($1010|0)==(9);
                        if ($1011) {
                         label = 391;
                         break;
                        }
                        $1012 = HEAP32[2808>>2]|0;
                        $1013 = ($1012|0)==(11);
                        if ($1013) {
                         label = 391;
                         break;
                        }
                        _cpuz80_noop(38432);
                       }
                      } while(0);
                      if ((label|0) == 391) {
                       label = 0;
                       _generic_call(38424);
                      }
                     } else {
                      $1014 = (_strcmp(30952,33032)|0);
                      $1015 = ($1014|0)==(0);
                      if ($1015) {
                       _get_lex();
                       $1016 = HEAP32[30928>>2]|0;
                       $1017 = ($1016|0)!=(1);
                       if ($1017) {
                        _emit_error(38440);
                       } else {
                        $1018 = (_label_search(30952)|0);
                        $label = $1018;
                        $1019 = $label;
                        $1020 = ($1019|0)==(0|0);
                        if ($1020) {
                         $1021 = (_label_add(30952)|0);
                         $label = $1021;
                        }
                        $1022 = HEAP32[35640>>2]|0;
                        $1023 = ($1022|0)==(1);
                        if ($1023) {
                         HEAP32[$vararg_buffer104>>2] = 30952;
                         (_sprintf(33104,38464,$vararg_buffer104)|0);
                         _cpu6502_1op(38344,33104);
                         (_strcat((33104|0),(38472|0))|0);
                         _cpu6502_1op(38152,33104);
                         _cpu6502_1op(38112,38480);
                         _cpu6502_1op(38128,38496);
                        } else {
                         $1024 = HEAP32[35640>>2]|0;
                         $1025 = ($1024|0)==(2);
                         if ($1025) {
                          HEAP32[$vararg_buffer107>>2] = 30952;
                          (_sprintf(33104,38512,$vararg_buffer107)|0);
                          _cpu9900_2op(38520,38208,33104);
                          _cpu9900_2op(38200,38208,38528);
                         } else {
                          HEAP32[$vararg_buffer110>>2] = 30952;
                          (_sprintf(33104,38512,$vararg_buffer110)|0);
                          _cpuz80_2op(38280,38264,33104);
                          _cpuz80_2op(38280,38544,38264);
                         }
                        }
                        _get_lex();
                       }
                      } else {
                       $1026 = (_strcmp(30952,38560)|0);
                       $1027 = ($1026|0)==(0);
                       if ($1027) {
                        _get_lex();
                        $1028 = HEAP32[30928>>2]|0;
                        $1029 = ($1028|0)==(1);
                        do {
                         if ($1029) {
                          $1030 = (_strcmp(30952,38568)|0);
                          $1031 = ($1030|0)==(0);
                          if (!($1031)) {
                           label = 411;
                           break;
                          }
                          _get_lex();
                          $c = 2;
                         } else {
                          label = 411;
                         }
                        } while(0);
                        if ((label|0) == 411) {
                         label = 0;
                         $c = 1;
                        }
                        while(1) {
                         $1032 = $c;
                         _compile_assignment($1032);
                         $1033 = HEAP32[30928>>2]|0;
                         $1034 = ($1033|0)!=(21);
                         if ($1034) {
                          break;
                         }
                         _get_lex();
                        }
                       } else {
                        $1035 = (_strcmp(30952,38576)|0);
                        $1036 = ($1035|0)==(0);
                        if ($1036) {
                         $c33 = 0;
                         _generic_dump();
                         _get_lex();
                         $1037 = HEAP32[30928>>2]|0;
                         $1038 = ($1037|0)==(1);
                         do {
                          if ($1038) {
                           $1039 = (_strcmp(30952,38568)|0);
                           $1040 = ($1039|0)==(0);
                           if (!($1040)) {
                            label = 462;
                            break;
                           }
                           _get_lex();
                           while(1) {
                            $1041 = HEAP32[30928>>2]|0;
                            $1042 = ($1041|0)==(2);
                            if ($1042) {
                             $d = 0;
                             while(1) {
                              $1043 = $d;
                              $1044 = HEAP32[30944>>2]|0;
                              $1045 = ($1043|0)<($1044|0);
                              if (!($1045)) {
                               break;
                              }
                              $1046 = $c33;
                              $1047 = ($1046|0)==(0);
                              if ($1047) {
                               $1048 = HEAP32[35640>>2]|0;
                               $1049 = ($1048|0)==(2);
                               if ($1049) {
                                $1050 = HEAP32[2824>>2]|0;
                                (_fprintf(($1050|0),(38584|0),($vararg_buffer113|0))|0);
                               } else {
                                $1051 = HEAP32[2824>>2]|0;
                                (_fprintf(($1051|0),(38592|0),($vararg_buffer115|0))|0);
                               }
                              } else {
                               $1052 = HEAP32[2824>>2]|0;
                               (_fprintf(($1052|0),(38600|0),($vararg_buffer117|0))|0);
                              }
                              $1053 = HEAP32[35640>>2]|0;
                              $1054 = ($1053|0)==(2);
                              if ($1054) {
                               $1055 = HEAP32[2824>>2]|0;
                               $1056 = $d;
                               $1057 = (30952 + ($1056)|0);
                               $1058 = HEAP8[$1057>>0]|0;
                               $1059 = $1058 << 24 >> 24;
                               $1060 = $1059 & 255;
                               HEAP32[$vararg_buffer119>>2] = $1060;
                               (_fprintf(($1055|0),(38608|0),($vararg_buffer119|0))|0);
                              } else {
                               $1061 = HEAP32[2824>>2]|0;
                               $1062 = $d;
                               $1063 = (30952 + ($1062)|0);
                               $1064 = HEAP8[$1063>>0]|0;
                               $1065 = $1064 << 24 >> 24;
                               $1066 = $1065 & 255;
                               HEAP32[$vararg_buffer122>>2] = $1066;
                               (_fprintf(($1061|0),(38616|0),($vararg_buffer122|0))|0);
                              }
                              $1067 = $c33;
                              $1068 = ($1067|0)==(7);
                              if ($1068) {
                               $1069 = HEAP32[2824>>2]|0;
                               (_fprintf(($1069|0),(38624|0),($vararg_buffer125|0))|0);
                               $c33 = 0;
                              } else {
                               $1070 = $c33;
                               $1071 = (($1070) + 1)|0;
                               $c33 = $1071;
                              }
                              $1072 = $d;
                              $1073 = (($1072) + 1)|0;
                              $d = $1073;
                             }
                             _get_lex();
                            } else {
                             $1074 = (_evaluate_level_0($type)|0);
                             $tree32 = $1074;
                             $1075 = $tree32;
                             $1076 = HEAP32[$1075>>2]|0;
                             $1077 = ($1076|0)!=(50);
                             do {
                              if ($1077) {
                               $1078 = $tree32;
                               $1079 = HEAP32[$1078>>2]|0;
                               $1080 = ($1079|0)!=(51);
                               if (!($1080)) {
                                label = 442;
                                break;
                               }
                               _emit_error(38632);
                              } else {
                               label = 442;
                              }
                             } while(0);
                             if ((label|0) == 442) {
                              label = 0;
                              $1081 = $tree32;
                              $1082 = (($1081) + 4|0);
                              $1083 = HEAP32[$1082>>2]|0;
                              HEAP32[30936>>2] = $1083;
                             }
                             $1084 = $tree32;
                             _node_delete($1084);
                             $tree32 = 0;
                             $1085 = $c33;
                             $1086 = ($1085|0)==(0);
                             if ($1086) {
                              $1087 = HEAP32[35640>>2]|0;
                              $1088 = ($1087|0)==(2);
                              if ($1088) {
                               $1089 = HEAP32[2824>>2]|0;
                               (_fprintf(($1089|0),(38584|0),($vararg_buffer127|0))|0);
                              } else {
                               $1090 = HEAP32[2824>>2]|0;
                               (_fprintf(($1090|0),(38592|0),($vararg_buffer129|0))|0);
                              }
                             } else {
                              $1091 = HEAP32[2824>>2]|0;
                              (_fprintf(($1091|0),(38600|0),($vararg_buffer131|0))|0);
                             }
                             $1092 = HEAP32[35640>>2]|0;
                             $1093 = ($1092|0)==(2);
                             if ($1093) {
                              $1094 = HEAP32[2824>>2]|0;
                              $1095 = HEAP32[30936>>2]|0;
                              $1096 = $1095 & 255;
                              HEAP32[$vararg_buffer133>>2] = $1096;
                              (_fprintf(($1094|0),(38608|0),($vararg_buffer133|0))|0);
                             } else {
                              $1097 = HEAP32[2824>>2]|0;
                              $1098 = HEAP32[30936>>2]|0;
                              $1099 = $1098 & 255;
                              HEAP32[$vararg_buffer136>>2] = $1099;
                              (_fprintf(($1097|0),(38616|0),($vararg_buffer136|0))|0);
                             }
                             $1100 = $c33;
                             $1101 = ($1100|0)==(7);
                             if ($1101) {
                              $1102 = HEAP32[2824>>2]|0;
                              (_fprintf(($1102|0),(38624|0),($vararg_buffer139|0))|0);
                              $c33 = 0;
                             } else {
                              $1103 = $c33;
                              $1104 = (($1103) + 1)|0;
                              $c33 = $1104;
                             }
                            }
                            $1105 = HEAP32[30928>>2]|0;
                            $1106 = ($1105|0)!=(21);
                            if ($1106) {
                             break;
                            }
                            _get_lex();
                           }
                           $1107 = $c33;
                           $1108 = ($1107|0)!=(0);
                           if ($1108) {
                            $1109 = HEAP32[2824>>2]|0;
                            (_fprintf(($1109|0),(38624|0),($vararg_buffer141|0))|0);
                           }
                          } else {
                           label = 462;
                          }
                         } while(0);
                         if ((label|0) == 462) {
                          label = 0;
                          while(1) {
                           $1110 = HEAP32[30928>>2]|0;
                           $1111 = ($1110|0)==(1);
                           do {
                            if ($1111) {
                             $1112 = (_strcmp(30952,35072)|0);
                             $1113 = ($1112|0)==(0);
                             if (!($1113)) {
                              label = 536;
                              break;
                             }
                             _get_lex();
                             $1114 = HEAP32[30928>>2]|0;
                             $1115 = ($1114|0)!=(1);
                             if ($1115) {
                              _emit_error(35080);
                             } else {
                              $1116 = (_lex_sneak_peek()|0);
                              $1117 = ($1116|0)==(40);
                              if ($1117) {
                               $1118 = (_array_search(30952)|0);
                               $label35 = $1118;
                               $1119 = $label35;
                               $1120 = ($1119|0)!=(0|0);
                               if ($1120) {
                               } else {
                                $1121 = (_label_search(30952)|0);
                                $label35 = $1121;
                                $1122 = $label35;
                                $1123 = ($1122|0)!=(0|0);
                                if ($1123) {
                                 $1124 = $label35;
                                 $1125 = (($1124) + 4|0);
                                 $1126 = HEAP32[$1125>>2]|0;
                                 $1127 = $1126 & 512;
                                 $1128 = ($1127|0)!=(0);
                                 if ($1128) {
                                  _emit_error(35120);
                                 }
                                } else {
                                 $1129 = (_label_add(30952)|0);
                                 $label35 = $1129;
                                }
                               }
                               _get_lex();
                               $1130 = HEAP32[30928>>2]|0;
                               $1131 = ($1130|0)!=(17);
                               if ($1131) {
                                _emit_error(35152);
                               } else {
                                _get_lex();
                               }
                               $1132 = (_evaluate_level_0($type2)|0);
                               $tree34 = $1132;
                               $1133 = $tree34;
                               $1134 = HEAP32[$1133>>2]|0;
                               $1135 = ($1134|0)!=(50);
                               do {
                                if ($1135) {
                                 $1136 = $tree34;
                                 $1137 = HEAP32[$1136>>2]|0;
                                 $1138 = ($1137|0)!=(51);
                                 if (!($1138)) {
                                  label = 482;
                                  break;
                                 }
                                 $index = 0;
                                 _emit_error(38672);
                                } else {
                                 label = 482;
                                }
                               } while(0);
                               if ((label|0) == 482) {
                                label = 0;
                                $1139 = $tree34;
                                $1140 = (($1139) + 4|0);
                                $1141 = HEAP32[$1140>>2]|0;
                                $index = $1141;
                               }
                               $1142 = HEAP32[30928>>2]|0;
                               $1143 = ($1142|0)!=(18);
                               if ($1143) {
                                _emit_error(35200);
                               } else {
                                _get_lex();
                               }
                               $1144 = $c33;
                               $1145 = ($1144|0)==(0);
                               if ($1145) {
                                $1146 = HEAP32[35640>>2]|0;
                                $1147 = ($1146|0)==(2);
                                if ($1147) {
                                 $1148 = HEAP32[2824>>2]|0;
                                 (_fprintf(($1148|0),(38720|0),($vararg_buffer143|0))|0);
                                } else {
                                 $1149 = HEAP32[2824>>2]|0;
                                 (_fprintf(($1149|0),(38728|0),($vararg_buffer145|0))|0);
                                }
                               } else {
                                $1150 = HEAP32[2824>>2]|0;
                                (_fprintf(($1150|0),(38600|0),($vararg_buffer147|0))|0);
                               }
                               $1151 = $label35;
                               $1152 = (($1151) + 12|0);
                               (_strcpy((36032|0),($1152|0))|0);
                               $1153 = HEAP32[35640>>2]|0;
                               $1154 = ($1153|0)==(2);
                               if ($1154) {
                                $p = 36032;
                                while(1) {
                                 $1155 = $p;
                                 $1156 = HEAP8[$1155>>0]|0;
                                 $1157 = ($1156<<24>>24)!=(0);
                                 if (!($1157)) {
                                  break;
                                 }
                                 $1158 = $p;
                                 $1159 = HEAP8[$1158>>0]|0;
                                 $1160 = $1159 << 24 >> 24;
                                 $1161 = ($1160|0)==(35);
                                 if ($1161) {
                                  $1162 = $p;
                                  HEAP8[$1162>>0] = 95;
                                 }
                                 $1163 = $p;
                                 $1164 = (($1163) + 1|0);
                                 $p = $1164;
                                }
                               }
                               $1165 = HEAP32[2824>>2]|0;
                               $1166 = $label35;
                               $1167 = (($1166) + 8|0);
                               $1168 = HEAP32[$1167>>2]|0;
                               $1169 = ($1168|0)!=(0);
                               $1170 = $1169 ? 38744 : 37096;
                               $1171 = $label35;
                               $1172 = (($1171) + 12|0);
                               $1173 = HEAP8[$1172>>0]|0;
                               $1174 = $1173 << 24 >> 24;
                               $1175 = ($1174|0)==(35);
                               if ($1175) {
                                $1176 = $index;
                                $1177 = $1176<<1;
                                $1179 = $1177;
                               } else {
                                $1178 = $index;
                                $1179 = $1178;
                               }
                               HEAP32[$vararg_buffer149>>2] = $1170;
                               $vararg_ptr152 = (($vararg_buffer149) + 4|0);
                               HEAP32[$vararg_ptr152>>2] = 36032;
                               $vararg_ptr153 = (($vararg_buffer149) + 8|0);
                               HEAP32[$vararg_ptr153>>2] = $1179;
                               (_fprintf(($1165|0),(38736|0),($vararg_buffer149|0))|0);
                               $1180 = $c33;
                               $1181 = ($1180|0)==(7);
                               if ($1181) {
                                $1182 = HEAP32[2824>>2]|0;
                                (_fprintf(($1182|0),(38624|0),($vararg_buffer154|0))|0);
                                $c33 = 0;
                               } else {
                                $1183 = $c33;
                                $1184 = (($1183) + 1)|0;
                                $c33 = $1184;
                               }
                               $1185 = $tree34;
                               _node_delete($1185);
                               $tree34 = 0;
                              } else {
                               $1186 = (_constant_search(30952)|0);
                               $1187 = ($1186|0)!=(0|0);
                               if ($1187) {
                                _emit_error(35248);
                                _get_lex();
                               } else {
                                $1188 = (_label_search(30952)|0);
                                $label = $1188;
                                $1189 = $label;
                                $1190 = ($1189|0)!=(0|0);
                                do {
                                 if ($1190) {
                                  $1191 = $label;
                                  $1192 = (($1191) + 4|0);
                                  $1193 = HEAP32[$1192>>2]|0;
                                  $1194 = $1193 & 512;
                                  $1195 = ($1194|0)==(0);
                                  if (!($1195)) {
                                   break;
                                  }
                                  HEAP32[$vararg_buffer156>>2] = 30952;
                                  (_sprintf($buffer,35296,$vararg_buffer156)|0);
                                  _emit_error($buffer);
                                  $label = 0;
                                 }
                                } while(0);
                                $1196 = $label;
                                $1197 = ($1196|0)==(0|0);
                                if ($1197) {
                                 _check_for_explicit(30952);
                                 $1198 = (_label_add(30952)|0);
                                 $label = $1198;
                                 $1199 = HEAP8[30952>>0]|0;
                                 $1200 = $1199 << 24 >> 24;
                                 $1201 = ($1200|0)==(35);
                                 if ($1201) {
                                  $1202 = $label;
                                  $1203 = (($1202) + 4|0);
                                  HEAP32[$1203>>2] = 1;
                                 } else {
                                  $1204 = $label;
                                  $1205 = (($1204) + 4|0);
                                  HEAP32[$1205>>2] = 0;
                                 }
                                 $1206 = $label;
                                 $1207 = (($1206) + 4|0);
                                 $1208 = HEAP32[$1207>>2]|0;
                                 $1209 = $1208 | 512;
                                 HEAP32[$1207>>2] = $1209;
                                }
                                _get_lex();
                                $1210 = $c33;
                                $1211 = ($1210|0)==(0);
                                if ($1211) {
                                 $1212 = HEAP32[35640>>2]|0;
                                 $1213 = ($1212|0)==(2);
                                 if ($1213) {
                                  $1214 = HEAP32[2824>>2]|0;
                                  (_fprintf(($1214|0),(38720|0),($vararg_buffer159|0))|0);
                                 } else {
                                  $1215 = HEAP32[2824>>2]|0;
                                  (_fprintf(($1215|0),(38728|0),($vararg_buffer161|0))|0);
                                 }
                                } else {
                                 $1216 = HEAP32[2824>>2]|0;
                                 (_fprintf(($1216|0),(38600|0),($vararg_buffer163|0))|0);
                                }
                                $1217 = $label;
                                $1218 = (($1217) + 12|0);
                                (_strcpy((36032|0),($1218|0))|0);
                                $1219 = HEAP32[35640>>2]|0;
                                $1220 = ($1219|0)==(2);
                                if ($1220) {
                                 $p36 = 36032;
                                 while(1) {
                                  $1221 = $p36;
                                  $1222 = HEAP8[$1221>>0]|0;
                                  $1223 = ($1222<<24>>24)!=(0);
                                  if (!($1223)) {
                                   break;
                                  }
                                  $1224 = $p36;
                                  $1225 = HEAP8[$1224>>0]|0;
                                  $1226 = $1225 << 24 >> 24;
                                  $1227 = ($1226|0)==(35);
                                  if ($1227) {
                                   $1228 = $p36;
                                   HEAP8[$1228>>0] = 95;
                                  }
                                  $1229 = $p36;
                                  $1230 = (($1229) + 1|0);
                                  $p36 = $1230;
                                 }
                                }
                                $1231 = HEAP32[2824>>2]|0;
                                HEAP32[$vararg_buffer165>>2] = 37096;
                                $vararg_ptr168 = (($vararg_buffer165) + 4|0);
                                HEAP32[$vararg_ptr168>>2] = 36032;
                                (_fprintf(($1231|0),(38752|0),($vararg_buffer165|0))|0);
                                $1232 = $c33;
                                $1233 = ($1232|0)==(7);
                                if ($1233) {
                                 $1234 = HEAP32[2824>>2]|0;
                                 (_fprintf(($1234|0),(38624|0),($vararg_buffer169|0))|0);
                                 $c33 = 0;
                                } else {
                                 $1235 = $c33;
                                 $1236 = (($1235) + 1)|0;
                                 $c33 = $1236;
                                }
                               }
                              }
                             }
                            } else {
                             label = 536;
                            }
                           } while(0);
                           if ((label|0) == 536) {
                            label = 0;
                            $1237 = (_evaluate_level_0($type)|0);
                            $tree32 = $1237;
                            $1238 = $tree32;
                            $1239 = HEAP32[$1238>>2]|0;
                            $1240 = ($1239|0)!=(50);
                            do {
                             if ($1240) {
                              $1241 = $tree32;
                              $1242 = HEAP32[$1241>>2]|0;
                              $1243 = ($1242|0)!=(51);
                              if (!($1243)) {
                               label = 539;
                               break;
                              }
                              _emit_error(38632);
                             } else {
                              label = 539;
                             }
                            } while(0);
                            if ((label|0) == 539) {
                             label = 0;
                             $1244 = $tree32;
                             $1245 = (($1244) + 4|0);
                             $1246 = HEAP32[$1245>>2]|0;
                             HEAP32[30936>>2] = $1246;
                            }
                            $1247 = $tree32;
                            _node_delete($1247);
                            $tree32 = 0;
                            $1248 = $c33;
                            $1249 = ($1248|0)==(0);
                            if ($1249) {
                             $1250 = HEAP32[35640>>2]|0;
                             $1251 = ($1250|0)==(2);
                             if ($1251) {
                              $1252 = HEAP32[2824>>2]|0;
                              (_fprintf(($1252|0),(38720|0),($vararg_buffer171|0))|0);
                             } else {
                              $1253 = HEAP32[2824>>2]|0;
                              (_fprintf(($1253|0),(38728|0),($vararg_buffer173|0))|0);
                             }
                            } else {
                             $1254 = HEAP32[2824>>2]|0;
                             (_fprintf(($1254|0),(38600|0),($vararg_buffer175|0))|0);
                            }
                            $1255 = HEAP32[35640>>2]|0;
                            $1256 = ($1255|0)==(2);
                            if ($1256) {
                             $1257 = HEAP32[2824>>2]|0;
                             $1258 = HEAP32[30936>>2]|0;
                             $1259 = $1258 & 65535;
                             HEAP32[$vararg_buffer177>>2] = $1259;
                             (_fprintf(($1257|0),(38760|0),($vararg_buffer177|0))|0);
                            } else {
                             $1260 = HEAP32[2824>>2]|0;
                             $1261 = HEAP32[30936>>2]|0;
                             $1262 = $1261 & 65535;
                             HEAP32[$vararg_buffer180>>2] = $1262;
                             (_fprintf(($1260|0),(38768|0),($vararg_buffer180|0))|0);
                            }
                            $1263 = $c33;
                            $1264 = ($1263|0)==(7);
                            if ($1264) {
                             $1265 = HEAP32[2824>>2]|0;
                             (_fprintf(($1265|0),(38624|0),($vararg_buffer183|0))|0);
                             $c33 = 0;
                            } else {
                             $1266 = $c33;
                             $1267 = (($1266) + 1)|0;
                             $c33 = $1267;
                            }
                           }
                           $1268 = HEAP32[30928>>2]|0;
                           $1269 = ($1268|0)!=(21);
                           if ($1269) {
                            break;
                           }
                           _get_lex();
                          }
                          $1270 = $c33;
                          $1271 = ($1270|0)!=(0);
                          if ($1271) {
                           $1272 = HEAP32[2824>>2]|0;
                           (_fprintf(($1272|0),(38624|0),($vararg_buffer185|0))|0);
                          }
                         }
                        } else {
                         $1273 = (_strcmp(30952,38776)|0);
                         $1274 = ($1273|0)==(0);
                         if ($1274) {
                          _get_lex();
                          $1275 = (_evaluate_save_expression(1,0)|0);
                          $port = $1275;
                          $1276 = HEAP32[30928>>2]|0;
                          $1277 = ($1276|0)==(21);
                          if ($1277) {
                           _get_lex();
                          } else {
                           _emit_error(38784);
                          }
                          $1278 = (_evaluate_save_expression(1,0)|0);
                          $value37 = $1278;
                          $1279 = HEAP32[35640>>2]|0;
                          $1280 = ($1279|0)==(1);
                          if ($1280) {
                           _emit_warning(38808);
                          } else {
                           $1281 = HEAP32[35640>>2]|0;
                           $1282 = ($1281|0)==(2);
                           if ($1282) {
                            $1283 = $port;
                            $1284 = HEAP32[$1283>>2]|0;
                            $1285 = ($1284|0)==(50);
                            do {
                             if ($1285) {
                              $1286 = $port;
                              $1287 = (($1286) + 4|0);
                              $1288 = HEAP32[$1287>>2]|0;
                              $1289 = ($1288|0)==(255);
                              if (!($1289)) {
                               label = 570;
                               break;
                              }
                              $1290 = $value37;
                              _node_generate($1290,0);
                              _cpu9900_2op(38240,38208,38848);
                             } else {
                              label = 570;
                             }
                            } while(0);
                            if ((label|0) == 570) {
                             label = 0;
                             _emit_warning(38856);
                            }
                           } else {
                            $1291 = $port;
                            _node_generate($1291,0);
                            _cpuz80_2op(38280,38912,38296);
                            $1292 = $value37;
                            $1293 = (($1292) + 20|0);
                            $1294 = HEAP32[$1293>>2]|0;
                            $1295 = $1294 & 8;
                            $1296 = ($1295|0)==(0);
                            if ($1296) {
                             $1297 = $value37;
                             _node_generate($1297,0);
                            } else {
                             _cpuz80_1op(38256,38920);
                             $1298 = $value37;
                             _node_generate($1298,0);
                             _cpuz80_1op(38272,38920);
                            }
                            _cpuz80_2op(38776,38928,38296);
                           }
                          }
                          $1299 = $port;
                          _node_delete($1299);
                          $1300 = $value37;
                          _node_delete($1300);
                         } else {
                          $1301 = (_strcmp(30952,38936)|0);
                          $1302 = ($1301|0)==(0);
                          if ($1302) {
                           _get_lex();
                           $start = 1;
                           $cursor_value = 0;
                           $cursor_pos = 0;
                           $1303 = HEAP32[30928>>2]|0;
                           $1304 = ($1303|0)==(1);
                           do {
                            if ($1304) {
                             $1305 = (_strcmp(30952,38944)|0);
                             $1306 = ($1305|0)==(0);
                             if (!($1306)) {
                              break;
                             }
                             _get_lex();
                             $1307 = (_evaluate_save_expression(1,1)|0);
                             $tree41 = $1307;
                             $1308 = HEAP32[2808>>2]|0;
                             $1309 = ($1308|0)==(13);
                             if ($1309) {
                              $1310 = $tree41;
                              $1311 = (_node_create(51,2,0,0)|0);
                              $1312 = (_node_create(31,0,$1310,$1311)|0);
                              $tree41 = $1312;
                             }
                             $1313 = HEAP32[35640>>2]|0;
                             $1314 = ($1313|0)==(1);
                             if ($1314) {
                              $1315 = $tree41;
                              $1316 = HEAP32[$1315>>2]|0;
                              $1317 = ($1316|0)==(51);
                              if ($1317) {
                               $cursor_value = 2;
                               $1318 = $tree41;
                               $1319 = (($1318) + 4|0);
                               $1320 = HEAP32[$1319>>2]|0;
                               $cursor_pos = $1320;
                              } else {
                               $1321 = $tree41;
                               _node_generate($1321,0);
                               $cursor_value = 1;
                              }
                             } else {
                              $1322 = HEAP32[35640>>2]|0;
                              $1323 = ($1322|0)==(2);
                              if ($1323) {
                               $1324 = $tree41;
                               _node_generate($1324,0);
                               _cpu9900_2op(38200,38208,38952);
                              } else {
                               $1325 = $tree41;
                               _node_generate($1325,0);
                               _cpuz80_2op(38280,38960,38264);
                              }
                             }
                             $start = 0;
                            }
                           } while(0);
                           while(1) {
                            $1326 = $start;
                            $1327 = ($1326|0)!=(0);
                            if (!($1327)) {
                             $1328 = HEAP32[30928>>2]|0;
                             $1329 = ($1328|0)!=(21);
                             if ($1329) {
                              break;
                             }
                             _get_lex();
                            }
                            $start = 0;
                            $1340 = HEAP32[30928>>2]|0;
                            $1341 = ($1340|0)==(2);
                            if ($1341) {
                             $1342 = HEAP32[30944>>2]|0;
                             $1343 = ($1342|0)!=(0);
                             if ($1343) {
                              $1344 = HEAP32[35640>>2]|0;
                              $1345 = ($1344|0)==(1);
                              if ($1345) {
                               $1346 = $cursor_value;
                               $1347 = ($1346|0)!=(0);
                               if ($1347) {
                                $1348 = $cursor_value;
                                $1349 = ($1348|0)==(2);
                                if ($1349) {
                                 _generic_call(39008);
                                 _generic_dump();
                                 $1350 = HEAP32[2824>>2]|0;
                                 $1351 = $cursor_pos;
                                 $1352 = $1351 & 255;
                                 $1353 = $cursor_pos;
                                 $1354 = $1353 >> 8;
                                 $1355 = $1354 & 255;
                                 $1356 = HEAP32[30944>>2]|0;
                                 HEAP32[$vararg_buffer193>>2] = $1352;
                                 $vararg_ptr196 = (($vararg_buffer193) + 4|0);
                                 HEAP32[$vararg_ptr196>>2] = $1355;
                                 $vararg_ptr197 = (($vararg_buffer193) + 8|0);
                                 HEAP32[$vararg_ptr197>>2] = $1356;
                                 (_fprintf(($1350|0),(39040|0),($vararg_buffer193|0))|0);
                                } else {
                                 _generic_call(39064);
                                 _generic_dump();
                                 $1357 = HEAP32[2824>>2]|0;
                                 $1358 = HEAP32[30944>>2]|0;
                                 HEAP32[$vararg_buffer198>>2] = $1358;
                                 (_fprintf(($1357|0),(2944|0),($vararg_buffer198|0))|0);
                                }
                               } else {
                                _generic_call(39088);
                                _generic_dump();
                                $1359 = HEAP32[2824>>2]|0;
                                $1360 = HEAP32[30944>>2]|0;
                                HEAP32[$vararg_buffer201>>2] = $1360;
                                (_fprintf(($1359|0),(2944|0),($vararg_buffer201|0))|0);
                               }
                              } else {
                               $1361 = HEAP32[35640>>2]|0;
                               $1362 = ($1361|0)==(2);
                               if ($1362) {
                                $1363 = HEAP32[1688>>2]|0;
                                $1364 = (($1363) + 1)|0;
                                HEAP32[1688>>2] = $1364;
                                $label38 = $1363;
                                $1365 = HEAP32[1688>>2]|0;
                                $1366 = (($1365) + 1)|0;
                                HEAP32[1688>>2] = $1366;
                                $label239 = $1365;
                                $1367 = $label38;
                                HEAP32[$vararg_buffer204>>2] = $1367;
                                (_sprintf(33104,34176,$vararg_buffer204)|0);
                                _cpu9900_2op(38520,38368,33104);
                                $1368 = HEAP32[30944>>2]|0;
                                HEAP32[$vararg_buffer207>>2] = $1368;
                                (_sprintf(33104,39104,$vararg_buffer207)|0);
                                _cpu9900_2op(38520,39112,33104);
                                _generic_call(39088);
                                $1369 = $label239;
                                HEAP32[$vararg_buffer210>>2] = $1369;
                                (_sprintf(33104,34176,$vararg_buffer210)|0);
                                _generic_jump(33104);
                                $1370 = $label38;
                                HEAP32[$vararg_buffer213>>2] = $1370;
                                (_sprintf(33104,34176,$vararg_buffer213)|0);
                                _generic_label(33104);
                                _generic_dump();
                               } else {
                                $1371 = HEAP32[1688>>2]|0;
                                $1372 = (($1371) + 1)|0;
                                HEAP32[1688>>2] = $1372;
                                $label38 = $1371;
                                $1373 = HEAP32[1688>>2]|0;
                                $1374 = (($1373) + 1)|0;
                                HEAP32[1688>>2] = $1374;
                                $label239 = $1373;
                                $1375 = $label38;
                                HEAP32[$vararg_buffer216>>2] = $1375;
                                (_sprintf(33104,34176,$vararg_buffer216)|0);
                                _cpuz80_2op(38280,38264,33104);
                                $1376 = HEAP32[30944>>2]|0;
                                HEAP32[$vararg_buffer219>>2] = $1376;
                                (_sprintf(33104,39104,$vararg_buffer219)|0);
                                _cpuz80_2op(38280,38296,33104);
                                _generic_call(39088);
                                $1377 = $label239;
                                HEAP32[$vararg_buffer222>>2] = $1377;
                                (_sprintf(33104,34176,$vararg_buffer222)|0);
                                _generic_jump(33104);
                                $1378 = $label38;
                                HEAP32[$vararg_buffer225>>2] = $1378;
                                (_sprintf(33104,34176,$vararg_buffer225)|0);
                                _generic_label(33104);
                                _generic_dump();
                               }
                              }
                              $c40 = 0;
                              while(1) {
                               $1379 = $c40;
                               $1380 = HEAP32[30944>>2]|0;
                               $1381 = ($1379|0)<($1380|0);
                               if (!($1381)) {
                                break;
                               }
                               $1382 = $c40;
                               $1383 = $1382 & 7;
                               $1384 = ($1383|0)==(0);
                               if ($1384) {
                                $1385 = HEAP32[35640>>2]|0;
                                $1386 = ($1385|0)==(2);
                                if ($1386) {
                                 $1387 = HEAP32[2824>>2]|0;
                                 (_fprintf(($1387|0),(38584|0),($vararg_buffer228|0))|0);
                                } else {
                                 $1388 = HEAP32[2824>>2]|0;
                                 (_fprintf(($1388|0),(38592|0),($vararg_buffer230|0))|0);
                                }
                               }
                               $1389 = HEAP32[35640>>2]|0;
                               $1390 = ($1389|0)==(2);
                               if ($1390) {
                                $1391 = HEAP32[2824>>2]|0;
                                $1392 = $c40;
                                $1393 = (30952 + ($1392)|0);
                                $1394 = HEAP8[$1393>>0]|0;
                                $1395 = $1394 << 24 >> 24;
                                $1396 = $1395 & 255;
                                HEAP32[$vararg_buffer232>>2] = $1396;
                                (_fprintf(($1391|0),(38608|0),($vararg_buffer232|0))|0);
                               } else {
                                $1397 = HEAP32[2824>>2]|0;
                                $1398 = $c40;
                                $1399 = (30952 + ($1398)|0);
                                $1400 = HEAP8[$1399>>0]|0;
                                $1401 = $1400 << 24 >> 24;
                                $1402 = $1401 & 255;
                                HEAP32[$vararg_buffer235>>2] = $1402;
                                (_fprintf(($1397|0),(38616|0),($vararg_buffer235|0))|0);
                               }
                               $1403 = $c40;
                               $1404 = $1403 & 7;
                               $1405 = ($1404|0)==(7);
                               do {
                                if ($1405) {
                                 label = 630;
                                } else {
                                 $1406 = $c40;
                                 $1407 = (($1406) + 1)|0;
                                 $1408 = HEAP32[30944>>2]|0;
                                 $1409 = ($1407|0)==($1408|0);
                                 if ($1409) {
                                  label = 630;
                                  break;
                                 }
                                 $1411 = HEAP32[2824>>2]|0;
                                 (_fprintf(($1411|0),(38600|0),($vararg_buffer240|0))|0);
                                }
                               } while(0);
                               if ((label|0) == 630) {
                                label = 0;
                                $1410 = HEAP32[2824>>2]|0;
                                (_fprintf(($1410|0),(38624|0),($vararg_buffer238|0))|0);
                               }
                               $1412 = $c40;
                               $1413 = (($1412) + 1)|0;
                               $c40 = $1413;
                              }
                              $1414 = HEAP32[35640>>2]|0;
                              $1415 = ($1414|0)==(2);
                              if ($1415) {
                               $1416 = HEAP32[2824>>2]|0;
                               (_fprintf(($1416|0),(39120|0),($vararg_buffer242|0))|0);
                               $1417 = $label239;
                               HEAP32[$vararg_buffer244>>2] = $1417;
                               (_sprintf(33104,34176,$vararg_buffer244)|0);
                               _generic_label(33104);
                              }
                              $1418 = HEAP32[35640>>2]|0;
                              $1419 = ($1418|0)==(0);
                              if ($1419) {
                               $1420 = $label239;
                               HEAP32[$vararg_buffer247>>2] = $1420;
                               (_sprintf(33104,34176,$vararg_buffer247)|0);
                               _generic_label(33104);
                              }
                             } else {
                              $1421 = HEAP32[35640>>2]|0;
                              $1422 = ($1421|0)==(1);
                              if ($1422) {
                               $1423 = $cursor_value;
                               $1424 = ($1423|0)!=(0);
                               if ($1424) {
                                $1425 = $cursor_value;
                                $1426 = ($1425|0)==(2);
                                if ($1426) {
                                 $1427 = $cursor_pos;
                                 $1428 = $1427 & 255;
                                 HEAP32[$vararg_buffer250>>2] = $1428;
                                 (_sprintf(33104,38976,$vararg_buffer250)|0);
                                 _cpu6502_1op(38344,33104);
                                 $1429 = $cursor_pos;
                                 $1430 = $1429 >> 8;
                                 HEAP32[$vararg_buffer253>>2] = $1430;
                                 (_sprintf(33104,38976,$vararg_buffer253)|0);
                                 _cpu6502_1op(38152,33104);
                                }
                                _cpu6502_1op(38112,38984);
                                _cpu6502_1op(38128,38992);
                               }
                              }
                             }
                             _get_lex();
                            } else {
                             $1431 = HEAP32[30928>>2]|0;
                             $1432 = ($1431|0)==(8);
                             do {
                              if ($1432) {
                               label = 649;
                              } else {
                               $1433 = HEAP32[30928>>2]|0;
                               $1434 = ($1433|0)==(7);
                               if ($1434) {
                                label = 649;
                                break;
                               }
                               $1492 = HEAP32[35640>>2]|0;
                               $1493 = ($1492|0)==(1);
                               if ($1493) {
                                $1494 = $cursor_value;
                                $1495 = ($1494|0)!=(0);
                                if ($1495) {
                                 $1496 = $cursor_value;
                                 $1497 = ($1496|0)==(2);
                                 if ($1497) {
                                  $1498 = $cursor_pos;
                                  $1499 = $1498 & 255;
                                  HEAP32[$vararg_buffer280>>2] = $1499;
                                  (_sprintf(33104,38976,$vararg_buffer280)|0);
                                  _cpu6502_1op(38344,33104);
                                  $1500 = $cursor_pos;
                                  $1501 = $1500 >> 8;
                                  HEAP32[$vararg_buffer283>>2] = $1501;
                                  (_sprintf(33104,38976,$vararg_buffer283)|0);
                                  _cpu6502_1op(38152,33104);
                                 }
                                 _cpu6502_1op(38112,38984);
                                 _cpu6502_1op(38128,38992);
                                }
                               }
                               $1502 = HEAP32[30928>>2]|0;
                               $1503 = ($1502|0)==(1);
                               do {
                                if ($1503) {
                                 $1504 = (_strcmp(30952,39296)|0);
                                 $1505 = ($1504|0)==(0);
                                 if (!($1505)) {
                                  label = 727;
                                  break;
                                 }
                                 _get_lex();
                                 $1506 = HEAP32[30928>>2]|0;
                                 $1507 = ($1506|0)!=(17);
                                 if ($1507) {
                                  _emit_error(39304);
                                 } else {
                                  _get_lex();
                                 }
                                 $1508 = (_evaluate_expression(1,0,0)|0);
                                 HEAP32[$type>>2] = $1508;
                                 $1509 = HEAP32[30928>>2]|0;
                                 $1510 = ($1509|0)!=(18);
                                 if ($1510) {
                                  _emit_error(39304);
                                 } else {
                                  _get_lex();
                                 }
                                 $1511 = HEAP32[35640>>2]|0;
                                 $1512 = ($1511|0)==(1);
                                 if ($1512) {
                                  _cpu6502_noop(38336);
                                 } else {
                                  $1513 = HEAP32[35640>>2]|0;
                                  $1514 = ($1513|0)==(2);
                                  if ($1514) {
                                   _cpu9900_2op(38200,38208,38368);
                                   _cpu9900_1op(39328,38368);
                                  }
                                 }
                                 _generic_interrupt_disable();
                                 _generic_call(39336);
                                 _generic_interrupt_enable();
                                } else {
                                 label = 727;
                                }
                               } while(0);
                               if ((label|0) == 727) {
                                label = 0;
                                $1515 = (_evaluate_expression(1,1,0)|0);
                                HEAP32[$type>>2] = $1515;
                                $1516 = HEAP32[35640>>2]|0;
                                $1517 = ($1516|0)==(2);
                                if ($1517) {
                                 _cpu9900_2op(38200,38208,39112);
                                }
                                _generic_call(39184);
                               }
                              }
                             } while(0);
                             if ((label|0) == 649) {
                              label = 0;
                              $format = 0;
                              $size = 1;
                              $1435 = HEAP32[35640>>2]|0;
                              $1436 = ($1435|0)==(1);
                              if ($1436) {
                               $1437 = $cursor_value;
                               $1438 = ($1437|0)!=(0);
                               if ($1438) {
                                $1439 = $cursor_value;
                                $1440 = ($1439|0)==(2);
                                if ($1440) {
                                 $1441 = $cursor_pos;
                                 $1442 = $1441 & 255;
                                 HEAP32[$vararg_buffer256>>2] = $1442;
                                 (_sprintf(33104,38976,$vararg_buffer256)|0);
                                 _cpu6502_1op(38344,33104);
                                 $1443 = $cursor_pos;
                                 $1444 = $1443 >> 8;
                                 HEAP32[$vararg_buffer259>>2] = $1444;
                                 (_sprintf(33104,38976,$vararg_buffer259)|0);
                                 _cpu6502_1op(38152,33104);
                                }
                                _cpu6502_1op(38112,38984);
                                _cpu6502_1op(38128,38992);
                               }
                              }
                              $1445 = HEAP32[30928>>2]|0;
                              $1446 = ($1445|0)==(7);
                              if ($1446) {
                               _get_lex();
                              } else {
                               _get_lex();
                               $1447 = HEAP32[30928>>2]|0;
                               $1448 = ($1447|0)==(20);
                               if ($1448) {
                                _get_lex();
                                $format = 1;
                                $1449 = HEAP32[30928>>2]|0;
                                $1450 = ($1449|0)!=(4);
                                if ($1450) {
                                 _emit_error(39128);
                                } else {
                                 $1451 = HEAP32[30936>>2]|0;
                                 $size = $1451;
                                 _get_lex();
                                }
                               } else {
                                $1452 = HEAP32[30928>>2]|0;
                                $1453 = ($1452|0)==(4);
                                if ($1453) {
                                 $format = 2;
                                 $1454 = HEAP32[30928>>2]|0;
                                 $1455 = ($1454|0)!=(4);
                                 if ($1455) {
                                  _emit_error(39128);
                                 } else {
                                  $1456 = HEAP32[30936>>2]|0;
                                  $size = $1456;
                                  _get_lex();
                                 }
                                }
                               }
                               $1457 = HEAP32[30928>>2]|0;
                               $1458 = ($1457|0)==(10);
                               if ($1458) {
                                _get_lex();
                               } else {
                                _emit_error(39152);
                               }
                              }
                              $1459 = $size;
                              $1460 = ($1459|0)<(1);
                              if ($1460) {
                               $size = 1;
                              }
                              $1461 = $size;
                              $1462 = ($1461|0)>(5);
                              if ($1462) {
                               $size = 5;
                              }
                              $1463 = (_evaluate_expression(1,1,0)|0);
                              HEAP32[$type>>2] = $1463;
                              $1464 = HEAP32[35640>>2]|0;
                              $1465 = ($1464|0)==(1);
                              if ($1465) {
                               $1466 = $format;
                               $1467 = ($1466|0)==(0);
                               if ($1467) {
                                _cpu6502_1op(38352,39184);
                               } else {
                                $1468 = $format;
                                $1469 = ($1468|0)==(1);
                                if ($1469) {
                                 _generic_interrupt_disable();
                                 _cpu6502_1op(39200,39208);
                                 _cpu6502_1op(39216,38120);
                                 _cpu6502_1op(39200,39224);
                                 _cpu6502_1op(39216,38136);
                                 $1470 = $size;
                                 HEAP32[$vararg_buffer262>>2] = $1470;
                                 (_sprintf(33104,39232,$vararg_buffer262)|0);
                                 _cpu6502_1op(38352,33104);
                                } else {
                                 $1471 = $format;
                                 $1472 = ($1471|0)==(2);
                                 if ($1472) {
                                  _generic_interrupt_disable();
                                  _cpu6502_1op(39200,39208);
                                  _cpu6502_1op(39216,38120);
                                  _cpu6502_1op(39200,39248);
                                  _cpu6502_1op(39216,38136);
                                  $1473 = $size;
                                  HEAP32[$vararg_buffer265>>2] = $1473;
                                  (_sprintf(33104,39232,$vararg_buffer265)|0);
                                  _cpu6502_1op(38352,33104);
                                 }
                                }
                               }
                              } else {
                               $1474 = HEAP32[35640>>2]|0;
                               $1475 = ($1474|0)==(2);
                               if ($1475) {
                                _cpu9900_2op(38200,38208,39112);
                                $1476 = $format;
                                $1477 = ($1476|0)==(0);
                                if ($1477) {
                                 _cpu9900_1op(38376,38384);
                                 _cpu9900_1op(38392,39184);
                                } else {
                                 $1478 = $format;
                                 $1479 = ($1478|0)==(1);
                                 if ($1479) {
                                  _generic_interrupt_disable();
                                  _cpu9900_2op(38520,39256,39264);
                                  $1480 = $size;
                                  HEAP32[$vararg_buffer268>>2] = $1480;
                                  (_sprintf(33104,39232,$vararg_buffer268)|0);
                                  _cpu9900_1op(38376,38384);
                                  _cpu9900_1op(38392,33104);
                                 } else {
                                  $1481 = $format;
                                  $1482 = ($1481|0)==(2);
                                  if ($1482) {
                                   _generic_interrupt_disable();
                                   _cpu9900_2op(38520,39256,39272);
                                   $1483 = $size;
                                   HEAP32[$vararg_buffer271>>2] = $1483;
                                   (_sprintf(33104,39232,$vararg_buffer271)|0);
                                   _cpu9900_1op(38376,38384);
                                   _cpu9900_1op(38392,33104);
                                  }
                                 }
                                }
                               } else {
                                $1484 = $format;
                                $1485 = ($1484|0)==(0);
                                if ($1485) {
                                 _cpuz80_1op(38400,39184);
                                } else {
                                 $1486 = $format;
                                 $1487 = ($1486|0)==(1);
                                 if ($1487) {
                                  _generic_interrupt_disable();
                                  _cpuz80_2op(38280,38920,39280);
                                  $1488 = $size;
                                  HEAP32[$vararg_buffer274>>2] = $1488;
                                  (_sprintf(33104,39232,$vararg_buffer274)|0);
                                  _cpuz80_1op(38400,33104);
                                 } else {
                                  $1489 = $format;
                                  $1490 = ($1489|0)==(2);
                                  if ($1490) {
                                   _generic_interrupt_disable();
                                   _cpuz80_2op(38280,38920,39288);
                                   $1491 = $size;
                                   HEAP32[$vararg_buffer277>>2] = $1491;
                                   (_sprintf(33104,39232,$vararg_buffer277)|0);
                                   _cpuz80_1op(38400,33104);
                                  }
                                 }
                                }
                               }
                              }
                             }
                            }
                            $cursor_value = 0;
                           }
                           $1330 = HEAP32[35640>>2]|0;
                           $1331 = ($1330|0)==(1);
                           if ($1331) {
                            $1332 = $cursor_value;
                            $1333 = ($1332|0)!=(0);
                            if ($1333) {
                             $1334 = $cursor_value;
                             $1335 = ($1334|0)==(2);
                             if ($1335) {
                              $1336 = $cursor_pos;
                              $1337 = $1336 & 255;
                              HEAP32[$vararg_buffer187>>2] = $1337;
                              (_sprintf(33104,38976,$vararg_buffer187)|0);
                              _cpu6502_1op(38344,33104);
                              $1338 = $cursor_pos;
                              $1339 = $1338 >> 8;
                              HEAP32[$vararg_buffer190>>2] = $1339;
                              (_sprintf(33104,38976,$vararg_buffer190)|0);
                              _cpu6502_1op(38152,33104);
                             }
                             _cpu6502_1op(38112,38984);
                             _cpu6502_1op(38128,38992);
                            }
                           }
                          } else {
                           $1518 = (_strcmp(30952,39352)|0);
                           $1519 = ($1518|0)==(0);
                           if ($1519) {
                            $pletter = 0;
                            $vram_read = 0;
                            _get_lex();
                            $1520 = HEAP32[30928>>2]|0;
                            $1521 = ($1520|0)!=(1);
                            if ($1521) {
                             _emit_error(39360);
                            } else {
                             $1522 = (_strcmp(30952,39384)|0);
                             $1523 = ($1522|0)==(0);
                             if ($1523) {
                              _get_lex();
                              $1524 = HEAP32[30928>>2]|0;
                              $1525 = ($1524|0)==(1);
                              do {
                               if ($1525) {
                                $1526 = (_strcmp(30952,39392)|0);
                                $1527 = ($1526|0)==(0);
                                if (!($1527)) {
                                 break;
                                }
                                $pletter = 1;
                                _get_lex();
                               }
                              } while(0);
                              $1528 = $pletter;
                              $1529 = ($1528|0)!=(0);
                              if ($1529) {
                               $1530 = (_evaluate_expression(1,1,0)|0);
                               HEAP32[$type>>2] = $1530;
                               $1531 = HEAP32[35640>>2]|0;
                               $1532 = ($1531|0)==(1);
                               if ($1532) {
                                _cpu6502_1op(39400,38296);
                                _cpu6502_1op(39400,38296);
                                _cpu6502_1op(38152,39408);
                                _cpu6502_1op(38128,39416);
                                _cpu6502_1op(39400,38296);
                                _cpu6502_1op(39432,39416);
                                _cpu6502_1op(39400,38296);
                                _cpu6502_1op(39432,39416);
                                _cpu6502_1op(39400,38296);
                                _cpu6502_1op(39432,39416);
                                _cpu6502_1op(38112,39440);
                               } else {
                                $1533 = HEAP32[35640>>2]|0;
                                $1534 = ($1533|0)==(2);
                                if ($1534) {
                                 _cpu9900_2op(38200,38208,39448);
                                 _cpu9900_2op(39456,39448,39464);
                                 _cpu9900_2op(39472,39448,39480);
                                } else {
                                 _cpuz80_2op(39488,38264,38264);
                                 _cpuz80_2op(39488,38264,38264);
                                 $1535 = HEAP32[2808>>2]|0;
                                 $1536 = ($1535|0)==(13);
                                 if ($1536) {
                                  _cpuz80_2op(39496,33064,39504);
                                 } else {
                                  _cpuz80_2op(38280,39504,39512);
                                 }
                                 _cpuz80_2op(39488,38264,38264);
                                 _cpuz80_2op(39488,38264,38264);
                                 _cpuz80_2op(39488,38264,38264);
                                 $1537 = HEAP32[2808>>2]|0;
                                 $1538 = ($1537|0)==(13);
                                 if ($1538) {
                                  _cpuz80_2op(39488,38264,38264);
                                 }
                                 _cpuz80_2op(39520,39528,38264);
                                }
                               }
                               $1539 = HEAP32[30928>>2]|0;
                               $1540 = ($1539|0)==(21);
                               if ($1540) {
                                _get_lex();
                               } else {
                                _emit_error(39536);
                               }
                               $1541 = (_evaluate_expression(2,0,0)|0);
                               HEAP32[$type>>2] = $1541;
                               $1542 = HEAP32[30928>>2]|0;
                               $1543 = ($1542|0)==(21);
                               if ($1543) {
                                _get_lex();
                               } else {
                                _emit_error(39536);
                               }
                               $1544 = HEAP32[30928>>2]|0;
                               $1545 = ($1544|0)!=(1);
                               if ($1545) {
                                _emit_error(39560);
                               } else {
                                $1546 = HEAP32[35640>>2]|0;
                                $1547 = ($1546|0)==(1);
                                if ($1547) {
                                 (_strcpy((33104|0),(39584|0))|0);
                                 (_strcat((33104|0),(30952|0))|0);
                                 _cpu6502_1op(38344,33104);
                                 (_strcat((33104|0),(38472|0))|0);
                                 _cpu6502_1op(38152,33104);
                                 _cpu6502_1op(38112,38120);
                                 _cpu6502_1op(38128,38136);
                                } else {
                                 $1548 = HEAP32[35640>>2]|0;
                                 $1549 = ($1548|0)==(2);
                                 if ($1549) {
                                  (_strcpy((33104|0),(37096|0))|0);
                                  (_strcat((33104|0),(30952|0))|0);
                                  _cpu9900_2op(38520,38368,33104);
                                  _cpu9900_2op(38200,39448,38232);
                                 } else {
                                  (_strcpy((33104|0),(37096|0))|0);
                                  (_strcat((33104|0),(30952|0))|0);
                                  _cpuz80_2op(38280,38264,33104);
                                 }
                                }
                                _get_lex();
                               }
                               _generic_call(39592);
                               HEAP32[39600>>2] = 1;
                              } else {
                               $source = 0;
                               $1550 = (_evaluate_expression(1,1,0)|0);
                               HEAP32[$type>>2] = $1550;
                               $1551 = HEAP32[35640>>2]|0;
                               $1552 = ($1551|0)==(1);
                               if ($1552) {
                                _cpu6502_1op(38112,39440);
                               } else {
                                $1553 = HEAP32[35640>>2]|0;
                                $1554 = ($1553|0)==(2);
                                if ($1554) {
                                 _cpu9900_2op(38200,38208,39448);
                                } else {
                                 _cpuz80_1op(38256,38264);
                                }
                               }
                               $1555 = HEAP32[30928>>2]|0;
                               $1556 = ($1555|0)==(21);
                               if ($1556) {
                                _get_lex();
                               } else {
                                _emit_error(39536);
                               }
                               $1557 = (_evaluate_save_expression(1,0)|0);
                               $length = $1557;
                               $1558 = HEAP32[30928>>2]|0;
                               $1559 = ($1558|0)==(21);
                               if ($1559) {
                                _get_lex();
                               } else {
                                _emit_error(39536);
                               }
                               $1560 = HEAP32[30928>>2]|0;
                               $1561 = ($1560|0)!=(1);
                               if ($1561) {
                                _emit_error(39560);
                               } else {
                                $1562 = (_strcmp(30952,35072)|0);
                                $1563 = ($1562|0)==(0);
                                if ($1563) {
                                 $1564 = (_evaluate_save_expression(1,1)|0);
                                 $source = $1564;
                                 $1565 = $length;
                                 _node_generate($1565,0);
                                 $1566 = HEAP32[35640>>2]|0;
                                 $1567 = ($1566|0)==(1);
                                 if ($1567) {
                                  _cpu6502_noop(38104);
                                  $1568 = $source;
                                  _node_generate($1568,0);
                                  _cpu6502_1op(38112,38120);
                                  _cpu6502_1op(38128,38136);
                                  _cpu6502_noop(38144);
                                 } else {
                                  $1569 = HEAP32[35640>>2]|0;
                                  $1570 = ($1569|0)==(2);
                                  if ($1570) {
                                   _cpu9900_2op(38200,38208,39256);
                                   $1571 = $source;
                                   _node_generate($1571,0);
                                  } else {
                                   $1572 = $source;
                                   $1573 = (($1572) + 20|0);
                                   $1574 = HEAP32[$1573>>2]|0;
                                   $1575 = $1574 & 1;
                                   $1576 = ($1575|0)!=(0);
                                   if ($1576) {
                                    _cpuz80_1op(38256,39608);
                                   }
                                   $1577 = $source;
                                   _node_generate($1577,0);
                                   $1578 = $source;
                                   $1579 = (($1578) + 20|0);
                                   $1580 = HEAP32[$1579>>2]|0;
                                   $1581 = $1580 & 1;
                                   $1582 = ($1581|0)!=(0);
                                   if ($1582) {
                                    _cpuz80_1op(38272,39608);
                                   }
                                  }
                                 }
                                } else {
                                 $1583 = $length;
                                 _node_generate($1583,0);
                                 $1584 = HEAP32[35640>>2]|0;
                                 $1585 = ($1584|0)==(1);
                                 if ($1585) {
                                  _cpu6502_noop(38104);
                                  (_strcpy((33104|0),(39584|0))|0);
                                  (_strcat((33104|0),(30952|0))|0);
                                  _cpu6502_1op(38344,33104);
                                  _cpu6502_1op(38112,38120);
                                  (_strcat((33104|0),(38472|0))|0);
                                  _cpu6502_1op(38344,33104);
                                  _cpu6502_1op(38112,38136);
                                  _cpu6502_noop(38144);
                                 } else {
                                  $1586 = HEAP32[35640>>2]|0;
                                  $1587 = ($1586|0)==(2);
                                  if ($1587) {
                                   _cpu9900_2op(38200,38208,39256);
                                   (_strcpy((33104|0),(37096|0))|0);
                                   (_strcat((33104|0),(30952|0))|0);
                                   _cpu9900_2op(38520,38208,33104);
                                  } else {
                                   (_strcpy((33104|0),(37096|0))|0);
                                   (_strcat((33104|0),(30952|0))|0);
                                   _cpuz80_2op(38280,38264,33104);
                                  }
                                 }
                                 _get_lex();
                                }
                               }
                               _generic_call(39616);
                               $1588 = $length;
                               _node_delete($1588);
                               $1589 = $source;
                               _node_delete($1589);
                              }
                             } else {
                              $1590 = (_strcmp(30952,39632)|0);
                              $1591 = ($1590|0)==(0);
                              do {
                               if ($1591) {
                                label = 807;
                               } else {
                                $1592 = (_strcmp(30952,39640)|0);
                                $1593 = ($1592|0)==(0);
                                if ($1593) {
                                 label = 807;
                                 break;
                                }
                                $1650 = (_strcmp(30952,39728)|0);
                                $1651 = ($1650|0)==(0);
                                if ($1651) {
                                 _get_lex();
                                 $1652 = HEAP32[30928>>2]|0;
                                 $1653 = ($1652|0)==(1);
                                 do {
                                  if ($1653) {
                                   $1654 = (_strcmp(30952,39392)|0);
                                   $1655 = ($1654|0)==(0);
                                   if (!($1655)) {
                                    label = 856;
                                    break;
                                   }
                                   $pletter = 1;
                                   _get_lex();
                                  } else {
                                   label = 856;
                                  }
                                 } while(0);
                                 if ((label|0) == 856) {
                                  label = 0;
                                  $1656 = HEAP32[30928>>2]|0;
                                  $1657 = ($1656|0)==(1);
                                  do {
                                   if ($1657) {
                                    $1658 = (_strcmp(30952,38560)|0);
                                    $1659 = ($1658|0)==(0);
                                    if (!($1659)) {
                                     break;
                                    }
                                    $vram_read = 1;
                                    _get_lex();
                                   }
                                  } while(0);
                                 }
                                 $1660 = (_evaluate_save_expression(1,1)|0);
                                 $target2 = $1660;
                                 $1661 = HEAP32[30928>>2]|0;
                                 $1662 = ($1661|0)==(21);
                                 if ($1662) {
                                  _get_lex();
                                 } else {
                                  _emit_error(39536);
                                 }
                                 $1663 = (_evaluate_save_expression(1,1)|0);
                                 $length45 = $1663;
                                 $1664 = HEAP32[30928>>2]|0;
                                 $1665 = ($1664|0)==(21);
                                 if ($1665) {
                                  _get_lex();
                                 } else {
                                  _emit_error(39536);
                                 }
                                 $1666 = HEAP32[30928>>2]|0;
                                 $1667 = ($1666|0)!=(1);
                                 if ($1667) {
                                  _emit_error(39560);
                                  $source44 = 0;
                                 } else {
                                  $1668 = $pletter;
                                  $1669 = ($1668|0)!=(0);
                                  do {
                                   if ($1669) {
                                    label = 885;
                                   } else {
                                    $1670 = (_strcmp(30952,35072)|0);
                                    $1671 = ($1670|0)==(0);
                                    if (!($1671)) {
                                     label = 885;
                                     break;
                                    }
                                    $1672 = (_evaluate_save_expression(1,1)|0);
                                    $source44 = $1672;
                                    $1673 = HEAP32[35640>>2]|0;
                                    $1674 = ($1673|0)==(1);
                                    if ($1674) {
                                     $1675 = $target2;
                                     _node_generate($1675,0);
                                     _cpu6502_1op(38112,39440);
                                     _cpu6502_1op(38128,39416);
                                     $1676 = $length45;
                                     _node_generate($1676,0);
                                     _cpu6502_noop(38104);
                                     _cpu6502_noop(39736);
                                     _cpu6502_noop(38104);
                                     $1677 = $source44;
                                     _node_generate($1677,0);
                                     _cpu6502_1op(38112,38120);
                                     _cpu6502_1op(38128,38136);
                                     _cpu6502_noop(38144);
                                     _cpu6502_1op(38112,39744);
                                     _cpu6502_noop(38144);
                                     _cpu6502_1op(38112,39752);
                                    } else {
                                     $1678 = HEAP32[35640>>2]|0;
                                     $1679 = ($1678|0)==(2);
                                     if ($1679) {
                                      $1680 = $target2;
                                      _node_generate($1680,0);
                                      _cpu9900_2op(38200,38208,39448);
                                      $1681 = $length45;
                                      _node_generate($1681,0);
                                      _cpu9900_2op(38200,38208,39256);
                                      $1682 = $source44;
                                      _node_generate($1682,0);
                                     } else {
                                      $1683 = $length45;
                                      _node_generate($1683,0);
                                      $1684 = $target2;
                                      $1685 = (($1684) + 20|0);
                                      $1686 = HEAP32[$1685>>2]|0;
                                      $1687 = $source44;
                                      $1688 = (($1687) + 20|0);
                                      $1689 = HEAP32[$1688>>2]|0;
                                      $1690 = $1686 | $1689;
                                      $1691 = $1690 & 12;
                                      $1692 = ($1691|0)==(0);
                                      if ($1692) {
                                       _cpuz80_2op(38280,39760,39504);
                                       _cpuz80_2op(38280,38912,39768);
                                      } else {
                                       _cpuz80_1op(38256,38264);
                                      }
                                      $1693 = $target2;
                                      _node_generate($1693,0);
                                      $1694 = $source44;
                                      $1695 = (($1694) + 20|0);
                                      $1696 = HEAP32[$1695>>2]|0;
                                      $1697 = $1696 & 48;
                                      $1698 = ($1697|0)==(0);
                                      if ($1698) {
                                       _cpuz80_2op(39520,39528,38264);
                                       $1699 = $source44;
                                       _node_generate($1699,0);
                                      } else {
                                       _cpuz80_1op(38256,38264);
                                       $1700 = $source44;
                                       _node_generate($1700,0);
                                       _cpuz80_1op(38272,39528);
                                      }
                                      $1701 = $target2;
                                      $1702 = (($1701) + 20|0);
                                      $1703 = HEAP32[$1702>>2]|0;
                                      $1704 = $source44;
                                      $1705 = (($1704) + 20|0);
                                      $1706 = HEAP32[$1705>>2]|0;
                                      $1707 = $1703 | $1706;
                                      $1708 = $1707 & 12;
                                      $1709 = ($1708|0)!=(0);
                                      if ($1709) {
                                       _cpuz80_1op(38272,38920);
                                      }
                                     }
                                    }
                                   }
                                  } while(0);
                                  if ((label|0) == 885) {
                                   label = 0;
                                   $source44 = 0;
                                   $1710 = HEAP32[35640>>2]|0;
                                   $1711 = ($1710|0)==(1);
                                   if ($1711) {
                                    $1712 = $pletter;
                                    $1713 = ($1712|0)!=(0);
                                    if (!($1713)) {
                                     $1714 = $length45;
                                     _node_generate($1714,0);
                                     _cpu6502_noop(38104);
                                     _cpu6502_noop(39736);
                                     _cpu6502_noop(38104);
                                    }
                                   } else {
                                    $1715 = HEAP32[35640>>2]|0;
                                    $1716 = ($1715|0)==(2);
                                    if ($1716) {
                                     $1717 = $pletter;
                                     $1718 = ($1717|0)!=(0);
                                     if (!($1718)) {
                                      $1719 = $length45;
                                      _node_generate($1719,0);
                                      _cpu9900_2op(38200,38208,39256);
                                     }
                                    } else {
                                     $1720 = $pletter;
                                     $1721 = ($1720|0)!=(0);
                                     if (!($1721)) {
                                      $1722 = $length45;
                                      _node_generate($1722,0);
                                      $1723 = $target2;
                                      $1724 = (($1723) + 20|0);
                                      $1725 = HEAP32[$1724>>2]|0;
                                      $1726 = $1725 & 12;
                                      $1727 = ($1726|0)==(0);
                                      if ($1727) {
                                       _cpuz80_2op(38280,39760,39504);
                                       _cpuz80_2op(38280,38912,39768);
                                      } else {
                                       _cpuz80_1op(38256,38264);
                                      }
                                     }
                                    }
                                   }
                                   $1728 = $target2;
                                   _node_generate($1728,0);
                                   $1729 = HEAP32[35640>>2]|0;
                                   $1730 = ($1729|0)==(1);
                                   if ($1730) {
                                    _cpu6502_1op(38112,39440);
                                    _cpu6502_1op(38128,39416);
                                    (_strcpy((33104|0),(39584|0))|0);
                                    (_strcat((33104|0),(30952|0))|0);
                                    _cpu6502_1op(38344,33104);
                                    (_strcat((33104|0),(38472|0))|0);
                                    _cpu6502_1op(38152,33104);
                                    _cpu6502_1op(38112,38120);
                                    _cpu6502_1op(38128,38136);
                                    $1731 = $pletter;
                                    $1732 = ($1731|0)!=(0);
                                    if (!($1732)) {
                                     _cpu6502_noop(38144);
                                     _cpu6502_1op(38112,39744);
                                     _cpu6502_noop(38144);
                                     _cpu6502_1op(38112,39752);
                                    }
                                   } else {
                                    $1733 = HEAP32[35640>>2]|0;
                                    $1734 = ($1733|0)==(2);
                                    if ($1734) {
                                     _cpu9900_2op(38200,38208,39448);
                                     (_strcpy((33104|0),(37096|0))|0);
                                     (_strcat((33104|0),(30952|0))|0);
                                     _cpu9900_2op(38520,38208,33104);
                                    } else {
                                     _cpuz80_2op(39520,39528,38264);
                                     (_strcpy((33104|0),(37096|0))|0);
                                     (_strcat((33104|0),(30952|0))|0);
                                     _cpuz80_2op(38280,38264,33104);
                                     $1735 = $pletter;
                                     $1736 = ($1735|0)!=(0);
                                     if (!($1736)) {
                                      $1737 = $target2;
                                      $1738 = (($1737) + 20|0);
                                      $1739 = HEAP32[$1738>>2]|0;
                                      $1740 = $1739 & 12;
                                      $1741 = ($1740|0)!=(0);
                                      if ($1741) {
                                       _cpuz80_1op(38272,38920);
                                      }
                                     }
                                    }
                                   }
                                   _get_lex();
                                  }
                                 }
                                 $1742 = $pletter;
                                 $1743 = ($1742|0)!=(0);
                                 if ($1743) {
                                  $1744 = HEAP32[35640>>2]|0;
                                  $1745 = ($1744|0)==(2);
                                  if ($1745) {
                                   _cpu9900_2op(38200,38208,38368);
                                   _cpu9900_2op(38200,39448,38232);
                                  }
                                  _generic_call(39592);
                                  HEAP32[39600>>2] = 1;
                                 } else {
                                  $1746 = HEAP32[35640>>2]|0;
                                  $1747 = ($1746|0)==(2);
                                  if ($1747) {
                                   _cpu9900_2op(38200,38208,38368);
                                   _cpu9900_2op(38200,39256,39112);
                                   _cpu9900_2op(38200,39448,38208);
                                  }
                                  _generic_interrupt_disable();
                                  $1748 = $vram_read;
                                  $1749 = ($1748|0)!=(0);
                                  if ($1749) {
                                   _generic_call(39776);
                                  } else {
                                   _generic_call(39784);
                                  }
                                  _generic_interrupt_enable();
                                 }
                                 $1750 = $length45;
                                 _node_delete($1750);
                                 $1751 = $target2;
                                 _node_delete($1751);
                                 $1752 = $source44;
                                 _node_delete($1752);
                                } else {
                                 _emit_error(39360);
                                }
                               }
                              } while(0);
                              if ((label|0) == 807) {
                               label = 0;
                               $source43 = 0;
                               $1594 = (_strcmp(30952,39640)|0);
                               $1595 = ($1594|0)==(0);
                               if ($1595) {
                                $color = 1;
                               } else {
                                $color = 0;
                               }
                               _get_lex();
                               $1596 = HEAP32[30928>>2]|0;
                               $1597 = ($1596|0)==(1);
                               do {
                                if ($1597) {
                                 $1598 = (_strcmp(30952,39392)|0);
                                 $1599 = ($1598|0)==(0);
                                 if (!($1599)) {
                                  break;
                                 }
                                 $pletter = 1;
                                 _get_lex();
                                }
                               } while(0);
                               $1600 = (_evaluate_expression(1,1,0)|0);
                               HEAP32[$type>>2] = $1600;
                               $1601 = HEAP32[35640>>2]|0;
                               $1602 = ($1601|0)==(1);
                               if ($1602) {
                                _cpu6502_1op(38112,39440);
                               } else {
                                $1603 = HEAP32[35640>>2]|0;
                                $1604 = ($1603|0)==(2);
                                if ($1604) {
                                 _cpu9900_2op(38200,38208,39448);
                                } else {
                                 _cpuz80_1op(38256,38264);
                                }
                               }
                               $1605 = HEAP32[30928>>2]|0;
                               $1606 = ($1605|0)==(21);
                               if ($1606) {
                                _get_lex();
                               } else {
                                _emit_error(39536);
                               }
                               $1607 = (_evaluate_save_expression(1,0)|0);
                               $length42 = $1607;
                               $1608 = HEAP32[30928>>2]|0;
                               $1609 = ($1608|0)==(21);
                               if ($1609) {
                                _get_lex();
                               } else {
                                _emit_error(39536);
                               }
                               $1610 = HEAP32[30928>>2]|0;
                               $1611 = ($1610|0)!=(1);
                               if ($1611) {
                                _emit_error(39560);
                               } else {
                                $1612 = $pletter;
                                $1613 = ($1612|0)!=(0);
                                do {
                                 if ($1613) {
                                  label = 840;
                                 } else {
                                  $1614 = (_strcmp(30952,35072)|0);
                                  $1615 = ($1614|0)==(0);
                                  if (!($1615)) {
                                   label = 840;
                                   break;
                                  }
                                  $1616 = (_evaluate_save_expression(1,1)|0);
                                  $source43 = $1616;
                                  $1617 = $length42;
                                  _node_generate($1617,0);
                                  $1618 = HEAP32[35640>>2]|0;
                                  $1619 = ($1618|0)==(1);
                                  if ($1619) {
                                   _cpu6502_noop(38104);
                                   $1620 = $source43;
                                   _node_generate($1620,0);
                                   _cpu6502_1op(38112,38120);
                                   _cpu6502_1op(38128,38136);
                                   _cpu6502_noop(38144);
                                  } else {
                                   $1621 = HEAP32[35640>>2]|0;
                                   $1622 = ($1621|0)==(2);
                                   if ($1622) {
                                    _cpu9900_2op(38200,38208,39256);
                                    $1623 = $source43;
                                    _node_generate($1623,0);
                                   } else {
                                    $1624 = $source43;
                                    $1625 = (($1624) + 20|0);
                                    $1626 = HEAP32[$1625>>2]|0;
                                    $1627 = $1626 & 1;
                                    $1628 = ($1627|0)!=(0);
                                    if ($1628) {
                                     _cpuz80_1op(38256,39608);
                                    }
                                    $1629 = $source43;
                                    _node_generate($1629,0);
                                    $1630 = $source43;
                                    $1631 = (($1630) + 20|0);
                                    $1632 = HEAP32[$1631>>2]|0;
                                    $1633 = $1632 & 1;
                                    $1634 = ($1633|0)!=(0);
                                    if ($1634) {
                                     _cpuz80_1op(38272,39608);
                                    }
                                   }
                                  }
                                 }
                                } while(0);
                                if ((label|0) == 840) {
                                 label = 0;
                                 $1635 = $length42;
                                 _node_generate($1635,0);
                                 $1636 = HEAP32[35640>>2]|0;
                                 $1637 = ($1636|0)==(1);
                                 if ($1637) {
                                  _cpu6502_noop(38104);
                                  (_strcpy((33104|0),(39584|0))|0);
                                  (_strcat((33104|0),(30952|0))|0);
                                  _cpu6502_1op(38344,33104);
                                  _cpu6502_1op(38112,38120);
                                  (_strcat((33104|0),(38472|0))|0);
                                  _cpu6502_1op(38344,33104);
                                  _cpu6502_1op(38112,38136);
                                  _cpu6502_noop(38144);
                                 } else {
                                  $1638 = HEAP32[35640>>2]|0;
                                  $1639 = ($1638|0)==(2);
                                  if ($1639) {
                                   _cpu9900_2op(38200,38208,39256);
                                   (_strcpy((33104|0),(37096|0))|0);
                                   (_strcat((33104|0),(30952|0))|0);
                                   _cpu9900_2op(38520,38208,33104);
                                  } else {
                                   (_strcpy((33104|0),(37096|0))|0);
                                   (_strcat((33104|0),(30952|0))|0);
                                   _cpuz80_2op(38280,38264,33104);
                                  }
                                 }
                                 _get_lex();
                                }
                               }
                               $1640 = $pletter;
                               $1641 = ($1640|0)!=(0);
                               if ($1641) {
                                $1642 = $color;
                                $1643 = ($1642|0)!=(0);
                                $1644 = $1643 ? 39648 : 39672;
                                _generic_call($1644);
                                HEAP32[39600>>2] = 1;
                               } else {
                                $1645 = $color;
                                $1646 = ($1645|0)!=(0);
                                $1647 = $1646 ? 39696 : 39712;
                                _generic_call($1647);
                               }
                               $1648 = $length42;
                               _node_delete($1648);
                               $1649 = $source43;
                               _node_delete($1649);
                              }
                             }
                            }
                           } else {
                            $1753 = (_strcmp(30952,39384)|0);
                            $1754 = ($1753|0)==(0);
                            if ($1754) {
                             _get_lex();
                             $1755 = HEAP32[30928>>2]|0;
                             $1756 = ($1755|0)==(1);
                             do {
                              if ($1756) {
                               $1757 = (_strcmp(30952,39792)|0);
                               $1758 = ($1757|0)==(0);
                               if (!($1758)) {
                                label = 954;
                                break;
                               }
                               _get_lex();
                               $1759 = HEAP32[30928>>2]|0;
                               $1760 = ($1759|0)==(1);
                               do {
                                if ($1760) {
                                 $1761 = (_strcmp(30952,39800)|0);
                                 $1762 = ($1761|0)==(0);
                                 if (!($1762)) {
                                  label = 942;
                                  break;
                                 }
                                 $1763 = HEAP32[35640>>2]|0;
                                 $1764 = ($1763|0)==(1);
                                 if ($1764) {
                                  _cpu6502_1op(38344,39808);
                                  _cpu6502_1op(34200,39816);
                                  _cpu6502_1op(38112,39808);
                                 } else {
                                  $1765 = HEAP32[35640>>2]|0;
                                  $1766 = ($1765|0)==(2);
                                  if ($1766) {
                                   _cpu9900_2op(38520,38208,39824);
                                   _cpu9900_2op(39832,38208,39840);
                                  } else {
                                   _cpuz80_2op(38280,38264,39808);
                                   _cpuz80_2op(39848,39856,38288);
                                  }
                                 }
                                 _get_lex();
                                } else {
                                 label = 942;
                                }
                               } while(0);
                               if ((label|0) == 942) {
                                label = 0;
                                $1767 = HEAP32[30928>>2]|0;
                                $1768 = ($1767|0)==(1);
                                do {
                                 if ($1768) {
                                  $1769 = (_strcmp(30952,39864)|0);
                                  $1770 = ($1769|0)==(0);
                                  if (!($1770)) {
                                   label = 951;
                                   break;
                                  }
                                  $1771 = HEAP32[35640>>2]|0;
                                  $1772 = ($1771|0)==(1);
                                  if ($1772) {
                                   _cpu6502_1op(38344,39808);
                                   _cpu6502_1op(39872,39880);
                                   _cpu6502_1op(38112,39808);
                                  } else {
                                   $1773 = HEAP32[35640>>2]|0;
                                   $1774 = ($1773|0)==(2);
                                   if ($1774) {
                                    _cpu9900_2op(38520,38208,39824);
                                    _cpu9900_2op(39888,38208,39840);
                                   } else {
                                    _cpuz80_2op(38280,38264,39808);
                                    _cpuz80_2op(39496,39856,38288);
                                   }
                                  }
                                  _get_lex();
                                 } else {
                                  label = 951;
                                 }
                                } while(0);
                                if ((label|0) == 951) {
                                 label = 0;
                                 _emit_error(39896);
                                }
                               }
                              } else {
                               label = 954;
                              }
                             } while(0);
                             if ((label|0) == 954) {
                              label = 0;
                              $1775 = (_evaluate_expression(1,0,0)|0);
                              HEAP32[$type>>2] = $1775;
                              $1776 = HEAP32[35640>>2]|0;
                              $1777 = ($1776|0)==(1);
                              if ($1777) {
                               _cpu6502_noop(38104);
                              } else {
                               $1778 = HEAP32[35640>>2]|0;
                               $1779 = ($1778|0)==(2);
                               if ($1779) {
                                _cpu9900_2op(38200,38208,39448);
                               } else {
                                _cpuz80_1op(38256,39608);
                               }
                              }
                              $1780 = HEAP32[30928>>2]|0;
                              $1781 = ($1780|0)==(21);
                              if ($1781) {
                               _get_lex();
                              } else {
                               _emit_error(39936);
                              }
                              $1782 = (_evaluate_expression(1,0,0)|0);
                              HEAP32[$type>>2] = $1782;
                              $1783 = HEAP32[35640>>2]|0;
                              $1784 = ($1783|0)==(1);
                              if ($1784) {
                               _cpu6502_1op(38112,39960);
                              } else {
                               $1785 = HEAP32[35640>>2]|0;
                               $1786 = ($1785|0)==(2);
                               if ($1786) {
                                _cpu9900_2op(38240,38208,39256);
                               } else {
                                _cpuz80_1op(38256,39608);
                               }
                              }
                              $1787 = HEAP32[30928>>2]|0;
                              $1788 = ($1787|0)==(21);
                              if ($1788) {
                               _get_lex();
                              } else {
                               _emit_error(39936);
                              }
                              $1789 = (_evaluate_expression(1,0,0)|0);
                              HEAP32[$type>>2] = $1789;
                              $1790 = HEAP32[35640>>2]|0;
                              $1791 = ($1790|0)==(1);
                              if ($1791) {
                               _cpu6502_1op(38112,39976);
                              } else {
                               $1792 = HEAP32[35640>>2]|0;
                               $1793 = ($1792|0)==(2);
                               if ($1793) {
                                _cpu9900_2op(38240,38208,39992);
                               } else {
                                _cpuz80_1op(38256,39608);
                               }
                              }
                              $1794 = HEAP32[30928>>2]|0;
                              $1795 = ($1794|0)==(21);
                              if ($1795) {
                               _get_lex();
                              } else {
                               _emit_error(39936);
                              }
                              $1796 = (_evaluate_expression(1,0,0)|0);
                              HEAP32[$type>>2] = $1796;
                              $1797 = HEAP32[2808>>2]|0;
                              $1798 = ($1797|0)!=(13);
                              if ($1798) {
                               $1799 = HEAP32[35640>>2]|0;
                               $1800 = ($1799|0)==(1);
                               if ($1800) {
                                _cpu6502_1op(38112,40000);
                               } else {
                                $1801 = HEAP32[35640>>2]|0;
                                $1802 = ($1801|0)==(2);
                                if ($1802) {
                                 _cpu9900_2op(38240,38208,40016);
                                } else {
                                 _cpuz80_1op(38256,39608);
                                }
                               }
                               $1803 = HEAP32[30928>>2]|0;
                               $1804 = ($1803|0)==(21);
                               if ($1804) {
                                _get_lex();
                               } else {
                                _emit_error(39936);
                               }
                               $1805 = (_evaluate_expression(1,0,0)|0);
                               HEAP32[$type>>2] = $1805;
                               $1806 = HEAP32[35640>>2]|0;
                               $1807 = ($1806|0)==(1);
                               if ($1807) {
                                _cpu6502_1op(38112,40024);
                                _cpu6502_noop(38144);
                               }
                              }
                              _generic_call(40040);
                             }
                            } else {
                             $1808 = (_strcmp(30952,40056)|0);
                             $1809 = ($1808|0)==(0);
                             if ($1809) {
                              _generic_dump();
                              _get_lex();
                              $1810 = HEAP32[30928>>2]|0;
                              $1811 = ($1810|0)!=(2);
                              if ($1811) {
                               _emit_error(40064);
                              } else {
                               $1812 = HEAP32[30944>>2]|0;
                               $1813 = ($1812|0)==(16);
                               if ($1813) {
                                $1814 = HEAP32[2808>>2]|0;
                                $1815 = ($1814|0)==(13);
                                if ($1815) {
                                 $first_time = 1;
                                 HEAP32[30936>>2] = 0;
                                 $c46 = 0;
                                 while(1) {
                                  $1816 = $c46;
                                  $1817 = ($1816|0)<(8);
                                  if (!($1817)) {
                                   break;
                                  }
                                  $1818 = $c46;
                                  $1819 = (30952 + ($1818)|0);
                                  $1820 = HEAP8[$1819>>0]|0;
                                  $1821 = $1820 << 24 >> 24;
                                  $1822 = ($1821|0)!=(48);
                                  do {
                                   if ($1822) {
                                    $1823 = $c46;
                                    $1824 = (30952 + ($1823)|0);
                                    $1825 = HEAP8[$1824>>0]|0;
                                    $1826 = $1825 << 24 >> 24;
                                    $1827 = ($1826|0)!=(95);
                                    if (!($1827)) {
                                     break;
                                    }
                                    $1828 = $c46;
                                    $1829 = (30952 + ($1828)|0);
                                    $1830 = HEAP8[$1829>>0]|0;
                                    $1831 = $1830 << 24 >> 24;
                                    $1832 = ($1831|0)!=(32);
                                    if (!($1832)) {
                                     break;
                                    }
                                    $1833 = $c46;
                                    $1834 = (30952 + ($1833)|0);
                                    $1835 = HEAP8[$1834>>0]|0;
                                    $1836 = $1835 << 24 >> 24;
                                    $1837 = ($1836|0)!=(46);
                                    if (!($1837)) {
                                     break;
                                    }
                                    $1838 = $c46;
                                    $1839 = (30952 + ($1838)|0);
                                    $1840 = HEAP8[$1839>>0]|0;
                                    $1841 = $1840 << 24 >> 24;
                                    $1842 = (_isxdigit($1841)|0);
                                    $1843 = ($1842|0)!=(0);
                                    if ($1843) {
                                     $1844 = $c46;
                                     $1845 = (30952 + ($1844)|0);
                                     $1846 = HEAP8[$1845>>0]|0;
                                     $1847 = $1846 << 24 >> 24;
                                     $1848 = (_toupper($1847)|0);
                                     $1849 = (($1848) - 48)|0;
                                     $d47 = $1849;
                                     $1850 = $d47;
                                     $1851 = ($1850|0)>(9);
                                     if ($1851) {
                                      $1852 = $d47;
                                      $1853 = (($1852) - 7)|0;
                                      $d47 = $1853;
                                     }
                                    } else {
                                     $1854 = $first_time;
                                     $1855 = ($1854|0)!=(0);
                                     if ($1855) {
                                      _emit_warning(40088);
                                      $first_time = 0;
                                     }
                                     $d47 = 0;
                                    }
                                    $1856 = $d47;
                                    $1857 = $1856 & 1;
                                    $1858 = $1857 << 7;
                                    $1859 = $c46;
                                    $1860 = $1858 >> $1859;
                                    $1861 = HEAP32[30936>>2]|0;
                                    $1862 = $1861 | $1860;
                                    HEAP32[30936>>2] = $1862;
                                    $1863 = $d47;
                                    $1864 = $1863 & 2;
                                    $1865 = $1864 << 6;
                                    $1866 = $c46;
                                    $1867 = $1865 >> $1866;
                                    $1868 = $1867 << 8;
                                    $1869 = HEAP32[30936>>2]|0;
                                    $1870 = $1869 | $1868;
                                    HEAP32[30936>>2] = $1870;
                                    $1871 = $d47;
                                    $1872 = $1871 & 4;
                                    $1873 = $1872 << 5;
                                    $1874 = $c46;
                                    $1875 = $1873 >> $1874;
                                    $1876 = $1875 << 16;
                                    $1877 = HEAP32[30936>>2]|0;
                                    $1878 = $1877 | $1876;
                                    HEAP32[30936>>2] = $1878;
                                    $1879 = $d47;
                                    $1880 = $1879 & 8;
                                    $1881 = $1880 << 4;
                                    $1882 = $c46;
                                    $1883 = $1881 >> $1882;
                                    $1884 = $1883 << 24;
                                    $1885 = HEAP32[30936>>2]|0;
                                    $1886 = $1885 | $1884;
                                    HEAP32[30936>>2] = $1886;
                                   }
                                  } while(0);
                                  $1887 = $c46;
                                  $1888 = (($1887) + 1)|0;
                                  $c46 = $1888;
                                 }
                                 $1889 = HEAP32[30936>>2]|0;
                                 $1890 = $1889&255;
                                 $1891 = HEAP32[40128>>2]|0;
                                 $1892 = (($1891) + 0)|0;
                                 $1893 = (40136 + ($1892)|0);
                                 HEAP8[$1893>>0] = $1890;
                                 $1894 = HEAP32[30936>>2]|0;
                                 $1895 = $1894 >> 8;
                                 $1896 = $1895&255;
                                 $1897 = HEAP32[40128>>2]|0;
                                 $1898 = (($1897) + 1)|0;
                                 $1899 = (40136 + ($1898)|0);
                                 HEAP8[$1899>>0] = $1896;
                                 $1900 = HEAP32[30936>>2]|0;
                                 $1901 = $1900 >> 16;
                                 $1902 = $1901&255;
                                 $1903 = HEAP32[40128>>2]|0;
                                 $1904 = (($1903) + 2)|0;
                                 $1905 = (40136 + ($1904)|0);
                                 HEAP8[$1905>>0] = $1902;
                                 $1906 = HEAP32[30936>>2]|0;
                                 $1907 = $1906 >> 24;
                                 $1908 = $1907&255;
                                 $1909 = HEAP32[40128>>2]|0;
                                 $1910 = (($1909) + 3)|0;
                                 $1911 = (40136 + ($1910)|0);
                                 HEAP8[$1911>>0] = $1908;
                                 HEAP32[30936>>2] = 0;
                                 $c46 = 0;
                                 while(1) {
                                  $1912 = $c46;
                                  $1913 = ($1912|0)<(8);
                                  if (!($1913)) {
                                   break;
                                  }
                                  $1914 = $c46;
                                  $1915 = (8 + ($1914))|0;
                                  $1916 = (30952 + ($1915)|0);
                                  $1917 = HEAP8[$1916>>0]|0;
                                  $1918 = $1917 << 24 >> 24;
                                  $1919 = ($1918|0)!=(48);
                                  do {
                                   if ($1919) {
                                    $1920 = $c46;
                                    $1921 = (8 + ($1920))|0;
                                    $1922 = (30952 + ($1921)|0);
                                    $1923 = HEAP8[$1922>>0]|0;
                                    $1924 = $1923 << 24 >> 24;
                                    $1925 = ($1924|0)!=(95);
                                    if (!($1925)) {
                                     break;
                                    }
                                    $1926 = $c46;
                                    $1927 = (8 + ($1926))|0;
                                    $1928 = (30952 + ($1927)|0);
                                    $1929 = HEAP8[$1928>>0]|0;
                                    $1930 = $1929 << 24 >> 24;
                                    $1931 = ($1930|0)!=(32);
                                    if (!($1931)) {
                                     break;
                                    }
                                    $1932 = $c46;
                                    $1933 = (8 + ($1932))|0;
                                    $1934 = (30952 + ($1933)|0);
                                    $1935 = HEAP8[$1934>>0]|0;
                                    $1936 = $1935 << 24 >> 24;
                                    $1937 = ($1936|0)!=(46);
                                    if (!($1937)) {
                                     break;
                                    }
                                    $1938 = $c46;
                                    $1939 = (8 + ($1938))|0;
                                    $1940 = (30952 + ($1939)|0);
                                    $1941 = HEAP8[$1940>>0]|0;
                                    $1942 = $1941 << 24 >> 24;
                                    $1943 = (_isxdigit($1942)|0);
                                    $1944 = ($1943|0)!=(0);
                                    if ($1944) {
                                     $1945 = $c46;
                                     $1946 = (8 + ($1945))|0;
                                     $1947 = (30952 + ($1946)|0);
                                     $1948 = HEAP8[$1947>>0]|0;
                                     $1949 = $1948 << 24 >> 24;
                                     $1950 = (_toupper($1949)|0);
                                     $1951 = (($1950) - 48)|0;
                                     $d48 = $1951;
                                     $1952 = $d48;
                                     $1953 = ($1952|0)>(9);
                                     if ($1953) {
                                      $1954 = $d48;
                                      $1955 = (($1954) - 7)|0;
                                      $d48 = $1955;
                                     }
                                    } else {
                                     $1956 = $first_time;
                                     $1957 = ($1956|0)!=(0);
                                     if ($1957) {
                                      _emit_warning(40088);
                                      $first_time = 0;
                                     }
                                     $d48 = 0;
                                    }
                                    $1958 = $d48;
                                    $1959 = $1958 & 1;
                                    $1960 = $1959 << 7;
                                    $1961 = $c46;
                                    $1962 = $1960 >> $1961;
                                    $1963 = HEAP32[30936>>2]|0;
                                    $1964 = $1963 | $1962;
                                    HEAP32[30936>>2] = $1964;
                                    $1965 = $d48;
                                    $1966 = $1965 & 2;
                                    $1967 = $1966 << 6;
                                    $1968 = $c46;
                                    $1969 = $1967 >> $1968;
                                    $1970 = $1969 << 8;
                                    $1971 = HEAP32[30936>>2]|0;
                                    $1972 = $1971 | $1970;
                                    HEAP32[30936>>2] = $1972;
                                    $1973 = $d48;
                                    $1974 = $1973 & 4;
                                    $1975 = $1974 << 5;
                                    $1976 = $c46;
                                    $1977 = $1975 >> $1976;
                                    $1978 = $1977 << 16;
                                    $1979 = HEAP32[30936>>2]|0;
                                    $1980 = $1979 | $1978;
                                    HEAP32[30936>>2] = $1980;
                                    $1981 = $d48;
                                    $1982 = $1981 & 8;
                                    $1983 = $1982 << 4;
                                    $1984 = $c46;
                                    $1985 = $1983 >> $1984;
                                    $1986 = $1985 << 24;
                                    $1987 = HEAP32[30936>>2]|0;
                                    $1988 = $1987 | $1986;
                                    HEAP32[30936>>2] = $1988;
                                   }
                                  } while(0);
                                  $1989 = $c46;
                                  $1990 = (($1989) + 1)|0;
                                  $c46 = $1990;
                                 }
                                 _get_lex();
                                 $1991 = HEAP32[30936>>2]|0;
                                 $1992 = $1991&255;
                                 $1993 = HEAP32[40128>>2]|0;
                                 $1994 = (($1993) + 64)|0;
                                 $1995 = (40136 + ($1994)|0);
                                 HEAP8[$1995>>0] = $1992;
                                 $1996 = HEAP32[30936>>2]|0;
                                 $1997 = $1996 >> 8;
                                 $1998 = $1997&255;
                                 $1999 = HEAP32[40128>>2]|0;
                                 $2000 = (($1999) + 65)|0;
                                 $2001 = (40136 + ($2000)|0);
                                 HEAP8[$2001>>0] = $1998;
                                 $2002 = HEAP32[30936>>2]|0;
                                 $2003 = $2002 >> 16;
                                 $2004 = $2003&255;
                                 $2005 = HEAP32[40128>>2]|0;
                                 $2006 = (($2005) + 66)|0;
                                 $2007 = (40136 + ($2006)|0);
                                 HEAP8[$2007>>0] = $2004;
                                 $2008 = HEAP32[30936>>2]|0;
                                 $2009 = $2008 >> 24;
                                 $2010 = $2009&255;
                                 $2011 = HEAP32[40128>>2]|0;
                                 $2012 = (($2011) + 67)|0;
                                 $2013 = (40136 + ($2012)|0);
                                 HEAP8[$2013>>0] = $2010;
                                 $2014 = HEAP32[40128>>2]|0;
                                 $2015 = (($2014) + 4)|0;
                                 HEAP32[40128>>2] = $2015;
                                 $2016 = HEAP32[40128>>2]|0;
                                 $2017 = ($2016|0)==(64);
                                 if ($2017) {
                                  HEAP32[40128>>2] = 0;
                                  $c46 = 0;
                                  while(1) {
                                   $2018 = $c46;
                                   $2019 = ($2018|0)<(128);
                                   if (!($2019)) {
                                    break;
                                   }
                                   $2020 = $c46;
                                   $2021 = (40136 + ($2020)|0);
                                   $2022 = HEAP8[$2021>>0]|0;
                                   $2023 = $2022&255;
                                   $2024 = $c46;
                                   $2025 = (($2024) + 1)|0;
                                   $2026 = (40136 + ($2025)|0);
                                   $2027 = HEAP8[$2026>>0]|0;
                                   $2028 = $2027&255;
                                   $2029 = $c46;
                                   $2030 = (($2029) + 2)|0;
                                   $2031 = (40136 + ($2030)|0);
                                   $2032 = HEAP8[$2031>>0]|0;
                                   $2033 = $2032&255;
                                   $2034 = $c46;
                                   $2035 = (($2034) + 3)|0;
                                   $2036 = (40136 + ($2035)|0);
                                   $2037 = HEAP8[$2036>>0]|0;
                                   $2038 = $2037&255;
                                   $2039 = $c46;
                                   $2040 = (($2039) + 4)|0;
                                   $2041 = (40136 + ($2040)|0);
                                   $2042 = HEAP8[$2041>>0]|0;
                                   $2043 = $2042&255;
                                   $2044 = $c46;
                                   $2045 = (($2044) + 5)|0;
                                   $2046 = (40136 + ($2045)|0);
                                   $2047 = HEAP8[$2046>>0]|0;
                                   $2048 = $2047&255;
                                   $2049 = $c46;
                                   $2050 = (($2049) + 6)|0;
                                   $2051 = (40136 + ($2050)|0);
                                   $2052 = HEAP8[$2051>>0]|0;
                                   $2053 = $2052&255;
                                   $2054 = $c46;
                                   $2055 = (($2054) + 7)|0;
                                   $2056 = (40136 + ($2055)|0);
                                   $2057 = HEAP8[$2056>>0]|0;
                                   $2058 = $2057&255;
                                   HEAP32[$vararg_buffer286>>2] = $2023;
                                   $vararg_ptr289 = (($vararg_buffer286) + 4|0);
                                   HEAP32[$vararg_ptr289>>2] = $2028;
                                   $vararg_ptr290 = (($vararg_buffer286) + 8|0);
                                   HEAP32[$vararg_ptr290>>2] = $2033;
                                   $vararg_ptr291 = (($vararg_buffer286) + 12|0);
                                   HEAP32[$vararg_ptr291>>2] = $2038;
                                   $vararg_ptr292 = (($vararg_buffer286) + 16|0);
                                   HEAP32[$vararg_ptr292>>2] = $2043;
                                   $vararg_ptr293 = (($vararg_buffer286) + 20|0);
                                   HEAP32[$vararg_ptr293>>2] = $2048;
                                   $vararg_ptr294 = (($vararg_buffer286) + 24|0);
                                   HEAP32[$vararg_ptr294>>2] = $2053;
                                   $vararg_ptr295 = (($vararg_buffer286) + 28|0);
                                   HEAP32[$vararg_ptr295>>2] = $2058;
                                   (_sprintf(33104,40264,$vararg_buffer286)|0);
                                   $2059 = HEAP32[2824>>2]|0;
                                   HEAP32[$vararg_buffer296>>2] = 33104;
                                   (_fprintf(($2059|0),(40320|0),($vararg_buffer296|0))|0);
                                   $2060 = $c46;
                                   $2061 = (($2060) + 8)|0;
                                   $c46 = $2061;
                                  }
                                 }
                                } else {
                                 HEAP32[30936>>2] = 0;
                                 $c46 = 0;
                                 while(1) {
                                  $2062 = $c46;
                                  $2063 = ($2062|0)<(16);
                                  if (!($2063)) {
                                   break;
                                  }
                                  $2064 = $c46;
                                  $2065 = (30952 + ($2064)|0);
                                  $2066 = HEAP8[$2065>>0]|0;
                                  $2067 = $2066 << 24 >> 24;
                                  $2068 = ($2067|0)!=(48);
                                  do {
                                   if ($2068) {
                                    $2069 = $c46;
                                    $2070 = (30952 + ($2069)|0);
                                    $2071 = HEAP8[$2070>>0]|0;
                                    $2072 = $2071 << 24 >> 24;
                                    $2073 = ($2072|0)!=(95);
                                    if (!($2073)) {
                                     break;
                                    }
                                    $2074 = $c46;
                                    $2075 = (30952 + ($2074)|0);
                                    $2076 = HEAP8[$2075>>0]|0;
                                    $2077 = $2076 << 24 >> 24;
                                    $2078 = ($2077|0)!=(32);
                                    if (!($2078)) {
                                     break;
                                    }
                                    $2079 = $c46;
                                    $2080 = (30952 + ($2079)|0);
                                    $2081 = HEAP8[$2080>>0]|0;
                                    $2082 = $2081 << 24 >> 24;
                                    $2083 = ($2082|0)!=(46);
                                    if (!($2083)) {
                                     break;
                                    }
                                    $2084 = $c46;
                                    $2085 = 32768 >> $2084;
                                    $2086 = HEAP32[30936>>2]|0;
                                    $2087 = $2086 | $2085;
                                    HEAP32[30936>>2] = $2087;
                                   }
                                  } while(0);
                                  $2088 = $c46;
                                  $2089 = (($2088) + 1)|0;
                                  $c46 = $2089;
                                 }
                                 _get_lex();
                                 $2090 = HEAP32[30936>>2]|0;
                                 $2091 = $2090 >> 8;
                                 $2092 = $2091&255;
                                 $2093 = HEAP32[40128>>2]|0;
                                 $2094 = (40136 + ($2093)|0);
                                 HEAP8[$2094>>0] = $2092;
                                 $2095 = HEAP32[30936>>2]|0;
                                 $2096 = $2095&255;
                                 $2097 = HEAP32[40128>>2]|0;
                                 $2098 = (($2097) + 16)|0;
                                 $2099 = (40136 + ($2098)|0);
                                 HEAP8[$2099>>0] = $2096;
                                 $2100 = HEAP32[40128>>2]|0;
                                 $2101 = (($2100) + 1)|0;
                                 HEAP32[40128>>2] = $2101;
                                 $2102 = HEAP32[40128>>2]|0;
                                 $2103 = ($2102|0)>=(16);
                                 if ($2103) {
                                  HEAP32[40128>>2] = 0;
                                  $c46 = 0;
                                  while(1) {
                                   $2104 = $c46;
                                   $2105 = ($2104|0)<(32);
                                   if (!($2105)) {
                                    break;
                                   }
                                   $2106 = HEAP32[35640>>2]|0;
                                   $2107 = ($2106|0)==(2);
                                   if ($2107) {
                                    $2108 = $c46;
                                    $2109 = (40136 + ($2108)|0);
                                    $2110 = HEAP8[$2109>>0]|0;
                                    $2111 = $2110&255;
                                    $2112 = $c46;
                                    $2113 = (($2112) + 1)|0;
                                    $2114 = (40136 + ($2113)|0);
                                    $2115 = HEAP8[$2114>>0]|0;
                                    $2116 = $2115&255;
                                    $2117 = $c46;
                                    $2118 = (($2117) + 2)|0;
                                    $2119 = (40136 + ($2118)|0);
                                    $2120 = HEAP8[$2119>>0]|0;
                                    $2121 = $2120&255;
                                    $2122 = $c46;
                                    $2123 = (($2122) + 3)|0;
                                    $2124 = (40136 + ($2123)|0);
                                    $2125 = HEAP8[$2124>>0]|0;
                                    $2126 = $2125&255;
                                    $2127 = $c46;
                                    $2128 = (($2127) + 4)|0;
                                    $2129 = (40136 + ($2128)|0);
                                    $2130 = HEAP8[$2129>>0]|0;
                                    $2131 = $2130&255;
                                    $2132 = $c46;
                                    $2133 = (($2132) + 5)|0;
                                    $2134 = (40136 + ($2133)|0);
                                    $2135 = HEAP8[$2134>>0]|0;
                                    $2136 = $2135&255;
                                    $2137 = $c46;
                                    $2138 = (($2137) + 6)|0;
                                    $2139 = (40136 + ($2138)|0);
                                    $2140 = HEAP8[$2139>>0]|0;
                                    $2141 = $2140&255;
                                    $2142 = $c46;
                                    $2143 = (($2142) + 7)|0;
                                    $2144 = (40136 + ($2143)|0);
                                    $2145 = HEAP8[$2144>>0]|0;
                                    $2146 = $2145&255;
                                    HEAP32[$vararg_buffer299>>2] = $2111;
                                    $vararg_ptr302 = (($vararg_buffer299) + 4|0);
                                    HEAP32[$vararg_ptr302>>2] = $2116;
                                    $vararg_ptr303 = (($vararg_buffer299) + 8|0);
                                    HEAP32[$vararg_ptr303>>2] = $2121;
                                    $vararg_ptr304 = (($vararg_buffer299) + 12|0);
                                    HEAP32[$vararg_ptr304>>2] = $2126;
                                    $vararg_ptr305 = (($vararg_buffer299) + 16|0);
                                    HEAP32[$vararg_ptr305>>2] = $2131;
                                    $vararg_ptr306 = (($vararg_buffer299) + 20|0);
                                    HEAP32[$vararg_ptr306>>2] = $2136;
                                    $vararg_ptr307 = (($vararg_buffer299) + 24|0);
                                    HEAP32[$vararg_ptr307>>2] = $2141;
                                    $vararg_ptr308 = (($vararg_buffer299) + 28|0);
                                    HEAP32[$vararg_ptr308>>2] = $2146;
                                    (_sprintf(33104,40328,$vararg_buffer299)|0);
                                   } else {
                                    $2147 = $c46;
                                    $2148 = (40136 + ($2147)|0);
                                    $2149 = HEAP8[$2148>>0]|0;
                                    $2150 = $2149&255;
                                    $2151 = $c46;
                                    $2152 = (($2151) + 1)|0;
                                    $2153 = (40136 + ($2152)|0);
                                    $2154 = HEAP8[$2153>>0]|0;
                                    $2155 = $2154&255;
                                    $2156 = $c46;
                                    $2157 = (($2156) + 2)|0;
                                    $2158 = (40136 + ($2157)|0);
                                    $2159 = HEAP8[$2158>>0]|0;
                                    $2160 = $2159&255;
                                    $2161 = $c46;
                                    $2162 = (($2161) + 3)|0;
                                    $2163 = (40136 + ($2162)|0);
                                    $2164 = HEAP8[$2163>>0]|0;
                                    $2165 = $2164&255;
                                    $2166 = $c46;
                                    $2167 = (($2166) + 4)|0;
                                    $2168 = (40136 + ($2167)|0);
                                    $2169 = HEAP8[$2168>>0]|0;
                                    $2170 = $2169&255;
                                    $2171 = $c46;
                                    $2172 = (($2171) + 5)|0;
                                    $2173 = (40136 + ($2172)|0);
                                    $2174 = HEAP8[$2173>>0]|0;
                                    $2175 = $2174&255;
                                    $2176 = $c46;
                                    $2177 = (($2176) + 6)|0;
                                    $2178 = (40136 + ($2177)|0);
                                    $2179 = HEAP8[$2178>>0]|0;
                                    $2180 = $2179&255;
                                    $2181 = $c46;
                                    $2182 = (($2181) + 7)|0;
                                    $2183 = (40136 + ($2182)|0);
                                    $2184 = HEAP8[$2183>>0]|0;
                                    $2185 = $2184&255;
                                    HEAP32[$vararg_buffer309>>2] = $2150;
                                    $vararg_ptr312 = (($vararg_buffer309) + 4|0);
                                    HEAP32[$vararg_ptr312>>2] = $2155;
                                    $vararg_ptr313 = (($vararg_buffer309) + 8|0);
                                    HEAP32[$vararg_ptr313>>2] = $2160;
                                    $vararg_ptr314 = (($vararg_buffer309) + 12|0);
                                    HEAP32[$vararg_ptr314>>2] = $2165;
                                    $vararg_ptr315 = (($vararg_buffer309) + 16|0);
                                    HEAP32[$vararg_ptr315>>2] = $2170;
                                    $vararg_ptr316 = (($vararg_buffer309) + 20|0);
                                    HEAP32[$vararg_ptr316>>2] = $2175;
                                    $vararg_ptr317 = (($vararg_buffer309) + 24|0);
                                    HEAP32[$vararg_ptr317>>2] = $2180;
                                    $vararg_ptr318 = (($vararg_buffer309) + 28|0);
                                    HEAP32[$vararg_ptr318>>2] = $2185;
                                    (_sprintf(33104,40264,$vararg_buffer309)|0);
                                   }
                                   $2186 = HEAP32[2824>>2]|0;
                                   HEAP32[$vararg_buffer319>>2] = 33104;
                                   (_fprintf(($2186|0),(40320|0),($vararg_buffer319|0))|0);
                                   $2187 = $c46;
                                   $2188 = (($2187) + 8)|0;
                                   $c46 = $2188;
                                  }
                                 }
                                }
                               } else {
                                $2189 = HEAP32[30944>>2]|0;
                                $2190 = ($2189|0)==(8);
                                if ($2190) {
                                 HEAP32[30936>>2] = 0;
                                 $2191 = HEAP32[2808>>2]|0;
                                 $2192 = ($2191|0)==(13);
                                 if ($2192) {
                                  $first_time50 = 1;
                                  $c49 = 0;
                                  while(1) {
                                   $2193 = $c49;
                                   $2194 = ($2193|0)<(8);
                                   if (!($2194)) {
                                    break;
                                   }
                                   $2195 = $c49;
                                   $2196 = (30952 + ($2195)|0);
                                   $2197 = HEAP8[$2196>>0]|0;
                                   $2198 = $2197 << 24 >> 24;
                                   $2199 = ($2198|0)!=(48);
                                   do {
                                    if ($2199) {
                                     $2200 = $c49;
                                     $2201 = (30952 + ($2200)|0);
                                     $2202 = HEAP8[$2201>>0]|0;
                                     $2203 = $2202 << 24 >> 24;
                                     $2204 = ($2203|0)!=(95);
                                     if (!($2204)) {
                                      break;
                                     }
                                     $2205 = $c49;
                                     $2206 = (30952 + ($2205)|0);
                                     $2207 = HEAP8[$2206>>0]|0;
                                     $2208 = $2207 << 24 >> 24;
                                     $2209 = ($2208|0)!=(32);
                                     if (!($2209)) {
                                      break;
                                     }
                                     $2210 = $c49;
                                     $2211 = (30952 + ($2210)|0);
                                     $2212 = HEAP8[$2211>>0]|0;
                                     $2213 = $2212 << 24 >> 24;
                                     $2214 = ($2213|0)!=(46);
                                     if (!($2214)) {
                                      break;
                                     }
                                     $2215 = $c49;
                                     $2216 = (30952 + ($2215)|0);
                                     $2217 = HEAP8[$2216>>0]|0;
                                     $2218 = $2217 << 24 >> 24;
                                     $2219 = (_isxdigit($2218)|0);
                                     $2220 = ($2219|0)!=(0);
                                     if ($2220) {
                                      $2221 = $c49;
                                      $2222 = (30952 + ($2221)|0);
                                      $2223 = HEAP8[$2222>>0]|0;
                                      $2224 = $2223 << 24 >> 24;
                                      $2225 = (_toupper($2224)|0);
                                      $2226 = (($2225) - 48)|0;
                                      $d51 = $2226;
                                      $2227 = $d51;
                                      $2228 = ($2227|0)>(9);
                                      if ($2228) {
                                       $2229 = $d51;
                                       $2230 = (($2229) - 7)|0;
                                       $d51 = $2230;
                                      }
                                     } else {
                                      $2231 = $first_time50;
                                      $2232 = ($2231|0)!=(0);
                                      if ($2232) {
                                       _emit_warning(40088);
                                       $first_time50 = 0;
                                      }
                                      $d51 = 0;
                                     }
                                     $2233 = $d51;
                                     $2234 = $2233 & 1;
                                     $2235 = $2234 << 7;
                                     $2236 = $c49;
                                     $2237 = $2235 >> $2236;
                                     $2238 = HEAP32[30936>>2]|0;
                                     $2239 = $2238 | $2237;
                                     HEAP32[30936>>2] = $2239;
                                     $2240 = $d51;
                                     $2241 = $2240 & 2;
                                     $2242 = $2241 << 6;
                                     $2243 = $c49;
                                     $2244 = $2242 >> $2243;
                                     $2245 = $2244 << 8;
                                     $2246 = HEAP32[30936>>2]|0;
                                     $2247 = $2246 | $2245;
                                     HEAP32[30936>>2] = $2247;
                                     $2248 = $d51;
                                     $2249 = $2248 & 4;
                                     $2250 = $2249 << 5;
                                     $2251 = $c49;
                                     $2252 = $2250 >> $2251;
                                     $2253 = $2252 << 16;
                                     $2254 = HEAP32[30936>>2]|0;
                                     $2255 = $2254 | $2253;
                                     HEAP32[30936>>2] = $2255;
                                     $2256 = $d51;
                                     $2257 = $2256 & 8;
                                     $2258 = $2257 << 4;
                                     $2259 = $c49;
                                     $2260 = $2258 >> $2259;
                                     $2261 = $2260 << 24;
                                     $2262 = HEAP32[30936>>2]|0;
                                     $2263 = $2262 | $2261;
                                     HEAP32[30936>>2] = $2263;
                                    }
                                   } while(0);
                                   $2264 = $c49;
                                   $2265 = (($2264) + 1)|0;
                                   $c49 = $2265;
                                  }
                                  _get_lex();
                                  $2266 = HEAP32[30936>>2]|0;
                                  $2267 = $2266&255;
                                  $2268 = HEAP32[40128>>2]|0;
                                  $2269 = (($2268) + 1)|0;
                                  HEAP32[40128>>2] = $2269;
                                  $2270 = (40136 + ($2268)|0);
                                  HEAP8[$2270>>0] = $2267;
                                  $2271 = HEAP32[30936>>2]|0;
                                  $2272 = $2271 >> 8;
                                  $2273 = $2272&255;
                                  $2274 = HEAP32[40128>>2]|0;
                                  $2275 = (($2274) + 1)|0;
                                  HEAP32[40128>>2] = $2275;
                                  $2276 = (40136 + ($2274)|0);
                                  HEAP8[$2276>>0] = $2273;
                                  $2277 = HEAP32[30936>>2]|0;
                                  $2278 = $2277 >> 16;
                                  $2279 = $2278&255;
                                  $2280 = HEAP32[40128>>2]|0;
                                  $2281 = (($2280) + 1)|0;
                                  HEAP32[40128>>2] = $2281;
                                  $2282 = (40136 + ($2280)|0);
                                  HEAP8[$2282>>0] = $2279;
                                  $2283 = HEAP32[30936>>2]|0;
                                  $2284 = $2283 >> 24;
                                  $2285 = $2284&255;
                                  $2286 = HEAP32[40128>>2]|0;
                                  $2287 = (($2286) + 1)|0;
                                  HEAP32[40128>>2] = $2287;
                                  $2288 = (40136 + ($2286)|0);
                                  HEAP8[$2288>>0] = $2285;
                                 } else {
                                  $c49 = 0;
                                  while(1) {
                                   $2289 = $c49;
                                   $2290 = ($2289|0)<(8);
                                   if (!($2290)) {
                                    break;
                                   }
                                   $2291 = $c49;
                                   $2292 = (30952 + ($2291)|0);
                                   $2293 = HEAP8[$2292>>0]|0;
                                   $2294 = $2293 << 24 >> 24;
                                   $2295 = ($2294|0)!=(48);
                                   do {
                                    if ($2295) {
                                     $2296 = $c49;
                                     $2297 = (30952 + ($2296)|0);
                                     $2298 = HEAP8[$2297>>0]|0;
                                     $2299 = $2298 << 24 >> 24;
                                     $2300 = ($2299|0)!=(95);
                                     if (!($2300)) {
                                      break;
                                     }
                                     $2301 = $c49;
                                     $2302 = (30952 + ($2301)|0);
                                     $2303 = HEAP8[$2302>>0]|0;
                                     $2304 = $2303 << 24 >> 24;
                                     $2305 = ($2304|0)!=(32);
                                     if (!($2305)) {
                                      break;
                                     }
                                     $2306 = $c49;
                                     $2307 = (30952 + ($2306)|0);
                                     $2308 = HEAP8[$2307>>0]|0;
                                     $2309 = $2308 << 24 >> 24;
                                     $2310 = ($2309|0)!=(46);
                                     if (!($2310)) {
                                      break;
                                     }
                                     $2311 = $c49;
                                     $2312 = 128 >> $2311;
                                     $2313 = HEAP32[30936>>2]|0;
                                     $2314 = $2313 | $2312;
                                     HEAP32[30936>>2] = $2314;
                                    }
                                   } while(0);
                                   $2315 = $c49;
                                   $2316 = (($2315) + 1)|0;
                                   $c49 = $2316;
                                  }
                                  _get_lex();
                                  $2317 = HEAP32[30936>>2]|0;
                                  $2318 = $2317&255;
                                  $2319 = HEAP32[40128>>2]|0;
                                  $2320 = (40136 + ($2319)|0);
                                  HEAP8[$2320>>0] = $2318;
                                  $2321 = HEAP32[40128>>2]|0;
                                  $2322 = (($2321) + 1)|0;
                                  HEAP32[40128>>2] = $2322;
                                 }
                                 $2323 = HEAP32[40128>>2]|0;
                                 $2324 = ($2323|0)>=(8);
                                 if ($2324) {
                                  HEAP32[40128>>2] = 0;
                                  $c49 = 0;
                                  $2325 = HEAP32[35640>>2]|0;
                                  $2326 = ($2325|0)==(2);
                                  if ($2326) {
                                   $2327 = $c49;
                                   $2328 = (40136 + ($2327)|0);
                                   $2329 = HEAP8[$2328>>0]|0;
                                   $2330 = $2329&255;
                                   $2331 = $c49;
                                   $2332 = (($2331) + 1)|0;
                                   $2333 = (40136 + ($2332)|0);
                                   $2334 = HEAP8[$2333>>0]|0;
                                   $2335 = $2334&255;
                                   $2336 = $c49;
                                   $2337 = (($2336) + 2)|0;
                                   $2338 = (40136 + ($2337)|0);
                                   $2339 = HEAP8[$2338>>0]|0;
                                   $2340 = $2339&255;
                                   $2341 = $c49;
                                   $2342 = (($2341) + 3)|0;
                                   $2343 = (40136 + ($2342)|0);
                                   $2344 = HEAP8[$2343>>0]|0;
                                   $2345 = $2344&255;
                                   $2346 = $c49;
                                   $2347 = (($2346) + 4)|0;
                                   $2348 = (40136 + ($2347)|0);
                                   $2349 = HEAP8[$2348>>0]|0;
                                   $2350 = $2349&255;
                                   $2351 = $c49;
                                   $2352 = (($2351) + 5)|0;
                                   $2353 = (40136 + ($2352)|0);
                                   $2354 = HEAP8[$2353>>0]|0;
                                   $2355 = $2354&255;
                                   $2356 = $c49;
                                   $2357 = (($2356) + 6)|0;
                                   $2358 = (40136 + ($2357)|0);
                                   $2359 = HEAP8[$2358>>0]|0;
                                   $2360 = $2359&255;
                                   $2361 = $c49;
                                   $2362 = (($2361) + 7)|0;
                                   $2363 = (40136 + ($2362)|0);
                                   $2364 = HEAP8[$2363>>0]|0;
                                   $2365 = $2364&255;
                                   HEAP32[$vararg_buffer322>>2] = $2330;
                                   $vararg_ptr325 = (($vararg_buffer322) + 4|0);
                                   HEAP32[$vararg_ptr325>>2] = $2335;
                                   $vararg_ptr326 = (($vararg_buffer322) + 8|0);
                                   HEAP32[$vararg_ptr326>>2] = $2340;
                                   $vararg_ptr327 = (($vararg_buffer322) + 12|0);
                                   HEAP32[$vararg_ptr327>>2] = $2345;
                                   $vararg_ptr328 = (($vararg_buffer322) + 16|0);
                                   HEAP32[$vararg_ptr328>>2] = $2350;
                                   $vararg_ptr329 = (($vararg_buffer322) + 20|0);
                                   HEAP32[$vararg_ptr329>>2] = $2355;
                                   $vararg_ptr330 = (($vararg_buffer322) + 24|0);
                                   HEAP32[$vararg_ptr330>>2] = $2360;
                                   $vararg_ptr331 = (($vararg_buffer322) + 28|0);
                                   HEAP32[$vararg_ptr331>>2] = $2365;
                                   (_sprintf(33104,40328,$vararg_buffer322)|0);
                                  } else {
                                   $2366 = $c49;
                                   $2367 = (40136 + ($2366)|0);
                                   $2368 = HEAP8[$2367>>0]|0;
                                   $2369 = $2368&255;
                                   $2370 = $c49;
                                   $2371 = (($2370) + 1)|0;
                                   $2372 = (40136 + ($2371)|0);
                                   $2373 = HEAP8[$2372>>0]|0;
                                   $2374 = $2373&255;
                                   $2375 = $c49;
                                   $2376 = (($2375) + 2)|0;
                                   $2377 = (40136 + ($2376)|0);
                                   $2378 = HEAP8[$2377>>0]|0;
                                   $2379 = $2378&255;
                                   $2380 = $c49;
                                   $2381 = (($2380) + 3)|0;
                                   $2382 = (40136 + ($2381)|0);
                                   $2383 = HEAP8[$2382>>0]|0;
                                   $2384 = $2383&255;
                                   $2385 = $c49;
                                   $2386 = (($2385) + 4)|0;
                                   $2387 = (40136 + ($2386)|0);
                                   $2388 = HEAP8[$2387>>0]|0;
                                   $2389 = $2388&255;
                                   $2390 = $c49;
                                   $2391 = (($2390) + 5)|0;
                                   $2392 = (40136 + ($2391)|0);
                                   $2393 = HEAP8[$2392>>0]|0;
                                   $2394 = $2393&255;
                                   $2395 = $c49;
                                   $2396 = (($2395) + 6)|0;
                                   $2397 = (40136 + ($2396)|0);
                                   $2398 = HEAP8[$2397>>0]|0;
                                   $2399 = $2398&255;
                                   $2400 = $c49;
                                   $2401 = (($2400) + 7)|0;
                                   $2402 = (40136 + ($2401)|0);
                                   $2403 = HEAP8[$2402>>0]|0;
                                   $2404 = $2403&255;
                                   HEAP32[$vararg_buffer332>>2] = $2369;
                                   $vararg_ptr335 = (($vararg_buffer332) + 4|0);
                                   HEAP32[$vararg_ptr335>>2] = $2374;
                                   $vararg_ptr336 = (($vararg_buffer332) + 8|0);
                                   HEAP32[$vararg_ptr336>>2] = $2379;
                                   $vararg_ptr337 = (($vararg_buffer332) + 12|0);
                                   HEAP32[$vararg_ptr337>>2] = $2384;
                                   $vararg_ptr338 = (($vararg_buffer332) + 16|0);
                                   HEAP32[$vararg_ptr338>>2] = $2389;
                                   $vararg_ptr339 = (($vararg_buffer332) + 20|0);
                                   HEAP32[$vararg_ptr339>>2] = $2394;
                                   $vararg_ptr340 = (($vararg_buffer332) + 24|0);
                                   HEAP32[$vararg_ptr340>>2] = $2399;
                                   $vararg_ptr341 = (($vararg_buffer332) + 28|0);
                                   HEAP32[$vararg_ptr341>>2] = $2404;
                                   (_sprintf(33104,40264,$vararg_buffer332)|0);
                                  }
                                  $2405 = HEAP32[2824>>2]|0;
                                  HEAP32[$vararg_buffer342>>2] = 33104;
                                  (_fprintf(($2405|0),(40320|0),($vararg_buffer342|0))|0);
                                 }
                                } else {
                                 _emit_error(40384);
                                }
                               }
                              }
                             } else {
                              $2406 = (_strcmp(30952,40408)|0);
                              $2407 = ($2406|0)==(0);
                              if ($2407) {
                               _get_lex();
                               $2408 = HEAP32[30928>>2]|0;
                               $2409 = ($2408|0)!=(21);
                               if ($2409) {
                                $2410 = (_evaluate_expression(1,0,0)|0);
                                $type52 = $2410;
                                $2411 = HEAP32[35640>>2]|0;
                                $2412 = ($2411|0)==(1);
                                if ($2412) {
                                 _cpu6502_1op(39200,39408);
                                 _generic_interrupt_disable();
                                 _cpu6502_1op(38352,40416);
                                } else {
                                 $2413 = HEAP32[35640>>2]|0;
                                 $2414 = ($2413|0)==(2);
                                 if ($2414) {
                                  _cpu9900_2op(40424,38208,40432);
                                  _cpu9900_2op(40440,38208,40448);
                                  _cpu9900_1op(39328,38208);
                                  _generic_interrupt_disable();
                                  _cpu9900_2op(38240,38208,40456);
                                  _cpu9900_1op(39328,38208);
                                  _cpu9900_2op(38240,38208,40456);
                                 } else {
                                  _cpuz80_2op(38280,39760,38296);
                                  _cpuz80_2op(38280,38912,40472);
                                  _generic_interrupt_disable();
                                  _cpuz80_1op(38400,40416);
                                 }
                                }
                                _generic_interrupt_enable();
                               }
                               $2415 = HEAP32[30928>>2]|0;
                               $2416 = ($2415|0)==(21);
                               if ($2416) {
                                _get_lex();
                                $2417 = (_evaluate_expression(1,0,0)|0);
                                $type52 = $2417;
                                $2418 = HEAP32[2808>>2]|0;
                                $2419 = ($2418|0)!=(13);
                                if ($2419) {
                                 _emit_error(40480);
                                } else {
                                 _cpuz80_1op(34200,39512);
                                 _cpuz80_1op(34184,40544);
                                 _cpuz80_noop(40552);
                                 _cpuz80_noop(40552);
                                 _cpuz80_noop(40552);
                                 _cpuz80_2op(38280,39760,38296);
                                 _cpuz80_2op(38280,38912,40560);
                                 _generic_interrupt_disable();
                                 _cpuz80_1op(38400,40416);
                                 _generic_interrupt_enable();
                                }
                               }
                              } else {
                               $2420 = (_strcmp(30952,40568)|0);
                               $2421 = ($2420|0)==(0);
                               if ($2421) {
                                _get_lex();
                                $2422 = HEAP32[2808>>2]|0;
                                $2423 = ($2422|0)!=(13);
                                if ($2423) {
                                 _emit_error(40576);
                                }
                                $2424 = HEAP32[30928>>2]|0;
                                $2425 = ($2424|0)!=(21);
                                if ($2425) {
                                 $2426 = (_evaluate_expression(1,0,0)|0);
                                 $type53 = $2426;
                                 $2427 = HEAP32[2808>>2]|0;
                                 $2428 = ($2427|0)==(13);
                                 if ($2428) {
                                  _cpuz80_2op(38280,39760,38296);
                                  _cpuz80_2op(38280,38912,40432);
                                  _generic_interrupt_disable();
                                  _cpuz80_1op(38400,40416);
                                  _generic_interrupt_enable();
                                 }
                                }
                                $2429 = HEAP32[30928>>2]|0;
                                $2430 = ($2429|0)==(21);
                                if ($2430) {
                                 _get_lex();
                                 $2431 = (_evaluate_expression(1,0,0)|0);
                                 $type53 = $2431;
                                 $2432 = HEAP32[2808>>2]|0;
                                 $2433 = ($2432|0)==(13);
                                 if ($2433) {
                                  _cpuz80_2op(38280,39760,38296);
                                  _cpuz80_2op(38280,38912,40640);
                                  _generic_interrupt_disable();
                                  _cpuz80_1op(38400,40416);
                                  _generic_interrupt_enable();
                                 }
                                }
                               } else {
                                $2434 = (_strcmp(30952,40648)|0);
                                $2435 = ($2434|0)==(0);
                                if ($2435) {
                                 _get_lex();
                                 $2436 = HEAP32[2808>>2]|0;
                                 $2437 = ($2436|0)!=(13);
                                 if ($2437) {
                                  _emit_error(40656);
                                 }
                                 $2438 = HEAP32[30928>>2]|0;
                                 $2439 = ($2438|0)==(1);
                                 do {
                                  if ($2439) {
                                   $2440 = (_strcmp(30952,40720)|0);
                                   $2441 = ($2440|0)==(0);
                                   if (!($2441)) {
                                    label = 1140;
                                    break;
                                   }
                                   _get_lex();
                                   $2442 = HEAP32[30928>>2]|0;
                                   $2443 = ($2442|0)!=(1);
                                   if ($2443) {
                                    _emit_error(40728);
                                   } else {
                                    $2444 = (_strcmp(30952,35072)|0);
                                    $2445 = ($2444|0)==(0);
                                    if ($2445) {
                                     $2446 = (_evaluate_save_expression(1,1)|0);
                                     $source55 = $2446;
                                     $2447 = $source55;
                                     _node_generate($2447,0);
                                     $2448 = $source55;
                                     _node_delete($2448);
                                    } else {
                                     $2449 = HEAP32[2808>>2]|0;
                                     $2450 = ($2449|0)==(13);
                                     if ($2450) {
                                      (_strcpy((33104|0),(37096|0))|0);
                                      (_strcat((33104|0),(30952|0))|0);
                                      _cpuz80_2op(38280,38264,33104);
                                     }
                                     _get_lex();
                                    }
                                   }
                                   _generic_call(40760);
                                  } else {
                                   label = 1140;
                                  }
                                 } while(0);
                                 if ((label|0) == 1140) {
                                  label = 0;
                                  _generic_interrupt_disable();
                                  $2451 = (_evaluate_expression(1,0,0)|0);
                                  $type54 = $2451;
                                  $2452 = HEAP32[2808>>2]|0;
                                  $2453 = ($2452|0)==(13);
                                  if ($2453) {
                                   _cpuz80_2op(38280,39768,38296);
                                   _cpuz80_2op(38280,39504,40776);
                                   _cpuz80_1op(38400,40784);
                                  }
                                  $2454 = HEAP32[30928>>2]|0;
                                  $2455 = ($2454|0)!=(21);
                                  if ($2455) {
                                   _emit_error(40792);
                                  } else {
                                   _get_lex();
                                  }
                                  $2456 = (_evaluate_expression(1,0,0)|0);
                                  $type54 = $2456;
                                  $2457 = HEAP32[2808>>2]|0;
                                  $2458 = ($2457|0)==(13);
                                  if ($2458) {
                                   _cpuz80_2op(38776,40824,38296);
                                  }
                                  _generic_interrupt_enable();
                                 }
                                } else {
                                 $2459 = (_strcmp(30952,40832)|0);
                                 $2460 = ($2459|0)==(0);
                                 if ($2460) {
                                  _get_lex();
                                  while(1) {
                                   $2461 = HEAP32[30928>>2]|0;
                                   $2462 = ($2461|0)!=(1);
                                   if ($2462) {
                                    label = 1152;
                                    break;
                                   }
                                   $2463 = (_signed_search(30952)|0);
                                   $c56 = $2463;
                                   $2464 = $c56;
                                   $2465 = ($2464|0)!=(0|0);
                                   if ($2465) {
                                    _emit_error(40864);
                                   } else {
                                    $2466 = (_signed_add(30952)|0);
                                    $c56 = $2466;
                                   }
                                   $2467 = $c56;
                                   $2468 = (($2467) + 4|0);
                                   HEAP32[$2468>>2] = 1;
                                   _get_lex();
                                   $2469 = HEAP32[30928>>2]|0;
                                   $2470 = ($2469|0)!=(21);
                                   if ($2470) {
                                    label = 1157;
                                    break;
                                   }
                                   _get_lex();
                                  }
                                  if ((label|0) == 1152) {
                                   label = 0;
                                   _emit_error(40840);
                                  }
                                  else if ((label|0) == 1157) {
                                   label = 0;
                                  }
                                 } else {
                                  $2471 = (_strcmp(30952,40904)|0);
                                  $2472 = ($2471|0)==(0);
                                  if ($2472) {
                                   _get_lex();
                                   while(1) {
                                    $2473 = HEAP32[30928>>2]|0;
                                    $2474 = ($2473|0)!=(1);
                                    if ($2474) {
                                     label = 1163;
                                     break;
                                    }
                                    $2475 = (_signed_search(30952)|0);
                                    $c57 = $2475;
                                    $2476 = $c57;
                                    $2477 = ($2476|0)!=(0|0);
                                    if ($2477) {
                                     _emit_error(40864);
                                    } else {
                                     $2478 = (_signed_add(30952)|0);
                                     $c57 = $2478;
                                    }
                                    $2479 = $c57;
                                    $2480 = (($2479) + 4|0);
                                    HEAP32[$2480>>2] = 2;
                                    _get_lex();
                                    $2481 = HEAP32[30928>>2]|0;
                                    $2482 = ($2481|0)!=(21);
                                    if ($2482) {
                                     label = 1168;
                                     break;
                                    }
                                    _get_lex();
                                   }
                                   if ((label|0) == 1163) {
                                    label = 0;
                                    _emit_error(40920);
                                   }
                                   else if ((label|0) == 1168) {
                                    label = 0;
                                   }
                                  } else {
                                   $2483 = (_strcmp(30952,40952)|0);
                                   $2484 = ($2483|0)==(0);
                                   if ($2484) {
                                    _get_lex();
                                    $2485 = HEAP32[30928>>2]|0;
                                    $2486 = ($2485|0)!=(1);
                                    if ($2486) {
                                     label = 1173;
                                     break;
                                    }
                                    $2487 = (_constant_search(30952)|0);
                                    $c58 = $2487;
                                    $2488 = $c58;
                                    $2489 = ($2488|0)!=(0|0);
                                    if ($2489) {
                                     _emit_error(41000);
                                    } else {
                                     $2490 = (_constant_add(30952)|0);
                                     $c58 = $2490;
                                    }
                                    (_strcpy((36032|0),(30952|0))|0);
                                    _get_lex();
                                    $2491 = HEAP32[30928>>2]|0;
                                    $2492 = ($2491|0)!=(6);
                                    if ($2492) {
                                     _emit_error(41024);
                                    } else {
                                     _get_lex();
                                     $2493 = (_evaluate_level_0($type60)|0);
                                     $tree59 = $2493;
                                     $2494 = $tree59;
                                     $2495 = HEAP32[$2494>>2]|0;
                                     $2496 = ($2495|0)!=(50);
                                     do {
                                      if ($2496) {
                                       $2497 = $tree59;
                                       $2498 = HEAP32[$2497>>2]|0;
                                       $2499 = ($2498|0)!=(51);
                                       if (!($2499)) {
                                        label = 1182;
                                        break;
                                       }
                                       _emit_error(38632);
                                      } else {
                                       label = 1182;
                                      }
                                     } while(0);
                                     if ((label|0) == 1182) {
                                      label = 0;
                                      $2500 = $tree59;
                                      $2501 = (($2500) + 4|0);
                                      $2502 = HEAP32[$2501>>2]|0;
                                      $2503 = $c58;
                                      $2504 = (($2503) + 4|0);
                                      HEAP32[$2504>>2] = $2502;
                                     }
                                     $2505 = HEAP32[35640>>2]|0;
                                     $2506 = ($2505|0)==(0);
                                     do {
                                      if ($2506) {
                                       label = 1185;
                                      } else {
                                       $2507 = HEAP32[35640>>2]|0;
                                       $2508 = ($2507|0)==(1);
                                       if ($2508) {
                                        label = 1185;
                                        break;
                                       }
                                       $2513 = HEAP32[35640>>2]|0;
                                       $2514 = ($2513|0)==(2);
                                       if ($2514) {
                                        $2515 = $c58;
                                        $2516 = (($2515) + 4|0);
                                        $2517 = HEAP32[$2516>>2]|0;
                                        HEAP32[$vararg_buffer352>>2] = 36032;
                                        $vararg_ptr355 = (($vararg_buffer352) + 4|0);
                                        HEAP32[$vararg_ptr355>>2] = $2517;
                                        (_sprintf(33104,41096,$vararg_buffer352)|0);
                                        _cpu9900_label(33104);
                                       }
                                      }
                                     } while(0);
                                     if ((label|0) == 1185) {
                                      label = 0;
                                      $2509 = $c58;
                                      $2510 = (($2509) + 4|0);
                                      $2511 = HEAP32[$2510>>2]|0;
                                      HEAP32[$vararg_buffer345>>2] = 36032;
                                      $vararg_ptr348 = (($vararg_buffer345) + 4|0);
                                      HEAP32[$vararg_ptr348>>2] = $2511;
                                      (_sprintf(33104,41064,$vararg_buffer345)|0);
                                      $2512 = HEAP32[2824>>2]|0;
                                      HEAP32[$vararg_buffer349>>2] = 33104;
                                      (_fprintf(($2512|0),(41088|0),($vararg_buffer349|0))|0);
                                     }
                                     $2518 = $tree59;
                                     _node_delete($2518);
                                     $tree59 = 0;
                                    }
                                   } else {
                                    $2519 = (_strcmp(30952,41120)|0);
                                    $2520 = ($2519|0)==(0);
                                    if ($2520) {
                                     while(1) {
                                      _get_lex();
                                      $2521 = HEAP32[30928>>2]|0;
                                      $2522 = ($2521|0)!=(1);
                                      if ($2522) {
                                       label = 1194;
                                       break;
                                      }
                                      (_strcpy(($array|0),(30952|0))|0);
                                      _get_lex();
                                      $2523 = HEAP32[30928>>2]|0;
                                      $2524 = ($2523|0)==(17);
                                      if ($2524) {
                                       _get_lex();
                                       $2525 = (_evaluate_level_0($type62)|0);
                                       $tree61 = $2525;
                                       $2526 = $tree61;
                                       $2527 = HEAP32[$2526>>2]|0;
                                       $2528 = ($2527|0)!=(50);
                                       if ($2528) {
                                        $2529 = $tree61;
                                        $2530 = HEAP32[$2529>>2]|0;
                                        $2531 = ($2530|0)!=(51);
                                        if ($2531) {
                                         label = 1198;
                                         break;
                                        }
                                       }
                                       $2532 = $tree61;
                                       $2533 = (($2532) + 4|0);
                                       $2534 = HEAP32[$2533>>2]|0;
                                       $c63 = $2534;
                                       $2535 = $tree61;
                                       _node_delete($2535);
                                       $2536 = HEAP32[30928>>2]|0;
                                       $2537 = ($2536|0)!=(18);
                                       if ($2537) {
                                        _emit_error(41192);
                                       } else {
                                        _get_lex();
                                       }
                                       $2538 = (_array_search($array)|0);
                                       $new_array = $2538;
                                       $2539 = $new_array;
                                       $2540 = ($2539|0)!=(0|0);
                                       if ($2540) {
                                        _emit_error(41232);
                                       } else {
                                        $2541 = (_array_add($array)|0);
                                        $new_array = $2541;
                                        $2542 = $c63;
                                        $2543 = $new_array;
                                        $2544 = (($2543) + 8|0);
                                        HEAP32[$2544>>2] = $2542;
                                       }
                                      } else {
                                       $2545 = (_label_add($array)|0);
                                       $label = $2545;
                                       $2546 = HEAP8[$array>>0]|0;
                                       $2547 = $2546 << 24 >> 24;
                                       $2548 = ($2547|0)==(35);
                                       if ($2548) {
                                        $2549 = $label;
                                        $2550 = (($2549) + 4|0);
                                        HEAP32[$2550>>2] = 1;
                                       } else {
                                        $2551 = $label;
                                        $2552 = (($2551) + 4|0);
                                        HEAP32[$2552>>2] = 0;
                                       }
                                       $2553 = $label;
                                       $2554 = (($2553) + 4|0);
                                       $2555 = HEAP32[$2554>>2]|0;
                                       $2556 = $2555 | 512;
                                       HEAP32[$2554>>2] = $2556;
                                      }
                                      $2557 = HEAP32[30928>>2]|0;
                                      $2558 = ($2557|0)!=(21);
                                      if ($2558) {
                                       label = 1211;
                                       break;
                                      }
                                     }
                                     if ((label|0) == 1194) {
                                      label = 0;
                                      _emit_error(41128);
                                     }
                                     else if ((label|0) == 1198) {
                                      label = 0;
                                      _emit_error(41152);
                                     }
                                     else if ((label|0) == 1211) {
                                      label = 0;
                                     }
                                    } else {
                                     $2559 = (_strcmp(30952,41256)|0);
                                     $2560 = ($2559|0)==(0);
                                     if ($2560) {
                                      _get_lex();
                                      $2561 = HEAP32[30928>>2]|0;
                                      $2562 = ($2561|0)!=(4);
                                      if ($2562) {
                                       label = 1220;
                                       break;
                                      }
                                      $2563 = HEAP32[30936>>2]|0;
                                      $2564 = ($2563|0)!=(0);
                                      do {
                                       if ($2564) {
                                        $2565 = HEAP32[30936>>2]|0;
                                        $2566 = ($2565|0)!=(1);
                                        if (!($2566)) {
                                         break;
                                        }
                                        $2567 = HEAP32[30936>>2]|0;
                                        $2568 = ($2567|0)!=(2);
                                        if (!($2568)) {
                                         break;
                                        }
                                        $2569 = HEAP32[30936>>2]|0;
                                        $2570 = ($2569|0)!=(4);
                                        if ($2570) {
                                         label = 1220;
                                         break L1;
                                        }
                                       }
                                      } while(0);
                                      _get_lex();
                                      $2571 = HEAP32[30936>>2]|0;
                                      $2572 = ($2571|0)==(0);
                                      if ($2572) {
                                       $2573 = HEAP32[2808>>2]|0;
                                       $2574 = ($2573|0)==(13);
                                       if ($2574) {
                                        _emit_error(41288);
                                       }
                                       _generic_call(41328);
                                      }
                                      $2575 = HEAP32[30936>>2]|0;
                                      $2576 = ($2575|0)==(1);
                                      if ($2576) {
                                       $2577 = HEAP32[2808>>2]|0;
                                       $2578 = ($2577|0)==(13);
                                       if ($2578) {
                                        _emit_error(41336);
                                       }
                                       _generic_call(41376);
                                      }
                                      $2579 = HEAP32[30936>>2]|0;
                                      $2580 = ($2579|0)==(2);
                                      if ($2580) {
                                       $2581 = HEAP32[2808>>2]|0;
                                       $2582 = ($2581|0)==(13);
                                       if ($2582) {
                                        _emit_error(41384);
                                       }
                                       _generic_call(41424);
                                      }
                                      $2583 = HEAP32[30936>>2]|0;
                                      $2584 = ($2583|0)==(4);
                                      if ($2584) {
                                       $2585 = HEAP32[2808>>2]|0;
                                       $2586 = ($2585|0)!=(13);
                                       if ($2586) {
                                        _emit_error(41432);
                                       }
                                       _generic_call(41480);
                                      }
                                     } else {
                                      $2587 = (_strcmp(30952,41488)|0);
                                      $2588 = ($2587|0)==(0);
                                      if ($2588) {
                                       _get_lex();
                                       $2589 = HEAP32[30928>>2]|0;
                                       $2590 = ($2589|0)!=(1);
                                       if ($2590) {
                                        label = 1240;
                                        break;
                                       }
                                       $2591 = (_strcmp(30952,41520)|0);
                                       $2592 = ($2591|0)==(0);
                                       if ($2592) {
                                        _get_lex();
                                        _generic_call(41528);
                                       } else {
                                        $2593 = (_strcmp(30952,41536)|0);
                                        $2594 = ($2593|0)==(0);
                                        if ($2594) {
                                         _get_lex();
                                         _generic_call(41544);
                                        } else {
                                         $2595 = (_array_search(30952)|0);
                                         $array64 = $2595;
                                         $2596 = $array64;
                                         $2597 = ($2596|0)!=(0|0);
                                         if ($2597) {
                                          (_strcpy((36032|0),(38744|0))|0);
                                          (_strcat((36032|0),(30952|0))|0);
                                         } else {
                                          $2598 = (_label_search(30952)|0);
                                          $array64 = $2598;
                                          $2599 = $array64;
                                          $2600 = ($2599|0)==(0|0);
                                          if ($2600) {
                                           $2601 = (_label_add(30952)|0);
                                           $array64 = $2601;
                                          }
                                          $2602 = $array64;
                                          $2603 = (($2602) + 4|0);
                                          $2604 = HEAP32[$2603>>2]|0;
                                          $2605 = $2604 | 16;
                                          HEAP32[$2603>>2] = $2605;
                                          (_strcpy((36032|0),(37096|0))|0);
                                          (_strcat((36032|0),(30952|0))|0);
                                         }
                                         _get_lex();
                                         $2606 = HEAP32[30928>>2]|0;
                                         $2607 = ($2606|0)==(21);
                                         if ($2607) {
                                          _get_lex();
                                          $2608 = (_node_create(68,0,0,0)|0);
                                          $addr = $2608;
                                          $2609 = $array64;
                                          $2610 = $addr;
                                          $2611 = (($2610) + 16|0);
                                          HEAP32[$2611>>2] = $2609;
                                          $2612 = (_evaluate_level_0($type66)|0);
                                          $final65 = $2612;
                                          $2613 = HEAP32[$type66>>2]|0;
                                          $2614 = $2613 & 3;
                                          $2615 = ($2614|0)==(0);
                                          if ($2615) {
                                           $2616 = HEAP32[$type66>>2]|0;
                                           $2617 = $2616 & 4;
                                           $2618 = ($2617|0)!=(0);
                                           $2619 = $2618 ? 42 : 41;
                                           $2620 = $final65;
                                           $2621 = (_node_create($2619,0,$2620,0)|0);
                                           $final65 = $2621;
                                          }
                                          $2622 = HEAP32[2808>>2]|0;
                                          $2623 = ($2622|0)==(13);
                                          if ($2623) {
                                           $2624 = $final65;
                                           $2625 = (_node_create(51,2,0,0)|0);
                                           $2626 = (_node_create(31,0,$2624,$2625)|0);
                                           $final65 = $2626;
                                          }
                                          $2627 = $addr;
                                          $2628 = $final65;
                                          $2629 = (_node_create(27,0,$2627,$2628)|0);
                                          $final65 = $2629;
                                          $2630 = $final65;
                                          _node_label($2630);
                                          $2631 = $final65;
                                          _node_generate($2631,0);
                                          $2632 = $final65;
                                          _node_delete($2632);
                                          $2633 = HEAP32[35640>>2]|0;
                                          $2634 = ($2633|0)==(1);
                                          if ($2634) {
                                           _cpu6502_noop(38104);
                                           _cpu6502_noop(39736);
                                           _cpu6502_noop(38104);
                                          } else {
                                           $2635 = HEAP32[35640>>2]|0;
                                           $2636 = ($2635|0)==(2);
                                           if ($2636) {
                                            _cpu9900_2op(38200,38208,41552);
                                           } else {
                                            _cpuz80_1op(38256,38264);
                                           }
                                          }
                                          $2637 = HEAP32[30928>>2]|0;
                                          $2638 = ($2637|0)!=(21);
                                          if ($2638) {
                                           label = 1262;
                                           break;
                                          }
                                          _get_lex();
                                          $2639 = (_evaluate_level_0($type66)|0);
                                          $final65 = $2639;
                                          $2640 = HEAP32[$type66>>2]|0;
                                          $2641 = $2640 & 3;
                                          $2642 = ($2641|0)==(0);
                                          if ($2642) {
                                           $2643 = HEAP32[$type66>>2]|0;
                                           $2644 = $2643 & 4;
                                           $2645 = ($2644|0)!=(0);
                                           $2646 = $2645 ? 42 : 41;
                                           $2647 = $final65;
                                           $2648 = (_node_create($2646,0,$2647,0)|0);
                                           $final65 = $2648;
                                          }
                                          $2649 = HEAP32[2808>>2]|0;
                                          $2650 = ($2649|0)==(13);
                                          if ($2650) {
                                           $2651 = $final65;
                                           $2652 = (_node_create(51,2,0,0)|0);
                                           $2653 = (_node_create(31,0,$2651,$2652)|0);
                                           $final65 = $2653;
                                          }
                                          $2654 = HEAP32[2808>>2]|0;
                                          $2655 = ($2654|0)==(13);
                                          $2656 = $2655 ? 14336 : 6144;
                                          $2657 = (_node_create(51,$2656,0,0)|0);
                                          $2658 = $final65;
                                          $2659 = (_node_create(27,0,$2657,$2658)|0);
                                          $final65 = $2659;
                                          $2660 = $final65;
                                          _node_label($2660);
                                          $2661 = $final65;
                                          _node_generate($2661,0);
                                          $2662 = $final65;
                                          _node_delete($2662);
                                          $2663 = HEAP32[35640>>2]|0;
                                          $2664 = ($2663|0)==(1);
                                          if ($2664) {
                                           _cpu6502_1op(38112,39440);
                                           _cpu6502_1op(38128,39416);
                                          } else {
                                           $2665 = HEAP32[35640>>2]|0;
                                           $2666 = ($2665|0)==(2);
                                           if ($2666) {
                                            _cpu9900_2op(38200,38208,41608);
                                           } else {
                                            _cpuz80_1op(38256,38264);
                                           }
                                          }
                                          $2667 = HEAP32[30928>>2]|0;
                                          $2668 = ($2667|0)!=(21);
                                          if ($2668) {
                                           label = 1274;
                                           break;
                                          }
                                          _get_lex();
                                          $2669 = (_evaluate_level_0($type66)|0);
                                          $final65 = $2669;
                                          $2670 = HEAP32[$type66>>2]|0;
                                          $2671 = $2670 & 3;
                                          $2672 = ($2671|0)==(1);
                                          if ($2672) {
                                           $2673 = $final65;
                                           $2674 = (_node_create(43,0,$2673,0)|0);
                                           $final65 = $2674;
                                          }
                                          $2675 = HEAP32[2808>>2]|0;
                                          $2676 = ($2675|0)==(13);
                                          if ($2676) {
                                           $2677 = $final65;
                                           $2678 = (_node_create(50,2,0,0)|0);
                                           $2679 = (_node_create(30,0,$2677,$2678)|0);
                                           $final65 = $2679;
                                          }
                                          $2680 = $final65;
                                          _node_label($2680);
                                          $2681 = $final65;
                                          _node_generate($2681,0);
                                          $2682 = $final65;
                                          _node_delete($2682);
                                          $2683 = HEAP32[35640>>2]|0;
                                          $2684 = ($2683|0)==(1);
                                          if ($2684) {
                                           _cpu6502_noop(38104);
                                          } else {
                                           $2685 = HEAP32[35640>>2]|0;
                                           $2686 = ($2685|0)==(2);
                                           if ($2686) {
                                            _cpu9900_2op(38200,38208,39992);
                                           } else {
                                            _cpuz80_1op(38256,39608);
                                           }
                                          }
                                          $2687 = HEAP32[30928>>2]|0;
                                          $2688 = ($2687|0)!=(21);
                                          if ($2688) {
                                           label = 1286;
                                           break;
                                          }
                                          _get_lex();
                                          $2689 = (_evaluate_level_0($type66)|0);
                                          $final65 = $2689;
                                          $2690 = HEAP32[$type66>>2]|0;
                                          $2691 = $2690 & 3;
                                          $2692 = ($2691|0)==(1);
                                          if ($2692) {
                                           $2693 = $final65;
                                           $2694 = (_node_create(43,0,$2693,0)|0);
                                           $final65 = $2694;
                                          }
                                          $2695 = $final65;
                                          _node_label($2695);
                                          $2696 = $final65;
                                          _node_generate($2696,0);
                                          $2697 = $final65;
                                          _node_delete($2697);
                                          $2698 = HEAP32[30928>>2]|0;
                                          $2699 = ($2698|0)==(21);
                                          if ($2699) {
                                           $2700 = HEAP32[35640>>2]|0;
                                           $2701 = ($2700|0)==(1);
                                           if ($2701) {
                                            _cpu6502_noop(38104);
                                           } else {
                                            $2702 = HEAP32[35640>>2]|0;
                                            $2703 = ($2702|0)==(2);
                                            if ($2703) {
                                             _cpu9900_2op(38200,38208,39448);
                                            } else {
                                             _cpuz80_1op(38256,39608);
                                            }
                                           }
                                           _get_lex();
                                           $2704 = (_evaluate_level_0($type66)|0);
                                           $final65 = $2704;
                                           $2705 = HEAP32[35640>>2]|0;
                                           $2706 = ($2705|0)==(1);
                                           if ($2706) {
                                            $2707 = HEAP32[$type66>>2]|0;
                                            $2708 = $2707 & 3;
                                            $2709 = ($2708|0)==(0);
                                            if ($2709) {
                                             $2710 = $final65;
                                             $2711 = (_node_create(41,0,$2710,0)|0);
                                             $final65 = $2711;
                                            }
                                           } else {
                                            $2712 = HEAP32[$type66>>2]|0;
                                            $2713 = $2712 & 3;
                                            $2714 = ($2713|0)==(1);
                                            if ($2714) {
                                             $2715 = $final65;
                                             $2716 = (_node_create(43,0,$2715,0)|0);
                                             $final65 = $2716;
                                            }
                                            $2717 = HEAP32[2808>>2]|0;
                                            $2718 = ($2717|0)==(13);
                                            if ($2718) {
                                             $2719 = $final65;
                                             $2720 = (_node_create(50,2,0,0)|0);
                                             $2721 = (_node_create(30,0,$2719,$2720)|0);
                                             $final65 = $2721;
                                            }
                                           }
                                           $2722 = $final65;
                                           _node_label($2722);
                                           $2723 = $final65;
                                           _node_generate($2723,0);
                                           $2724 = $final65;
                                           _node_delete($2724);
                                           $2725 = HEAP32[35640>>2]|0;
                                           $2726 = ($2725|0)==(1);
                                           if ($2726) {
                                            _cpu6502_noop(38336);
                                            _cpu6502_noop(38144);
                                            _cpu6502_1op(38112,39744);
                                            _cpu6502_noop(38144);
                                            _cpu6502_1op(38112,39752);
                                           } else {
                                            $2727 = HEAP32[35640>>2]|0;
                                            $2728 = ($2727|0)==(2);
                                            if ($2728) {
                                             _cpu9900_2op(38200,38208,39256);
                                            }
                                           }
                                          } else {
                                           $2729 = HEAP32[35640>>2]|0;
                                           $2730 = ($2729|0)==(1);
                                           if ($2730) {
                                            _cpu6502_1op(38112,39744);
                                            _cpu6502_noop(38144);
                                            _cpu6502_1op(38112,39752);
                                            _cpu6502_noop(38336);
                                            _cpu6502_1op(38152,38160);
                                           } else {
                                            $2731 = HEAP32[35640>>2]|0;
                                            $2732 = ($2731|0)==(2);
                                            if ($2732) {
                                             _cpu9900_2op(38200,38208,39448);
                                             _cpu9900_2op(38200,39992,39256);
                                            } else {
                                             _cpuz80_2op(38280,39760,38296);
                                             _cpuz80_1op(38272,39608);
                                             _cpuz80_1op(38256,39608);
                                             _cpuz80_1op(38256,38920);
                                            }
                                           }
                                          }
                                          $2733 = HEAP32[35640>>2]|0;
                                          $2734 = ($2733|0)==(1);
                                          if ($2734) {
                                           _cpu6502_noop(38144);
                                           _cpu6502_1op(38112,38136);
                                           _cpu6502_noop(38144);
                                           _cpu6502_1op(38112,38120);
                                          }
                                          _generic_call(41712);
                                         } else {
                                          $2735 = HEAP32[35640>>2]|0;
                                          $2736 = ($2735|0)==(1);
                                          if ($2736) {
                                           HEAP32[$vararg_buffer356>>2] = 36032;
                                           (_sprintf(33104,41720,$vararg_buffer356)|0);
                                           _cpu6502_1op(38344,33104);
                                           (_strcat((33104|0),(38472|0))|0);
                                           _cpu6502_1op(38152,33104);
                                           _cpu6502_1op(38112,38120);
                                           _cpu6502_1op(38128,38136);
                                           _cpu6502_1op(38344,38160);
                                           _cpu6502_1op(38152,41728);
                                           _cpu6502_1op(38112,39752);
                                           _cpu6502_1op(38128,39744);
                                           _cpu6502_1op(38344,38160);
                                           _cpu6502_1op(38152,41736);
                                           _cpu6502_1op(38112,39440);
                                           _cpu6502_1op(38128,39416);
                                           _generic_interrupt_disable();
                                           _cpu6502_1op(38352,39784);
                                          } else {
                                           $2737 = HEAP32[35640>>2]|0;
                                           $2738 = ($2737|0)==(2);
                                           if ($2738) {
                                            _cpu9900_2op(38520,38208,41744);
                                            _cpu9900_2op(38520,38368,36032);
                                            _cpu9900_2op(38520,39112,41752);
                                            _generic_interrupt_disable();
                                            _cpu9900_1op(38376,41760);
                                            _cpu9900_1op(38392,39784);
                                           } else {
                                            _cpuz80_2op(38280,38264,36032);
                                            $2739 = HEAP32[2808>>2]|0;
                                            $2740 = ($2739|0)==(13);
                                            $2741 = $2740 ? 41768 : 41776;
                                            _cpuz80_2op(38280,39528,$2741);
                                            $2742 = HEAP32[2808>>2]|0;
                                            $2743 = ($2742|0)==(13);
                                            $2744 = $2743 ? 41784 : 41792;
                                            _cpuz80_2op(38280,38920,$2744);
                                            _generic_interrupt_disable();
                                            _cpuz80_1op(38400,39784);
                                           }
                                          }
                                          _generic_interrupt_enable();
                                         }
                                        }
                                       }
                                      } else {
                                       $2745 = (_strcmp(30952,41800)|0);
                                       $2746 = ($2745|0)==(0);
                                       if ($2746) {
                                        _get_lex();
                                        $2747 = HEAP32[30928>>2]|0;
                                        $2748 = ($2747|0)!=(1);
                                        if ($2748) {
                                         label = 1333;
                                         break;
                                        }
                                        HEAP32[41832>>2] = 1;
                                        $2749 = (_strcmp(30952,39864)|0);
                                        $2750 = ($2749|0)==(0);
                                        if ($2750) {
                                         _get_lex();
                                         $2751 = HEAP32[35640>>2]|0;
                                         $2752 = ($2751|0)==(1);
                                         if ($2752) {
                                          _cpu6502_1op(38344,41840);
                                          _cpu6502_1op(38152,41856);
                                         } else {
                                          $2753 = HEAP32[35640>>2]|0;
                                          $2754 = ($2753|0)==(2);
                                          if ($2754) {
                                           _cpu9900_2op(38520,38208,41880);
                                          } else {
                                           _cpuz80_2op(38280,38264,41880);
                                          }
                                         }
                                         _generic_call(41896);
                                        } else {
                                         $2755 = (_strcmp(30952,41912)|0);
                                         $2756 = ($2755|0)==(0);
                                         if ($2756) {
                                          _get_lex();
                                          $2757 = HEAP32[35640>>2]|0;
                                          $2758 = ($2757|0)==(1);
                                          if ($2758) {
                                           _cpu6502_1op(38344,38160);
                                           _cpu6502_1op(38112,41920);
                                          } else {
                                           $2759 = HEAP32[35640>>2]|0;
                                           $2760 = ($2759|0)==(2);
                                           if ($2760) {
                                            _cpu9900_1op(41936,38208);
                                            _cpu9900_2op(38240,38208,41944);
                                           } else {
                                            _cpuz80_1op(34192,38296);
                                            _cpuz80_2op(38280,41960,38296);
                                           }
                                          }
                                         } else {
                                          $2761 = (_strcmp(30952,41976)|0);
                                          $2762 = ($2761|0)==(0);
                                          if ($2762) {
                                           _get_lex();
                                           $c67 = 3;
                                           $2763 = HEAP32[30928>>2]|0;
                                           $2764 = ($2763|0)==(1);
                                           do {
                                            if ($2764) {
                                             $2765 = (_strcmp(30952,41984)|0);
                                             $2766 = ($2765|0)==(0);
                                             if (!($2766)) {
                                              break;
                                             }
                                             _get_lex();
                                             $2767 = HEAP32[30928>>2]|0;
                                             $2768 = ($2767|0)==(1);
                                             do {
                                              if ($2768) {
                                               $2769 = (_strcmp(30952,41992)|0);
                                               $2770 = ($2769|0)==(0);
                                               if (!($2770)) {
                                                label = 1356;
                                                break;
                                               }
                                               _get_lex();
                                               $c67 = 2;
                                              } else {
                                               label = 1356;
                                              }
                                             } while(0);
                                             if ((label|0) == 1356) {
                                              label = 0;
                                              _emit_error(42000);
                                             }
                                            }
                                           } while(0);
                                           $2771 = HEAP32[35640>>2]|0;
                                           $2772 = ($2771|0)==(1);
                                           if ($2772) {
                                            $2773 = $c67;
                                            HEAP32[$vararg_buffer359>>2] = $2773;
                                            (_sprintf(33104,38976,$vararg_buffer359)|0);
                                            _cpu6502_1op(38344,33104);
                                            _cpu6502_1op(38112,41920);
                                           } else {
                                            $2774 = HEAP32[35640>>2]|0;
                                            $2775 = ($2774|0)==(2);
                                            if ($2775) {
                                             $2776 = $c67;
                                             $2777 = $2776<<8;
                                             $2778 = $c67;
                                             HEAP32[$vararg_buffer362>>2] = $2777;
                                             $vararg_ptr365 = (($vararg_buffer362) + 4|0);
                                             HEAP32[$vararg_ptr365>>2] = $2778;
                                             (_sprintf(33104,42040,$vararg_buffer362)|0);
                                             _cpu9900_2op(38520,38208,33104);
                                             _cpu9900_2op(38240,38208,41944);
                                            } else {
                                             $2779 = $c67;
                                             HEAP32[$vararg_buffer366>>2] = $2779;
                                             (_sprintf(33104,39104,$vararg_buffer366)|0);
                                             _cpuz80_2op(38280,38296,33104);
                                             _cpuz80_2op(38280,41960,38296);
                                            }
                                           }
                                          } else {
                                           $2780 = (_strcmp(30952,42056)|0);
                                           $2781 = ($2780|0)==(0);
                                           if ($2781) {
                                            _get_lex();
                                            $c67 = 5;
                                            $2782 = HEAP32[30928>>2]|0;
                                            $2783 = ($2782|0)==(1);
                                            do {
                                             if ($2783) {
                                              $2784 = (_strcmp(30952,41984)|0);
                                              $2785 = ($2784|0)==(0);
                                              if (!($2785)) {
                                               break;
                                              }
                                              _get_lex();
                                              $2786 = HEAP32[30928>>2]|0;
                                              $2787 = ($2786|0)==(1);
                                              do {
                                               if ($2787) {
                                                $2788 = (_strcmp(30952,41992)|0);
                                                $2789 = ($2788|0)==(0);
                                                if (!($2789)) {
                                                 label = 1371;
                                                 break;
                                                }
                                                _get_lex();
                                                $c67 = 4;
                                               } else {
                                                label = 1371;
                                               }
                                              } while(0);
                                              if ((label|0) == 1371) {
                                               label = 0;
                                               _emit_error(42064);
                                              }
                                             }
                                            } while(0);
                                            $2790 = HEAP32[35640>>2]|0;
                                            $2791 = ($2790|0)==(1);
                                            if ($2791) {
                                             $2792 = $c67;
                                             HEAP32[$vararg_buffer369>>2] = $2792;
                                             (_sprintf(33104,38976,$vararg_buffer369)|0);
                                             _cpu6502_1op(38344,33104);
                                             _cpu6502_1op(38112,41920);
                                            } else {
                                             $2793 = HEAP32[35640>>2]|0;
                                             $2794 = ($2793|0)==(2);
                                             if ($2794) {
                                              $2795 = $c67;
                                              $2796 = $2795<<8;
                                              $2797 = $c67;
                                              HEAP32[$vararg_buffer372>>2] = $2796;
                                              $vararg_ptr375 = (($vararg_buffer372) + 4|0);
                                              HEAP32[$vararg_ptr375>>2] = $2797;
                                              (_sprintf(33104,42040,$vararg_buffer372)|0);
                                              _cpu9900_2op(38520,38208,33104);
                                              _cpu9900_2op(38240,38208,41944);
                                             } else {
                                              $2798 = $c67;
                                              HEAP32[$vararg_buffer376>>2] = $2798;
                                              (_sprintf(33104,39104,$vararg_buffer376)|0);
                                              _cpuz80_2op(38280,38296,33104);
                                              _cpuz80_2op(38280,41960,38296);
                                             }
                                            }
                                           } else {
                                            $2799 = (_label_search(30952)|0);
                                            $label68 = $2799;
                                            $2800 = $label68;
                                            $2801 = ($2800|0)==(0|0);
                                            if ($2801) {
                                             $2802 = (_label_add(30952)|0);
                                             $label68 = $2802;
                                            }
                                            $2803 = $label68;
                                            $2804 = (($2803) + 4|0);
                                            $2805 = HEAP32[$2804>>2]|0;
                                            $2806 = $2805 | 16;
                                            HEAP32[$2804>>2] = $2806;
                                            $2807 = HEAP32[35640>>2]|0;
                                            $2808 = ($2807|0)==(1);
                                            if ($2808) {
                                             (_strcpy((33104|0),(39584|0))|0);
                                             (_strcat((33104|0),(30952|0))|0);
                                             _cpu6502_1op(38344,33104);
                                             (_strcat((33104|0),(38472|0))|0);
                                             _cpu6502_1op(38152,33104);
                                            } else {
                                             $2809 = HEAP32[35640>>2]|0;
                                             $2810 = ($2809|0)==(2);
                                             if ($2810) {
                                              (_strcpy((33104|0),(37096|0))|0);
                                              (_strcat((33104|0),(30952|0))|0);
                                              _cpu9900_2op(38520,38208,33104);
                                             } else {
                                              (_strcpy((33104|0),(37096|0))|0);
                                              (_strcat((33104|0),(30952|0))|0);
                                              _cpuz80_2op(38280,38264,33104);
                                             }
                                            }
                                            _generic_call(41896);
                                            _get_lex();
                                           }
                                          }
                                         }
                                        }
                                       } else {
                                        $2811 = (_strcmp(30952,34920)|0);
                                        $2812 = ($2811|0)==(0);
                                        if ($2812) {
                                         _generic_dump();
                                         _get_lex();
                                         $label70 = 0;
                                         $notes = 0;
                                         $arg = 0;
                                         while(1) {
                                          $2813 = HEAP32[30928>>2]|0;
                                          $2814 = ($2813|0)!=(1);
                                          if ($2814) {
                                           $2815 = HEAP32[30928>>2]|0;
                                           $2816 = ($2815|0)!=(13);
                                           if ($2816) {
                                            label = 1397;
                                            break;
                                           }
                                          }
                                          $2817 = HEAP32[30928>>2]|0;
                                          $2818 = ($2817|0)==(13);
                                          if ($2818) {
                                          } else {
                                           $2819 = $arg;
                                           $2820 = ($2819|0)==(0);
                                           if ($2820) {
                                            $2821 = (_strcmp(30952,42136)|0);
                                            $2822 = ($2821|0)==(0);
                                            if ($2822) {
                                             label = 1402;
                                             break;
                                            }
                                           }
                                           $2823 = $arg;
                                           $2824 = ($2823|0)==(0);
                                           if ($2824) {
                                            $2825 = (_strcmp(30952,42144)|0);
                                            $2826 = ($2825|0)==(0);
                                            if ($2826) {
                                             label = 1405;
                                             break;
                                            }
                                           }
                                           $2827 = $arg;
                                           $2828 = ($2827|0)==(3);
                                           if ($2828) {
                                            $2829 = HEAP8[30952>>0]|0;
                                            $2830 = $2829 << 24 >> 24;
                                            $2831 = ($2830|0)!=(77);
                                            if ($2831) {
                                             label = 1410;
                                             break;
                                            }
                                            $2832 = HEAP8[((30952 + 1|0))>>0]|0;
                                            $2833 = $2832 << 24 >> 24;
                                            $2834 = ($2833|0)<(49);
                                            if ($2834) {
                                             label = 1410;
                                             break;
                                            }
                                            $2835 = HEAP8[((30952 + 1|0))>>0]|0;
                                            $2836 = $2835 << 24 >> 24;
                                            $2837 = ($2836|0)>(51);
                                            if ($2837) {
                                             label = 1410;
                                             break;
                                            }
                                            $2838 = HEAP8[((30952 + 1|0))>>0]|0;
                                            $2839 = $2838 << 24 >> 24;
                                            $2840 = (($2839) - 48)|0;
                                            $2841 = $arg;
                                            $2842 = $2841 & 3;
                                            $2843 = $2842<<3;
                                            $2844 = $2840 << $2843;
                                            $2845 = $notes;
                                            $2846 = $2845 | $2844;
                                            $notes = $2846;
                                           } else {
                                            $2847 = (_strcmp(30952,42184)|0);
                                            $2848 = ($2847|0)==(0);
                                            if ($2848) {
                                             $2849 = $arg;
                                             $2850 = $2849 & 3;
                                             $2851 = $2850<<3;
                                             $2852 = 63 << $2851;
                                             $2853 = $notes;
                                             $2854 = $2853 | $2852;
                                             $notes = $2854;
                                            } else {
                                             $2855 = $arg;
                                             $2856 = (42096 + ($2855<<2)|0);
                                             $2857 = HEAP32[$2856>>2]|0;
                                             $2858 = $arg;
                                             $2859 = $2858 & 3;
                                             $2860 = $2859<<3;
                                             $2861 = $2857 << $2860;
                                             $2862 = $notes;
                                             $2863 = $2862 | $2861;
                                             $notes = $2863;
                                             $c69 = 0;
                                             $2864 = $c69;
                                             $2865 = (($2864) + 1)|0;
                                             $c69 = $2865;
                                             $2866 = (30952 + ($2864)|0);
                                             $2867 = HEAP8[$2866>>0]|0;
                                             $2868 = $2867 << 24 >> 24;
                                             switch ($2868|0) {
                                             case 68:  {
                                              $note = 2;
                                              break;
                                             }
                                             case 70:  {
                                              $note = 5;
                                              break;
                                             }
                                             case 67:  {
                                              $note = 0;
                                              break;
                                             }
                                             case 66:  {
                                              $note = 11;
                                              break;
                                             }
                                             case 71:  {
                                              $note = 7;
                                              break;
                                             }
                                             case 69:  {
                                              $note = 4;
                                              break;
                                             }
                                             case 65:  {
                                              $note = 9;
                                              break;
                                             }
                                             default: {
                                              $note = 0;
                                              _emit_error(42192);
                                             }
                                             }
                                             $2869 = $c69;
                                             $2870 = (($2869) + 1)|0;
                                             $c69 = $2870;
                                             $2871 = (30952 + ($2869)|0);
                                             $2872 = HEAP8[$2871>>0]|0;
                                             $2873 = $2872 << 24 >> 24;
                                             L1724: do {
                                              switch ($2873|0) {
                                              case 52:  {
                                               $2878 = $note;
                                               $2879 = (($2878) + 24)|0;
                                               $note = $2879;
                                               break;
                                              }
                                              case 54:  {
                                               $2882 = $note;
                                               $2883 = (($2882) + 48)|0;
                                               $note = $2883;
                                               break;
                                              }
                                              case 51:  {
                                               $2876 = $note;
                                               $2877 = (($2876) + 12)|0;
                                               $note = $2877;
                                               break;
                                              }
                                              case 53:  {
                                               $2880 = $note;
                                               $2881 = (($2880) + 36)|0;
                                               $note = $2881;
                                               break;
                                              }
                                              case 50:  {
                                               $2874 = $note;
                                               $2875 = (($2874) + 0)|0;
                                               $note = $2875;
                                               break;
                                              }
                                              case 55:  {
                                               $2884 = $note;
                                               $2885 = ($2884|0)==(0);
                                               if ($2885) {
                                                $2886 = $note;
                                                $2887 = (($2886) + 60)|0;
                                                $note = $2887;
                                                break L1724;
                                               } else {
                                                label = 1432;
                                                break L1724;
                                               }
                                               break;
                                              }
                                              default: {
                                               label = 1432;
                                              }
                                              }
                                             } while(0);
                                             if ((label|0) == 1432) {
                                              label = 0;
                                              _emit_error(42192);
                                             }
                                             $2888 = $note;
                                             $2889 = (($2888) + 1)|0;
                                             $note = $2889;
                                             $2890 = $c69;
                                             $2891 = (30952 + ($2890)|0);
                                             $2892 = HEAP8[$2891>>0]|0;
                                             $2893 = $2892 << 24 >> 24;
                                             $2894 = ($2893|0)==(35);
                                             if ($2894) {
                                              $2895 = $note;
                                              $2896 = (($2895) + 1)|0;
                                              $note = $2896;
                                              $2897 = $c69;
                                              $2898 = (($2897) + 1)|0;
                                              $c69 = $2898;
                                             }
                                             $2899 = $c69;
                                             $2900 = (30952 + ($2899)|0);
                                             $2901 = HEAP8[$2900>>0]|0;
                                             $2902 = $2901 << 24 >> 24;
                                             $2903 = ($2902|0)==(87);
                                             if ($2903) {
                                              $2904 = $arg;
                                              $2905 = (42096 + ($2904<<2)|0);
                                              HEAP32[$2905>>2] = 0;
                                              $2906 = $arg;
                                              $2907 = $2906 & 3;
                                              $2908 = $2907<<3;
                                              $2909 = 192 << $2908;
                                              $2910 = $2909 ^ -1;
                                              $2911 = $notes;
                                              $2912 = $2911 & $2910;
                                              $notes = $2912;
                                              $2913 = $arg;
                                              $2914 = (42096 + ($2913<<2)|0);
                                              $2915 = HEAP32[$2914>>2]|0;
                                              $2916 = $arg;
                                              $2917 = $2916 & 3;
                                              $2918 = $2917<<3;
                                              $2919 = $2915 << $2918;
                                              $2920 = $notes;
                                              $2921 = $2920 | $2919;
                                              $notes = $2921;
                                             } else {
                                              $2922 = $c69;
                                              $2923 = (30952 + ($2922)|0);
                                              $2924 = HEAP8[$2923>>0]|0;
                                              $2925 = $2924 << 24 >> 24;
                                              $2926 = ($2925|0)==(88);
                                              if ($2926) {
                                               $2927 = $arg;
                                               $2928 = (42096 + ($2927<<2)|0);
                                               HEAP32[$2928>>2] = 64;
                                               $2929 = $arg;
                                               $2930 = $2929 & 3;
                                               $2931 = $2930<<3;
                                               $2932 = 192 << $2931;
                                               $2933 = $2932 ^ -1;
                                               $2934 = $notes;
                                               $2935 = $2934 & $2933;
                                               $notes = $2935;
                                               $2936 = $arg;
                                               $2937 = (42096 + ($2936<<2)|0);
                                               $2938 = HEAP32[$2937>>2]|0;
                                               $2939 = $arg;
                                               $2940 = $2939 & 3;
                                               $2941 = $2940<<3;
                                               $2942 = $2938 << $2941;
                                               $2943 = $notes;
                                               $2944 = $2943 | $2942;
                                               $notes = $2944;
                                              } else {
                                               $2945 = $c69;
                                               $2946 = (30952 + ($2945)|0);
                                               $2947 = HEAP8[$2946>>0]|0;
                                               $2948 = $2947 << 24 >> 24;
                                               $2949 = ($2948|0)==(89);
                                               if ($2949) {
                                                $2950 = $arg;
                                                $2951 = (42096 + ($2950<<2)|0);
                                                HEAP32[$2951>>2] = 128;
                                                $2952 = $arg;
                                                $2953 = $2952 & 3;
                                                $2954 = $2953<<3;
                                                $2955 = 192 << $2954;
                                                $2956 = $2955 ^ -1;
                                                $2957 = $notes;
                                                $2958 = $2957 & $2956;
                                                $notes = $2958;
                                                $2959 = $arg;
                                                $2960 = (42096 + ($2959<<2)|0);
                                                $2961 = HEAP32[$2960>>2]|0;
                                                $2962 = $arg;
                                                $2963 = $2962 & 3;
                                                $2964 = $2963<<3;
                                                $2965 = $2961 << $2964;
                                                $2966 = $notes;
                                                $2967 = $2966 | $2965;
                                                $notes = $2967;
                                               } else {
                                                $2968 = $c69;
                                                $2969 = (30952 + ($2968)|0);
                                                $2970 = HEAP8[$2969>>0]|0;
                                                $2971 = $2970 << 24 >> 24;
                                                $2972 = ($2971|0)==(90);
                                                if ($2972) {
                                                 $2973 = $arg;
                                                 $2974 = (42096 + ($2973<<2)|0);
                                                 HEAP32[$2974>>2] = 192;
                                                 $2975 = $arg;
                                                 $2976 = $2975 & 3;
                                                 $2977 = $2976<<3;
                                                 $2978 = 192 << $2977;
                                                 $2979 = $2978 ^ -1;
                                                 $2980 = $notes;
                                                 $2981 = $2980 & $2979;
                                                 $notes = $2981;
                                                 $2982 = $arg;
                                                 $2983 = (42096 + ($2982<<2)|0);
                                                 $2984 = HEAP32[$2983>>2]|0;
                                                 $2985 = $arg;
                                                 $2986 = $2985 & 3;
                                                 $2987 = $2986<<3;
                                                 $2988 = $2984 << $2987;
                                                 $2989 = $notes;
                                                 $2990 = $2989 | $2988;
                                                 $notes = $2990;
                                                }
                                               }
                                              }
                                             }
                                             $2991 = $note;
                                             $2992 = $arg;
                                             $2993 = $2992 & 3;
                                             $2994 = $2993<<3;
                                             $2995 = $2991 << $2994;
                                             $2996 = $notes;
                                             $2997 = $2996 | $2995;
                                             $notes = $2997;
                                            }
                                           }
                                          }
                                          _get_lex();
                                          $2998 = $arg;
                                          $2999 = (($2998) + 1)|0;
                                          $arg = $2999;
                                          $3000 = HEAP32[30928>>2]|0;
                                          $3001 = ($3000|0)!=(21);
                                          if ($3001) {
                                           label = 1452;
                                           break;
                                          }
                                          $3002 = $arg;
                                          $3003 = ($3002|0)==(4);
                                          if ($3003) {
                                           label = 1454;
                                           break;
                                          }
                                          _get_lex();
                                         }
                                         if ((label|0) == 1397) {
                                          label = 0;
                                          _emit_error(42112);
                                         }
                                         else if ((label|0) == 1402) {
                                          label = 0;
                                          _get_lex();
                                          $notes = 253;
                                         }
                                         else if ((label|0) == 1405) {
                                          label = 0;
                                          _get_lex();
                                          $notes = 254;
                                         }
                                         else if ((label|0) == 1410) {
                                          label = 0;
                                          _emit_error(42152);
                                         }
                                         else if ((label|0) == 1452) {
                                          label = 0;
                                         }
                                         else if ((label|0) == 1454) {
                                          label = 0;
                                          _emit_error(42224);
                                         }
                                         $3004 = HEAP32[35640>>2]|0;
                                         $3005 = ($3004|0)==(2);
                                         if ($3005) {
                                          $3006 = HEAP32[2824>>2]|0;
                                          $3007 = $notes;
                                          $3008 = $3007 & 255;
                                          $3009 = $notes;
                                          $3010 = $3009 >>> 8;
                                          $3011 = $3010 & 255;
                                          $3012 = $notes;
                                          $3013 = $3012 >>> 16;
                                          $3014 = $3013 & 255;
                                          $3015 = $notes;
                                          $3016 = $3015 >>> 24;
                                          $3017 = $3016 & 255;
                                          HEAP32[$vararg_buffer379>>2] = $3008;
                                          $vararg_ptr382 = (($vararg_buffer379) + 4|0);
                                          HEAP32[$vararg_ptr382>>2] = $3011;
                                          $vararg_ptr383 = (($vararg_buffer379) + 8|0);
                                          HEAP32[$vararg_ptr383>>2] = $3014;
                                          $vararg_ptr384 = (($vararg_buffer379) + 12|0);
                                          HEAP32[$vararg_ptr384>>2] = $3017;
                                          (_fprintf(($3006|0),(42256|0),($vararg_buffer379|0))|0);
                                         } else {
                                          $3018 = HEAP32[2824>>2]|0;
                                          $3019 = $notes;
                                          $3020 = $3019 & 255;
                                          $3021 = $notes;
                                          $3022 = $3021 >>> 8;
                                          $3023 = $3022 & 255;
                                          $3024 = $notes;
                                          $3025 = $3024 >>> 16;
                                          $3026 = $3025 & 255;
                                          $3027 = $notes;
                                          $3028 = $3027 >>> 24;
                                          $3029 = $3028 & 255;
                                          HEAP32[$vararg_buffer385>>2] = $3020;
                                          $vararg_ptr388 = (($vararg_buffer385) + 4|0);
                                          HEAP32[$vararg_ptr388>>2] = $3023;
                                          $vararg_ptr389 = (($vararg_buffer385) + 8|0);
                                          HEAP32[$vararg_ptr389>>2] = $3026;
                                          $vararg_ptr390 = (($vararg_buffer385) + 12|0);
                                          HEAP32[$vararg_ptr390>>2] = $3029;
                                          (_fprintf(($3018|0),(42288|0),($vararg_buffer385|0))|0);
                                         }
                                        } else {
                                         $3030 = (_strcmp(30952,39800)|0);
                                         $3031 = ($3030|0)==(0);
                                         if ($3031) {
                                          _get_lex();
                                          $3032 = HEAP32[30928>>2]|0;
                                          $3033 = ($3032|0)==(1);
                                          do {
                                           if ($3033) {
                                            $3034 = (_strcmp(30952,34912)|0);
                                            $3035 = ($3034|0)==(0);
                                            if (!($3035)) {
                                             label = 1473;
                                             break;
                                            }
                                            _get_lex();
                                            $3036 = HEAP32[30928>>2]|0;
                                            $3037 = ($3036|0)!=(1);
                                            if ($3037) {
                                             label = 1465;
                                            } else {
                                             $3038 = (_strcmp(30952,37104)|0);
                                             $3039 = ($3038|0)!=(0);
                                             if ($3039) {
                                              label = 1465;
                                             }
                                            }
                                            if ((label|0) == 1465) {
                                             label = 0;
                                             _emit_error(42320);
                                            }
                                            _get_lex();
                                            $3040 = HEAP32[30928>>2]|0;
                                            $3041 = ($3040|0)!=(1);
                                            if ($3041) {
                                             _emit_error(42352);
                                            }
                                            $3042 = HEAP32[42392>>2]|0;
                                            $3043 = ($3042|0)!=(0|0);
                                            if ($3043) {
                                             _emit_error(42400);
                                            }
                                            $3044 = (_label_search(30952)|0);
                                            $label71 = $3044;
                                            $3045 = $label71;
                                            $3046 = ($3045|0)==(0|0);
                                            if ($3046) {
                                             $3047 = (_label_add(30952)|0);
                                             $label71 = $3047;
                                            }
                                            $3048 = $label71;
                                            $3049 = (($3048) + 4|0);
                                            $3050 = HEAP32[$3049>>2]|0;
                                            $3051 = $3050 | 16;
                                            HEAP32[$3049>>2] = $3051;
                                            $3052 = $label71;
                                            $3053 = (($3052) + 4|0);
                                            $3054 = HEAP32[$3053>>2]|0;
                                            $3055 = $3054 | 128;
                                            HEAP32[$3053>>2] = $3055;
                                            $3056 = $label71;
                                            HEAP32[42392>>2] = $3056;
                                            _get_lex();
                                           } else {
                                            label = 1473;
                                           }
                                          } while(0);
                                          if ((label|0) == 1473) {
                                           label = 0;
                                           $3057 = (_evaluate_expression(0,0,0)|0);
                                           $type73 = $3057;
                                           $fast = 0;
                                           $3058 = HEAP32[30928>>2]|0;
                                           $3059 = ($3058|0)==(1);
                                           do {
                                            if ($3059) {
                                             $3060 = (_strcmp(30952,42432)|0);
                                             $3061 = ($3060|0)==(0);
                                             if (!($3061)) {
                                              break;
                                             }
                                             _get_lex();
                                             $fast = 1;
                                            }
                                           } while(0);
                                           $gosub = 0;
                                           $3062 = HEAP32[30928>>2]|0;
                                           $3063 = ($3062|0)!=(1);
                                           do {
                                            if ($3063) {
                                             label = 1479;
                                            } else {
                                             $3064 = (_strcmp(30952,37064)|0);
                                             $3065 = ($3064|0)!=(0);
                                             if ($3065) {
                                              $3066 = (_strcmp(30952,37104)|0);
                                              $3067 = ($3066|0)!=(0);
                                              if ($3067) {
                                               label = 1479;
                                               break;
                                              }
                                             }
                                             $3068 = (_strcmp(30952,37064)|0);
                                             $3069 = ($3068|0)==(0);
                                             if ($3069) {
                                              _get_lex();
                                             } else {
                                              $3070 = (_strcmp(30952,37104)|0);
                                              $3071 = ($3070|0)==(0);
                                              if ($3071) {
                                               _get_lex();
                                               $gosub = 1;
                                              }
                                             }
                                            }
                                           } while(0);
                                           if ((label|0) == 1479) {
                                            label = 0;
                                            _emit_error(42440);
                                           }
                                           $max_value = 0;
                                           while(1) {
                                            $3072 = $max_value;
                                            $3073 = ($3072|0)==(256);
                                            if ($3073) {
                                             _emit_error(42472);
                                             $3074 = $max_value;
                                             $3075 = (($3074) + -1)|0;
                                             $max_value = $3075;
                                            }
                                            $3076 = HEAP32[30928>>2]|0;
                                            $3077 = ($3076|0)==(1);
                                            if ($3077) {
                                             $3078 = (_label_search(30952)|0);
                                             $label71 = $3078;
                                             $3079 = $label71;
                                             $3080 = ($3079|0)==(0|0);
                                             if ($3080) {
                                              $3081 = (_label_add(30952)|0);
                                              $label71 = $3081;
                                             }
                                             $3082 = $label71;
                                             $3083 = (($3082) + 4|0);
                                             $3084 = HEAP32[$3083>>2]|0;
                                             $3085 = $3084 | 16;
                                             HEAP32[$3083>>2] = $3085;
                                             $3086 = $gosub;
                                             $3087 = ($3086|0)!=(0);
                                             if ($3087) {
                                              $3088 = $label71;
                                              $3089 = (($3088) + 4|0);
                                              $3090 = HEAP32[$3089>>2]|0;
                                              $3091 = $3090 | 128;
                                              HEAP32[$3089>>2] = $3091;
                                             } else {
                                              $3092 = $label71;
                                              $3093 = (($3092) + 4|0);
                                              $3094 = HEAP32[$3093>>2]|0;
                                              $3095 = $3094 | 64;
                                              HEAP32[$3093>>2] = $3095;
                                             }
                                             $3096 = $label71;
                                             $3097 = $max_value;
                                             $3098 = (($3097) + 1)|0;
                                             $max_value = $3098;
                                             $3099 = (($options) + ($3097<<2)|0);
                                             HEAP32[$3099>>2] = $3096;
                                             _get_lex();
                                            } else {
                                             $3100 = $max_value;
                                             $3101 = (($3100) + 1)|0;
                                             $max_value = $3101;
                                             $3102 = (($options) + ($3100<<2)|0);
                                             HEAP32[$3102>>2] = 0;
                                            }
                                            $3103 = HEAP32[30928>>2]|0;
                                            $3104 = ($3103|0)!=(21);
                                            if ($3104) {
                                             break;
                                            }
                                            _get_lex();
                                           }
                                           $3105 = HEAP32[1688>>2]|0;
                                           $3106 = (($3105) + 1)|0;
                                           HEAP32[1688>>2] = $3106;
                                           $table = $3105;
                                           $3107 = HEAP32[1688>>2]|0;
                                           $3108 = (($3107) + 1)|0;
                                           HEAP32[1688>>2] = $3108;
                                           $new_label = $3107;
                                           $3109 = $fast;
                                           $3110 = ($3109|0)==(0);
                                           if ($3110) {
                                            $3111 = HEAP32[35640>>2]|0;
                                            $3112 = ($3111|0)==(1);
                                            if ($3112) {
                                             $3113 = $type73;
                                             $3114 = $3113 & 3;
                                             $3115 = ($3114|0)==(0);
                                             if ($3115) {
                                              _cpu6502_1op(38112,38120);
                                              _cpu6502_1op(38152,38160);
                                              _cpu6502_1op(38128,38136);
                                              $3116 = $max_value;
                                              HEAP32[$vararg_buffer391>>2] = $3116;
                                              (_sprintf(33104,38976,$vararg_buffer391)|0);
                                              _cpu6502_1op(42512,33104);
                                             } else {
                                              _cpu6502_1op(38112,38120);
                                              _cpu6502_1op(38128,38136);
                                              $3117 = $max_value;
                                              HEAP32[$vararg_buffer394>>2] = $3117;
                                              (_sprintf(33104,38976,$vararg_buffer394)|0);
                                              _cpu6502_1op(38344,38120);
                                              _cpu6502_noop(42520);
                                              _cpu6502_1op(42528,33104);
                                              _cpu6502_1op(38344,38136);
                                              (_strcat((33104|0),(38472|0))|0);
                                              _cpu6502_1op(42528,33104);
                                             }
                                             $3118 = $new_label;
                                             HEAP32[$vararg_buffer397>>2] = $3118;
                                             (_sprintf(33104,34176,$vararg_buffer397)|0);
                                             _cpu6502_1op(42536,33104);
                                            } else {
                                             $3119 = HEAP32[35640>>2]|0;
                                             $3120 = ($3119|0)==(2);
                                             if ($3120) {
                                              $3121 = $type73;
                                              $3122 = $3121 & 3;
                                              $3123 = ($3122|0)==(0);
                                              if ($3123) {
                                               $3124 = $max_value;
                                               $3125 = $3124<<8;
                                               $3126 = $max_value;
                                               HEAP32[$vararg_buffer400>>2] = $3125;
                                               $vararg_ptr403 = (($vararg_buffer400) + 4|0);
                                               HEAP32[$vararg_ptr403>>2] = $3126;
                                               (_sprintf(33104,42040,$vararg_buffer400)|0);
                                               _cpu9900_2op(42544,38208,33104);
                                              } else {
                                               $3127 = $max_value;
                                               HEAP32[$vararg_buffer404>>2] = $3127;
                                               (_sprintf(33104,39104,$vararg_buffer404)|0);
                                               _cpu9900_2op(42544,38208,33104);
                                              }
                                              $3128 = $new_label;
                                              HEAP32[$vararg_buffer407>>2] = $3128;
                                              (_sprintf(33104,42552,$vararg_buffer407)|0);
                                              $3129 = HEAP32[1688>>2]|0;
                                              $3130 = (($3129) + 1)|0;
                                              HEAP32[1688>>2] = $3130;
                                              HEAP32[$vararg_buffer410>>2] = $3129;
                                              (_sprintf(((33104 + 100|0)),34176,$vararg_buffer410)|0);
                                              _cpu9900_1op(42560,((33104 + 100|0)));
                                              _cpu9900_1op(42568,33104);
                                              _cpu9900_label(((33104 + 100|0)));
                                             } else {
                                              $3131 = $type73;
                                              $3132 = $3131 & 3;
                                              $3133 = ($3132|0)==(0);
                                              if ($3133) {
                                               $3134 = $max_value;
                                               HEAP32[$vararg_buffer413>>2] = $3134;
                                               (_sprintf(33104,39104,$vararg_buffer413)|0);
                                               _cpuz80_1op(42576,33104);
                                              } else {
                                               $3135 = $max_value;
                                               HEAP32[$vararg_buffer416>>2] = $3135;
                                               (_sprintf(33104,39104,$vararg_buffer416)|0);
                                               _cpuz80_2op(38280,39528,33104);
                                               _cpuz80_1op(34184,38296);
                                               _cpuz80_2op(42528,38264,39528);
                                               _cpuz80_2op(39488,38264,39528);
                                              }
                                              $3136 = $new_label;
                                              HEAP32[$vararg_buffer419>>2] = $3136;
                                              (_sprintf(33104,34176,$vararg_buffer419)|0);
                                              _cpuz80_2op(42584,42592,33104);
                                             }
                                            }
                                           }
                                           $3137 = $gosub;
                                           $3138 = ($3137|0)!=(0);
                                           if ($3138) {
                                            $3139 = HEAP32[35640>>2]|0;
                                            $3140 = ($3139|0)==(1);
                                            if ($3140) {
                                             $3141 = $new_label;
                                             HEAP32[$vararg_buffer422>>2] = $3141;
                                             (_sprintf(33104,42600,$vararg_buffer422)|0);
                                             _cpu6502_1op(38344,33104);
                                             _cpu6502_noop(38104);
                                             $3142 = $new_label;
                                             HEAP32[$vararg_buffer425>>2] = $3142;
                                             (_sprintf(33104,42616,$vararg_buffer425)|0);
                                             _cpu6502_1op(38344,33104);
                                             _cpu6502_noop(38104);
                                            } else {
                                             $3143 = HEAP32[35640>>2]|0;
                                             $3144 = ($3143|0)==(2);
                                             if ($3144) {
                                              $3145 = $new_label;
                                              HEAP32[$vararg_buffer428>>2] = $3145;
                                              (_sprintf(33104,34176,$vararg_buffer428)|0);
                                              _cpu9900_2op(38520,38232,33104);
                                              _cpu9900_1op(38184,38192);
                                              _cpu9900_2op(38200,38232,38216);
                                             } else {
                                              $3146 = $new_label;
                                              HEAP32[$vararg_buffer431>>2] = $3146;
                                              (_sprintf(33104,34176,$vararg_buffer431)|0);
                                              _cpuz80_2op(38280,39528,33104);
                                              _cpuz80_1op(38256,39528);
                                             }
                                            }
                                           }
                                           $3147 = HEAP32[35640>>2]|0;
                                           $3148 = ($3147|0)==(1);
                                           if ($3148) {
                                            _cpu6502_1op(38344,38120);
                                            _cpu6502_1op(39400,38296);
                                            _cpu6502_1op(39432,38136);
                                            _cpu6502_noop(42624);
                                            $3149 = $table;
                                            HEAP32[$vararg_buffer434>>2] = $3149;
                                            (_sprintf(33104,42632,$vararg_buffer434)|0);
                                            _cpu6502_1op(42640,33104);
                                            _cpu6502_1op(38112,38120);
                                            _cpu6502_1op(38344,38136);
                                            (_strcat((33104|0),(38472|0))|0);
                                            _cpu6502_1op(42640,33104);
                                            _cpu6502_1op(38112,38136);
                                            _cpu6502_1op(38152,38160);
                                            _cpu6502_1op(38344,38168);
                                            _cpu6502_1op(38112,39752);
                                            _cpu6502_noop(42648);
                                            _cpu6502_1op(38344,38168);
                                            _cpu6502_1op(38112,39744);
                                            _cpu6502_1op(42656,42664);
                                           } else {
                                            $3150 = HEAP32[35640>>2]|0;
                                            $3151 = ($3150|0)==(2);
                                            if ($3151) {
                                             $3152 = $type73;
                                             $3153 = $3152 & 3;
                                             $3154 = ($3153|0)==(0);
                                             if ($3154) {
                                              _cpu9900_2op(40424,38208,40432);
                                             }
                                             _cpu9900_2op(39456,38208,33064);
                                             _cpu9900_2op(38200,38208,38232);
                                             $3155 = $table;
                                             HEAP32[$vararg_buffer437>>2] = $3155;
                                             (_sprintf(33104,42672,$vararg_buffer437)|0);
                                             _cpu9900_2op(38200,33104,38208);
                                             _cpu9900_1op(42568,38248);
                                            } else {
                                             $3156 = $type73;
                                             $3157 = $3156 & 3;
                                             $3158 = ($3157|0)==(0);
                                             if ($3158) {
                                              _cpuz80_2op(38280,39768,38296);
                                              $3159 = $type73;
                                              $3160 = $3159 & 4;
                                              $3161 = ($3160|0)!=(0);
                                              if ($3161) {
                                               _cpuz80_noop(42688);
                                               _cpuz80_2op(42528,38296,38296);
                                               _cpuz80_2op(38280,39504,38296);
                                              } else {
                                               _cpuz80_2op(38280,39504,40560);
                                              }
                                             }
                                             _cpuz80_2op(39488,38264,38264);
                                             $3162 = $table;
                                             HEAP32[$vararg_buffer440>>2] = $3162;
                                             (_sprintf(33104,34176,$vararg_buffer440)|0);
                                             _cpuz80_2op(38280,39528,33104);
                                             _cpuz80_2op(39488,38264,39528);
                                             _cpuz80_2op(38280,38296,38288);
                                             _cpuz80_1op(42696,38264);
                                             _cpuz80_2op(38280,39504,38288);
                                             _cpuz80_2op(38280,39768,38296);
                                             _cpuz80_1op(42584,38288);
                                            }
                                           }
                                           $3163 = $table;
                                           HEAP32[$vararg_buffer443>>2] = $3163;
                                           (_sprintf(33104,34176,$vararg_buffer443)|0);
                                           _generic_label(33104);
                                           $c72 = 0;
                                           while(1) {
                                            $3164 = $c72;
                                            $3165 = $max_value;
                                            $3166 = ($3164|0)<($3165|0);
                                            if (!($3166)) {
                                             break;
                                            }
                                            $3167 = $c72;
                                            $3168 = (($options) + ($3167<<2)|0);
                                            $3169 = HEAP32[$3168>>2]|0;
                                            $3170 = ($3169|0)!=(0|0);
                                            if ($3170) {
                                             $3171 = $c72;
                                             $3172 = (($options) + ($3171<<2)|0);
                                             $3173 = HEAP32[$3172>>2]|0;
                                             $3174 = (($3173) + 12|0);
                                             HEAP32[$vararg_buffer446>>2] = $3174;
                                             (_sprintf(33104,38512,$vararg_buffer446)|0);
                                            } else {
                                             $3175 = $new_label;
                                             HEAP32[$vararg_buffer449>>2] = $3175;
                                             (_sprintf(33104,34176,$vararg_buffer449)|0);
                                            }
                                            $3176 = HEAP32[35640>>2]|0;
                                            $3177 = ($3176|0)==(1);
                                            if ($3177) {
                                             _cpu6502_1op(42704,33104);
                                            } else {
                                             $3178 = HEAP32[35640>>2]|0;
                                             $3179 = ($3178|0)==(2);
                                             if ($3179) {
                                              _cpu9900_1op(38392,33104);
                                             } else {
                                              _cpuz80_1op(42704,33104);
                                             }
                                            }
                                            $3180 = $c72;
                                            $3181 = (($3180) + 1)|0;
                                            $c72 = $3181;
                                           }
                                           $3182 = $new_label;
                                           HEAP32[$vararg_buffer452>>2] = $3182;
                                           (_sprintf(33104,34176,$vararg_buffer452)|0);
                                           _generic_label(33104);
                                          }
                                         } else {
                                          $3183 = (_strcmp(30952,42712)|0);
                                          $3184 = ($3183|0)==(0);
                                          if ($3184) {
                                           _get_lex();
                                           $3185 = HEAP32[30928>>2]|0;
                                           $3186 = ($3185|0)!=(4);
                                           if ($3186) {
                                            _emit_error(42720);
                                           } else {
                                            $3187 = HEAP32[30936>>2]|0;
                                            $3188 = ($3187|0)<(3);
                                            L1915: do {
                                             if ($3188) {
                                              $3189 = HEAP32[2808>>2]|0;
                                              $3190 = ($3189|0)==(2);
                                              do {
                                               if (!($3190)) {
                                                $3191 = HEAP32[2808>>2]|0;
                                                $3192 = ($3191|0)==(4);
                                                if ($3192) {
                                                 break;
                                                }
                                                $3193 = HEAP32[2808>>2]|0;
                                                $3194 = ($3193|0)==(9);
                                                if ($3194) {
                                                 break;
                                                }
                                                $3195 = HEAP32[2808>>2]|0;
                                                $3196 = ($3195|0)==(12);
                                                if (!($3196)) {
                                                 label = 1562;
                                                 break L1915;
                                                }
                                               }
                                              } while(0);
                                              _emit_warning(42744);
                                             } else {
                                              label = 1562;
                                             }
                                            } while(0);
                                            if ((label|0) == 1562) {
                                             label = 0;
                                             $3197 = HEAP32[30936>>2]|0;
                                             $3198 = ($3197|0)>=(5);
                                             do {
                                              if ($3198) {
                                               $3199 = HEAP32[2808>>2]|0;
                                               $3200 = ($3199|0)!=(2);
                                               if (!($3200)) {
                                                break;
                                               }
                                               $3201 = HEAP32[2808>>2]|0;
                                               $3202 = ($3201|0)!=(3);
                                               if (!($3202)) {
                                                break;
                                               }
                                               $3203 = HEAP32[2808>>2]|0;
                                               $3204 = ($3203|0)!=(4);
                                               if (!($3204)) {
                                                break;
                                               }
                                               $3205 = HEAP32[2808>>2]|0;
                                               $3206 = ($3205|0)!=(5);
                                               if (!($3206)) {
                                                break;
                                               }
                                               $3207 = HEAP32[2808>>2]|0;
                                               $3208 = ($3207|0)!=(6);
                                               if (!($3208)) {
                                                break;
                                               }
                                               _emit_warning(42784);
                                              }
                                             } while(0);
                                            }
                                            $3209 = HEAP32[30936>>2]|0;
                                            switch ($3209|0) {
                                            case 2:  {
                                             _get_lex();
                                             $3242 = HEAP32[30928>>2]|0;
                                             $3243 = ($3242|0)!=(21);
                                             if ($3243) {
                                              _emit_error(42824);
                                             } else {
                                              _get_lex();
                                             }
                                             $3244 = HEAP32[30928>>2]|0;
                                             $3245 = ($3244|0)!=(21);
                                             if ($3245) {
                                              $3246 = (_evaluate_expression(1,1,0)|0);
                                              HEAP32[$type>>2] = $3246;
                                              $3247 = HEAP32[35640>>2]|0;
                                              $3248 = ($3247|0)==(1);
                                              if ($3248) {
                                               _cpu6502_1op(39200,42976);
                                              } else {
                                               $3249 = HEAP32[35640>>2]|0;
                                               $3250 = ($3249|0)==(2);
                                               if ($3250) {
                                                _cpu9900_2op(38520,38368,42984);
                                               } else {
                                                _cpuz80_2op(38280,38296,42992);
                                               }
                                              }
                                              _generic_call(42872);
                                             }
                                             $3251 = HEAP32[30928>>2]|0;
                                             $3252 = ($3251|0)==(21);
                                             if ($3252) {
                                              _get_lex();
                                              $3253 = (_evaluate_expression(1,0,0)|0);
                                              HEAP32[$type>>2] = $3253;
                                              $3254 = HEAP32[35640>>2]|0;
                                              $3255 = ($3254|0)==(1);
                                              if ($3255) {
                                               _cpu6502_1op(39200,43000);
                                              } else {
                                               $3256 = HEAP32[35640>>2]|0;
                                               $3257 = ($3256|0)==(2);
                                               if ($3257) {
                                                _cpu9900_2op(38520,38368,43008);
                                               } else {
                                                _cpuz80_2op(38280,39760,43016);
                                               }
                                              }
                                              _generic_call(42912);
                                             }
                                             break;
                                            }
                                            case 0:  {
                                             _get_lex();
                                             $3210 = HEAP32[30928>>2]|0;
                                             $3211 = ($3210|0)!=(21);
                                             if ($3211) {
                                              _emit_error(42824);
                                             } else {
                                              _get_lex();
                                             }
                                             $3212 = HEAP32[30928>>2]|0;
                                             $3213 = ($3212|0)!=(21);
                                             if ($3213) {
                                              $3214 = (_evaluate_expression(1,1,0)|0);
                                              HEAP32[$type>>2] = $3214;
                                              $3215 = HEAP32[35640>>2]|0;
                                              $3216 = ($3215|0)==(1);
                                              if ($3216) {
                                               _cpu6502_1op(39200,42848);
                                              } else {
                                               $3217 = HEAP32[35640>>2]|0;
                                               $3218 = ($3217|0)==(2);
                                               if ($3218) {
                                                _cpu9900_2op(38520,38368,42856);
                                               } else {
                                                _cpuz80_2op(38280,38296,42864);
                                               }
                                              }
                                              _generic_call(42872);
                                             }
                                             $3219 = HEAP32[30928>>2]|0;
                                             $3220 = ($3219|0)==(21);
                                             if ($3220) {
                                              _get_lex();
                                              $3221 = (_evaluate_expression(1,0,0)|0);
                                              HEAP32[$type>>2] = $3221;
                                              $3222 = HEAP32[35640>>2]|0;
                                              $3223 = ($3222|0)==(1);
                                              if ($3223) {
                                               _cpu6502_1op(39200,42888);
                                              } else {
                                               $3224 = HEAP32[35640>>2]|0;
                                               $3225 = ($3224|0)==(2);
                                               if ($3225) {
                                                _cpu9900_2op(38520,38368,42896);
                                               } else {
                                                _cpuz80_2op(38280,39760,42904);
                                               }
                                              }
                                              _generic_call(42912);
                                             }
                                             break;
                                            }
                                            case 1:  {
                                             _get_lex();
                                             $3226 = HEAP32[30928>>2]|0;
                                             $3227 = ($3226|0)!=(21);
                                             if ($3227) {
                                              _emit_error(42824);
                                             } else {
                                              _get_lex();
                                             }
                                             $3228 = HEAP32[30928>>2]|0;
                                             $3229 = ($3228|0)!=(21);
                                             if ($3229) {
                                              $3230 = (_evaluate_expression(1,1,0)|0);
                                              HEAP32[$type>>2] = $3230;
                                              $3231 = HEAP32[35640>>2]|0;
                                              $3232 = ($3231|0)==(1);
                                              if ($3232) {
                                               _cpu6502_1op(39200,42928);
                                              } else {
                                               $3233 = HEAP32[35640>>2]|0;
                                               $3234 = ($3233|0)==(2);
                                               if ($3234) {
                                                _cpu9900_2op(38520,38368,42936);
                                               } else {
                                                _cpuz80_2op(38280,38296,42944);
                                               }
                                              }
                                              _generic_call(42872);
                                             }
                                             $3235 = HEAP32[30928>>2]|0;
                                             $3236 = ($3235|0)==(21);
                                             if ($3236) {
                                              _get_lex();
                                              $3237 = (_evaluate_expression(1,0,0)|0);
                                              HEAP32[$type>>2] = $3237;
                                              $3238 = HEAP32[35640>>2]|0;
                                              $3239 = ($3238|0)==(1);
                                              if ($3239) {
                                               _cpu6502_1op(39200,42952);
                                              } else {
                                               $3240 = HEAP32[35640>>2]|0;
                                               $3241 = ($3240|0)==(2);
                                               if ($3241) {
                                                _cpu9900_2op(38520,38368,42960);
                                               } else {
                                                _cpuz80_2op(38280,39760,42968);
                                               }
                                              }
                                              _generic_call(42912);
                                             }
                                             break;
                                            }
                                            case 3:  {
                                             _get_lex();
                                             $3258 = HEAP32[30928>>2]|0;
                                             $3259 = ($3258|0)!=(21);
                                             if ($3259) {
                                              _emit_error(42824);
                                             } else {
                                              _get_lex();
                                             }
                                             $3260 = HEAP32[30928>>2]|0;
                                             $3261 = ($3260|0)!=(21);
                                             if ($3261) {
                                              $3262 = (_evaluate_expression(1,0,0)|0);
                                              HEAP32[$type>>2] = $3262;
                                              _generic_call(43024);
                                             }
                                             $3263 = HEAP32[30928>>2]|0;
                                             $3264 = ($3263|0)==(21);
                                             if ($3264) {
                                              _get_lex();
                                              $3265 = (_evaluate_expression(1,0,0)|0);
                                              HEAP32[$type>>2] = $3265;
                                              $3266 = HEAP32[35640>>2]|0;
                                              $3267 = ($3266|0)==(1);
                                              if ($3267) {
                                               _cpu6502_1op(39200,43040);
                                              } else {
                                               $3268 = HEAP32[35640>>2]|0;
                                               $3269 = ($3268|0)==(2);
                                               if ($3269) {
                                                _cpu9900_2op(38520,38368,43048);
                                               } else {
                                                _cpuz80_2op(38280,39760,43056);
                                               }
                                              }
                                              _generic_call(42912);
                                             }
                                             break;
                                            }
                                            case 6:  {
                                             _get_lex();
                                             $3286 = HEAP32[30928>>2]|0;
                                             $3287 = ($3286|0)!=(21);
                                             if ($3287) {
                                              _emit_error(42824);
                                             } else {
                                              _get_lex();
                                             }
                                             $3288 = HEAP32[30928>>2]|0;
                                             $3289 = ($3288|0)!=(21);
                                             if ($3289) {
                                              $3290 = (_evaluate_expression(1,1,0)|0);
                                              HEAP32[$type>>2] = $3290;
                                              $3291 = HEAP32[35640>>2]|0;
                                              $3292 = ($3291|0)==(1);
                                              if ($3292) {
                                              } else {
                                               $3293 = HEAP32[35640>>2]|0;
                                               $3294 = ($3293|0)==(2);
                                               if ($3294) {
                                               } else {
                                                _cpuz80_2op(38280,38296,43104);
                                                _cpuz80_1op(38400,43072);
                                               }
                                              }
                                             }
                                             $3295 = HEAP32[30928>>2]|0;
                                             $3296 = ($3295|0)==(21);
                                             if ($3296) {
                                              _get_lex();
                                              $3297 = (_evaluate_expression(1,0,0)|0);
                                              HEAP32[$type>>2] = $3297;
                                              $3298 = HEAP32[35640>>2]|0;
                                              $3299 = ($3298|0)==(1);
                                              if ($3299) {
                                              } else {
                                               $3300 = HEAP32[35640>>2]|0;
                                               $3301 = ($3300|0)==(2);
                                               if ($3301) {
                                               } else {
                                                _cpuz80_2op(38280,39760,43112);
                                                _cpuz80_1op(38400,43096);
                                               }
                                              }
                                             }
                                             break;
                                            }
                                            case 7:  {
                                             _get_lex();
                                             $3302 = HEAP32[30928>>2]|0;
                                             $3303 = ($3302|0)!=(21);
                                             if ($3303) {
                                              _emit_error(42824);
                                             } else {
                                              _get_lex();
                                             }
                                             $3304 = HEAP32[30928>>2]|0;
                                             $3305 = ($3304|0)!=(21);
                                             if ($3305) {
                                              $3306 = (_evaluate_expression(1,1,0)|0);
                                              HEAP32[$type>>2] = $3306;
                                              $3307 = HEAP32[35640>>2]|0;
                                              $3308 = ($3307|0)==(1);
                                              if ($3308) {
                                              } else {
                                               $3309 = HEAP32[35640>>2]|0;
                                               $3310 = ($3309|0)==(2);
                                               if ($3310) {
                                               } else {
                                                _cpuz80_2op(38280,38296,43120);
                                                _cpuz80_1op(38400,43072);
                                               }
                                              }
                                             }
                                             $3311 = HEAP32[30928>>2]|0;
                                             $3312 = ($3311|0)==(21);
                                             if ($3312) {
                                              _get_lex();
                                              $3313 = (_evaluate_expression(1,0,0)|0);
                                              HEAP32[$type>>2] = $3313;
                                              $3314 = HEAP32[35640>>2]|0;
                                              $3315 = ($3314|0)==(1);
                                              if ($3315) {
                                              } else {
                                               $3316 = HEAP32[35640>>2]|0;
                                               $3317 = ($3316|0)==(2);
                                               if ($3317) {
                                               } else {
                                                _cpuz80_2op(38280,39760,43128);
                                                _cpuz80_1op(38400,43096);
                                               }
                                              }
                                             }
                                             break;
                                            }
                                            case 5:  {
                                             _get_lex();
                                             $3270 = HEAP32[30928>>2]|0;
                                             $3271 = ($3270|0)!=(21);
                                             if ($3271) {
                                              _emit_error(42824);
                                             } else {
                                              _get_lex();
                                             }
                                             $3272 = HEAP32[30928>>2]|0;
                                             $3273 = ($3272|0)!=(21);
                                             if ($3273) {
                                              $3274 = (_evaluate_expression(1,1,0)|0);
                                              HEAP32[$type>>2] = $3274;
                                              $3275 = HEAP32[35640>>2]|0;
                                              $3276 = ($3275|0)==(1);
                                              if ($3276) {
                                              } else {
                                               $3277 = HEAP32[35640>>2]|0;
                                               $3278 = ($3277|0)==(2);
                                               if ($3278) {
                                               } else {
                                                _cpuz80_2op(38280,38296,43064);
                                                _cpuz80_1op(38400,43072);
                                               }
                                              }
                                             }
                                             $3279 = HEAP32[30928>>2]|0;
                                             $3280 = ($3279|0)==(21);
                                             if ($3280) {
                                              _get_lex();
                                              $3281 = (_evaluate_expression(1,0,0)|0);
                                              HEAP32[$type>>2] = $3281;
                                              $3282 = HEAP32[35640>>2]|0;
                                              $3283 = ($3282|0)==(1);
                                              if ($3283) {
                                              } else {
                                               $3284 = HEAP32[35640>>2]|0;
                                               $3285 = ($3284|0)==(2);
                                               if ($3285) {
                                               } else {
                                                _cpuz80_2op(38280,39760,43088);
                                                _cpuz80_1op(38400,43096);
                                               }
                                              }
                                             }
                                             break;
                                            }
                                            case 9:  {
                                             _get_lex();
                                             $3334 = HEAP32[30928>>2]|0;
                                             $3335 = ($3334|0)!=(21);
                                             if ($3335) {
                                              _emit_error(42824);
                                             } else {
                                              _get_lex();
                                             }
                                             $3336 = HEAP32[30928>>2]|0;
                                             $3337 = ($3336|0)!=(21);
                                             if ($3337) {
                                              $3338 = (_evaluate_expression(1,0,0)|0);
                                              HEAP32[$type>>2] = $3338;
                                              $3339 = HEAP32[35640>>2]|0;
                                              $3340 = ($3339|0)==(1);
                                              if ($3340) {
                                              } else {
                                               $3341 = HEAP32[35640>>2]|0;
                                               $3342 = ($3341|0)==(2);
                                               if ($3342) {
                                               } else {
                                                _cpuz80_2op(38280,39760,43152);
                                                _cpuz80_1op(38400,43096);
                                               }
                                              }
                                             }
                                             $3343 = HEAP32[30928>>2]|0;
                                             $3344 = ($3343|0)==(21);
                                             if ($3344) {
                                              _get_lex();
                                              $3345 = (_evaluate_expression(1,0,0)|0);
                                              HEAP32[$type>>2] = $3345;
                                              $3346 = HEAP32[35640>>2]|0;
                                              $3347 = ($3346|0)==(1);
                                              if ($3347) {
                                              } else {
                                               $3348 = HEAP32[35640>>2]|0;
                                               $3349 = ($3348|0)==(2);
                                               if ($3349) {
                                               } else {
                                                _cpuz80_1op(34200,43160);
                                                $3350 = HEAP32[2808>>2]|0;
                                                $3351 = ($3350|0)==(9);
                                                do {
                                                 if ($3351) {
                                                  label = 1743;
                                                 } else {
                                                  $3352 = HEAP32[2808>>2]|0;
                                                  $3353 = ($3352|0)==(12);
                                                  if ($3353) {
                                                   label = 1743;
                                                   break;
                                                  }
                                                  _cpuz80_1op(34184,42864);
                                                 }
                                                } while(0);
                                                if ((label|0) == 1743) {
                                                 label = 0;
                                                 _cpuz80_1op(34184,43168);
                                                }
                                                _cpuz80_2op(38280,39760,39512);
                                                _cpuz80_1op(38400,43096);
                                               }
                                              }
                                             }
                                             break;
                                            }
                                            case 8:  {
                                             _get_lex();
                                             $3318 = HEAP32[30928>>2]|0;
                                             $3319 = ($3318|0)!=(21);
                                             if ($3319) {
                                              _emit_error(42824);
                                             } else {
                                              _get_lex();
                                             }
                                             $3320 = HEAP32[30928>>2]|0;
                                             $3321 = ($3320|0)!=(21);
                                             if ($3321) {
                                              $3322 = (_evaluate_expression(1,1,0)|0);
                                              HEAP32[$type>>2] = $3322;
                                              $3323 = HEAP32[35640>>2]|0;
                                              $3324 = ($3323|0)==(1);
                                              if ($3324) {
                                              } else {
                                               $3325 = HEAP32[35640>>2]|0;
                                               $3326 = ($3325|0)==(2);
                                               if ($3326) {
                                               } else {
                                                _cpuz80_2op(38280,38296,43136);
                                                _cpuz80_1op(38400,43072);
                                               }
                                              }
                                             }
                                             $3327 = HEAP32[30928>>2]|0;
                                             $3328 = ($3327|0)==(21);
                                             if ($3328) {
                                              _get_lex();
                                              $3329 = (_evaluate_expression(1,0,0)|0);
                                              HEAP32[$type>>2] = $3329;
                                              $3330 = HEAP32[35640>>2]|0;
                                              $3331 = ($3330|0)==(1);
                                              if ($3331) {
                                              } else {
                                               $3332 = HEAP32[35640>>2]|0;
                                               $3333 = ($3332|0)==(2);
                                               if ($3333) {
                                               } else {
                                                _cpuz80_2op(38280,39760,43144);
                                                _cpuz80_1op(38400,43096);
                                               }
                                              }
                                             }
                                             break;
                                            }
                                            default: {
                                            }
                                            }
                                           }
                                          } else {
                                           $3354 = (_strcmp(30952,38400)|0);
                                           $3355 = ($3354|0)==(0);
                                           if ($3355) {
                                            _get_lex();
                                            $3356 = (_process_usr(1)|0);
                                            $tree74 = $3356;
                                            $3357 = $tree74;
                                            _node_label($3357);
                                            $3358 = $tree74;
                                            _node_generate($3358,0);
                                            $3359 = $tree74;
                                            _node_delete($3359);
                                           } else {
                                            $3360 = (_strcmp(30952,43176)|0);
                                            $3361 = ($3360|0)==(0);
                                            if ($3361) {
                                             _generic_dump();
                                             $3362 = HEAP32[29864>>2]|0;
                                             $c75 = $3362;
                                             while(1) {
                                              $3363 = $c75;
                                              $3364 = HEAP32[29872>>2]|0;
                                              $3365 = ($3363|0)<($3364|0);
                                              if ($3365) {
                                               $3366 = $c75;
                                               $3367 = (29880 + ($3366)|0);
                                               $3368 = HEAP8[$3367>>0]|0;
                                               $3369 = $3368 << 24 >> 24;
                                               $3370 = (_isspace($3369)|0);
                                               $3371 = ($3370|0)!=(0);
                                               $3811 = $3371;
                                              } else {
                                               $3811 = 0;
                                              }
                                              if (!($3811)) {
                                               break;
                                              }
                                              $3372 = $c75;
                                              $3373 = (($3372) + 1)|0;
                                              $c75 = $3373;
                                             }
                                             while(1) {
                                              $3374 = $c75;
                                              $3375 = HEAP32[29872>>2]|0;
                                              $3376 = ($3374|0)<($3375|0);
                                              if ($3376) {
                                               $3377 = $c75;
                                               $3378 = (29880 + ($3377)|0);
                                               $3379 = HEAP8[$3378>>0]|0;
                                               $3380 = $3379 << 24 >> 24;
                                               $3381 = (_isspace($3380)|0);
                                               $3382 = ($3381|0)!=(0);
                                               $3383 = $3382 ^ 1;
                                               $3812 = $3383;
                                              } else {
                                               $3812 = 0;
                                              }
                                              if (!($3812)) {
                                               break;
                                              }
                                              $3384 = $c75;
                                              $3385 = (($3384) + 1)|0;
                                              $c75 = $3385;
                                             }
                                             $3386 = $c75;
                                             $3387 = (($3386) - 1)|0;
                                             $3388 = (29880 + ($3387)|0);
                                             $3389 = HEAP8[$3388>>0]|0;
                                             $3390 = $3389 << 24 >> 24;
                                             $3391 = ($3390|0)==(58);
                                             if ($3391) {
                                              (_lex_skip_spaces()|0);
                                             }
                                             $3392 = HEAP32[35640>>2]|0;
                                             $3393 = ($3392|0)==(2);
                                             if ($3393) {
                                              $3394 = HEAP32[29864>>2]|0;
                                              $3395 = (29880 + ($3394)|0);
                                              $3396 = (_strncmp($3395,43184,7)|0);
                                              $3397 = ($3396|0)==(0);
                                              if ($3397) {
                                               $3398 = HEAP32[29864>>2]|0;
                                               $3399 = (29880 + ($3398)|0);
                                               ;HEAP8[$3399+0>>0]=HEAP8[43192+0>>0]|0;HEAP8[$3399+1>>0]=HEAP8[43192+1>>0]|0;HEAP8[$3399+2>>0]=HEAP8[43192+2>>0]|0;HEAP8[$3399+3>>0]=HEAP8[43192+3>>0]|0;HEAP8[$3399+4>>0]=HEAP8[43192+4>>0]|0;HEAP8[$3399+5>>0]=HEAP8[43192+5>>0]|0;HEAP8[$3399+6>>0]=HEAP8[43192+6>>0]|0;
                                              }
                                             }
                                             $3400 = HEAP32[2824>>2]|0;
                                             $3401 = HEAP32[29864>>2]|0;
                                             $3402 = (29880 + ($3401)|0);
                                             HEAP32[$vararg_buffer455>>2] = $3402;
                                             (_fprintf(($3400|0),(41088|0),($vararg_buffer455|0))|0);
                                             $3403 = HEAP32[29872>>2]|0;
                                             HEAP32[29864>>2] = $3403;
                                             _get_lex();
                                            } else {
                                             $3404 = (_strcmp(30952,43200)|0);
                                             $3405 = ($3404|0)==(0);
                                             if ($3405) {
                                              _get_lex();
                                              $3406 = HEAP32[30928>>2]|0;
                                              $3407 = ($3406|0)!=(1);
                                              do {
                                               if ($3407) {
                                                label = 1774;
                                               } else {
                                                $3408 = (_strcmp(30952,43208)|0);
                                                $3409 = ($3408|0)!=(0);
                                                if ($3409) {
                                                 label = 1774;
                                                 break;
                                                }
                                                _get_lex();
                                                $3410 = HEAP32[30928>>2]|0;
                                                $3411 = ($3410|0)!=(1);
                                                if ($3411) {
                                                 _emit_error(43240);
                                                } else {
                                                 $3412 = (_macro_search(30952)|0);
                                                 $3413 = ($3412|0)!=(0|0);
                                                 if ($3413) {
                                                  _emit_error(43280);
                                                 } else {
                                                  (_strcpy(($function|0),(30952|0))|0);
                                                  _get_lex();
                                                  $total_arguments = 0;
                                                  $3414 = HEAP32[30928>>2]|0;
                                                  $3415 = ($3414|0)==(17);
                                                  if ($3415) {
                                                   _get_lex();
                                                   while(1) {
                                                    $3416 = HEAP32[30928>>2]|0;
                                                    $3417 = ($3416|0)!=(1);
                                                    if ($3417) {
                                                     label = 1782;
                                                     break;
                                                    }
                                                    $3418 = $total_arguments;
                                                    $3419 = ($3418|0)==(32);
                                                    if ($3419) {
                                                     label = 1784;
                                                     break;
                                                    }
                                                    $3420 = (_strlen((30952|0))|0);
                                                    $3421 = (($3420) + 1)|0;
                                                    $3422 = (_malloc($3421)|0);
                                                    $3423 = $total_arguments;
                                                    $3424 = (($arguments) + ($3423<<2)|0);
                                                    HEAP32[$3424>>2] = $3422;
                                                    $3425 = $total_arguments;
                                                    $3426 = (($arguments) + ($3425<<2)|0);
                                                    $3427 = HEAP32[$3426>>2]|0;
                                                    $3428 = ($3427|0)==(0|0);
                                                    if ($3428) {
                                                     label = 1786;
                                                     break;
                                                    }
                                                    $3429 = $total_arguments;
                                                    $3430 = (($arguments) + ($3429<<2)|0);
                                                    $3431 = HEAP32[$3430>>2]|0;
                                                    (_strcpy(($3431|0),(30952|0))|0);
                                                    $3432 = $total_arguments;
                                                    $3433 = (($3432) + 1)|0;
                                                    $total_arguments = $3433;
                                                    _get_lex();
                                                    $3434 = HEAP32[30928>>2]|0;
                                                    $3435 = ($3434|0)==(21);
                                                    if (!($3435)) {
                                                     label = 1789;
                                                     break;
                                                    }
                                                    _get_lex();
                                                   }
                                                   do {
                                                    if ((label|0) == 1782) {
                                                     label = 0;
                                                     _emit_error(43312);
                                                    }
                                                    else if ((label|0) == 1784) {
                                                     label = 0;
                                                     _emit_error(43360);
                                                    }
                                                    else if ((label|0) == 1786) {
                                                     label = 0;
                                                     _emit_error(43400);
                                                    }
                                                    else if ((label|0) == 1789) {
                                                     label = 0;
                                                     $3436 = HEAP32[30928>>2]|0;
                                                     $3437 = ($3436|0)==(18);
                                                     if ($3437) {
                                                      _get_lex();
                                                      break;
                                                     } else {
                                                      _emit_error(43312);
                                                      break;
                                                     }
                                                    }
                                                   } while(0);
                                                  }
                                                  $3438 = (_macro_add($function)|0);
                                                  $macro = $3438;
                                                  $3439 = $total_arguments;
                                                  $3440 = $macro;
                                                  $3441 = (($3440) + 4|0);
                                                  HEAP32[$3441>>2] = $3439;
                                                  $3442 = HEAP32[30928>>2]|0;
                                                  $3443 = ($3442|0)!=(6);
                                                  if ($3443) {
                                                   _emit_error(43424);
                                                  } else {
                                                   _get_lex();
                                                   while(1) {
                                                    $3444 = HEAP32[30928>>2]|0;
                                                    $3445 = ($3444|0)!=(0);
                                                    if (!($3445)) {
                                                     break;
                                                    }
                                                    $3446 = HEAP32[30928>>2]|0;
                                                    $3447 = ($3446|0)==(22);
                                                    if ($3447) {
                                                     label = 1799;
                                                     break;
                                                    }
                                                    $3448 = HEAP32[30928>>2]|0;
                                                    $3449 = ($3448|0)==(1);
                                                    if ($3449) {
                                                     $c76 = 0;
                                                     while(1) {
                                                      $3450 = $c76;
                                                      $3451 = $total_arguments;
                                                      $3452 = ($3450|0)<($3451|0);
                                                      if (!($3452)) {
                                                       break;
                                                      }
                                                      $3453 = $c76;
                                                      $3454 = (($arguments) + ($3453<<2)|0);
                                                      $3455 = HEAP32[$3454>>2]|0;
                                                      $3456 = (_strcmp($3455,30952)|0);
                                                      $3457 = ($3456|0)==(0);
                                                      if ($3457) {
                                                       label = 1804;
                                                       break;
                                                      }
                                                      $3458 = $c76;
                                                      $3459 = (($3458) + 1)|0;
                                                      $c76 = $3459;
                                                     }
                                                     if ((label|0) == 1804) {
                                                      label = 0;
                                                     }
                                                     $3460 = $c76;
                                                     $3461 = $total_arguments;
                                                     $3462 = ($3460|0)<($3461|0);
                                                     if ($3462) {
                                                      HEAP32[30928>>2] = 22;
                                                      $3463 = $c76;
                                                      HEAP32[30936>>2] = $3463;
                                                      HEAP8[30952>>0] = 0;
                                                     }
                                                    }
                                                    $3464 = $macro;
                                                    $3465 = (($3464) + 16|0);
                                                    $3466 = HEAP32[$3465>>2]|0;
                                                    $3467 = $macro;
                                                    $3468 = (($3467) + 20|0);
                                                    $3469 = HEAP32[$3468>>2]|0;
                                                    $3470 = ($3466|0)>=($3469|0);
                                                    if ($3470) {
                                                     $3471 = $macro;
                                                     $3472 = (($3471) + 12|0);
                                                     $3473 = HEAP32[$3472>>2]|0;
                                                     $3474 = $macro;
                                                     $3475 = (($3474) + 20|0);
                                                     $3476 = HEAP32[$3475>>2]|0;
                                                     $3477 = (($3476) + 1)|0;
                                                     $3478 = $3477<<1;
                                                     $3479 = ($3478*12)|0;
                                                     $3480 = (_realloc($3473,$3479)|0);
                                                     $3481 = $macro;
                                                     $3482 = (($3481) + 12|0);
                                                     HEAP32[$3482>>2] = $3480;
                                                     $3483 = $macro;
                                                     $3484 = (($3483) + 12|0);
                                                     $3485 = HEAP32[$3484>>2]|0;
                                                     $3486 = ($3485|0)==(0|0);
                                                     if ($3486) {
                                                      label = 1812;
                                                      break;
                                                     }
                                                     $3487 = $macro;
                                                     $3488 = (($3487) + 20|0);
                                                     $3489 = HEAP32[$3488>>2]|0;
                                                     $3490 = (($3489) + 1)|0;
                                                     $3491 = $3490<<1;
                                                     $3492 = $macro;
                                                     $3493 = (($3492) + 20|0);
                                                     HEAP32[$3493>>2] = $3491;
                                                    }
                                                    $3494 = HEAP32[30928>>2]|0;
                                                    $3495 = $macro;
                                                    $3496 = (($3495) + 16|0);
                                                    $3497 = HEAP32[$3496>>2]|0;
                                                    $3498 = $macro;
                                                    $3499 = (($3498) + 12|0);
                                                    $3500 = HEAP32[$3499>>2]|0;
                                                    $3501 = (($3500) + (($3497*12)|0)|0);
                                                    HEAP32[$3501>>2] = $3494;
                                                    $3502 = HEAP32[30928>>2]|0;
                                                    $3503 = ($3502|0)==(2);
                                                    if ($3503) {
                                                     $3504 = HEAP32[30944>>2]|0;
                                                     HEAP32[30936>>2] = $3504;
                                                    }
                                                    $3505 = HEAP32[30936>>2]|0;
                                                    $3506 = $macro;
                                                    $3507 = (($3506) + 16|0);
                                                    $3508 = HEAP32[$3507>>2]|0;
                                                    $3509 = $macro;
                                                    $3510 = (($3509) + 12|0);
                                                    $3511 = HEAP32[$3510>>2]|0;
                                                    $3512 = (($3511) + (($3508*12)|0)|0);
                                                    $3513 = (($3512) + 4|0);
                                                    HEAP32[$3513>>2] = $3505;
                                                    $3514 = HEAP32[30928>>2]|0;
                                                    $3515 = ($3514|0)==(2);
                                                    if ($3515) {
                                                     $3516 = HEAP32[30944>>2]|0;
                                                     $3517 = (($3516) + 1)|0;
                                                     $3518 = (_malloc($3517)|0);
                                                     $3519 = $macro;
                                                     $3520 = (($3519) + 16|0);
                                                     $3521 = HEAP32[$3520>>2]|0;
                                                     $3522 = $macro;
                                                     $3523 = (($3522) + 12|0);
                                                     $3524 = HEAP32[$3523>>2]|0;
                                                     $3525 = (($3524) + (($3521*12)|0)|0);
                                                     $3526 = (($3525) + 8|0);
                                                     HEAP32[$3526>>2] = $3518;
                                                    } else {
                                                     $3527 = (_strlen((30952|0))|0);
                                                     $3528 = (($3527) + 1)|0;
                                                     $3529 = (_malloc($3528)|0);
                                                     $3530 = $macro;
                                                     $3531 = (($3530) + 16|0);
                                                     $3532 = HEAP32[$3531>>2]|0;
                                                     $3533 = $macro;
                                                     $3534 = (($3533) + 12|0);
                                                     $3535 = HEAP32[$3534>>2]|0;
                                                     $3536 = (($3535) + (($3532*12)|0)|0);
                                                     $3537 = (($3536) + 8|0);
                                                     HEAP32[$3537>>2] = $3529;
                                                    }
                                                    $3538 = $macro;
                                                    $3539 = (($3538) + 16|0);
                                                    $3540 = HEAP32[$3539>>2]|0;
                                                    $3541 = $macro;
                                                    $3542 = (($3541) + 12|0);
                                                    $3543 = HEAP32[$3542>>2]|0;
                                                    $3544 = (($3543) + (($3540*12)|0)|0);
                                                    $3545 = (($3544) + 8|0);
                                                    $3546 = HEAP32[$3545>>2]|0;
                                                    $3547 = ($3546|0)==(0|0);
                                                    if ($3547) {
                                                     label = 1820;
                                                     break;
                                                    }
                                                    $3548 = HEAP32[30928>>2]|0;
                                                    $3549 = ($3548|0)==(2);
                                                    if ($3549) {
                                                     $3550 = HEAP32[30936>>2]|0;
                                                     $3551 = ($3550|0)!=(0);
                                                     if ($3551) {
                                                      $3552 = $macro;
                                                      $3553 = (($3552) + 16|0);
                                                      $3554 = HEAP32[$3553>>2]|0;
                                                      $3555 = $macro;
                                                      $3556 = (($3555) + 12|0);
                                                      $3557 = HEAP32[$3556>>2]|0;
                                                      $3558 = (($3557) + (($3554*12)|0)|0);
                                                      $3559 = (($3558) + 8|0);
                                                      $3560 = HEAP32[$3559>>2]|0;
                                                      $3561 = HEAP32[30936>>2]|0;
                                                      _memcpy(($3560|0),(30952|0),($3561|0))|0;
                                                     }
                                                    } else {
                                                     $3562 = $macro;
                                                     $3563 = (($3562) + 16|0);
                                                     $3564 = HEAP32[$3563>>2]|0;
                                                     $3565 = $macro;
                                                     $3566 = (($3565) + 12|0);
                                                     $3567 = HEAP32[$3566>>2]|0;
                                                     $3568 = (($3567) + (($3564*12)|0)|0);
                                                     $3569 = (($3568) + 8|0);
                                                     $3570 = HEAP32[$3569>>2]|0;
                                                     (_strcpy(($3570|0),(30952|0))|0);
                                                    }
                                                    $3571 = $macro;
                                                    $3572 = (($3571) + 16|0);
                                                    $3573 = HEAP32[$3572>>2]|0;
                                                    $3574 = (($3573) + 1)|0;
                                                    HEAP32[$3572>>2] = $3574;
                                                    _get_lex();
                                                   }
                                                   if ((label|0) == 1799) {
                                                    label = 0;
                                                    _emit_error(43448);
                                                   }
                                                   else if ((label|0) == 1812) {
                                                    label = 0;
                                                    _emit_error(43400);
                                                   }
                                                   else if ((label|0) == 1820) {
                                                    label = 0;
                                                    _emit_error(43400);
                                                   }
                                                  }
                                                 }
                                                }
                                               }
                                              } while(0);
                                              if ((label|0) == 1774) {
                                               label = 0;
                                               _emit_error(43216);
                                              }
                                             } else {
                                              $3575 = (_strcmp(30952,43496)|0);
                                              $3576 = ($3575|0)==(0);
                                              if ($3576) {
                                               _get_lex();
                                               $3577 = HEAP32[30928>>2]|0;
                                               $3578 = ($3577|0)!=(1);
                                               if ($3578) {
                                                _emit_error(43504);
                                               } else {
                                                $3579 = (_strcmp(30952,43536)|0);
                                                $3580 = ($3579|0)==(0);
                                                if ($3580) {
                                                 _get_lex();
                                                 $3581 = HEAP32[30928>>2]|0;
                                                 $3582 = ($3581|0)==(1);
                                                 do {
                                                  if ($3582) {
                                                   $3583 = (_strcmp(30952,39800)|0);
                                                   $3584 = ($3583|0)==(0);
                                                   if (!($3584)) {
                                                    label = 1839;
                                                    break;
                                                   }
                                                   _get_lex();
                                                   HEAP32[33096>>2] = 1;
                                                  } else {
                                                   label = 1839;
                                                  }
                                                 } while(0);
                                                 if ((label|0) == 1839) {
                                                  label = 0;
                                                  $3585 = HEAP32[30928>>2]|0;
                                                  $3586 = ($3585|0)==(1);
                                                  do {
                                                   if ($3586) {
                                                    $3587 = (_strcmp(30952,39864)|0);
                                                    $3588 = ($3587|0)==(0);
                                                    if (!($3588)) {
                                                     label = 1842;
                                                     break;
                                                    }
                                                    _get_lex();
                                                    HEAP32[33096>>2] = 0;
                                                   } else {
                                                    label = 1842;
                                                   }
                                                  } while(0);
                                                  if ((label|0) == 1842) {
                                                   label = 0;
                                                   HEAP32[33096>>2] = 1;
                                                  }
                                                 }
                                                } else {
                                                 $3589 = (_strcmp(30952,43552)|0);
                                                 $3590 = ($3589|0)==(0);
                                                 if ($3590) {
                                                  _get_lex();
                                                  $3591 = HEAP32[30928>>2]|0;
                                                  $3592 = ($3591|0)==(1);
                                                  do {
                                                   if ($3592) {
                                                    $3593 = (_strcmp(30952,39800)|0);
                                                    $3594 = ($3593|0)==(0);
                                                    if (!($3594)) {
                                                     label = 1849;
                                                     break;
                                                    }
                                                    _get_lex();
                                                    HEAP32[2768>>2] = 1;
                                                   } else {
                                                    label = 1849;
                                                   }
                                                  } while(0);
                                                  if ((label|0) == 1849) {
                                                   label = 0;
                                                   $3595 = HEAP32[30928>>2]|0;
                                                   $3596 = ($3595|0)==(1);
                                                   do {
                                                    if ($3596) {
                                                     $3597 = (_strcmp(30952,39864)|0);
                                                     $3598 = ($3597|0)==(0);
                                                     if (!($3598)) {
                                                      label = 1852;
                                                      break;
                                                     }
                                                     _get_lex();
                                                     HEAP32[2768>>2] = 0;
                                                    } else {
                                                     label = 1852;
                                                    }
                                                   } while(0);
                                                   if ((label|0) == 1852) {
                                                    label = 0;
                                                    _emit_error(43568);
                                                   }
                                                  }
                                                 } else {
                                                  _emit_error(43608);
                                                 }
                                                }
                                               }
                                              } else {
                                               $3599 = (_strcmp(30952,43632)|0);
                                               $3600 = ($3599|0)==(0);
                                               if ($3600) {
                                                _get_lex();
                                                $3601 = HEAP32[30928>>2]|0;
                                                $3602 = ($3601|0)==(1);
                                                do {
                                                 if ($3602) {
                                                  $3603 = (_strcmp(30952,43640)|0);
                                                  $3604 = ($3603|0)==(0);
                                                  if (!($3604)) {
                                                   label = 1883;
                                                   break;
                                                  }
                                                  _get_lex();
                                                  $3605 = HEAP32[30928>>2]|0;
                                                  $3606 = ($3605|0)!=(4);
                                                  if ($3606) {
                                                   _emit_error(43648);
                                                  } else {
                                                   $3607 = HEAP32[30936>>2]|0;
                                                   $3608 = ($3607|0)!=(128);
                                                   do {
                                                    if ($3608) {
                                                     $3609 = HEAP32[30936>>2]|0;
                                                     $3610 = ($3609|0)!=(256);
                                                     if (!($3610)) {
                                                      label = 1869;
                                                      break;
                                                     }
                                                     $3611 = HEAP32[30936>>2]|0;
                                                     $3612 = ($3611|0)!=(512);
                                                     if (!($3612)) {
                                                      label = 1869;
                                                      break;
                                                     }
                                                     $3613 = HEAP32[30936>>2]|0;
                                                     $3614 = ($3613|0)!=(1024);
                                                     if (!($3614)) {
                                                      label = 1869;
                                                      break;
                                                     }
                                                     _emit_error(43672);
                                                     _get_lex();
                                                    } else {
                                                     label = 1869;
                                                    }
                                                   } while(0);
                                                   if ((label|0) == 1869) {
                                                    label = 0;
                                                    $3615 = HEAP32[43712>>2]|0;
                                                    $3616 = ($3615|0)!=(0);
                                                    if ($3616) {
                                                     _emit_error(43720);
                                                     _get_lex();
                                                    } else {
                                                     $3617 = HEAP32[2808>>2]|0;
                                                     $3618 = ($3617|0)==(4);
                                                     do {
                                                      if ($3618) {
                                                       label = 1877;
                                                      } else {
                                                       $3619 = HEAP32[2808>>2]|0;
                                                       $3620 = ($3619|0)==(5);
                                                       if ($3620) {
                                                        label = 1877;
                                                        break;
                                                       }
                                                       $3621 = HEAP32[2808>>2]|0;
                                                       $3622 = ($3621|0)==(6);
                                                       if ($3622) {
                                                        label = 1877;
                                                        break;
                                                       }
                                                       $3623 = HEAP32[2808>>2]|0;
                                                       $3624 = ($3623|0)==(7);
                                                       if ($3624) {
                                                        label = 1877;
                                                        break;
                                                       }
                                                       $3625 = HEAP32[2808>>2]|0;
                                                       $3626 = ($3625|0)==(9);
                                                       if ($3626) {
                                                        label = 1877;
                                                        break;
                                                       }
                                                       $3627 = HEAP32[2808>>2]|0;
                                                       $3628 = ($3627|0)==(10);
                                                       if ($3628) {
                                                        label = 1877;
                                                        break;
                                                       }
                                                       HEAP32[43712>>2] = 1;
                                                       $3629 = HEAP32[30936>>2]|0;
                                                       HEAP32[3344>>2] = $3629;
                                                       HEAP32[2816>>2] = 0;
                                                      }
                                                     } while(0);
                                                     if ((label|0) == 1877) {
                                                      label = 0;
                                                      _emit_error(43744);
                                                     }
                                                     _get_lex();
                                                    }
                                                   }
                                                  }
                                                 } else {
                                                  label = 1883;
                                                 }
                                                } while(0);
                                                if ((label|0) == 1883) {
                                                 label = 0;
                                                 $3630 = HEAP32[30928>>2]|0;
                                                 $3631 = ($3630|0)==(1);
                                                 do {
                                                  if ($3631) {
                                                   $3632 = (_strcmp(30952,37376)|0);
                                                   $3633 = ($3632|0)==(0);
                                                   if (!($3633)) {
                                                    label = 1932;
                                                    break;
                                                   }
                                                   _get_lex();
                                                   $3634 = (_evaluate_level_0($type79)|0);
                                                   $tree78 = $3634;
                                                   $3635 = $tree78;
                                                   $3636 = HEAP32[$3635>>2]|0;
                                                   $3637 = ($3636|0)!=(50);
                                                   if ($3637) {
                                                    $3638 = $tree78;
                                                    $3639 = HEAP32[$3638>>2]|0;
                                                    $3640 = ($3639|0)!=(51);
                                                    if ($3640) {
                                                     label = 1887;
                                                     break L1;
                                                    }
                                                   }
                                                   $3641 = $tree78;
                                                   $3642 = (($3641) + 4|0);
                                                   $3643 = HEAP32[$3642>>2]|0;
                                                   $c77 = $3643;
                                                   $3644 = $tree78;
                                                   _node_delete($3644);
                                                   $3645 = HEAP32[43712>>2]|0;
                                                   $3646 = ($3645|0)==(0);
                                                   if ($3646) {
                                                    _emit_error(43848);
                                                   } else {
                                                    $3647 = HEAP32[2808>>2]|0;
                                                    $3648 = ($3647|0)==(11);
                                                    if ($3648) {
                                                     $3649 = $c77;
                                                     $3650 = (($3649) + 2)|0;
                                                     $c77 = $3650;
                                                     $3651 = HEAP32[3344>>2]|0;
                                                     $3652 = ($3651|0)==(128);
                                                     if ($3652) {
                                                      $3653 = $c77;
                                                      $3654 = $3653 & 15;
                                                      $c77 = $3654;
                                                     } else {
                                                      $3655 = HEAP32[3344>>2]|0;
                                                      $3656 = ($3655|0)==(256);
                                                      if ($3656) {
                                                       $3657 = $c77;
                                                       $3658 = $3657 & 31;
                                                       $c77 = $3658;
                                                      } else {
                                                       $3659 = HEAP32[3344>>2]|0;
                                                       $3660 = ($3659|0)==(512);
                                                       if ($3660) {
                                                        $3661 = $c77;
                                                        $3662 = $3661 & 63;
                                                        $c77 = $3662;
                                                       } else {
                                                        $3663 = $c77;
                                                        $3664 = $3663 & 127;
                                                        $c77 = $3664;
                                                       }
                                                      }
                                                     }
                                                     $3665 = $c77;
                                                     $3666 = $3665<<1;
                                                     $3667 = (24576 + ($3666))|0;
                                                     $c77 = $3667;
                                                     $3668 = $c77;
                                                     HEAP32[$vararg_buffer458>>2] = $3668;
                                                     (_sprintf(33104,43888,$vararg_buffer458)|0);
                                                     _cpu9900_1op(41936,33104);
                                                    } else {
                                                     $3669 = HEAP32[2808>>2]|0;
                                                     $3670 = ($3669|0)==(0);
                                                     if ($3670) {
                                                      label = 1903;
                                                     } else {
                                                      $3671 = HEAP32[2808>>2]|0;
                                                      $3672 = ($3671|0)==(3);
                                                      if ($3672) {
                                                       label = 1903;
                                                      }
                                                     }
                                                     if ((label|0) == 1903) {
                                                      label = 0;
                                                      $3673 = $c77;
                                                      $3674 = (($3673) + -1)|0;
                                                      $c77 = $3674;
                                                     }
                                                     $3675 = HEAP32[3344>>2]|0;
                                                     $3676 = ($3675|0)==(128);
                                                     if ($3676) {
                                                      $3677 = $c77;
                                                      $3678 = $3677 & 7;
                                                      $c77 = $3678;
                                                     } else {
                                                      $3679 = HEAP32[3344>>2]|0;
                                                      $3680 = ($3679|0)==(256);
                                                      if ($3680) {
                                                       $3681 = $c77;
                                                       $3682 = $3681 & 15;
                                                       $c77 = $3682;
                                                      } else {
                                                       $3683 = HEAP32[3344>>2]|0;
                                                       $3684 = ($3683|0)==(512);
                                                       if ($3684) {
                                                        $3685 = $c77;
                                                        $3686 = $3685 & 31;
                                                        $c77 = $3686;
                                                       } else {
                                                        $3687 = $c77;
                                                        $3688 = $3687 & 63;
                                                        $c77 = $3688;
                                                       }
                                                      }
                                                     }
                                                     $3689 = HEAP32[2808>>2]|0;
                                                     $3690 = ($3689|0)==(1);
                                                     do {
                                                      if ($3690) {
                                                       label = 1915;
                                                      } else {
                                                       $3691 = HEAP32[2808>>2]|0;
                                                       $3692 = ($3691|0)==(13);
                                                       if ($3692) {
                                                        label = 1915;
                                                        break;
                                                       }
                                                       $3695 = HEAP32[2808>>2]|0;
                                                       $3696 = ($3695|0)==(2);
                                                       if ($3696) {
                                                        $3697 = $c77;
                                                        $3698 = $3697 & 63;
                                                        HEAP32[$vararg_buffer464>>2] = $3698;
                                                        (_sprintf(33104,39104,$vararg_buffer464)|0);
                                                        _cpuz80_2op(38280,38296,33104);
                                                        _cpuz80_2op(38280,43904,38296);
                                                       } else {
                                                        $3699 = HEAP32[3344>>2]|0;
                                                        $3700 = ($3699|0)==(128);
                                                        if ($3700) {
                                                         $3701 = $c77;
                                                         $3702 = $3701 | 65528;
                                                         $c77 = $3702;
                                                        } else {
                                                         $3703 = HEAP32[3344>>2]|0;
                                                         $3704 = ($3703|0)==(256);
                                                         if ($3704) {
                                                          $3705 = $c77;
                                                          $3706 = $3705 | 65520;
                                                          $c77 = $3706;
                                                         } else {
                                                          $3707 = HEAP32[3344>>2]|0;
                                                          $3708 = ($3707|0)==(512);
                                                          if ($3708) {
                                                           $3709 = $c77;
                                                           $3710 = $3709 | 65504;
                                                           $c77 = $3710;
                                                          } else {
                                                           $3711 = $c77;
                                                           $3712 = $3711 | 65472;
                                                           $c77 = $3712;
                                                          }
                                                         }
                                                        }
                                                        $3713 = $c77;
                                                        HEAP32[$vararg_buffer467>>2] = $3713;
                                                        (_sprintf(33104,43912,$vararg_buffer467)|0);
                                                        _cpuz80_2op(38280,38296,33104);
                                                       }
                                                      }
                                                     } while(0);
                                                     if ((label|0) == 1915) {
                                                      label = 0;
                                                      $3693 = $c77;
                                                      $3694 = $3693 & 63;
                                                      HEAP32[$vararg_buffer461>>2] = $3694;
                                                      (_sprintf(33104,39104,$vararg_buffer461)|0);
                                                      _cpuz80_2op(38280,38296,33104);
                                                      _cpuz80_2op(38280,43896,38296);
                                                     }
                                                    }
                                                   }
                                                  } else {
                                                   label = 1932;
                                                  }
                                                 } while(0);
                                                 if ((label|0) == 1932) {
                                                  label = 0;
                                                  $3714 = (_evaluate_level_0($type83)|0);
                                                  $tree82 = $3714;
                                                  $3715 = $tree82;
                                                  $3716 = HEAP32[$3715>>2]|0;
                                                  $3717 = ($3716|0)!=(50);
                                                  if ($3717) {
                                                   $3718 = $tree82;
                                                   $3719 = HEAP32[$3718>>2]|0;
                                                   $3720 = ($3719|0)!=(51);
                                                   if ($3720) {
                                                    label = 1934;
                                                    break;
                                                   }
                                                  }
                                                  $3721 = $tree82;
                                                  $3722 = (($3721) + 4|0);
                                                  $3723 = HEAP32[$3722>>2]|0;
                                                  $c80 = $3723;
                                                  $3724 = $tree82;
                                                  _node_delete($3724);
                                                  $3725 = HEAP32[43712>>2]|0;
                                                  $3726 = ($3725|0)==(0);
                                                  if ($3726) {
                                                   _emit_error(43920);
                                                  } else {
                                                   $3727 = $c80;
                                                   $d81 = $3727;
                                                   $3728 = HEAP32[2808>>2]|0;
                                                   $3729 = ($3728|0)==(11);
                                                   if ($3729) {
                                                    $3730 = $c80;
                                                    $3731 = (($3730) + 2)|0;
                                                    $c80 = $3731;
                                                    $3732 = HEAP32[3344>>2]|0;
                                                    $3733 = ($3732|0)==(128);
                                                    if ($3733) {
                                                     $3734 = $c80;
                                                     $3735 = $3734 & 15;
                                                     $c80 = $3735;
                                                    } else {
                                                     $3736 = HEAP32[3344>>2]|0;
                                                     $3737 = ($3736|0)==(256);
                                                     if ($3737) {
                                                      $3738 = $c80;
                                                      $3739 = $3738 & 31;
                                                      $c80 = $3739;
                                                     } else {
                                                      $3740 = HEAP32[3344>>2]|0;
                                                      $3741 = ($3740|0)==(512);
                                                      if ($3741) {
                                                       $3742 = $c80;
                                                       $3743 = $3742 & 63;
                                                       $c80 = $3743;
                                                      } else {
                                                       $3744 = $c80;
                                                       $3745 = $3744 & 127;
                                                       $c80 = $3745;
                                                      }
                                                     }
                                                    }
                                                    _bank_finish();
                                                    $3746 = $c80;
                                                    HEAP32[$vararg_buffer470>>2] = $3746;
                                                    (_sprintf(33104,39104,$vararg_buffer470)|0);
                                                    _cpu9900_1op(43952,33104);
                                                    _cpu9900_empty();
                                                   } else {
                                                    $3747 = HEAP32[2808>>2]|0;
                                                    $3748 = ($3747|0)==(0);
                                                    if ($3748) {
                                                     label = 1950;
                                                    } else {
                                                     $3749 = HEAP32[2808>>2]|0;
                                                     $3750 = ($3749|0)==(3);
                                                     if ($3750) {
                                                      label = 1950;
                                                     }
                                                    }
                                                    if ((label|0) == 1950) {
                                                     label = 0;
                                                     $3751 = $c80;
                                                     $3752 = (($3751) + -1)|0;
                                                     $c80 = $3752;
                                                    }
                                                    $3753 = HEAP32[2808>>2]|0;
                                                    $3754 = ($3753|0)==(11);
                                                    if ($3754) {
                                                     $3755 = $c80;
                                                     $3756 = (($3755) + 2)|0;
                                                     $c80 = $3756;
                                                    }
                                                    $3757 = HEAP32[3344>>2]|0;
                                                    $3758 = ($3757|0)==(128);
                                                    if ($3758) {
                                                     $3759 = $c80;
                                                     $3760 = $3759 & 7;
                                                     $c80 = $3760;
                                                    } else {
                                                     $3761 = HEAP32[3344>>2]|0;
                                                     $3762 = ($3761|0)==(256);
                                                     if ($3762) {
                                                      $3763 = $c80;
                                                      $3764 = $3763 & 15;
                                                      $c80 = $3764;
                                                     } else {
                                                      $3765 = HEAP32[3344>>2]|0;
                                                      $3766 = ($3765|0)==(512);
                                                      if ($3766) {
                                                       $3767 = $c80;
                                                       $3768 = $3767 & 31;
                                                       $c80 = $3768;
                                                      } else {
                                                       $3769 = $c80;
                                                       $3770 = $3769 & 63;
                                                       $c80 = $3770;
                                                      }
                                                     }
                                                    }
                                                    _bank_finish();
                                                    $3771 = $c80;
                                                    $3772 = $3771 << 14;
                                                    HEAP32[$vararg_buffer473>>2] = $3772;
                                                    (_sprintf(33104,43960,$vararg_buffer473)|0);
                                                    _cpuz80_1op(43968,33104);
                                                    $3773 = HEAP32[2808>>2]|0;
                                                    $3774 = ($3773|0)==(1);
                                                    do {
                                                     if ($3774) {
                                                      label = 1964;
                                                     } else {
                                                      $3775 = HEAP32[2808>>2]|0;
                                                      $3776 = ($3775|0)==(13);
                                                      if ($3776) {
                                                       label = 1964;
                                                       break;
                                                      }
                                                      $3777 = HEAP32[2808>>2]|0;
                                                      $3778 = ($3777|0)==(2);
                                                      if ($3778) {
                                                       _cpuz80_1op(43976,43992);
                                                      } else {
                                                       _cpuz80_1op(43976,44000);
                                                      }
                                                     }
                                                    } while(0);
                                                    if ((label|0) == 1964) {
                                                     label = 0;
                                                     _cpuz80_1op(43976,43984);
                                                    }
                                                    _cpuz80_empty();
                                                   }
                                                   $3779 = $d81;
                                                   HEAP32[2816>>2] = $3779;
                                                  }
                                                 }
                                                }
                                               } else {
                                                $3780 = (_strcmp(30952,34992)|0);
                                                $3781 = ($3780|0)==(0);
                                                do {
                                                 if ($3781) {
                                                  $3782 = (_lex_sneak_peek()|0);
                                                  $3783 = ($3782|0)==(40);
                                                  if (!($3783)) {
                                                   label = 1995;
                                                   break;
                                                  }
                                                  _get_lex();
                                                  $3784 = HEAP32[30928>>2]|0;
                                                  $3785 = ($3784|0)!=(17);
                                                  if ($3785) {
                                                   _emit_error(44008);
                                                  } else {
                                                   _get_lex();
                                                  }
                                                  $3786 = HEAP32[30928>>2]|0;
                                                  $3787 = ($3786|0)!=(4);
                                                  if ($3787) {
                                                   _emit_error(44040);
                                                  } else {
                                                   $3788 = HEAP32[30936>>2]|0;
                                                   $vdp_reg = $3788;
                                                   _get_lex();
                                                  }
                                                  $3789 = HEAP32[30928>>2]|0;
                                                  $3790 = ($3789|0)!=(18);
                                                  if ($3790) {
                                                   _emit_error(44064);
                                                  } else {
                                                   _get_lex();
                                                  }
                                                  $3791 = HEAP32[30928>>2]|0;
                                                  $3792 = ($3791|0)!=(6);
                                                  if ($3792) {
                                                   _emit_error(44104);
                                                  } else {
                                                   _get_lex();
                                                  }
                                                  $3793 = (_evaluate_expression(1,0,0)|0);
                                                  HEAP32[$type>>2] = $3793;
                                                  $3794 = HEAP32[35640>>2]|0;
                                                  $3795 = ($3794|0)==(1);
                                                  if ($3795) {
                                                   $3796 = $vdp_reg;
                                                   HEAP32[$vararg_buffer476>>2] = $3796;
                                                   (_sprintf(33104,38976,$vararg_buffer476)|0);
                                                   _cpu6502_1op(39200,33104);
                                                   _generic_interrupt_disable();
                                                   _cpu6502_1op(38352,40416);
                                                   _generic_interrupt_enable();
                                                  } else {
                                                   $3797 = HEAP32[35640>>2]|0;
                                                   $3798 = ($3797|0)==(2);
                                                   if ($3798) {
                                                    $3799 = $vdp_reg;
                                                    $3800 = $3799<<8;
                                                    $3801 = (($3800) + 32768)|0;
                                                    $3802 = $vdp_reg;
                                                    HEAP32[$vararg_buffer479>>2] = $3801;
                                                    $vararg_ptr482 = (($vararg_buffer479) + 4|0);
                                                    HEAP32[$vararg_ptr482>>2] = $3802;
                                                    (_sprintf(33104,44136,$vararg_buffer479)|0);
                                                    _cpu9900_2op(38520,38232,33104);
                                                    _cpu9900_2op(38240,38208,40456);
                                                    _cpu9900_2op(38240,38232,40456);
                                                   } else {
                                                    _cpuz80_2op(38280,39760,38296);
                                                    $3803 = $vdp_reg;
                                                    HEAP32[$vararg_buffer483>>2] = $3803;
                                                    (_sprintf(33104,39104,$vararg_buffer483)|0);
                                                    _cpuz80_2op(38280,38912,33104);
                                                    _generic_interrupt_disable();
                                                    _cpuz80_1op(38400,40416);
                                                    _generic_interrupt_enable();
                                                   }
                                                  }
                                                 } else {
                                                  label = 1995;
                                                 }
                                                } while(0);
                                                if ((label|0) == 1995) {
                                                 label = 0;
                                                 $3804 = (_macro_search(30952)|0);
                                                 $3805 = ($3804|0)!=(0|0);
                                                 if ($3805) {
                                                  $3806 = (_replace_macro()|0);
                                                  $3807 = ($3806|0)!=(0);
                                                  if (!($3807)) {
                                                   label = 1997;
                                                   break;
                                                  }
                                                 } else {
                                                  _compile_assignment(0);
                                                 }
                                                }
                                               }
                                              }
                                             }
                                            }
                                           }
                                          }
                                         }
                                        }
                                       }
                                      }
                                     }
                                    }
                                   }
                                  }
                                 }
                                }
                               }
                              }
                             }
                            }
                           }
                          }
                         }
                        }
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  } else {
   HEAP32[37056>>2] = 0;
   _emit_error(44160);
  }
  $3809 = HEAP32[30928>>2]|0;
  $3810 = ($3809|0)!=(19);
  if ($3810) {
   label = 2051;
   break;
  }
  _get_lex();
 }
 switch (label|0) {
  case 28: {
   $56 = HEAP32[_stderr>>2]|0;
   (_fprintf(($56|0),(37176|0),($vararg_buffer|0))|0);
   _exit(1);
   // unreachable;
   break;
  }
  case 34: {
   HEAP32[37056>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 61: {
   STACKTOP = sp;return;
   break;
  }
  case 65: {
   STACKTOP = sp;return;
   break;
  }
  case 78: {
   STACKTOP = sp;return;
   break;
  }
  case 109: {
   $243 = HEAP32[_stderr>>2]|0;
   (_fprintf(($243|0),(7768|0),($vararg_buffer33|0))|0);
   _exit(1);
   // unreachable;
   break;
  }
  case 200: {
   $538 = HEAP32[_stderr>>2]|0;
   (_fprintf(($538|0),(7768|0),($vararg_buffer47|0))|0);
   _exit(1);
   // unreachable;
   break;
  }
  case 212: {
   $584 = HEAP32[_stderr>>2]|0;
   (_fprintf(($584|0),(7768|0),($vararg_buffer58|0))|0);
   _exit(1);
   // unreachable;
   break;
  }
  case 245: {
   $687 = HEAP32[_stderr>>2]|0;
   (_fprintf(($687|0),(7768|0),($vararg_buffer81|0))|0);
   _exit(1);
   // unreachable;
   break;
  }
  case 1173: {
   _emit_error(40960);
   STACKTOP = sp;return;
   break;
  }
  case 1220: {
   _emit_error(41264);
   STACKTOP = sp;return;
   break;
  }
  case 1240: {
   _emit_error(41496);
   STACKTOP = sp;return;
   break;
  }
  case 1262: {
   _emit_error(41560);
   STACKTOP = sp;return;
   break;
  }
  case 1274: {
   _emit_error(41616);
   STACKTOP = sp;return;
   break;
  }
  case 1286: {
   _emit_error(41664);
   STACKTOP = sp;return;
   break;
  }
  case 1333: {
   _emit_error(41808);
   STACKTOP = sp;return;
   break;
  }
  case 1887: {
   _emit_error(43800);
   STACKTOP = sp;return;
   break;
  }
  case 1934: {
   _emit_error(43800);
   STACKTOP = sp;return;
   break;
  }
  case 1997: {
   $3808 = $0;
   _compile_statement($3808);
   STACKTOP = sp;return;
   break;
  }
  case 2051: {
   STACKTOP = sp;return;
   break;
  }
 }
}
function _compile_basic() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $label = 0, $label_exists = 0, $old_file = 0, $old_input = 0, $old_line = 0;
 var $p = 0, $quotes = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2096|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $buffer = sp + 1064|0;
 $old_file = sp + 40|0;
 HEAP32[1728>>2] = 0;
 while(1) {
  $0 = HEAP32[44192>>2]|0;
  $1 = (_fgets((29880|0),1023,($0|0))|0);
  $2 = ($1|0)!=(0|0);
  if (!($2)) {
   break;
  }
  $3 = HEAP32[1728>>2]|0;
  $4 = (($3) + 1)|0;
  HEAP32[1728>>2] = $4;
  $5 = (_strlen((29880|0))|0);
  HEAP32[29872>>2] = $5;
  $6 = HEAP32[29872>>2]|0;
  $7 = ($6|0)>(0);
  if ($7) {
   $8 = HEAP32[29872>>2]|0;
   $9 = (($8) - 1)|0;
   $10 = (29880 + ($9)|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11 << 24 >> 24;
   $13 = ($12|0)==(10);
   if ($13) {
    $14 = HEAP32[29872>>2]|0;
    $15 = (($14) + -1)|0;
    HEAP32[29872>>2] = $15;
    $16 = (29880 + ($15)|0);
    HEAP8[$16>>0] = 0;
   }
  }
  $17 = HEAP32[29872>>2]|0;
  $18 = ($17|0)>(0);
  if ($18) {
   $19 = HEAP32[29872>>2]|0;
   $20 = (($19) - 1)|0;
   $21 = (29880 + ($20)|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22 << 24 >> 24;
   $24 = ($23|0)==(13);
   if ($24) {
    $25 = HEAP32[29872>>2]|0;
    $26 = (($25) + -1)|0;
    HEAP32[29872>>2] = $26;
    $27 = (29880 + ($26)|0);
    HEAP8[$27>>0] = 0;
   }
  }
  _generic_dump();
  $28 = HEAP32[2824>>2]|0;
  HEAP32[$vararg_buffer>>2] = 29880;
  (_fprintf(($28|0),(44200|0),($vararg_buffer|0))|0);
  HEAP32[33000>>2] = 1;
  HEAP32[29864>>2] = 0;
  $label_exists = 0;
  $label = 0;
  _get_lex();
  $29 = HEAP32[30928>>2]|0;
  $30 = ($29|0)==(3);
  if ($30) {
   $31 = HEAP32[30936>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    (_strcpy((31976|0),(30952|0))|0);
   }
   $33 = (_label_search(30952)|0);
   $label = $33;
   $34 = $label;
   $35 = ($34|0)!=(0|0);
   if ($35) {
    $36 = $label;
    $37 = (($36) + 4|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = $38 & 32;
    $40 = ($39|0)!=(0);
    if ($40) {
     HEAP32[$vararg_buffer1>>2] = 30952;
     (_sprintf($buffer,44208,$vararg_buffer1)|0);
     _emit_error($buffer);
    }
   } else {
    $41 = (_label_add(30952)|0);
    $label = $41;
   }
   $42 = $label;
   $43 = (($42) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $44 | 32;
   HEAP32[$43>>2] = $45;
   (_strcpy((33104|0),(37096|0))|0);
   (_strcat((33104|0),(30952|0))|0);
   _get_lex();
   $46 = HEAP32[35640>>2]|0;
   $47 = ($46|0)==(2);
   if ($47) {
    $48 = HEAP32[30928>>2]|0;
    $49 = ($48|0)==(1);
    if ($49) {
     $50 = (_strcmp(30952,44240)|0);
     $51 = ($50|0)==(0);
     if ($51) {
      _cpu9900_noop(44256);
     }
    }
   }
   _generic_label(33104);
   $label_exists = 1;
  }
  $52 = HEAP32[30928>>2]|0;
  $53 = ($52|0)==(1);
  if ($53) {
   $54 = (_strcmp(30952,44240)|0);
   $55 = ($54|0)==(0);
   if ($55) {
    $56 = $label_exists;
    $57 = ($56|0)!=(0);
    if ($57) {
     $58 = $label;
     $59 = (($58) + 4|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = $60 | 256;
     HEAP32[$59>>2] = $61;
    } else {
     _emit_error(44264);
    }
    $62 = HEAP32[44304>>2]|0;
    $63 = ($62|0)!=(0|0);
    if ($63) {
     _emit_error(44312);
    }
    _get_lex();
    $64 = $label;
    HEAP32[44304>>2] = $64;
    HEAP32[37056>>2] = 0;
   } else {
    $65 = (_strcmp(30952,37344)|0);
    $66 = ($65|0)==(0);
    if ($66) {
     $67 = (_lex_sneak_peek()|0);
     $68 = ($67|0)!=(73);
     if ($68) {
      $69 = (_lex_sneak_peek()|0);
      $70 = ($69|0)!=(83);
      if ($70) {
       $71 = HEAP32[44304>>2]|0;
       $72 = ($71|0)!=(0|0);
       if ($72) {
        $73 = HEAP32[37192>>2]|0;
        $74 = ($73|0)!=(0|0);
        if ($74) {
         _emit_error(44392);
        }
       } else {
        _emit_warning(44368);
       }
       _get_lex();
       $75 = HEAP32[37056>>2]|0;
       $76 = ($75|0)!=(0);
       if (!($76)) {
        _generic_return();
       }
       HEAP32[44304>>2] = 0;
       HEAP32[37056>>2] = 0;
      } else {
       label = 41;
      }
     } else {
      label = 41;
     }
    } else {
     label = 41;
    }
    if ((label|0) == 41) {
     label = 0;
     $77 = (_strcmp(30952,44440)|0);
     $78 = ($77|0)==(0);
     if ($78) {
      $79 = HEAP32[44192>>2]|0;
      $old_input = $79;
      $80 = HEAP32[1728>>2]|0;
      $old_line = $80;
      (_strcpy(($old_file|0),(1736|0))|0);
      while(1) {
       $81 = HEAP32[29864>>2]|0;
       $82 = HEAP32[29872>>2]|0;
       $83 = ($81|0)<($82|0);
       if ($83) {
        $84 = HEAP32[29864>>2]|0;
        $85 = (29880 + ($84)|0);
        $86 = HEAP8[$85>>0]|0;
        $87 = $86 << 24 >> 24;
        $88 = (_isspace($87)|0);
        $89 = ($88|0)!=(0);
        $151 = $89;
       } else {
        $151 = 0;
       }
       if (!($151)) {
        break;
       }
       $90 = HEAP32[29864>>2]|0;
       $91 = (($90) + 1)|0;
       HEAP32[29864>>2] = $91;
      }
      $92 = HEAP32[29864>>2]|0;
      $93 = HEAP32[29872>>2]|0;
      $94 = ($92|0)<($93|0);
      if ($94) {
       $95 = HEAP32[29864>>2]|0;
       $96 = (29880 + ($95)|0);
       $97 = HEAP8[$96>>0]|0;
       $98 = $97 << 24 >> 24;
       $99 = ($98|0)==(34);
       if ($99) {
        $quotes = 1;
        $100 = HEAP32[29864>>2]|0;
        $101 = (($100) + 1)|0;
        HEAP32[29864>>2] = $101;
       } else {
        label = 50;
       }
      } else {
       label = 50;
      }
      if ((label|0) == 50) {
       label = 0;
       $quotes = 0;
      }
      $p = 44448;
      while(1) {
       $102 = $p;
       $103 = ($102>>>0)<(((44448 + 4095|0))>>>0);
       if ($103) {
        $104 = HEAP32[29864>>2]|0;
        $105 = HEAP32[29872>>2]|0;
        $106 = ($104|0)<($105|0);
        $152 = $106;
       } else {
        $152 = 0;
       }
       if (!($152)) {
        break;
       }
       $107 = $quotes;
       $108 = ($107|0)!=(0);
       if ($108) {
        $109 = HEAP32[29864>>2]|0;
        $110 = (29880 + ($109)|0);
        $111 = HEAP8[$110>>0]|0;
        $112 = $111 << 24 >> 24;
        $113 = ($112|0)==(34);
        if ($113) {
         label = 57;
         break;
        }
       }
       $114 = HEAP32[29864>>2]|0;
       $115 = (($114) + 1)|0;
       HEAP32[29864>>2] = $115;
       $116 = (29880 + ($114)|0);
       $117 = HEAP8[$116>>0]|0;
       $118 = $p;
       $119 = (($118) + 1|0);
       $p = $119;
       HEAP8[$118>>0] = $117;
      }
      if ((label|0) == 57) {
       label = 0;
      }
      $120 = $quotes;
      $121 = ($120|0)!=(0);
      if ($121) {
       $122 = HEAP32[29864>>2]|0;
       $123 = HEAP32[29872>>2]|0;
       $124 = ($122|0)>=($123|0);
       if ($124) {
        label = 62;
       } else {
        $125 = HEAP32[29864>>2]|0;
        $126 = (29880 + ($125)|0);
        $127 = HEAP8[$126>>0]|0;
        $128 = $127 << 24 >> 24;
        $129 = ($128|0)!=(34);
        if ($129) {
         label = 62;
        } else {
         $130 = HEAP32[29864>>2]|0;
         $131 = (($130) + 1)|0;
         HEAP32[29864>>2] = $131;
        }
       }
       if ((label|0) == 62) {
        label = 0;
        _emit_error(48544);
       }
      } else {
       while(1) {
        $132 = $p;
        $133 = ($132>>>0)>(44448>>>0);
        if ($133) {
         $134 = $p;
         $135 = (($134) + -1|0);
         $136 = HEAP8[$135>>0]|0;
         $137 = $136 << 24 >> 24;
         $138 = (_isspace($137)|0);
         $139 = ($138|0)!=(0);
         $153 = $139;
        } else {
         $153 = 0;
        }
        if (!($153)) {
         break;
        }
        $140 = $p;
        $141 = (($140) + -1|0);
        $p = $141;
       }
      }
      $142 = $p;
      HEAP8[$142>>0] = 0;
      (_strcpy((1736|0),(44448|0))|0);
      $143 = (_fopen((44448|0),(48576|0))|0);
      HEAP32[44192>>2] = $143;
      $144 = HEAP32[44192>>2]|0;
      $145 = ($144|0)==(0|0);
      if ($145) {
       _emit_error(48584);
      } else {
       _compile_basic();
       $146 = HEAP32[44192>>2]|0;
       (_fclose(($146|0))|0);
      }
      $147 = $old_input;
      HEAP32[44192>>2] = $147;
      $148 = $old_line;
      HEAP32[1728>>2] = $148;
      (_strcpy((1736|0),($old_file|0))|0);
      HEAP32[30928>>2] = 0;
     } else {
      _compile_statement(0);
     }
    }
   }
  }
  $149 = HEAP32[30928>>2]|0;
  $150 = ($149|0)!=(0);
  if ($150) {
   _emit_error(48608);
  }
 }
 _generic_dump();
 STACKTOP = sp;return;
}
function _process_variables() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $address = 0, $bytes_used = 0, $c = 0, $label = 0, $size = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer36 = 0;
 var $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr29 = 0, $vararg_ptr39 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer43 = sp + 16|0;
 $vararg_buffer40 = sp + 120|0;
 $vararg_buffer36 = sp + 112|0;
 $vararg_buffer33 = sp + 104|0;
 $vararg_buffer30 = sp + 96|0;
 $vararg_buffer26 = sp + 88|0;
 $vararg_buffer23 = sp + 8|0;
 $vararg_buffer20 = sp;
 $vararg_buffer17 = sp + 24|0;
 $vararg_buffer14 = sp + 80|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer4 = sp + 48|0;
 $vararg_buffer1 = sp + 64|0;
 $vararg_buffer = sp + 72|0;
 $0 = HEAP32[2808>>2]|0;
 $1 = ($0|0)==(7);
 if ($1) {
  label = 3;
 } else {
  $2 = HEAP32[2808>>2]|0;
  $3 = ($2|0)==(11);
  if ($3) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $4 = HEAP32[2808>>2]|0;
  $5 = (1016 + (($4*48)|0)|0);
  $6 = (($5) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $address = $7;
 }
 $bytes_used = 0;
 $c = 0;
 while(1) {
  $8 = $c;
  $9 = ($8|0)<(1103);
  if (!($9)) {
   break;
  }
  $10 = $c;
  $11 = (16616 + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $label = $12;
  while(1) {
   $13 = $label;
   $14 = ($13|0)!=(0|0);
   if (!($14)) {
    break;
   }
   $15 = $label;
   $16 = (($15) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $17 & 0;
   $19 = ($18|0)==(320);
   if ($19) {
    $20 = HEAP32[_stderr>>2]|0;
    $21 = $label;
    $22 = (($21) + 12|0);
    HEAP32[$vararg_buffer>>2] = $22;
    (_fprintf(($20|0),(48632|0),($vararg_buffer|0))|0);
    HEAP32[2760>>2] = 1;
   }
   $23 = $label;
   $24 = (($23) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $25 & 0;
   $27 = ($26|0)==(128);
   if ($27) {
    $28 = HEAP32[_stderr>>2]|0;
    $29 = $label;
    $30 = (($29) + 12|0);
    HEAP32[$vararg_buffer1>>2] = $30;
    (_fprintf(($28|0),(48680|0),($vararg_buffer1|0))|0);
    HEAP32[2760>>2] = 1;
   }
   $31 = $label;
   $32 = (($31) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $33 & 512;
   $35 = ($34|0)!=(0);
   if ($35) {
    $36 = HEAP32[35640>>2]|0;
    $37 = ($36|0)==(1);
    if ($37) {
     $38 = $label;
     $39 = (($38) + 4|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = $40 & 3;
     $42 = ($41|0)==(0);
     if ($42) {
      $43 = $address;
      $44 = ($43|0)<(512);
      if ($44) {
       $45 = $address;
       $46 = (($45) + 1)|0;
       $47 = ($46|0)>(320);
       if ($47) {
        $address = 512;
       }
      }
      $48 = $label;
      $49 = (($48) + 12|0);
      $50 = $address;
      HEAP32[$vararg_buffer4>>2] = 37096;
      $vararg_ptr7 = (($vararg_buffer4) + 4|0);
      HEAP32[$vararg_ptr7>>2] = $49;
      $vararg_ptr8 = (($vararg_buffer4) + 8|0);
      HEAP32[$vararg_ptr8>>2] = $50;
      (_sprintf(33104,48728,$vararg_buffer4)|0);
      $51 = $address;
      $52 = (($51) + 1)|0;
      $address = $52;
      $53 = $bytes_used;
      $54 = (($53) + 1)|0;
      $bytes_used = $54;
     } else {
      $55 = $address;
      $56 = ($55|0)<(512);
      if ($56) {
       $57 = $address;
       $58 = (($57) + 2)|0;
       $59 = ($58|0)>(320);
       if ($59) {
        $address = 512;
       }
      }
      $60 = $label;
      $61 = (($60) + 12|0);
      $62 = $address;
      HEAP32[$vararg_buffer9>>2] = 37096;
      $vararg_ptr12 = (($vararg_buffer9) + 4|0);
      HEAP32[$vararg_ptr12>>2] = $61;
      $vararg_ptr13 = (($vararg_buffer9) + 8|0);
      HEAP32[$vararg_ptr13>>2] = $62;
      (_sprintf(33104,48728,$vararg_buffer9)|0);
      $63 = $address;
      $64 = (($63) + 2)|0;
      $address = $64;
      $65 = $bytes_used;
      $66 = (($65) + 2)|0;
      $bytes_used = $66;
     }
     $67 = HEAP32[2824>>2]|0;
     HEAP32[$vararg_buffer14>>2] = 33104;
     (_fprintf(($67|0),(41088|0),($vararg_buffer14|0))|0);
    } else {
     $68 = HEAP32[35640>>2]|0;
     $69 = ($68|0)==(2);
     if ($69) {
      $70 = $label;
      $71 = (($70) + 4|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = $72 & 3;
      $74 = ($73|0)==(1);
      if ($74) {
       $75 = $bytes_used;
       $76 = $75 & 1;
       $77 = ($76|0)!=(0);
       if ($77) {
        _cpu9900_noop(44256);
        $78 = $bytes_used;
        $79 = (($78) + 1)|0;
        $bytes_used = $79;
       }
      }
      (_strcpy((33104|0),(37096|0))|0);
      $80 = $label;
      $81 = (($80) + 12|0);
      (_strcat((33104|0),($81|0))|0);
      (_strcat((33104|0),(48744|0))|0);
      _cpu9900_label(33104);
      $82 = $label;
      $83 = (($82) + 4|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = $84 & 3;
      $86 = ($85|0)==(0);
      if ($86) {
       _cpu9900_1op(48752,33064);
       $87 = $bytes_used;
       $88 = (($87) + 1)|0;
       $bytes_used = $88;
      } else {
       _cpu9900_1op(48752,39856);
       $89 = $bytes_used;
       $90 = (($89) + 2)|0;
       $bytes_used = $90;
      }
     } else {
      (_strcpy((33104|0),(37096|0))|0);
      $91 = $label;
      $92 = (($91) + 12|0);
      (_strcat((33104|0),($92|0))|0);
      (_strcat((33104|0),(48760|0))|0);
      $93 = $label;
      $94 = (($93) + 4|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = $95 & 3;
      $97 = ($96|0)==(0);
      if ($97) {
       (_strcat((33104|0),(48768|0))|0);
       $98 = $bytes_used;
       $99 = (($98) + 1)|0;
       $bytes_used = $99;
      } else {
       (_strcat((33104|0),(48776|0))|0);
       $100 = $bytes_used;
       $101 = (($100) + 2)|0;
       $bytes_used = $101;
      }
      $102 = HEAP32[2824>>2]|0;
      HEAP32[$vararg_buffer17>>2] = 33104;
      (_fprintf(($102|0),(41088|0),($vararg_buffer17|0))|0);
     }
    }
    $103 = $label;
    $104 = (($103) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 6144;
    $107 = ($106|0)==(2048);
    if ($107) {
     $108 = HEAP32[2768>>2]|0;
     $109 = ($108|0)!=(0);
     if ($109) {
      $110 = HEAP32[_stderr>>2]|0;
      $111 = $label;
      $112 = (($111) + 12|0);
      HEAP32[$vararg_buffer20>>2] = $112;
      (_fprintf(($110|0),(48784|0),($vararg_buffer20|0))|0);
     }
    }
    $113 = $label;
    $114 = (($113) + 4|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = $115 & 6144;
    $117 = ($116|0)==(4096);
    if ($117) {
     $118 = HEAP32[2768>>2]|0;
     $119 = ($118|0)!=(0);
     if ($119) {
      $120 = HEAP32[_stderr>>2]|0;
      $121 = $label;
      $122 = (($121) + 12|0);
      HEAP32[$vararg_buffer23>>2] = $122;
      (_fprintf(($120|0),(48832|0),($vararg_buffer23|0))|0);
     }
    }
   }
   $123 = $label;
   $124 = HEAP32[$123>>2]|0;
   $label = $124;
  }
  $125 = $c;
  $126 = (($125) + 1)|0;
  $c = $126;
 }
 $c = 0;
 while(1) {
  $127 = $c;
  $128 = ($127|0)<(1103);
  if (!($128)) {
   break;
  }
  $129 = $c;
  $130 = (21032 + ($129<<2)|0);
  $131 = HEAP32[$130>>2]|0;
  $label = $131;
  while(1) {
   $132 = $label;
   $133 = ($132|0)!=(0|0);
   if (!($133)) {
    break;
   }
   $134 = $label;
   $135 = (($134) + 12|0);
   $136 = HEAP8[$135>>0]|0;
   $137 = $136 << 24 >> 24;
   $138 = ($137|0)==(35);
   if ($138) {
    $size = 2;
   } else {
    $size = 1;
   }
   $139 = $label;
   $140 = (($139) + 8|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = $size;
   $143 = Math_imul($142, $141)|0;
   $size = $143;
   $144 = HEAP32[35640>>2]|0;
   $145 = ($144|0)==(1);
   if ($145) {
    $146 = $address;
    $147 = ($146|0)<(512);
    if ($147) {
     $148 = $address;
     $149 = $size;
     $150 = (($148) + ($149))|0;
     $151 = ($150|0)>(320);
     if ($151) {
      $address = 512;
     }
    }
    $152 = $label;
    $153 = (($152) + 12|0);
    $154 = $address;
    HEAP32[$vararg_buffer26>>2] = $153;
    $vararg_ptr29 = (($vararg_buffer26) + 4|0);
    HEAP32[$vararg_ptr29>>2] = $154;
    (_sprintf(33104,48880,$vararg_buffer26)|0);
    $155 = $size;
    $156 = $address;
    $157 = (($156) + ($155))|0;
    $address = $157;
    $158 = HEAP32[2824>>2]|0;
    HEAP32[$vararg_buffer30>>2] = 33104;
    (_fprintf(($158|0),(41088|0),($vararg_buffer30|0))|0);
   } else {
    $159 = HEAP32[35640>>2]|0;
    $160 = ($159|0)==(2);
    if ($160) {
     $161 = $bytes_used;
     $162 = $161 & 1;
     $163 = ($162|0)!=(0);
     if ($163) {
      _cpu9900_noop(44256);
      $164 = $bytes_used;
      $165 = (($164) + 1)|0;
      $bytes_used = $165;
     }
     (_strcpy((33104|0),(38744|0))|0);
     $166 = $label;
     $167 = (($166) + 12|0);
     (_strcat((33104|0),($167|0))|0);
     (_strcat((33104|0),(48744|0))|0);
     _cpu9900_label(33104);
     $168 = $size;
     HEAP32[$vararg_buffer33>>2] = $168;
     (_sprintf(33104,39104,$vararg_buffer33)|0);
     _cpu9900_1op(48752,33104);
     $169 = $size;
     $170 = $address;
     $171 = (($170) + ($169))|0;
     $address = $171;
    } else {
     $172 = $label;
     $173 = (($172) + 12|0);
     $174 = $size;
     HEAP32[$vararg_buffer36>>2] = $173;
     $vararg_ptr39 = (($vararg_buffer36) + 4|0);
     HEAP32[$vararg_ptr39>>2] = $174;
     (_sprintf(33104,48904,$vararg_buffer36)|0);
     $175 = HEAP32[2824>>2]|0;
     HEAP32[$vararg_buffer40>>2] = 33104;
     (_fprintf(($175|0),(41088|0),($vararg_buffer40|0))|0);
    }
   }
   $176 = $size;
   $177 = $bytes_used;
   $178 = (($177) + ($176))|0;
   $bytes_used = $178;
   $179 = $label;
   $180 = HEAP32[$179>>2]|0;
   $label = $180;
  }
  $181 = $c;
  $182 = (($181) + 1)|0;
  $c = $182;
 }
 $183 = HEAP32[2824>>2]|0;
 (_fprintf(($183|0),(48920|0),($vararg_buffer43|0))|0);
 $184 = $bytes_used;
 STACKTOP = sp;return ($184|0);
}
function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $actual = 0, $available_bytes = 0, $b = 0, $bytes_used = 0, $c = 0, $ch = 0, $cpm_option = 0;
 var $d = 0, $date = 0, $extra_ram = 0, $hex = 0, $i = 0, $p = 0, $p1 = 0, $p2 = 0, $p3 = 0, $pencil = 0, $prologue = 0, $small_rom = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer102 = 0, $vararg_buffer105 = 0, $vararg_buffer108 = 0, $vararg_buffer11 = 0, $vararg_buffer111 = 0, $vararg_buffer114 = 0;
 var $vararg_buffer117 = 0, $vararg_buffer120 = 0, $vararg_buffer123 = 0, $vararg_buffer126 = 0, $vararg_buffer128 = 0, $vararg_buffer131 = 0, $vararg_buffer134 = 0, $vararg_buffer137 = 0, $vararg_buffer140 = 0, $vararg_buffer142 = 0, $vararg_buffer146 = 0, $vararg_buffer15 = 0, $vararg_buffer150 = 0, $vararg_buffer154 = 0, $vararg_buffer158 = 0, $vararg_buffer162 = 0, $vararg_buffer166 = 0, $vararg_buffer170 = 0, $vararg_buffer173 = 0, $vararg_buffer175 = 0;
 var $vararg_buffer178 = 0, $vararg_buffer18 = 0, $vararg_buffer180 = 0, $vararg_buffer183 = 0, $vararg_buffer186 = 0, $vararg_buffer188 = 0, $vararg_buffer190 = 0, $vararg_buffer193 = 0, $vararg_buffer196 = 0, $vararg_buffer199 = 0, $vararg_buffer20 = 0, $vararg_buffer202 = 0, $vararg_buffer205 = 0, $vararg_buffer207 = 0, $vararg_buffer211 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0;
 var $vararg_buffer30 = 0, $vararg_buffer32 = 0, $vararg_buffer34 = 0, $vararg_buffer36 = 0, $vararg_buffer38 = 0, $vararg_buffer40 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer47 = 0, $vararg_buffer49 = 0, $vararg_buffer5 = 0, $vararg_buffer51 = 0, $vararg_buffer54 = 0, $vararg_buffer57 = 0, $vararg_buffer60 = 0, $vararg_buffer63 = 0, $vararg_buffer66 = 0, $vararg_buffer69 = 0, $vararg_buffer7 = 0, $vararg_buffer71 = 0;
 var $vararg_buffer73 = 0, $vararg_buffer76 = 0, $vararg_buffer79 = 0, $vararg_buffer81 = 0, $vararg_buffer84 = 0, $vararg_buffer87 = 0, $vararg_buffer9 = 0, $vararg_buffer90 = 0, $vararg_buffer93 = 0, $vararg_buffer96 = 0, $vararg_buffer99 = 0, $vararg_ptr14 = 0, $vararg_ptr145 = 0, $vararg_ptr149 = 0, $vararg_ptr153 = 0, $vararg_ptr157 = 0, $vararg_ptr161 = 0, $vararg_ptr165 = 0, $vararg_ptr169 = 0, $vararg_ptr210 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer211 = sp + 56|0;
 $vararg_buffer207 = sp + 624|0;
 $vararg_buffer205 = sp + 616|0;
 $vararg_buffer202 = sp + 608|0;
 $vararg_buffer199 = sp + 600|0;
 $vararg_buffer196 = sp + 592|0;
 $vararg_buffer193 = sp + 584|0;
 $vararg_buffer190 = sp + 576|0;
 $vararg_buffer188 = sp + 568|0;
 $vararg_buffer186 = sp + 560|0;
 $vararg_buffer183 = sp + 552|0;
 $vararg_buffer180 = sp + 544|0;
 $vararg_buffer178 = sp + 536|0;
 $vararg_buffer175 = sp + 528|0;
 $vararg_buffer173 = sp + 520|0;
 $vararg_buffer170 = sp + 512|0;
 $vararg_buffer166 = sp + 504|0;
 $vararg_buffer162 = sp + 496|0;
 $vararg_buffer158 = sp + 488|0;
 $vararg_buffer154 = sp + 480|0;
 $vararg_buffer150 = sp + 472|0;
 $vararg_buffer146 = sp + 464|0;
 $vararg_buffer142 = sp + 456|0;
 $vararg_buffer140 = sp + 448|0;
 $vararg_buffer137 = sp + 440|0;
 $vararg_buffer134 = sp + 432|0;
 $vararg_buffer131 = sp + 424|0;
 $vararg_buffer128 = sp + 416|0;
 $vararg_buffer126 = sp + 408|0;
 $vararg_buffer123 = sp + 400|0;
 $vararg_buffer120 = sp + 48|0;
 $vararg_buffer117 = sp + 40|0;
 $vararg_buffer114 = sp + 24|0;
 $vararg_buffer111 = sp + 16|0;
 $vararg_buffer108 = sp + 8|0;
 $vararg_buffer105 = sp;
 $vararg_buffer102 = sp + 32|0;
 $vararg_buffer99 = sp + 88|0;
 $vararg_buffer96 = sp + 96|0;
 $vararg_buffer93 = sp + 104|0;
 $vararg_buffer90 = sp + 112|0;
 $vararg_buffer87 = sp + 120|0;
 $vararg_buffer84 = sp + 128|0;
 $vararg_buffer81 = sp + 136|0;
 $vararg_buffer79 = sp + 144|0;
 $vararg_buffer76 = sp + 152|0;
 $vararg_buffer73 = sp + 160|0;
 $vararg_buffer71 = sp + 168|0;
 $vararg_buffer69 = sp + 176|0;
 $vararg_buffer66 = sp + 184|0;
 $vararg_buffer63 = sp + 392|0;
 $vararg_buffer60 = sp + 64|0;
 $vararg_buffer57 = sp + 72|0;
 $vararg_buffer54 = sp + 80|0;
 $vararg_buffer51 = sp + 192|0;
 $vararg_buffer49 = sp + 200|0;
 $vararg_buffer47 = sp + 208|0;
 $vararg_buffer45 = sp + 216|0;
 $vararg_buffer42 = sp + 224|0;
 $vararg_buffer40 = sp + 232|0;
 $vararg_buffer38 = sp + 240|0;
 $vararg_buffer36 = sp + 248|0;
 $vararg_buffer34 = sp + 256|0;
 $vararg_buffer32 = sp + 264|0;
 $vararg_buffer30 = sp + 272|0;
 $vararg_buffer28 = sp + 280|0;
 $vararg_buffer26 = sp + 288|0;
 $vararg_buffer24 = sp + 296|0;
 $vararg_buffer22 = sp + 304|0;
 $vararg_buffer20 = sp + 312|0;
 $vararg_buffer18 = sp + 320|0;
 $vararg_buffer15 = sp + 328|0;
 $vararg_buffer11 = sp + 336|0;
 $vararg_buffer9 = sp + 344|0;
 $vararg_buffer7 = sp + 352|0;
 $vararg_buffer5 = sp + 360|0;
 $vararg_buffer3 = sp + 368|0;
 $vararg_buffer1 = sp + 376|0;
 $vararg_buffer = sp + 384|0;
 $actual = sp + 632|0;
 $0 = 0;
 $1 = $argc;
 $2 = $argv;
 $3 = (_time((0|0))|0);
 HEAP32[$actual>>2] = $3;
 $4 = (_localtime(($actual|0))|0);
 $date = $4;
 $5 = HEAP32[_stderr>>2]|0;
 (_fprintf(($5|0),(48936|0),($vararg_buffer|0))|0);
 $6 = HEAP32[_stderr>>2]|0;
 (_fprintf(($6|0),(48976|0),($vararg_buffer1|0))|0);
 $7 = $1;
 $8 = ($7|0)<(3);
 if ($8) {
  $9 = HEAP32[_stderr>>2]|0;
  (_fprintf(($9|0),(49032|0),($vararg_buffer3|0))|0);
  $10 = HEAP32[_stderr>>2]|0;
  (_fprintf(($10|0),(38624|0),($vararg_buffer5|0))|0);
  HEAP32[2808>>2] = 0;
  while(1) {
   $11 = HEAP32[2808>>2]|0;
   $12 = ($11>>>0)<(14);
   if (!($12)) {
    break;
   }
   $13 = HEAP32[2808>>2]|0;
   $14 = ($13|0)==(0);
   if ($14) {
    $15 = HEAP32[_stderr>>2]|0;
    (_fprintf(($15|0),(49040|0),($vararg_buffer7|0))|0);
   } else {
    $16 = HEAP32[_stderr>>2]|0;
    $17 = HEAP32[2808>>2]|0;
    $18 = (1016 + (($17*48)|0)|0);
    $19 = HEAP32[$18>>2]|0;
    HEAP32[$vararg_buffer9>>2] = $19;
    (_fprintf(($16|0),(49112|0),($vararg_buffer9|0))|0);
   }
   $20 = HEAP32[2808>>2]|0;
   $21 = (1016 + (($20*48)|0)|0);
   $22 = (($21) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = HEAP8[$23>>0]|0;
   $25 = ($24<<24>>24)!=(0);
   if ($25) {
    $26 = HEAP32[_stderr>>2]|0;
    $27 = HEAP32[2808>>2]|0;
    $28 = (1016 + (($27*48)|0)|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = HEAP32[2808>>2]|0;
    $31 = (1016 + (($30*48)|0)|0);
    $32 = (($31) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    HEAP32[$vararg_buffer11>>2] = $29;
    $vararg_ptr14 = (($vararg_buffer11) + 4|0);
    HEAP32[$vararg_ptr14>>2] = $33;
    (_fprintf(($26|0),(49184|0),($vararg_buffer11|0))|0);
   }
   $34 = HEAP32[_stderr>>2]|0;
   $35 = HEAP32[2808>>2]|0;
   $36 = (1016 + (($35*48)|0)|0);
   $37 = (($36) + 8|0);
   $38 = HEAP32[$37>>2]|0;
   HEAP32[$vararg_buffer15>>2] = $38;
   (_fprintf(($34|0),(49264|0),($vararg_buffer15|0))|0);
   $39 = HEAP32[2808>>2]|0;
   $40 = (($39) + 1)|0;
   HEAP32[2808>>2] = $40;
  }
  $41 = HEAP32[_stderr>>2]|0;
  (_fprintf(($41|0),(38624|0),($vararg_buffer18|0))|0);
  $42 = HEAP32[_stderr>>2]|0;
  (_fprintf(($42|0),(49280|0),($vararg_buffer20|0))|0);
  $43 = HEAP32[_stderr>>2]|0;
  (_fprintf(($43|0),(49352|0),($vararg_buffer22|0))|0);
  $44 = HEAP32[_stderr>>2]|0;
  (_fprintf(($44|0),(49416|0),($vararg_buffer24|0))|0);
  $45 = HEAP32[_stderr>>2]|0;
  (_fprintf(($45|0),(38624|0),($vararg_buffer26|0))|0);
  $46 = HEAP32[_stderr>>2]|0;
  (_fprintf(($46|0),(49480|0),($vararg_buffer28|0))|0);
  $47 = HEAP32[_stderr>>2]|0;
  (_fprintf(($47|0),(49544|0),($vararg_buffer30|0))|0);
  $48 = HEAP32[_stderr>>2]|0;
  (_fprintf(($48|0),(49592|0),($vararg_buffer32|0))|0);
  $49 = HEAP32[_stderr>>2]|0;
  (_fprintf(($49|0),(49656|0),($vararg_buffer34|0))|0);
  $50 = HEAP32[_stderr>>2]|0;
  (_fprintf(($50|0),(49728|0),($vararg_buffer36|0))|0);
  $51 = HEAP32[_stderr>>2]|0;
  (_fprintf(($51|0),(49784|0),($vararg_buffer38|0))|0);
  $52 = HEAP32[_stderr>>2]|0;
  (_fprintf(($52|0),(38624|0),($vararg_buffer40|0))|0);
  _exit(1);
  // unreachable;
 }
 $c = 1;
 $53 = $c;
 $54 = $2;
 $55 = (($54) + ($53<<2)|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = HEAP8[$56>>0]|0;
 $58 = $57 << 24 >> 24;
 $59 = ($58|0)==(45);
 do {
  if ($59) {
   $60 = $c;
   $61 = $2;
   $62 = (($61) + ($60<<2)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + 1|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65 << 24 >> 24;
   $67 = ($66|0)==(45);
   if ($67) {
    HEAP32[2808>>2] = 0;
    while(1) {
     $68 = HEAP32[2808>>2]|0;
     $69 = ($68>>>0)<(14);
     if (!($69)) {
      break;
     }
     $70 = $c;
     $71 = $2;
     $72 = (($71) + ($70<<2)|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = (($73) + 2|0);
     $p = $74;
     $75 = HEAP32[2808>>2]|0;
     $76 = (1016 + (($75*48)|0)|0);
     $77 = HEAP32[$76>>2]|0;
     $p1 = $77;
     while(1) {
      $78 = $p;
      $79 = HEAP8[$78>>0]|0;
      $80 = $79 << 24 >> 24;
      $81 = ($80|0)!=(0);
      if ($81) {
       $82 = $p;
       $83 = HEAP8[$82>>0]|0;
       $84 = $83 << 24 >> 24;
       $85 = (_tolower($84)|0);
       $86 = $p1;
       $87 = HEAP8[$86>>0]|0;
       $88 = $87 << 24 >> 24;
       $89 = (_tolower($88)|0);
       $90 = ($85|0)==($89|0);
       $750 = $90;
      } else {
       $750 = 0;
      }
      if (!($750)) {
       break;
      }
      $91 = $p;
      $92 = (($91) + 1|0);
      $p = $92;
      $93 = $p1;
      $94 = (($93) + 1|0);
      $p1 = $94;
     }
     $95 = $p;
     $96 = HEAP8[$95>>0]|0;
     $97 = $96 << 24 >> 24;
     $98 = ($97|0)==(0);
     if ($98) {
      $99 = $p1;
      $100 = HEAP8[$99>>0]|0;
      $101 = $100 << 24 >> 24;
      $102 = ($101|0)==(0);
      if ($102) {
       label = 22;
       break;
      }
     }
     $103 = HEAP32[2808>>2]|0;
     $104 = (($103) + 1)|0;
     HEAP32[2808>>2] = $104;
    }
    if ((label|0) == 22) {
    }
    $105 = HEAP32[2808>>2]|0;
    $106 = ($105|0)==(14);
    if ($106) {
     $107 = HEAP32[_stderr>>2]|0;
     $108 = $c;
     $109 = $2;
     $110 = (($109) + ($108<<2)|0);
     $111 = HEAP32[$110>>2]|0;
     HEAP32[$vararg_buffer42>>2] = $111;
     (_fprintf(($107|0),(49848|0),($vararg_buffer42|0))|0);
     _exit(1);
     // unreachable;
    } else {
     $112 = HEAP32[2808>>2]|0;
     $113 = (1016 + (($112*48)|0)|0);
     $114 = (($113) + 44|0);
     $115 = HEAP32[$114>>2]|0;
     HEAP32[35640>>2] = $115;
     $116 = $c;
     $117 = (($116) + 1)|0;
     $c = $117;
     break;
    }
   } else {
    label = 27;
   }
  } else {
   label = 27;
  }
 } while(0);
 if ((label|0) == 27) {
  HEAP32[2808>>2] = 0;
  HEAP32[35640>>2] = 0;
 }
 $118 = HEAP32[2808>>2]|0;
 $119 = ($118|0)==(8);
 if ($119) {
  HEAP32[2808>>2] = 0;
  HEAP32[35640>>2] = 0;
  $pencil = 1;
 } else {
  $pencil = 0;
 }
 $extra_ram = 0;
 $120 = $c;
 $121 = $2;
 $122 = (($121) + ($120<<2)|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = HEAP8[$123>>0]|0;
 $125 = $124 << 24 >> 24;
 $126 = ($125|0)==(45);
 if ($126) {
  $127 = $c;
  $128 = $2;
  $129 = (($128) + ($127<<2)|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (($130) + 1|0);
  $132 = HEAP8[$131>>0]|0;
  $133 = $132 << 24 >> 24;
  $134 = (_tolower($133)|0);
  $135 = ($134|0)==(114);
  if ($135) {
   $136 = $c;
   $137 = $2;
   $138 = (($137) + ($136<<2)|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = (($139) + 2|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141 << 24 >> 24;
   $143 = ($142|0)==(97);
   $144 = $143&1;
   $145 = (_tolower($144)|0);
   $146 = ($145|0)!=(0);
   if ($146) {
    $147 = $c;
    $148 = $2;
    $149 = (($148) + ($147<<2)|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = (($150) + 3|0);
    $152 = HEAP8[$151>>0]|0;
    $153 = $152 << 24 >> 24;
    $154 = ($153|0)==(109);
    $155 = $154&1;
    $156 = (_tolower($155)|0);
    $157 = ($156|0)!=(0);
    if ($157) {
     $158 = $c;
     $159 = $2;
     $160 = (($159) + ($158<<2)|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = (($161) + 4|0);
     $163 = HEAP8[$162>>0]|0;
     $164 = $163 << 24 >> 24;
     $165 = ($164|0)==(49);
     if ($165) {
      $166 = $c;
      $167 = $2;
      $168 = (($167) + ($166<<2)|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = (($169) + 5|0);
      $171 = HEAP8[$170>>0]|0;
      $172 = $171 << 24 >> 24;
      $173 = ($172|0)==(54);
      if ($173) {
       $174 = $c;
       $175 = $2;
       $176 = (($175) + ($174<<2)|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = (($177) + 6|0);
       $179 = HEAP8[$178>>0]|0;
       $180 = $179 << 24 >> 24;
       $181 = ($180|0)==(0);
       if ($181) {
        $182 = $c;
        $183 = (($182) + 1)|0;
        $c = $183;
        $184 = HEAP32[2808>>2]|0;
        $185 = ($184|0)==(2);
        if (!($185)) {
         $186 = HEAP32[_stderr>>2]|0;
         (_fprintf(($186|0),(49872|0),($vararg_buffer45|0))|0);
         _exit(2);
         // unreachable;
        }
        $extra_ram = 8192;
       }
      }
     }
    }
   }
  }
 }
 $cpm_option = 0;
 $187 = HEAP32[2808>>2]|0;
 $188 = ($187|0)==(9);
 if ($188) {
  $cpm_option = 1;
 }
 $189 = $c;
 $190 = $2;
 $191 = (($190) + ($189<<2)|0);
 $192 = HEAP32[$191>>2]|0;
 $193 = HEAP8[$192>>0]|0;
 $194 = $193 << 24 >> 24;
 $195 = ($194|0)==(45);
 if ($195) {
  $196 = $c;
  $197 = $2;
  $198 = (($197) + ($196<<2)|0);
  $199 = HEAP32[$198>>2]|0;
  $200 = (($199) + 1|0);
  $201 = HEAP8[$200>>0]|0;
  $202 = $201 << 24 >> 24;
  $203 = (_tolower($202)|0);
  $204 = ($203|0)==(99);
  if ($204) {
   $205 = $c;
   $206 = $2;
   $207 = (($206) + ($205<<2)|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = (($208) + 2|0);
   $210 = HEAP8[$209>>0]|0;
   $211 = $210 << 24 >> 24;
   $212 = ($211|0)==(112);
   $213 = $212&1;
   $214 = (_tolower($213)|0);
   $215 = ($214|0)!=(0);
   if ($215) {
    $216 = $c;
    $217 = $2;
    $218 = (($217) + ($216<<2)|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = (($219) + 3|0);
    $221 = HEAP8[$220>>0]|0;
    $222 = $221 << 24 >> 24;
    $223 = ($222|0)==(109);
    $224 = $223&1;
    $225 = (_tolower($224)|0);
    $226 = ($225|0)!=(0);
    if ($226) {
     $227 = $c;
     $228 = $2;
     $229 = (($228) + ($227<<2)|0);
     $230 = HEAP32[$229>>2]|0;
     $231 = (($230) + 4|0);
     $232 = HEAP8[$231>>0]|0;
     $233 = $232 << 24 >> 24;
     $234 = ($233|0)==(0);
     if ($234) {
      $235 = $c;
      $236 = (($235) + 1)|0;
      $c = $236;
      $237 = HEAP32[2808>>2]|0;
      $238 = ($237|0)==(6);
      if (!($238)) {
       $239 = HEAP32[2808>>2]|0;
       $240 = ($239|0)==(12);
       if (!($240)) {
        $241 = HEAP32[_stderr>>2]|0;
        (_fprintf(($241|0),(49912|0),($vararg_buffer47|0))|0);
        _exit(2);
        // unreachable;
       }
      }
      $cpm_option = 1;
     }
    }
   }
  }
 }
 $small_rom = 0;
 $242 = $c;
 $243 = $2;
 $244 = (($243) + ($242<<2)|0);
 $245 = HEAP32[$244>>2]|0;
 $246 = HEAP8[$245>>0]|0;
 $247 = $246 << 24 >> 24;
 $248 = ($247|0)==(45);
 if ($248) {
  $249 = $c;
  $250 = $2;
  $251 = (($250) + ($249<<2)|0);
  $252 = HEAP32[$251>>2]|0;
  $253 = (($252) + 1|0);
  $254 = HEAP8[$253>>0]|0;
  $255 = $254 << 24 >> 24;
  $256 = (_tolower($255)|0);
  $257 = ($256|0)==(114);
  if ($257) {
   $258 = $c;
   $259 = $2;
   $260 = (($259) + ($258<<2)|0);
   $261 = HEAP32[$260>>2]|0;
   $262 = (($261) + 2|0);
   $263 = HEAP8[$262>>0]|0;
   $264 = $263 << 24 >> 24;
   $265 = ($264|0)==(111);
   $266 = $265&1;
   $267 = (_tolower($266)|0);
   $268 = ($267|0)!=(0);
   if ($268) {
    $269 = $c;
    $270 = $2;
    $271 = (($270) + ($269<<2)|0);
    $272 = HEAP32[$271>>2]|0;
    $273 = (($272) + 3|0);
    $274 = HEAP8[$273>>0]|0;
    $275 = $274 << 24 >> 24;
    $276 = ($275|0)==(109);
    $277 = $276&1;
    $278 = (_tolower($277)|0);
    $279 = ($278|0)!=(0);
    if ($279) {
     $280 = $c;
     $281 = $2;
     $282 = (($281) + ($280<<2)|0);
     $283 = HEAP32[$282>>2]|0;
     $284 = (($283) + 4|0);
     $285 = HEAP8[$284>>0]|0;
     $286 = $285 << 24 >> 24;
     $287 = ($286|0)==(49);
     if ($287) {
      $288 = $c;
      $289 = $2;
      $290 = (($289) + ($288<<2)|0);
      $291 = HEAP32[$290>>2]|0;
      $292 = (($291) + 5|0);
      $293 = HEAP8[$292>>0]|0;
      $294 = $293 << 24 >> 24;
      $295 = ($294|0)==(54);
      if ($295) {
       $296 = $c;
       $297 = $2;
       $298 = (($297) + ($296<<2)|0);
       $299 = HEAP32[$298>>2]|0;
       $300 = (($299) + 6|0);
       $301 = HEAP8[$300>>0]|0;
       $302 = $301 << 24 >> 24;
       $303 = ($302|0)==(0);
       if ($303) {
        $304 = $c;
        $305 = (($304) + 1)|0;
        $c = $305;
        $306 = HEAP32[2808>>2]|0;
        $307 = ($306|0)==(7);
        if (!($307)) {
         $308 = HEAP32[_stderr>>2]|0;
         (_fprintf(($308|0),(49960|0),($vararg_buffer49|0))|0);
         _exit(2);
         // unreachable;
        }
        $small_rom = 1;
       }
      }
     }
    }
   }
  }
 }
 L85: while(1) {
  $309 = $c;
  $310 = $2;
  $311 = (($310) + ($309<<2)|0);
  $312 = HEAP32[$311>>2]|0;
  $313 = HEAP8[$312>>0]|0;
  $314 = $313 << 24 >> 24;
  $315 = ($314|0)==(45);
  if ($315) {
   $316 = $c;
   $317 = $2;
   $318 = (($317) + ($316<<2)|0);
   $319 = HEAP32[$318>>2]|0;
   $320 = (($319) + 1|0);
   $321 = HEAP8[$320>>0]|0;
   $322 = $321 << 24 >> 24;
   $323 = (_tolower($322)|0);
   $324 = ($323|0)==(100);
   $751 = $324;
  } else {
   $751 = 0;
  }
  if (!($751)) {
   label = 89;
   break;
  }
  $i = 1;
  $ch = 0;
  $p2 = 30952;
  $d = 0;
  while(1) {
   $325 = $i;
   $326 = (($325) + 1)|0;
   $i = $326;
   $327 = $c;
   $328 = $2;
   $329 = (($328) + ($327<<2)|0);
   $330 = HEAP32[$329>>2]|0;
   $331 = (($330) + ($326)|0);
   $332 = HEAP8[$331>>0]|0;
   $ch = $332;
   $333 = $ch;
   $334 = $333 << 24 >> 24;
   $335 = ($334|0)==(0);
   if ($335) {
    label = 71;
    break;
   }
   $336 = $ch;
   $337 = $336 << 24 >> 24;
   $338 = (_isalnum($337)|0);
   $339 = ($338|0)!=(0);
   if (!($339)) {
    $340 = $ch;
    $341 = $340 << 24 >> 24;
    $342 = ($341|0)!=(95);
    if ($342) {
     $343 = $ch;
     $344 = $343 << 24 >> 24;
     $345 = ($344|0)!=(35);
     if ($345) {
      $346 = $ch;
      $347 = $346 << 24 >> 24;
      $348 = ($347|0)!=(61);
      if ($348) {
       label = 76;
       break L85;
      }
     }
    }
   }
   $354 = $ch;
   $355 = $354 << 24 >> 24;
   $356 = ($355|0)==(61);
   if ($356) {
    label = 78;
    break;
   }
   $377 = $p2;
   $378 = (30952 + 1023|0);
   $379 = ($377>>>0)<($378>>>0);
   if ($379) {
    $380 = $ch;
    $381 = $380 << 24 >> 24;
    $382 = (_toupper($381)|0);
    $383 = $382&255;
    $384 = $p2;
    $385 = (($384) + 1|0);
    $p2 = $385;
    HEAP8[$384>>0] = $383;
   }
  }
  if ((label|0) == 71) {
   label = 0;
  }
  else if ((label|0) == 78) {
   label = 0;
   $357 = $p2;
   HEAP8[$357>>0] = 0;
   $358 = (_constant_search(30952)|0);
   $d = $358;
   $359 = $d;
   $360 = ($359|0)!=(0|0);
   if ($360) {
    $361 = HEAP32[_stderr>>2]|0;
    $362 = $c;
    $363 = $2;
    $364 = (($363) + ($362<<2)|0);
    $365 = HEAP32[$364>>2]|0;
    HEAP32[$vararg_buffer54>>2] = $365;
    (_fprintf(($361|0),(50048|0),($vararg_buffer54|0))|0);
   } else {
    $366 = (_constant_add(30952)|0);
    $d = $366;
    $367 = $i;
    $368 = (($367) + 1)|0;
    $369 = $c;
    $370 = $2;
    $371 = (($370) + ($369<<2)|0);
    $372 = HEAP32[$371>>2]|0;
    $373 = (($372) + ($368)|0);
    $374 = (_atoi($373)|0);
    $375 = $d;
    $376 = (($375) + 4|0);
    HEAP32[$376>>2] = $374;
   }
  }
  $386 = $d;
  $387 = ($386|0)==(0|0);
  if ($387) {
   label = 87;
   break;
  }
  $393 = $c;
  $394 = (($393) + 1)|0;
  $c = $394;
 }
 if ((label|0) == 76) {
  $349 = HEAP32[_stderr>>2]|0;
  $350 = $c;
  $351 = $2;
  $352 = (($351) + ($350<<2)|0);
  $353 = HEAP32[$352>>2]|0;
  HEAP32[$vararg_buffer51>>2] = $353;
  (_fprintf(($349|0),(50008|0),($vararg_buffer51|0))|0);
  _exit(2);
  // unreachable;
 }
 else if ((label|0) == 87) {
  $388 = HEAP32[_stderr>>2]|0;
  $389 = $c;
  $390 = $2;
  $391 = (($390) + ($389<<2)|0);
  $392 = HEAP32[$391>>2]|0;
  HEAP32[$vararg_buffer57>>2] = $392;
  (_fprintf(($388|0),(50072|0),($vararg_buffer57|0))|0);
  _exit(2);
  // unreachable;
 }
 else if ((label|0) == 89) {
  $395 = $c;
  $396 = $2;
  $397 = (($396) + ($395<<2)|0);
  $398 = HEAP32[$397>>2]|0;
  (_strcpy((1736|0),($398|0))|0);
  HEAP32[2760>>2] = 0;
  $399 = (_fopen((1736|0),(48576|0))|0);
  HEAP32[44192>>2] = $399;
  $400 = HEAP32[44192>>2]|0;
  $401 = ($400|0)==(0|0);
  if ($401) {
   $402 = HEAP32[_stderr>>2]|0;
   HEAP32[$vararg_buffer60>>2] = 1736;
   (_fprintf(($402|0),(50144|0),($vararg_buffer60|0))|0);
   _exit(2);
   // unreachable;
  }
  $403 = $c;
  $404 = (($403) + 1)|0;
  $c = $404;
  $405 = (_fopen((50184|0),(50208|0))|0);
  HEAP32[2824>>2] = $405;
  $406 = HEAP32[2824>>2]|0;
  $407 = ($406|0)==(0|0);
  if ($407) {
   $408 = HEAP32[_stderr>>2]|0;
   HEAP32[$vararg_buffer63>>2] = 50184;
   (_fprintf(($408|0),(50216|0),($vararg_buffer63|0))|0);
   _exit(2);
   // unreachable;
  }
  HEAP32[43712>>2] = 0;
  HEAP32[33096>>2] = 0;
  HEAP32[2768>>2] = 1;
  HEAP32[44304>>2] = 0;
  HEAP32[42392>>2] = 0;
  _compile_basic();
  $409 = HEAP32[37192>>2]|0;
  $410 = ($409|0)!=(0|0);
  if ($410) {
   _emit_error(50256);
  } else {
   $411 = HEAP32[44304>>2]|0;
   $412 = ($411|0)!=(0|0);
   if ($412) {
    _emit_warning(50304);
    $413 = HEAP32[37056>>2]|0;
    $414 = ($413|0)!=(0);
    if (!($414)) {
     _generic_return();
    }
    HEAP32[44304>>2] = 0;
    HEAP32[37056>>2] = 0;
   }
  }
  $415 = HEAP32[43712>>2]|0;
  $416 = ($415|0)!=(0);
  if ($416) {
   _bank_finish();
  }
  $417 = HEAP32[44192>>2]|0;
  (_fclose(($417|0))|0);
  $418 = HEAP32[2824>>2]|0;
  (_fclose(($418|0))|0);
  $419 = $c;
  $420 = $2;
  $421 = (($420) + ($419<<2)|0);
  $422 = HEAP32[$421>>2]|0;
  $423 = (_fopen(($422|0),(50208|0))|0);
  HEAP32[2824>>2] = $423;
  $424 = HEAP32[2824>>2]|0;
  $425 = ($424|0)==(0|0);
  if ($425) {
   $426 = HEAP32[_stderr>>2]|0;
   $427 = $2;
   $428 = (($427) + 8|0);
   $429 = HEAP32[$428>>2]|0;
   HEAP32[$vararg_buffer66>>2] = $429;
   (_fprintf(($426|0),(50344|0),($vararg_buffer66|0))|0);
   _exit(2);
   // unreachable;
  }
  $430 = $c;
  $431 = (($430) + 1)|0;
  $c = $431;
  $432 = $c;
  $433 = $1;
  $434 = ($432|0)<($433|0);
  if ($434) {
   $435 = $c;
   $436 = $2;
   $437 = (($436) + ($435<<2)|0);
   $438 = HEAP32[$437>>2]|0;
   (_strcpy((50384|0),($438|0))|0);
   $439 = $c;
   $440 = (($439) + 1)|0;
   $c = $440;
  }
  $441 = (_strlen((50384|0))|0);
  $442 = ($441>>>0)>(0);
  if ($442) {
   $443 = (_strlen((50384|0))|0);
   $444 = (($443) - 1)|0;
   $445 = (50384 + ($444)|0);
   $446 = HEAP8[$445>>0]|0;
   $447 = $446 << 24 >> 24;
   $448 = ($447|0)!=(47);
   if ($448) {
    (_strcat((50384|0),(54480|0))|0);
   }
  }
  $hex = 36;
  $449 = HEAP32[35640>>2]|0;
  $450 = ($449|0)==(2);
  if ($450) {
   $hex = 62;
  }
  $451 = HEAP32[2824>>2]|0;
  (_fprintf(($451|0),(54488|0),($vararg_buffer69|0))|0);
  $452 = HEAP32[2824>>2]|0;
  (_fprintf(($452|0),(54528|0),($vararg_buffer71|0))|0);
  $c = 0;
  while(1) {
   $453 = $c;
   $454 = $1;
   $455 = ($453|0)<($454|0);
   if (!($455)) {
    break;
   }
   $456 = $c;
   $457 = $2;
   $458 = (($457) + ($456<<2)|0);
   $459 = HEAP32[$458>>2]|0;
   $460 = (_strchr($459,32)|0);
   $b = $460;
   $461 = $b;
   $462 = ($461|0)!=(0|0);
   if ($462) {
    $463 = HEAP32[2824>>2]|0;
    $464 = $c;
    $465 = $2;
    $466 = (($465) + ($464<<2)|0);
    $467 = HEAP32[$466>>2]|0;
    HEAP32[$vararg_buffer73>>2] = $467;
    (_fprintf(($463|0),(54544|0),($vararg_buffer73|0))|0);
   } else {
    $468 = HEAP32[2824>>2]|0;
    $469 = $c;
    $470 = $2;
    $471 = (($470) + ($469<<2)|0);
    $472 = HEAP32[$471>>2]|0;
    HEAP32[$vararg_buffer76>>2] = $472;
    (_fprintf(($468|0),(54552|0),($vararg_buffer76|0))|0);
   }
   $473 = $c;
   $474 = (($473) + 1)|0;
   $c = $474;
  }
  $475 = HEAP32[2824>>2]|0;
  (_fprintf(($475|0),(38624|0),($vararg_buffer79|0))|0);
  $476 = HEAP32[2824>>2]|0;
  $477 = $date;
  $478 = (_asctime(($477|0))|0);
  HEAP32[$vararg_buffer81>>2] = $478;
  (_fprintf(($476|0),(54560|0),($vararg_buffer81|0))|0);
  $479 = HEAP32[2824>>2]|0;
  $480 = HEAP32[2808>>2]|0;
  $481 = ($480|0)==(0);
  if ($481) {
   $485 = 1;
  } else {
   $482 = HEAP32[2808>>2]|0;
   $483 = ($482|0)==(3);
   $485 = $483;
  }
  $484 = $485 ? 1 : 0;
  HEAP32[$vararg_buffer84>>2] = $484;
  (_fprintf(($479|0),(54576|0),($vararg_buffer84|0))|0);
  $486 = HEAP32[2824>>2]|0;
  $487 = HEAP32[2808>>2]|0;
  $488 = ($487|0)==(1);
  $489 = $488 ? 1 : 0;
  HEAP32[$vararg_buffer87>>2] = $489;
  (_fprintf(($486|0),(54592|0),($vararg_buffer87|0))|0);
  $490 = HEAP32[2824>>2]|0;
  $491 = HEAP32[2808>>2]|0;
  $492 = ($491|0)==(2);
  $493 = $492 ? 1 : 0;
  HEAP32[$vararg_buffer90>>2] = $493;
  (_fprintf(($490|0),(54608|0),($vararg_buffer90|0))|0);
  $494 = HEAP32[2824>>2]|0;
  $495 = HEAP32[2808>>2]|0;
  $496 = ($495|0)==(3);
  $497 = $496 ? 1 : 0;
  HEAP32[$vararg_buffer93>>2] = $497;
  (_fprintf(($494|0),(54624|0),($vararg_buffer93|0))|0);
  $498 = HEAP32[2824>>2]|0;
  $499 = HEAP32[2808>>2]|0;
  $500 = ($499|0)==(4);
  $501 = $500 ? 1 : 0;
  HEAP32[$vararg_buffer96>>2] = $501;
  (_fprintf(($498|0),(54640|0),($vararg_buffer96|0))|0);
  $502 = HEAP32[2824>>2]|0;
  $503 = HEAP32[2808>>2]|0;
  $504 = ($503|0)==(5);
  $505 = $504 ? 1 : 0;
  HEAP32[$vararg_buffer99>>2] = $505;
  (_fprintf(($502|0),(54656|0),($vararg_buffer99|0))|0);
  $506 = HEAP32[2824>>2]|0;
  $507 = HEAP32[2808>>2]|0;
  $508 = ($507|0)==(6);
  $509 = $508 ? 1 : 0;
  HEAP32[$vararg_buffer102>>2] = $509;
  (_fprintf(($506|0),(54672|0),($vararg_buffer102|0))|0);
  $510 = HEAP32[2824>>2]|0;
  $511 = HEAP32[2808>>2]|0;
  $512 = ($511|0)==(9);
  $513 = $512 ? 1 : 0;
  HEAP32[$vararg_buffer105>>2] = $513;
  (_fprintf(($510|0),(54696|0),($vararg_buffer105|0))|0);
  $514 = HEAP32[2824>>2]|0;
  $515 = $cpm_option;
  HEAP32[$vararg_buffer108>>2] = $515;
  (_fprintf(($514|0),(54720|0),($vararg_buffer108|0))|0);
  $516 = HEAP32[2824>>2]|0;
  $517 = $pencil;
  HEAP32[$vararg_buffer111>>2] = $517;
  (_fprintf(($516|0),(54736|0),($vararg_buffer111|0))|0);
  $518 = HEAP32[2824>>2]|0;
  $519 = HEAP32[2808>>2]|0;
  $520 = ($519|0)==(10);
  $521 = $520 ? 1 : 0;
  HEAP32[$vararg_buffer114>>2] = $521;
  (_fprintf(($518|0),(54752|0),($vararg_buffer114|0))|0);
  $522 = HEAP32[2824>>2]|0;
  $523 = HEAP32[2808>>2]|0;
  $524 = ($523|0)==(11);
  $525 = $524 ? 1 : 0;
  HEAP32[$vararg_buffer117>>2] = $525;
  (_fprintf(($522|0),(54768|0),($vararg_buffer117|0))|0);
  $526 = HEAP32[2824>>2]|0;
  $527 = HEAP32[2808>>2]|0;
  $528 = ($527|0)==(12);
  $529 = $528 ? 1 : 0;
  HEAP32[$vararg_buffer120>>2] = $529;
  (_fprintf(($526|0),(54784|0),($vararg_buffer120|0))|0);
  $530 = HEAP32[2824>>2]|0;
  $531 = HEAP32[2808>>2]|0;
  $532 = ($531|0)==(13);
  $533 = $532 ? 1 : 0;
  HEAP32[$vararg_buffer123>>2] = $533;
  (_fprintf(($530|0),(54800|0),($vararg_buffer123|0))|0);
  $534 = HEAP32[2824>>2]|0;
  (_fprintf(($534|0),(38624|0),($vararg_buffer126|0))|0);
  $535 = HEAP32[2824>>2]|0;
  $536 = HEAP32[41832>>2]|0;
  HEAP32[$vararg_buffer128>>2] = $536;
  (_fprintf(($535|0),(54816|0),($vararg_buffer128|0))|0);
  $537 = HEAP32[2824>>2]|0;
  $538 = HEAP32[39600>>2]|0;
  HEAP32[$vararg_buffer131>>2] = $538;
  (_fprintf(($537|0),(54848|0),($vararg_buffer131|0))|0);
  $539 = HEAP32[2824>>2]|0;
  $540 = HEAP32[43712>>2]|0;
  HEAP32[$vararg_buffer134>>2] = $540;
  (_fprintf(($539|0),(54880|0),($vararg_buffer134|0))|0);
  $541 = HEAP32[2824>>2]|0;
  $542 = HEAP32[3344>>2]|0;
  HEAP32[$vararg_buffer137>>2] = $542;
  (_fprintf(($541|0),(54912|0),($vararg_buffer137|0))|0);
  $543 = HEAP32[2824>>2]|0;
  (_fprintf(($543|0),(38624|0),($vararg_buffer140|0))|0);
  $544 = HEAP32[2824>>2]|0;
  $545 = $hex;
  $546 = $545 << 24 >> 24;
  $547 = HEAP32[2808>>2]|0;
  $548 = (1016 + (($547*48)|0)|0);
  $549 = (($548) + 16|0);
  $550 = HEAP32[$549>>2]|0;
  $551 = $extra_ram;
  $552 = (($550) - ($551))|0;
  HEAP32[$vararg_buffer142>>2] = $546;
  $vararg_ptr145 = (($vararg_buffer142) + 4|0);
  HEAP32[$vararg_ptr145>>2] = $552;
  (_fprintf(($544|0),(54944|0),($vararg_buffer142|0))|0);
  $553 = HEAP32[2824>>2]|0;
  $554 = $hex;
  $555 = $554 << 24 >> 24;
  $556 = HEAP32[2808>>2]|0;
  $557 = (1016 + (($556*48)|0)|0);
  $558 = (($557) + 24|0);
  $559 = HEAP32[$558>>2]|0;
  $560 = $extra_ram;
  $561 = (($559) + ($560))|0;
  HEAP32[$vararg_buffer146>>2] = $555;
  $vararg_ptr149 = (($vararg_buffer146) + 4|0);
  HEAP32[$vararg_ptr149>>2] = $561;
  (_fprintf(($553|0),(54984|0),($vararg_buffer146|0))|0);
  $562 = HEAP32[2808>>2]|0;
  $563 = ($562|0)==(6);
  if ($563) {
   label = 122;
  } else {
   $564 = HEAP32[2808>>2]|0;
   $565 = ($564|0)==(9);
   if ($565) {
    label = 122;
   } else {
    label = 124;
   }
  }
  if ((label|0) == 122) {
   $566 = $cpm_option;
   $567 = ($566|0)!=(0);
   if ($567) {
    $568 = HEAP32[2824>>2]|0;
    $569 = $hex;
    $570 = $569 << 24 >> 24;
    HEAP32[$vararg_buffer150>>2] = $570;
    $vararg_ptr153 = (($vararg_buffer150) + 4|0);
    HEAP32[$vararg_ptr153>>2] = 57344;
    (_fprintf(($568|0),(55024|0),($vararg_buffer150|0))|0);
   } else {
    label = 124;
   }
  }
  if ((label|0) == 124) {
   $571 = HEAP32[2824>>2]|0;
   $572 = $hex;
   $573 = $572 << 24 >> 24;
   $574 = HEAP32[2808>>2]|0;
   $575 = (1016 + (($574*48)|0)|0);
   $576 = (($575) + 20|0);
   $577 = HEAP32[$576>>2]|0;
   HEAP32[$vararg_buffer154>>2] = $573;
   $vararg_ptr157 = (($vararg_buffer154) + 4|0);
   HEAP32[$vararg_ptr157>>2] = $577;
   (_fprintf(($571|0),(55024|0),($vararg_buffer154|0))|0);
  }
  $578 = HEAP32[2824>>2]|0;
  $579 = $hex;
  $580 = $579 << 24 >> 24;
  $581 = HEAP32[2808>>2]|0;
  $582 = (1016 + (($581*48)|0)|0);
  $583 = (($582) + 28|0);
  $584 = HEAP32[$583>>2]|0;
  HEAP32[$vararg_buffer158>>2] = $580;
  $vararg_ptr161 = (($vararg_buffer158) + 4|0);
  HEAP32[$vararg_ptr161>>2] = $584;
  (_fprintf(($578|0),(55064|0),($vararg_buffer158|0))|0);
  $585 = HEAP32[2824>>2]|0;
  $586 = $hex;
  $587 = $586 << 24 >> 24;
  $588 = HEAP32[2808>>2]|0;
  $589 = (1016 + (($588*48)|0)|0);
  $590 = (($589) + 32|0);
  $591 = HEAP32[$590>>2]|0;
  HEAP32[$vararg_buffer162>>2] = $587;
  $vararg_ptr165 = (($vararg_buffer162) + 4|0);
  HEAP32[$vararg_ptr165>>2] = $591;
  (_fprintf(($585|0),(55104|0),($vararg_buffer162|0))|0);
  $592 = HEAP32[2808>>2]|0;
  $593 = ($592|0)!=(11);
  if ($593) {
   $594 = HEAP32[2824>>2]|0;
   $595 = $hex;
   $596 = $595 << 24 >> 24;
   $597 = HEAP32[2808>>2]|0;
   $598 = (1016 + (($597*48)|0)|0);
   $599 = (($598) + 36|0);
   $600 = HEAP32[$599>>2]|0;
   HEAP32[$vararg_buffer166>>2] = $596;
   $vararg_ptr169 = (($vararg_buffer166) + 4|0);
   HEAP32[$vararg_ptr169>>2] = $600;
   (_fprintf(($594|0),(55144|0),($vararg_buffer166|0))|0);
  }
  $601 = HEAP32[2808>>2]|0;
  $602 = ($601|0)==(7);
  if ($602) {
   $603 = HEAP32[2824>>2]|0;
   $604 = $small_rom;
   HEAP32[$vararg_buffer170>>2] = $604;
   (_fprintf(($603|0),(55184|0),($vararg_buffer170|0))|0);
  }
  $605 = HEAP32[2824>>2]|0;
  (_fprintf(($605|0),(38624|0),($vararg_buffer173|0))|0);
  $606 = HEAP32[43712>>2]|0;
  $607 = ($606|0)!=(0);
  if ($607) {
   $608 = HEAP32[2808>>2]|0;
   $609 = ($608|0)==(0);
   do {
    if ($609) {
     label = 132;
    } else {
     $610 = HEAP32[2808>>2]|0;
     $611 = ($610|0)==(3);
     if ($611) {
      label = 132;
      break;
     }
     $616 = HEAP32[2808>>2]|0;
     $617 = ($616|0)==(11);
     if ($617) {
     } else {
      $618 = HEAP32[2824>>2]|0;
      (_fprintf(($618|0),(55224|0),($vararg_buffer178|0))|0);
     }
    }
   } while(0);
   if ((label|0) == 132) {
    $612 = HEAP32[2824>>2]|0;
    $613 = HEAP32[3344>>2]|0;
    $614 = $613<<10;
    $615 = (($614) - 16384)|0;
    HEAP32[$vararg_buffer175>>2] = $615;
    (_fprintf(($612|0),(55208|0),($vararg_buffer175|0))|0);
   }
  }
  (_strcpy((44448|0),(50384|0))|0);
  $619 = HEAP32[35640>>2]|0;
  $620 = ($619|0)==(1);
  if ($620) {
   (_strcat((44448|0),(55240|0))|0);
  } else {
   $621 = HEAP32[35640>>2]|0;
   $622 = ($621|0)==(2);
   if ($622) {
    (_strcat((44448|0),(55272|0))|0);
   } else {
    (_strcat((44448|0),(55304|0))|0);
   }
  }
  $623 = (_fopen((44448|0),(48576|0))|0);
  $prologue = $623;
  $624 = $prologue;
  $625 = ($624|0)==(0|0);
  if ($625) {
   $626 = HEAP32[_stderr>>2]|0;
   HEAP32[$vararg_buffer180>>2] = 44448;
   (_fprintf(($626|0),(55328|0),($vararg_buffer180|0))|0);
   _exit(2);
   // unreachable;
  }
  while(1) {
   $627 = $prologue;
   $628 = (_fgets((29880|0),1023,($627|0))|0);
   $629 = ($628|0)!=(0|0);
   if (!($629)) {
    break;
   }
   $p = 29880;
   while(1) {
    $630 = $p;
    $631 = HEAP8[$630>>0]|0;
    $632 = $631 << 24 >> 24;
    $633 = ($632|0)!=(0);
    if ($633) {
     $634 = $p;
     $635 = HEAP8[$634>>0]|0;
     $636 = $635 << 24 >> 24;
     $637 = (_isspace($636)|0);
     $638 = ($637|0)!=(0);
     $752 = $638;
    } else {
     $752 = 0;
    }
    if (!($752)) {
     break;
    }
    $639 = $p;
    $640 = (($639) + 1|0);
    $p = $640;
   }
   $641 = $p;
   $642 = (_memcmp($641,55352,26)|0);
   $643 = ($642|0)==(0);
   if ($643) {
    $644 = HEAP32[42392>>2]|0;
    $645 = ($644|0)!=(0|0);
    if ($645) {
     $646 = HEAP32[35640>>2]|0;
     $647 = ($646|0)==(1);
     if ($647) {
      $648 = HEAP32[2824>>2]|0;
      $649 = HEAP32[42392>>2]|0;
      $650 = (($649) + 12|0);
      HEAP32[$vararg_buffer183>>2] = $650;
      (_fprintf(($648|0),(55384|0),($vararg_buffer183|0))|0);
     } else {
      $651 = HEAP32[35640>>2]|0;
      $652 = ($651|0)==(2);
      if ($652) {
       $653 = HEAP32[2824>>2]|0;
       (_fprintf(($653|0),(55400|0),($vararg_buffer186|0))|0);
       $654 = HEAP32[2824>>2]|0;
       (_fprintf(($654|0),(55424|0),($vararg_buffer188|0))|0);
       $655 = HEAP32[42392>>2]|0;
       $656 = (($655) + 12|0);
       (_strcpy((36032|0),($656|0))|0);
       $657 = HEAP32[35640>>2]|0;
       $658 = ($657|0)==(2);
       if ($658) {
        $p3 = 36032;
        while(1) {
         $659 = $p3;
         $660 = HEAP8[$659>>0]|0;
         $661 = ($660<<24>>24)!=(0);
         if (!($661)) {
          break;
         }
         $662 = $p3;
         $663 = HEAP8[$662>>0]|0;
         $664 = $663 << 24 >> 24;
         $665 = ($664|0)==(35);
         if ($665) {
          $666 = $p3;
          HEAP8[$666>>0] = 95;
         }
         $667 = $p3;
         $668 = (($667) + 1|0);
         $p3 = $668;
        }
       }
       $669 = HEAP32[2824>>2]|0;
       HEAP32[$vararg_buffer190>>2] = 36032;
       (_fprintf(($669|0),(55440|0),($vararg_buffer190|0))|0);
      } else {
       $670 = HEAP32[2824>>2]|0;
       $671 = HEAP32[42392>>2]|0;
       $672 = (($671) + 12|0);
       HEAP32[$vararg_buffer193>>2] = $672;
       (_fprintf(($670|0),(55456|0),($vararg_buffer193|0))|0);
      }
     }
    }
   } else {
    $673 = HEAP32[2824>>2]|0;
    (_fputs((29880|0),($673|0))|0);
   }
  }
  $674 = $prologue;
  (_fclose(($674|0))|0);
  $675 = HEAP32[35640>>2]|0;
  $676 = ($675|0)==(1);
  if ($676) {
   $677 = (_process_variables()|0);
   $bytes_used = $677;
  }
  $678 = (_fopen((50184|0),(48576|0))|0);
  HEAP32[44192>>2] = $678;
  $679 = HEAP32[44192>>2]|0;
  $680 = ($679|0)==(0|0);
  if ($680) {
   $681 = HEAP32[_stderr>>2]|0;
   HEAP32[$vararg_buffer196>>2] = 50184;
   (_fprintf(($681|0),(55472|0),($vararg_buffer196|0))|0);
   _exit(2);
   // unreachable;
  }
  while(1) {
   $682 = HEAP32[44192>>2]|0;
   $683 = (_fgets((29880|0),1023,($682|0))|0);
   $684 = ($683|0)!=(0|0);
   if (!($684)) {
    break;
   }
   $685 = HEAP32[2824>>2]|0;
   (_fputs((29880|0),($685|0))|0);
  }
  $686 = HEAP32[44192>>2]|0;
  (_fclose(($686|0))|0);
  (_remove((50184|0))|0);
  (_strcpy((44448|0),(50384|0))|0);
  $687 = HEAP32[35640>>2]|0;
  $688 = ($687|0)==(1);
  if ($688) {
   (_strcat((44448|0),(55496|0))|0);
  } else {
   $689 = HEAP32[35640>>2]|0;
   $690 = ($689|0)==(2);
   if ($690) {
    (_strcat((44448|0),(55528|0))|0);
   } else {
    (_strcat((44448|0),(55560|0))|0);
   }
  }
  $691 = (_fopen((44448|0),(48576|0))|0);
  $prologue = $691;
  $692 = $prologue;
  $693 = ($692|0)==(0|0);
  if ($693) {
   $694 = HEAP32[_stderr>>2]|0;
   HEAP32[$vararg_buffer199>>2] = 44448;
   (_fprintf(($694|0),(55328|0),($vararg_buffer199|0))|0);
   _exit(2);
   // unreachable;
  }
  while(1) {
   $695 = $prologue;
   $696 = (_fgets((29880|0),1023,($695|0))|0);
   $697 = ($696|0)!=(0|0);
   if (!($697)) {
    break;
   }
   $698 = HEAP32[2824>>2]|0;
   (_fputs((29880|0),($698|0))|0);
  }
  $699 = $prologue;
  (_fclose(($699|0))|0);
  $700 = HEAP32[35640>>2]|0;
  $701 = ($700|0)==(0);
  if ($701) {
   label = 192;
  } else {
   $702 = HEAP32[35640>>2]|0;
   $703 = ($702|0)==(2);
   if ($703) {
    label = 192;
   }
  }
  if ((label|0) == 192) {
   $704 = (_process_variables()|0);
   $bytes_used = $704;
  }
  $705 = HEAP32[2824>>2]|0;
  (_fclose(($705|0))|0);
  $706 = HEAP32[2808>>2]|0;
  $707 = ($706|0)==(6);
  do {
   if (!($707)) {
    $708 = HEAP32[2808>>2]|0;
    $709 = ($708|0)==(9);
    if ($709) {
     break;
    }
    $710 = HEAP32[2808>>2]|0;
    $711 = ($710|0)==(12);
    if ($711) {
     break;
    }
    $714 = HEAP32[2808>>2]|0;
    $715 = (1016 + (($714*48)|0)|0);
    $716 = (($715) + 24|0);
    $717 = HEAP32[$716>>2]|0;
    $718 = $extra_ram;
    $719 = (($717) + ($718))|0;
    $available_bytes = $719;
    $720 = HEAP32[2808>>2]|0;
    $721 = ($720|0)==(5);
    if ($721) {
     $722 = HEAP32[41832>>2]|0;
     $723 = ($722|0)!=(0);
     $724 = $723 ? 33 : 0;
     $725 = (($724) + 146)|0;
     $726 = $available_bytes;
     $727 = (($726) - ($725))|0;
     $available_bytes = $727;
    } else {
     $728 = HEAP32[2808>>2]|0;
     $729 = ($728|0)!=(3);
     if ($729) {
      $730 = HEAP32[41832>>2]|0;
      $731 = ($730|0)!=(0);
      $732 = $731 ? 33 : 0;
      $733 = (64 + ($732))|0;
      $734 = (($733) + 146)|0;
      $735 = $available_bytes;
      $736 = (($735) - ($734))|0;
      $available_bytes = $736;
     }
    }
    $737 = $bytes_used;
    $738 = $available_bytes;
    $739 = ($737|0)>($738|0);
    if ($739) {
     $740 = HEAP32[_stderr>>2]|0;
     (_fprintf(($740|0),(55624|0),($vararg_buffer205|0))|0);
     HEAP32[2760>>2] = 1;
    }
    $741 = HEAP32[_stderr>>2]|0;
    $742 = $bytes_used;
    $743 = $available_bytes;
    HEAP32[$vararg_buffer207>>2] = $742;
    $vararg_ptr210 = (($vararg_buffer207) + 4|0);
    HEAP32[$vararg_ptr210>>2] = $743;
    (_fprintf(($741|0),(55632|0),($vararg_buffer207|0))|0);
    $744 = HEAP32[_stderr>>2]|0;
    $745 = HEAP32[2808>>2]|0;
    $746 = (1016 + (($745*48)|0)|0);
    $747 = (($746) + 12|0);
    $748 = HEAP32[$747>>2]|0;
    HEAP32[$vararg_buffer211>>2] = $748;
    (_fprintf(($744|0),(55680|0),($vararg_buffer211|0))|0);
    $749 = HEAP32[2760>>2]|0;
    _exit(($749|0));
    // unreachable;
   }
  } while(0);
  $712 = HEAP32[_stderr>>2]|0;
  $713 = $bytes_used;
  HEAP32[$vararg_buffer202>>2] = $713;
  (_fprintf(($712|0),(55584|0),($vararg_buffer202|0))|0);
  $744 = HEAP32[_stderr>>2]|0;
  $745 = HEAP32[2808>>2]|0;
  $746 = (1016 + (($745*48)|0)|0);
  $747 = (($746) + 12|0);
  $748 = HEAP32[$747>>2]|0;
  HEAP32[$vararg_buffer211>>2] = $748;
  (_fprintf(($744|0),(55680|0),($vararg_buffer211|0))|0);
  $749 = HEAP32[2760>>2]|0;
  _exit(($749|0));
  // unreachable;
 }
 return 0|0;
}
function _node_same_tree($node1,$node2) {
 $node1 = $node1|0;
 $node2 = $node2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $node1;
 $2 = $node2;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)!=($6|0);
 if ($7) {
  $0 = 0;
  $70 = $0;
  STACKTOP = sp;return ($70|0);
 }
 $8 = $1;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)!=($13|0);
 if ($14) {
  $0 = 0;
  $70 = $0;
  STACKTOP = sp;return ($70|0);
 }
 $15 = $1;
 $16 = (($15) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $2;
 $19 = (($18) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($17|0)!=($20|0);
 if ($21) {
  $0 = 0;
  $70 = $0;
  STACKTOP = sp;return ($70|0);
 }
 $22 = $1;
 $23 = (($22) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 do {
  if ($25) {
   $26 = $2;
   $27 = (($26) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)!=(0|0);
   if ($29) {
    $30 = $1;
    $31 = (($30) + 8|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $2;
    $34 = (($33) + 8|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (_node_same_tree($32,$35)|0);
    $37 = ($36|0)==(0);
    if (!($37)) {
     break;
    }
    $0 = 0;
    $70 = $0;
    STACKTOP = sp;return ($70|0);
   } else {
    label = 12;
   }
  } else {
   label = 12;
  }
 } while(0);
 do {
  if ((label|0) == 12) {
   $38 = $1;
   $39 = (($38) + 8|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)!=(0|0);
   if (!($41)) {
    $42 = $2;
    $43 = (($42) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($44|0)!=(0|0);
    if (!($45)) {
     break;
    }
   }
   $0 = 0;
   $70 = $0;
   STACKTOP = sp;return ($70|0);
  }
 } while(0);
 $46 = $1;
 $47 = (($46) + 12|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)!=(0|0);
 do {
  if ($49) {
   $50 = $2;
   $51 = (($50) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($52|0)!=(0|0);
   if ($53) {
    $54 = $1;
    $55 = (($54) + 12|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $2;
    $58 = (($57) + 12|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (_node_same_tree($56,$59)|0);
    $61 = ($60|0)==(0);
    if (!($61)) {
     break;
    }
    $0 = 0;
    $70 = $0;
    STACKTOP = sp;return ($70|0);
   } else {
    label = 21;
   }
  } else {
   label = 21;
  }
 } while(0);
 do {
  if ((label|0) == 21) {
   $62 = $1;
   $63 = (($62) + 12|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($64|0)!=(0|0);
   if (!($65)) {
    $66 = $2;
    $67 = (($66) + 12|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ($68|0)!=(0|0);
    if (!($69)) {
     break;
    }
   }
   $0 = 0;
   $70 = $0;
   STACKTOP = sp;return ($70|0);
  }
 } while(0);
 $0 = 1;
 $70 = $0;
 STACKTOP = sp;return ($70|0);
}
function _node_same_address($node1,$node2) {
 $node1 = $node1|0;
 $node2 = $node2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $node1;
 $2 = $node2;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(44);
 do {
  if ($5) {
   $6 = $2;
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)!=(68);
   if ($8) {
    $0 = 0;
    break;
   }
   $9 = $1;
   $10 = (($9) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = $2;
   $13 = (($12) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($11|0)!=($14|0);
   if ($15) {
    $0 = 0;
    break;
   } else {
    $0 = 1;
    break;
   }
  } else {
   $16 = $1;
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(45);
   if ($18) {
    $19 = $2;
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)!=(68);
    if ($21) {
     $0 = 0;
     break;
    }
    $22 = $1;
    $23 = (($22) + 16|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $2;
    $26 = (($25) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($24|0)!=($27|0);
    if ($28) {
     $0 = 0;
     break;
    } else {
     $0 = 1;
     break;
    }
   }
   $29 = $1;
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(52);
   if ($31) {
    $32 = $1;
    $33 = (($32) + 8|0);
    $34 = HEAP32[$33>>2]|0;
    $1 = $34;
   } else {
    $35 = $1;
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)==(53);
    if (!($37)) {
     $0 = 0;
     break;
    }
    $38 = $1;
    $39 = (($38) + 8|0);
    $40 = HEAP32[$39>>2]|0;
    $1 = $40;
   }
   $41 = $1;
   $42 = $2;
   $43 = (_node_same_tree($41,$42)|0);
   $0 = $43;
  }
 } while(0);
 $44 = $0;
 STACKTOP = sp;return ($44|0);
}
function _is_power_of_two($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 $2 = $1;
 $3 = ($2|0)==(2);
 if (!($3)) {
  $4 = $1;
  $5 = ($4|0)==(4);
  if (!($5)) {
   $6 = $1;
   $7 = ($6|0)==(8);
   if (!($7)) {
    $8 = $1;
    $9 = ($8|0)==(16);
    if (!($9)) {
     $10 = $1;
     $11 = ($10|0)==(32);
     if (!($11)) {
      $12 = $1;
      $13 = ($12|0)==(64);
      if (!($13)) {
       $14 = $1;
       $15 = ($14|0)==(128);
       if (!($15)) {
        $16 = $1;
        $17 = ($16|0)==(256);
        if (!($17)) {
         $18 = $1;
         $19 = ($18|0)==(512);
         if (!($19)) {
          $20 = $1;
          $21 = ($20|0)==(1024);
          if (!($21)) {
           $22 = $1;
           $23 = ($22|0)==(2048);
           if (!($23)) {
            $24 = $1;
            $25 = ($24|0)==(4096);
            if (!($25)) {
             $26 = $1;
             $27 = ($26|0)==(8192);
             if (!($27)) {
              $28 = $1;
              $29 = ($28|0)==(16384);
              if (!($29)) {
               $30 = $1;
               $31 = ($30|0)==(32768);
               if (!($31)) {
                $0 = 0;
                $32 = $0;
                STACKTOP = sp;return ($32|0);
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $0 = 1;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _is_commutative($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $type;
 $2 = $1;
 $3 = ($2|0)==(26);
 if (!($3)) {
  $4 = $1;
  $5 = ($4|0)==(27);
  if (!($5)) {
   $6 = $1;
   $7 = ($6|0)==(30);
   if (!($7)) {
    $8 = $1;
    $9 = ($8|0)==(31);
    if (!($9)) {
     $10 = $1;
     $11 = ($10|0)==(0);
     if (!($11)) {
      $12 = $1;
      $13 = ($12|0)==(1);
      if (!($13)) {
       $14 = $1;
       $15 = ($14|0)==(4);
       if (!($15)) {
        $16 = $1;
        $17 = ($16|0)==(5);
        if (!($17)) {
         $18 = $1;
         $19 = ($18|0)==(2);
         if (!($19)) {
          $20 = $1;
          $21 = ($20|0)==(3);
          if (!($21)) {
           $22 = $1;
           $23 = ($22|0)==(6);
           if (!($23)) {
            $24 = $1;
            $25 = ($24|0)==(7);
            if (!($25)) {
             $26 = $1;
             $27 = ($26|0)==(8);
             if (!($27)) {
              $28 = $1;
              $29 = ($28|0)==(9);
              if (!($29)) {
               $0 = 0;
               $30 = $0;
               STACKTOP = sp;return ($30|0);
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $0 = 1;
 $30 = $0;
 STACKTOP = sp;return ($30|0);
}
function _node_create($type,$value,$left,$right) {
 $type = $type|0;
 $value = $value|0;
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $98 = 0, $99 = 0, $extract = 0, $new_node = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $type;
 $2 = $value;
 $3 = $left;
 $4 = $right;
 $5 = $1;
 switch ($5|0) {
 case 24: case 22: case 20: case 18:  {
  $6 = $3;
  $7 = (_node_create(50,128,0,0)|0);
  $8 = (_node_create(2,0,$6,$7)|0);
  $3 = $8;
  $9 = $4;
  $10 = (_node_create(50,128,0,0)|0);
  $11 = (_node_create(2,0,$9,$10)|0);
  $4 = $11;
  $12 = $1;
  $13 = ($12|0)==(18);
  if ($13) {
   $1 = 10;
  } else {
   $14 = $1;
   $15 = ($14|0)==(20);
   if ($15) {
    $1 = 12;
   } else {
    $16 = $1;
    $17 = ($16|0)==(22);
    if ($17) {
     $1 = 14;
    } else {
     $18 = $1;
     $19 = ($18|0)==(24);
     if ($19) {
      $1 = 16;
     }
    }
   }
  }
  break;
 }
 case 25: case 23: case 21: case 19:  {
  $20 = $3;
  $21 = (_node_create(51,32768,0,0)|0);
  $22 = (_node_create(3,0,$20,$21)|0);
  $3 = $22;
  $23 = $4;
  $24 = (_node_create(51,32768,0,0)|0);
  $25 = (_node_create(3,0,$23,$24)|0);
  $4 = $25;
  $26 = $1;
  $27 = ($26|0)==(19);
  if ($27) {
   $1 = 11;
  } else {
   $28 = $1;
   $29 = ($28|0)==(21);
   if ($29) {
    $1 = 13;
   } else {
    $30 = $1;
    $31 = ($30|0)==(23);
    if ($31) {
     $1 = 15;
    } else {
     $32 = $1;
     $33 = ($32|0)==(25);
     if ($33) {
      $1 = 17;
     }
    }
   }
  }
  break;
 }
 default: {
 }
 }
 $34 = $1;
 L36: do {
  switch ($34|0) {
  case 43:  {
   $35 = $3;
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==(51);
   if ($37) {
    $38 = $3;
    HEAP32[$38>>2] = 50;
    $39 = $3;
    $40 = (($39) + 4|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $41 & 255;
    HEAP32[$40>>2] = $42;
    $43 = $3;
    $0 = $43;
    $976 = $0;
    STACKTOP = sp;return ($976|0);
   }
   $44 = $3;
   $45 = HEAP32[$44>>2]|0;
   $46 = ($45|0)==(27);
   do {
    if ($46) {
     label = 41;
    } else {
     $47 = $3;
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==(29);
     if ($49) {
      label = 41;
     } else {
      $50 = $3;
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==(5);
      if ($52) {
       label = 41;
      } else {
       $53 = $3;
       $54 = HEAP32[$53>>2]|0;
       $55 = ($54|0)==(1);
       if ($55) {
        label = 41;
       } else {
        $56 = $3;
        $57 = HEAP32[$56>>2]|0;
        $58 = ($57|0)==(3);
        if ($58) {
         label = 41;
        } else {
         $59 = $3;
         $60 = HEAP32[$59>>2]|0;
         $61 = ($60|0)==(31);
         if ($61) {
          $62 = $3;
          $63 = (($62) + 12|0);
          $64 = HEAP32[$63>>2]|0;
          $65 = HEAP32[$64>>2]|0;
          $66 = ($65|0)==(51);
          if ($66) {
           $67 = $3;
           $68 = (($67) + 12|0);
           $69 = HEAP32[$68>>2]|0;
           $70 = (($69) + 4|0);
           $71 = HEAP32[$70>>2]|0;
           $72 = $71 & 255;
           $73 = (_is_power_of_two($72)|0);
           $74 = ($73|0)!=(0);
           if ($74) {
            label = 41;
            break;
           }
          }
         }
         $75 = $3;
         $76 = HEAP32[$75>>2]|0;
         $77 = ($76|0)==(33);
         if ($77) {
          $78 = $3;
          $79 = (($78) + 12|0);
          $80 = HEAP32[$79>>2]|0;
          $81 = HEAP32[$80>>2]|0;
          $82 = ($81|0)==(51);
          if ($82) {
           $83 = $3;
           $84 = (($83) + 12|0);
           $85 = HEAP32[$84>>2]|0;
           $86 = (($85) + 4|0);
           $87 = HEAP32[$86>>2]|0;
           $88 = $87 & 255;
           $89 = (_is_power_of_two($88)|0);
           $90 = ($89|0)!=(0);
           if ($90) {
            label = 41;
           }
          }
         }
        }
       }
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 41) {
     $91 = $3;
     $92 = (($91) + 8|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = HEAP32[$93>>2]|0;
     $95 = ($94|0)==(41);
     if (!($95)) {
      $96 = $3;
      $97 = (($96) + 8|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = HEAP32[$98>>2]|0;
      $100 = ($99|0)==(42);
      if (!($100)) {
       break;
      }
     }
     $101 = $3;
     $102 = (($101) + 12|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==(51);
     if ($105) {
      $106 = $3;
      $107 = HEAP32[$106>>2]|0;
      $108 = ($107|0)==(27);
      if ($108) {
       $109 = $3;
       HEAP32[$109>>2] = 26;
      } else {
       $110 = $3;
       $111 = HEAP32[$110>>2]|0;
       $112 = ($111|0)==(29);
       if ($112) {
        $113 = $3;
        HEAP32[$113>>2] = 28;
       } else {
        $114 = $3;
        $115 = HEAP32[$114>>2]|0;
        $116 = ($115|0)==(31);
        if ($116) {
         $117 = $3;
         HEAP32[$117>>2] = 30;
        } else {
         $118 = $3;
         $119 = HEAP32[$118>>2]|0;
         $120 = ($119|0)==(33);
         if ($120) {
          $121 = $3;
          HEAP32[$121>>2] = 32;
         } else {
          $122 = $3;
          $123 = HEAP32[$122>>2]|0;
          $124 = ($123|0)==(5);
          if ($124) {
           $125 = $3;
           HEAP32[$125>>2] = 4;
          } else {
           $126 = $3;
           $127 = HEAP32[$126>>2]|0;
           $128 = ($127|0)==(1);
           if ($128) {
            $129 = $3;
            HEAP32[$129>>2] = 0;
           } else {
            $130 = $3;
            $131 = HEAP32[$130>>2]|0;
            $132 = ($131|0)==(3);
            if ($132) {
             $133 = $3;
             HEAP32[$133>>2] = 2;
            }
           }
          }
         }
        }
       }
      }
      $134 = $3;
      $135 = (($134) + 12|0);
      $136 = HEAP32[$135>>2]|0;
      HEAP32[$136>>2] = 50;
      $137 = $3;
      $138 = (($137) + 12|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = (($139) + 4|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = $141 & 255;
      HEAP32[$140>>2] = $142;
      $143 = $3;
      $144 = (($143) + 8|0);
      $145 = HEAP32[$144>>2]|0;
      $new_node = $145;
      $146 = $new_node;
      $147 = (($146) + 8|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = $3;
      $150 = (($149) + 8|0);
      HEAP32[$150>>2] = $148;
      $151 = $new_node;
      $152 = (($151) + 8|0);
      HEAP32[$152>>2] = 0;
      $153 = $new_node;
      _node_delete($153);
      $154 = $3;
      $0 = $154;
      $976 = $0;
      STACKTOP = sp;return ($976|0);
     }
    }
   } while(0);
   $155 = $3;
   $156 = HEAP32[$155>>2]|0;
   $157 = ($156|0)==(27);
   if ($157) {
    label = 73;
   } else {
    $158 = $3;
    $159 = HEAP32[$158>>2]|0;
    $160 = ($159|0)==(29);
    if ($160) {
     label = 73;
    } else {
     $161 = $3;
     $162 = HEAP32[$161>>2]|0;
     $163 = ($162|0)==(5);
     if ($163) {
      label = 73;
     } else {
      $164 = $3;
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==(1);
      if ($166) {
       label = 73;
      } else {
       $167 = $3;
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(3);
       if ($169) {
        label = 73;
       } else {
        $170 = $3;
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(31);
        if ($172) {
         $173 = $3;
         $174 = (($173) + 12|0);
         $175 = HEAP32[$174>>2]|0;
         $176 = HEAP32[$175>>2]|0;
         $177 = ($176|0)==(51);
         if ($177) {
          $178 = $3;
          $179 = (($178) + 12|0);
          $180 = HEAP32[$179>>2]|0;
          $181 = (($180) + 4|0);
          $182 = HEAP32[$181>>2]|0;
          $183 = $182 & 255;
          $184 = (_is_power_of_two($183)|0);
          $185 = ($184|0)!=(0);
          if ($185) {
           label = 73;
          }
         }
        }
       }
      }
     }
    }
   }
   if ((label|0) == 73) {
    $186 = $3;
    $187 = (($186) + 12|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = HEAP32[$188>>2]|0;
    $190 = ($189|0)==(51);
    if ($190) {
     $191 = $3;
     $192 = HEAP32[$191>>2]|0;
     $193 = ($192|0)==(27);
     if ($193) {
      $194 = $3;
      HEAP32[$194>>2] = 26;
     } else {
      $195 = $3;
      $196 = HEAP32[$195>>2]|0;
      $197 = ($196|0)==(29);
      if ($197) {
       $198 = $3;
       HEAP32[$198>>2] = 28;
      } else {
       $199 = $3;
       $200 = HEAP32[$199>>2]|0;
       $201 = ($200|0)==(31);
       if ($201) {
        $202 = $3;
        HEAP32[$202>>2] = 30;
       } else {
        $203 = $3;
        $204 = HEAP32[$203>>2]|0;
        $205 = ($204|0)==(5);
        if ($205) {
         $206 = $3;
         HEAP32[$206>>2] = 4;
        } else {
         $207 = $3;
         $208 = HEAP32[$207>>2]|0;
         $209 = ($208|0)==(1);
         if ($209) {
          $210 = $3;
          HEAP32[$210>>2] = 0;
         } else {
          $211 = $3;
          $212 = HEAP32[$211>>2]|0;
          $213 = ($212|0)==(3);
          if ($213) {
           $214 = $3;
           HEAP32[$214>>2] = 2;
          }
         }
        }
       }
      }
     }
     $215 = $3;
     $216 = (($215) + 12|0);
     $217 = HEAP32[$216>>2]|0;
     HEAP32[$217>>2] = 50;
     $218 = $3;
     $219 = (($218) + 12|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = (($220) + 4|0);
     $222 = HEAP32[$221>>2]|0;
     $223 = $222 & 255;
     HEAP32[$221>>2] = $223;
     $224 = $3;
     $extract = $224;
     $225 = $3;
     $226 = HEAP32[$225>>2]|0;
     $1 = $226;
     $227 = $3;
     $228 = (($227) + 12|0);
     $229 = HEAP32[$228>>2]|0;
     $4 = $229;
     $230 = $3;
     $231 = (($230) + 8|0);
     $232 = HEAP32[$231>>2]|0;
     $233 = (_node_create(43,0,$232,0)|0);
     $3 = $233;
     $2 = 0;
     $234 = $extract;
     $235 = (($234) + 8|0);
     HEAP32[$235>>2] = 0;
     $236 = $extract;
     $237 = (($236) + 12|0);
     HEAP32[$237>>2] = 0;
     $238 = $extract;
     _node_delete($238);
    }
   }
   $239 = $3;
   $240 = HEAP32[$239>>2]|0;
   $241 = ($240|0)==(45);
   if ($241) {
    $242 = $3;
    HEAP32[$242>>2] = 44;
    $243 = $3;
    $0 = $243;
    $976 = $0;
    STACKTOP = sp;return ($976|0);
   }
   $244 = $3;
   $245 = HEAP32[$244>>2]|0;
   $246 = ($245|0)==(41);
   if (!($246)) {
    break L36;
   }
   $247 = $3;
   $248 = (($247) + 8|0);
   $249 = HEAP32[$248>>2]|0;
   $0 = $249;
   $976 = $0;
   STACKTOP = sp;return ($976|0);
   break;
  }
  case 31:  {
   $320 = $3;
   $321 = HEAP32[$320>>2]|0;
   $322 = ($321|0)==(51);
   if ($322) {
    $323 = $4;
    $324 = HEAP32[$323>>2]|0;
    $325 = ($324|0)==(51);
    if ($325) {
     $326 = $3;
     $327 = (($326) + 4|0);
     $328 = HEAP32[$327>>2]|0;
     $329 = $4;
     $330 = (($329) + 4|0);
     $331 = HEAP32[$330>>2]|0;
     $332 = Math_imul($328, $331)|0;
     $333 = $332 & 65535;
     $334 = $3;
     $335 = (($334) + 4|0);
     HEAP32[$335>>2] = $333;
     $336 = $4;
     _node_delete($336);
     $337 = $3;
     $0 = $337;
     $976 = $0;
     STACKTOP = sp;return ($976|0);
    }
   }
   $338 = $3;
   $339 = HEAP32[$338>>2]|0;
   $340 = ($339|0)==(51);
   if ($340) {
    $341 = $3;
    $new_node = $341;
    $342 = $4;
    $3 = $342;
    $343 = $new_node;
    $4 = $343;
   }
   $344 = $4;
   $345 = HEAP32[$344>>2]|0;
   $346 = ($345|0)==(51);
   if ($346) {
    $347 = $4;
    $348 = (($347) + 4|0);
    $349 = HEAP32[$348>>2]|0;
    $350 = ($349|0)==(0);
    if ($350) {
     $351 = $3;
     _node_delete($351);
     $352 = $4;
     $0 = $352;
     $976 = $0;
     STACKTOP = sp;return ($976|0);
    }
   }
   break;
  }
  case 41:  {
   $250 = $3;
   $251 = HEAP32[$250>>2]|0;
   $252 = ($251|0)==(50);
   if (!($252)) {
    break L36;
   }
   $253 = $3;
   HEAP32[$253>>2] = 51;
   $254 = $3;
   $255 = (($254) + 4|0);
   $256 = HEAP32[$255>>2]|0;
   $257 = $256 & 255;
   HEAP32[$255>>2] = $257;
   $258 = $3;
   $0 = $258;
   $976 = $0;
   STACKTOP = sp;return ($976|0);
   break;
  }
  case 42:  {
   $259 = $3;
   $260 = HEAP32[$259>>2]|0;
   $261 = ($260|0)==(50);
   if (!($261)) {
    break L36;
   }
   $262 = $3;
   HEAP32[$262>>2] = 51;
   $263 = $3;
   $264 = (($263) + 4|0);
   $265 = HEAP32[$264>>2]|0;
   $266 = $265 & 255;
   HEAP32[$264>>2] = $266;
   $267 = $3;
   $268 = (($267) + 4|0);
   $269 = HEAP32[$268>>2]|0;
   $270 = ($269|0)>=(128);
   if ($270) {
    $271 = $3;
    $272 = (($271) + 4|0);
    $273 = HEAP32[$272>>2]|0;
    $274 = $273 | 65280;
    HEAP32[$272>>2] = $274;
   }
   $275 = $3;
   $0 = $275;
   $976 = $0;
   STACKTOP = sp;return ($976|0);
   break;
  }
  case 17: case 15: case 13: case 11: case 9: case 7:  {
   $408 = $3;
   $409 = HEAP32[$408>>2]|0;
   $410 = ($409|0)==(41);
   if ($410) {
    $411 = $4;
    $412 = HEAP32[$411>>2]|0;
    $413 = ($412|0)==(51);
    if ($413) {
     $414 = $4;
     $415 = (($414) + 4|0);
     $416 = HEAP32[$415>>2]|0;
     $417 = $416 & -256;
     $418 = ($417|0)==(0);
     if ($418) {
      $419 = $3;
      $extract = $419;
      $420 = $1;
      $421 = ($420|0)==(7);
      if ($421) {
       $1 = 6;
      } else {
       $422 = $1;
       $423 = ($422|0)==(9);
       if ($423) {
        $1 = 8;
       } else {
        $424 = $1;
        $425 = ($424|0)==(11);
        if ($425) {
         $1 = 10;
        } else {
         $426 = $1;
         $427 = ($426|0)==(13);
         if ($427) {
          $1 = 12;
         } else {
          $428 = $1;
          $429 = ($428|0)==(15);
          if ($429) {
           $1 = 14;
          } else {
           $430 = $1;
           $431 = ($430|0)==(17);
           if ($431) {
            $1 = 16;
           }
          }
         }
        }
       }
      }
      $432 = $3;
      $433 = (($432) + 8|0);
      $434 = HEAP32[$433>>2]|0;
      $3 = $434;
      $435 = $4;
      HEAP32[$435>>2] = 50;
      $436 = $extract;
      $437 = (($436) + 8|0);
      HEAP32[$437>>2] = 0;
      $438 = $extract;
      _node_delete($438);
     }
    }
   }
   break;
  }
  case 33:  {
   $353 = $3;
   $354 = HEAP32[$353>>2]|0;
   $355 = ($354|0)==(51);
   if ($355) {
    $356 = $4;
    $357 = HEAP32[$356>>2]|0;
    $358 = ($357|0)==(51);
    if ($358) {
     $359 = $3;
     $360 = (($359) + 4|0);
     $361 = HEAP32[$360>>2]|0;
     $362 = $4;
     $363 = (($362) + 4|0);
     $364 = HEAP32[$363>>2]|0;
     $365 = (($361|0) / ($364|0))&-1;
     $366 = $3;
     $367 = (($366) + 4|0);
     HEAP32[$367>>2] = $365;
     $368 = $4;
     _node_delete($368);
     $369 = $3;
     $0 = $369;
     $976 = $0;
     STACKTOP = sp;return ($976|0);
    }
   }
   $370 = $4;
   $371 = HEAP32[$370>>2]|0;
   $372 = ($371|0)==(51);
   if ($372) {
    $373 = $4;
    $374 = (($373) + 4|0);
    $375 = HEAP32[$374>>2]|0;
    $376 = ($375|0)==(1);
    if ($376) {
     $377 = $4;
     _node_delete($377);
     $378 = $3;
     $0 = $378;
     $976 = $0;
     STACKTOP = sp;return ($976|0);
    }
   }
   break;
  }
  case 38:  {
   $287 = $3;
   $288 = HEAP32[$287>>2]|0;
   $289 = ($288|0)==(51);
   if (!($289)) {
    break L36;
   }
   $290 = $3;
   $291 = (($290) + 4|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = (0 - ($292))|0;
   $294 = $293 & 65535;
   $295 = $3;
   $296 = (($295) + 4|0);
   HEAP32[$296>>2] = $294;
   $297 = $3;
   $0 = $297;
   $976 = $0;
   STACKTOP = sp;return ($976|0);
   break;
  }
  case 37:  {
   $276 = $3;
   $277 = HEAP32[$276>>2]|0;
   $278 = ($277|0)==(50);
   if (!($278)) {
    break L36;
   }
   $279 = $3;
   $280 = (($279) + 4|0);
   $281 = HEAP32[$280>>2]|0;
   $282 = (0 - ($281))|0;
   $283 = $282 & 255;
   $284 = $3;
   $285 = (($284) + 4|0);
   HEAP32[$285>>2] = $283;
   $286 = $3;
   $0 = $286;
   $976 = $0;
   STACKTOP = sp;return ($976|0);
   break;
  }
  case 35:  {
   $379 = $3;
   $380 = HEAP32[$379>>2]|0;
   $381 = ($380|0)==(51);
   if ($381) {
    $382 = $4;
    $383 = HEAP32[$382>>2]|0;
    $384 = ($383|0)==(51);
    if ($384) {
     $385 = $3;
     $386 = (($385) + 4|0);
     $387 = HEAP32[$386>>2]|0;
     $388 = $4;
     $389 = (($388) + 4|0);
     $390 = HEAP32[$389>>2]|0;
     $391 = (($387|0) % ($390|0))&-1;
     $392 = $3;
     $393 = (($392) + 4|0);
     HEAP32[$393>>2] = $391;
     $394 = $4;
     _node_delete($394);
     $395 = $3;
     $0 = $395;
     $976 = $0;
     STACKTOP = sp;return ($976|0);
    }
   }
   $396 = $4;
   $397 = HEAP32[$396>>2]|0;
   $398 = ($397|0)==(51);
   if ($398) {
    $399 = $4;
    $400 = (($399) + 4|0);
    $401 = HEAP32[$400>>2]|0;
    $402 = (_is_power_of_two($401)|0);
    $403 = ($402|0)!=(0);
    if ($403) {
     $404 = $4;
     $405 = (($404) + 4|0);
     $406 = HEAP32[$405>>2]|0;
     $407 = (($406) + -1)|0;
     HEAP32[$405>>2] = $407;
     $1 = 5;
    }
   }
   break;
  }
  case 39:  {
   $298 = $3;
   $299 = HEAP32[$298>>2]|0;
   $300 = ($299|0)==(50);
   if (!($300)) {
    break L36;
   }
   $301 = $3;
   $302 = (($301) + 4|0);
   $303 = HEAP32[$302>>2]|0;
   $304 = $303 ^ -1;
   $305 = $304 & 255;
   $306 = $3;
   $307 = (($306) + 4|0);
   HEAP32[$307>>2] = $305;
   $308 = $3;
   $0 = $308;
   $976 = $0;
   STACKTOP = sp;return ($976|0);
   break;
  }
  case 40:  {
   $309 = $3;
   $310 = HEAP32[$309>>2]|0;
   $311 = ($310|0)==(51);
   if (!($311)) {
    break L36;
   }
   $312 = $3;
   $313 = (($312) + 4|0);
   $314 = HEAP32[$313>>2]|0;
   $315 = $314 ^ -1;
   $316 = $315 & 65535;
   $317 = $3;
   $318 = (($317) + 4|0);
   HEAP32[$318>>2] = $316;
   $319 = $3;
   $0 = $319;
   $976 = $0;
   STACKTOP = sp;return ($976|0);
   break;
  }
  case 27:  {
   $439 = $3;
   $440 = HEAP32[$439>>2]|0;
   $441 = ($440|0)==(51);
   if ($441) {
    $442 = $4;
    $443 = HEAP32[$442>>2]|0;
    $444 = ($443|0)==(51);
    if ($444) {
     $445 = $3;
     $446 = (($445) + 4|0);
     $447 = HEAP32[$446>>2]|0;
     $448 = $4;
     $449 = (($448) + 4|0);
     $450 = HEAP32[$449>>2]|0;
     $451 = (($447) + ($450))|0;
     $452 = $451 & 65535;
     $453 = $3;
     $454 = (($453) + 4|0);
     HEAP32[$454>>2] = $452;
     $455 = $4;
     _node_delete($455);
     $456 = $3;
     $0 = $456;
     $976 = $0;
     STACKTOP = sp;return ($976|0);
    }
   }
   $457 = $3;
   $458 = HEAP32[$457>>2]|0;
   $459 = ($458|0)==(27);
   if ($459) {
    $460 = $3;
    $461 = (($460) + 12|0);
    $462 = HEAP32[$461>>2]|0;
    $463 = HEAP32[$462>>2]|0;
    $464 = ($463|0)==(51);
    if ($464) {
     $465 = $4;
     $466 = HEAP32[$465>>2]|0;
     $467 = ($466|0)==(51);
     if ($467) {
      $468 = $3;
      $469 = (($468) + 12|0);
      $470 = HEAP32[$469>>2]|0;
      $471 = (($470) + 4|0);
      $472 = HEAP32[$471>>2]|0;
      $473 = $4;
      $474 = (($473) + 4|0);
      $475 = HEAP32[$474>>2]|0;
      $476 = (($472) + ($475))|0;
      $477 = $476 & 65535;
      $478 = $3;
      $479 = (($478) + 12|0);
      $480 = HEAP32[$479>>2]|0;
      $481 = (($480) + 4|0);
      HEAP32[$481>>2] = $477;
      $482 = $4;
      _node_delete($482);
      $483 = $3;
      $0 = $483;
      $976 = $0;
      STACKTOP = sp;return ($976|0);
     }
    }
   }
   $484 = $3;
   $485 = HEAP32[$484>>2]|0;
   $486 = ($485|0)==(29);
   if ($486) {
    $487 = $3;
    $488 = (($487) + 12|0);
    $489 = HEAP32[$488>>2]|0;
    $490 = HEAP32[$489>>2]|0;
    $491 = ($490|0)==(51);
    if ($491) {
     $492 = $4;
     $493 = HEAP32[$492>>2]|0;
     $494 = ($493|0)==(51);
     if ($494) {
      $495 = $3;
      $496 = (($495) + 12|0);
      $497 = HEAP32[$496>>2]|0;
      $498 = (($497) + 4|0);
      $499 = HEAP32[$498>>2]|0;
      $500 = $4;
      $501 = (($500) + 4|0);
      $502 = HEAP32[$501>>2]|0;
      $503 = (($499) - ($502))|0;
      $504 = $503 & 65535;
      $505 = $3;
      $506 = (($505) + 12|0);
      $507 = HEAP32[$506>>2]|0;
      $508 = (($507) + 4|0);
      HEAP32[$508>>2] = $504;
      $509 = $4;
      _node_delete($509);
      $510 = $3;
      $0 = $510;
      $976 = $0;
      STACKTOP = sp;return ($976|0);
     }
    }
   }
   $511 = $3;
   $512 = HEAP32[$511>>2]|0;
   $513 = ($512|0)==(51);
   if ($513) {
    $514 = $3;
    $new_node = $514;
    $515 = $4;
    $3 = $515;
    $516 = $new_node;
    $4 = $516;
   }
   $517 = $4;
   $518 = HEAP32[$517>>2]|0;
   $519 = ($518|0)==(51);
   if ($519) {
    $520 = $4;
    $521 = (($520) + 4|0);
    $522 = HEAP32[$521>>2]|0;
    $523 = ($522|0)==(0);
    if ($523) {
     $524 = $4;
     _node_delete($524);
     $525 = $3;
     $0 = $525;
     $976 = $0;
     STACKTOP = sp;return ($976|0);
    }
   }
   break;
  }
  case 29:  {
   $526 = $3;
   $527 = HEAP32[$526>>2]|0;
   $528 = ($527|0)==(51);
   if ($528) {
    $529 = $4;
    $530 = HEAP32[$529>>2]|0;
    $531 = ($530|0)==(51);
    if ($531) {
     $532 = $3;
     $533 = (($532) + 4|0);
     $534 = HEAP32[$533>>2]|0;
     $535 = $4;
     $536 = (($535) + 4|0);
     $537 = HEAP32[$536>>2]|0;
     $538 = (($534) - ($537))|0;
     $539 = $538 & 65535;
     $540 = $3;
     $541 = (($540) + 4|0);
     HEAP32[$541>>2] = $539;
     $542 = $4;
     _node_delete($542);
     $543 = $3;
     $0 = $543;
     $976 = $0;
     STACKTOP = sp;return ($976|0);
    }
   }
   $544 = $3;
   $545 = HEAP32[$544>>2]|0;
   $546 = ($545|0)==(27);
   if ($546) {
    $547 = $3;
    $548 = (($547) + 12|0);
    $549 = HEAP32[$548>>2]|0;
    $550 = HEAP32[$549>>2]|0;
    $551 = ($550|0)==(51);
    if ($551) {
     $552 = $4;
     $553 = HEAP32[$552>>2]|0;
     $554 = ($553|0)==(51);
     if ($554) {
      $555 = $3;
      $556 = (($555) + 12|0);
      $557 = HEAP32[$556>>2]|0;
      $558 = (($557) + 4|0);
      $559 = HEAP32[$558>>2]|0;
      $560 = $4;
      $561 = (($560) + 4|0);
      $562 = HEAP32[$561>>2]|0;
      $563 = (($559) - ($562))|0;
      $564 = $563 & 65535;
      $565 = $3;
      $566 = (($565) + 12|0);
      $567 = HEAP32[$566>>2]|0;
      $568 = (($567) + 4|0);
      HEAP32[$568>>2] = $564;
      $569 = $4;
      _node_delete($569);
      $570 = $3;
      $0 = $570;
      $976 = $0;
      STACKTOP = sp;return ($976|0);
     }
    }
   }
   $571 = $3;
   $572 = HEAP32[$571>>2]|0;
   $573 = ($572|0)==(29);
   if ($573) {
    $574 = $3;
    $575 = (($574) + 12|0);
    $576 = HEAP32[$575>>2]|0;
    $577 = HEAP32[$576>>2]|0;
    $578 = ($577|0)==(51);
    if ($578) {
     $579 = $4;
     $580 = HEAP32[$579>>2]|0;
     $581 = ($580|0)==(51);
     if ($581) {
      $582 = $3;
      $583 = (($582) + 12|0);
      $584 = HEAP32[$583>>2]|0;
      $585 = (($584) + 4|0);
      $586 = HEAP32[$585>>2]|0;
      $587 = $4;
      $588 = (($587) + 4|0);
      $589 = HEAP32[$588>>2]|0;
      $590 = (($586) + ($589))|0;
      $591 = $590 & 65535;
      $592 = $3;
      $593 = (($592) + 12|0);
      $594 = HEAP32[$593>>2]|0;
      $595 = (($594) + 4|0);
      HEAP32[$595>>2] = $591;
      $596 = $4;
      _node_delete($596);
      $597 = $3;
      $0 = $597;
      $976 = $0;
      STACKTOP = sp;return ($976|0);
     }
    }
   }
   $598 = $4;
   $599 = HEAP32[$598>>2]|0;
   $600 = ($599|0)==(51);
   if ($600) {
    $601 = $4;
    $602 = (($601) + 4|0);
    $603 = HEAP32[$602>>2]|0;
    $604 = ($603|0)==(0);
    if ($604) {
     $605 = $4;
     _node_delete($605);
     $606 = $3;
     $0 = $606;
     $976 = $0;
     STACKTOP = sp;return ($976|0);
    }
   }
   break;
  }
  case 5:  {
   $607 = $3;
   $608 = HEAP32[$607>>2]|0;
   $609 = ($608|0)==(51);
   if ($609) {
    $610 = $4;
    $611 = HEAP32[$610>>2]|0;
    $612 = ($611|0)==(51);
    if ($612) {
     $613 = $4;
     $614 = (($613) + 4|0);
     $615 = HEAP32[$614>>2]|0;
     $616 = $3;
     $617 = (($616) + 4|0);
     $618 = HEAP32[$617>>2]|0;
     $619 = $618 & $615;
     HEAP32[$617>>2] = $619;
     $620 = $4;
     _node_delete($620);
     $621 = $3;
     $0 = $621;
     $976 = $0;
     STACKTOP = sp;return ($976|0);
    }
   }
   $622 = $3;
   $623 = HEAP32[$622>>2]|0;
   $624 = ($623|0)==(51);
   if ($624) {
    $625 = $3;
    $new_node = $625;
    $626 = $4;
    $3 = $626;
    $627 = $new_node;
    $4 = $627;
   }
   $628 = $4;
   $629 = HEAP32[$628>>2]|0;
   $630 = ($629|0)==(51);
   if ($630) {
    $631 = $4;
    $632 = (($631) + 4|0);
    $633 = HEAP32[$632>>2]|0;
    $634 = ($633|0)==(65535);
    if ($634) {
     $635 = $4;
     _node_delete($635);
     $636 = $3;
     $0 = $636;
     $976 = $0;
     STACKTOP = sp;return ($976|0);
    }
    $637 = $4;
    $638 = (($637) + 4|0);
    $639 = HEAP32[$638>>2]|0;
    $640 = ($639|0)==(0);
    if ($640) {
     $641 = $3;
     _node_delete($641);
     $642 = $4;
     $0 = $642;
     $976 = $0;
     STACKTOP = sp;return ($976|0);
    }
    $643 = $4;
    $644 = (($643) + 4|0);
    $645 = HEAP32[$644>>2]|0;
    $646 = $645 & 65280;
    $647 = ($646|0)==(0);
    if ($647) {
     $648 = $3;
     $649 = HEAP32[$648>>2]|0;
     $650 = ($649|0)==(41);
     if ($650) {
      $651 = $3;
      HEAP32[$651>>2] = 4;
      $652 = $4;
      HEAP32[$652>>2] = 50;
      $653 = $4;
      $654 = $3;
      $655 = (($654) + 12|0);
      HEAP32[$655>>2] = $653;
      $1 = 41;
      $4 = 0;
     }
    }
   }
   break;
  }
  case 1:  {
   $656 = $3;
   $657 = HEAP32[$656>>2]|0;
   $658 = ($657|0)==(51);
   if ($658) {
    $659 = $4;
    $660 = HEAP32[$659>>2]|0;
    $661 = ($660|0)==(51);
    if ($661) {
     $662 = $4;
     $663 = (($662) + 4|0);
     $664 = HEAP32[$663>>2]|0;
     $665 = $3;
     $666 = (($665) + 4|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = $667 | $664;
     HEAP32[$666>>2] = $668;
     $669 = $4;
     _node_delete($669);
     $670 = $3;
     $0 = $670;
     $976 = $0;
     STACKTOP = sp;return ($976|0);
    }
   }
   $671 = $3;
   $672 = HEAP32[$671>>2]|0;
   $673 = ($672|0)==(51);
   if ($673) {
    $674 = $3;
    $new_node = $674;
    $675 = $4;
    $3 = $675;
    $676 = $new_node;
    $4 = $676;
   }
   $677 = $4;
   $678 = HEAP32[$677>>2]|0;
   $679 = ($678|0)==(51);
   if ($679) {
    $680 = $4;
    $681 = (($680) + 4|0);
    $682 = HEAP32[$681>>2]|0;
    $683 = ($682|0)==(0);
    if ($683) {
     $684 = $4;
     _node_delete($684);
     $685 = $3;
     $0 = $685;
     $976 = $0;
     STACKTOP = sp;return ($976|0);
    }
    $686 = $4;
    $687 = (($686) + 4|0);
    $688 = HEAP32[$687>>2]|0;
    $689 = ($688|0)==(65535);
    if ($689) {
     $690 = $3;
     _node_delete($690);
     $691 = $4;
     $0 = $691;
     $976 = $0;
     STACKTOP = sp;return ($976|0);
    }
    $692 = $4;
    $693 = (($692) + 4|0);
    $694 = HEAP32[$693>>2]|0;
    $695 = $694 & 65280;
    $696 = ($695|0)==(0);
    if ($696) {
     $697 = $3;
     $698 = HEAP32[$697>>2]|0;
     $699 = ($698|0)==(41);
     if ($699) {
      $700 = $3;
      HEAP32[$700>>2] = 0;
      $701 = $4;
      HEAP32[$701>>2] = 50;
      $702 = $4;
      $703 = $3;
      $704 = (($703) + 12|0);
      HEAP32[$704>>2] = $702;
      $1 = 41;
      $4 = 0;
     }
    }
   }
   break;
  }
  case 0:  {
   $844 = $3;
   $845 = HEAP32[$844>>2]|0;
   $846 = ($845|0)==(50);
   if ($846) {
    $847 = $4;
    $848 = HEAP32[$847>>2]|0;
    $849 = ($848|0)==(50);
    if ($849) {
     $850 = $4;
     $851 = (($850) + 4|0);
     $852 = HEAP32[$851>>2]|0;
     $853 = $3;
     $854 = (($853) + 4|0);
     $855 = HEAP32[$854>>2]|0;
     $856 = $855 | $852;
     HEAP32[$854>>2] = $856;
     $857 = $4;
     _node_delete($857);
     $858 = $3;
     $0 = $858;
     $976 = $0;
     STACKTOP = sp;return ($976|0);
    }
   }
   $859 = $3;
   $860 = HEAP32[$859>>2]|0;
   $861 = ($860|0)==(50);
   if ($861) {
    $862 = $3;
    $new_node = $862;
    $863 = $4;
    $3 = $863;
    $864 = $new_node;
    $4 = $864;
   }
   $865 = $4;
   $866 = HEAP32[$865>>2]|0;
   $867 = ($866|0)==(50);
   do {
    if ($867) {
     $868 = $4;
     $869 = (($868) + 4|0);
     $870 = HEAP32[$869>>2]|0;
     $871 = ($870|0)==(0);
     if ($871) {
      $872 = $4;
      _node_delete($872);
      $873 = $3;
      $0 = $873;
      $976 = $0;
      STACKTOP = sp;return ($976|0);
     }
     $874 = $4;
     $875 = (($874) + 4|0);
     $876 = HEAP32[$875>>2]|0;
     $877 = ($876|0)==(255);
     if (!($877)) {
      break;
     }
     $878 = $3;
     _node_delete($878);
     $879 = $4;
     $0 = $879;
     $976 = $0;
     STACKTOP = sp;return ($976|0);
    }
   } while(0);
   break;
  }
  case 2:  {
   $880 = $3;
   $881 = HEAP32[$880>>2]|0;
   $882 = ($881|0)==(50);
   if ($882) {
    $883 = $4;
    $884 = HEAP32[$883>>2]|0;
    $885 = ($884|0)==(50);
    if ($885) {
     $886 = $4;
     $887 = (($886) + 4|0);
     $888 = HEAP32[$887>>2]|0;
     $889 = $3;
     $890 = (($889) + 4|0);
     $891 = HEAP32[$890>>2]|0;
     $892 = $891 ^ $888;
     HEAP32[$890>>2] = $892;
     $893 = $4;
     _node_delete($893);
     $894 = $3;
     $0 = $894;
     $976 = $0;
     STACKTOP = sp;return ($976|0);
    }
   }
   $895 = $3;
   $896 = HEAP32[$895>>2]|0;
   $897 = ($896|0)==(50);
   if ($897) {
    $898 = $3;
    $new_node = $898;
    $899 = $4;
    $3 = $899;
    $900 = $new_node;
    $4 = $900;
   }
   $901 = $4;
   $902 = HEAP32[$901>>2]|0;
   $903 = ($902|0)==(50);
   do {
    if ($903) {
     $904 = $4;
     $905 = (($904) + 4|0);
     $906 = HEAP32[$905>>2]|0;
     $907 = ($906|0)==(0);
     if (!($907)) {
      break;
     }
     $908 = $4;
     _node_delete($908);
     $909 = $3;
     $0 = $909;
     $976 = $0;
     STACKTOP = sp;return ($976|0);
    }
   } while(0);
   break;
  }
  case 26:  {
   $748 = $3;
   $749 = HEAP32[$748>>2]|0;
   $750 = ($749|0)==(50);
   if ($750) {
    $751 = $4;
    $752 = HEAP32[$751>>2]|0;
    $753 = ($752|0)==(50);
    if ($753) {
     $754 = $3;
     $755 = (($754) + 4|0);
     $756 = HEAP32[$755>>2]|0;
     $757 = $4;
     $758 = (($757) + 4|0);
     $759 = HEAP32[$758>>2]|0;
     $760 = (($756) + ($759))|0;
     $761 = $760 & 255;
     $762 = $3;
     $763 = (($762) + 4|0);
     HEAP32[$763>>2] = $761;
     $764 = $4;
     _node_delete($764);
     $765 = $3;
     $0 = $765;
     $976 = $0;
     STACKTOP = sp;return ($976|0);
    }
   }
   $766 = $3;
   $767 = HEAP32[$766>>2]|0;
   $768 = ($767|0)==(50);
   if ($768) {
    $769 = $3;
    $new_node = $769;
    $770 = $4;
    $3 = $770;
    $771 = $new_node;
    $4 = $771;
   }
   $772 = $4;
   $773 = HEAP32[$772>>2]|0;
   $774 = ($773|0)==(50);
   if ($774) {
    $775 = $4;
    $776 = (($775) + 4|0);
    $777 = HEAP32[$776>>2]|0;
    $778 = ($777|0)==(0);
    if ($778) {
     $779 = $4;
     _node_delete($779);
     $780 = $3;
     $0 = $780;
     $976 = $0;
     STACKTOP = sp;return ($976|0);
    }
   }
   break;
  }
  case 3:  {
   $705 = $3;
   $706 = HEAP32[$705>>2]|0;
   $707 = ($706|0)==(51);
   if ($707) {
    $708 = $4;
    $709 = HEAP32[$708>>2]|0;
    $710 = ($709|0)==(51);
    if ($710) {
     $711 = $4;
     $712 = (($711) + 4|0);
     $713 = HEAP32[$712>>2]|0;
     $714 = $3;
     $715 = (($714) + 4|0);
     $716 = HEAP32[$715>>2]|0;
     $717 = $716 ^ $713;
     HEAP32[$715>>2] = $717;
     $718 = $4;
     _node_delete($718);
     $719 = $3;
     $0 = $719;
     $976 = $0;
     STACKTOP = sp;return ($976|0);
    }
   }
   $720 = $3;
   $721 = HEAP32[$720>>2]|0;
   $722 = ($721|0)==(51);
   if ($722) {
    $723 = $3;
    $new_node = $723;
    $724 = $4;
    $3 = $724;
    $725 = $new_node;
    $4 = $725;
   }
   $726 = $4;
   $727 = HEAP32[$726>>2]|0;
   $728 = ($727|0)==(51);
   if ($728) {
    $729 = $4;
    $730 = (($729) + 4|0);
    $731 = HEAP32[$730>>2]|0;
    $732 = ($731|0)==(0);
    if ($732) {
     $733 = $4;
     _node_delete($733);
     $734 = $3;
     $0 = $734;
     $976 = $0;
     STACKTOP = sp;return ($976|0);
    }
    $735 = $4;
    $736 = (($735) + 4|0);
    $737 = HEAP32[$736>>2]|0;
    $738 = $737 & 65280;
    $739 = ($738|0)==(0);
    if ($739) {
     $740 = $3;
     $741 = HEAP32[$740>>2]|0;
     $742 = ($741|0)==(41);
     if ($742) {
      $743 = $3;
      HEAP32[$743>>2] = 2;
      $744 = $4;
      HEAP32[$744>>2] = 50;
      $745 = $4;
      $746 = $3;
      $747 = (($746) + 12|0);
      HEAP32[$747>>2] = $745;
      $1 = 41;
      $4 = 0;
     }
    }
   }
   break;
  }
  case 28:  {
   $781 = $3;
   $782 = HEAP32[$781>>2]|0;
   $783 = ($782|0)==(50);
   if ($783) {
    $784 = $4;
    $785 = HEAP32[$784>>2]|0;
    $786 = ($785|0)==(50);
    if ($786) {
     $787 = $3;
     $788 = (($787) + 4|0);
     $789 = HEAP32[$788>>2]|0;
     $790 = $4;
     $791 = (($790) + 4|0);
     $792 = HEAP32[$791>>2]|0;
     $793 = (($789) - ($792))|0;
     $794 = $793 & 255;
     $795 = $3;
     $796 = (($795) + 4|0);
     HEAP32[$796>>2] = $794;
     $797 = $4;
     _node_delete($797);
     $798 = $3;
     $0 = $798;
     $976 = $0;
     STACKTOP = sp;return ($976|0);
    }
   }
   $799 = $4;
   $800 = HEAP32[$799>>2]|0;
   $801 = ($800|0)==(50);
   if ($801) {
    $802 = $4;
    $803 = (($802) + 4|0);
    $804 = HEAP32[$803>>2]|0;
    $805 = ($804|0)==(0);
    if ($805) {
     $806 = $4;
     _node_delete($806);
     $807 = $3;
     $0 = $807;
     $976 = $0;
     STACKTOP = sp;return ($976|0);
    }
   }
   break;
  }
  case 4:  {
   $808 = $3;
   $809 = HEAP32[$808>>2]|0;
   $810 = ($809|0)==(50);
   if ($810) {
    $811 = $4;
    $812 = HEAP32[$811>>2]|0;
    $813 = ($812|0)==(50);
    if ($813) {
     $814 = $4;
     $815 = (($814) + 4|0);
     $816 = HEAP32[$815>>2]|0;
     $817 = $3;
     $818 = (($817) + 4|0);
     $819 = HEAP32[$818>>2]|0;
     $820 = $819 & $816;
     HEAP32[$818>>2] = $820;
     $821 = $4;
     _node_delete($821);
     $822 = $3;
     $0 = $822;
     $976 = $0;
     STACKTOP = sp;return ($976|0);
    }
   }
   $823 = $3;
   $824 = HEAP32[$823>>2]|0;
   $825 = ($824|0)==(50);
   if ($825) {
    $826 = $3;
    $new_node = $826;
    $827 = $4;
    $3 = $827;
    $828 = $new_node;
    $4 = $828;
   }
   $829 = $4;
   $830 = HEAP32[$829>>2]|0;
   $831 = ($830|0)==(50);
   do {
    if ($831) {
     $832 = $4;
     $833 = (($832) + 4|0);
     $834 = HEAP32[$833>>2]|0;
     $835 = ($834|0)==(255);
     if ($835) {
      $836 = $4;
      _node_delete($836);
      $837 = $3;
      $0 = $837;
      $976 = $0;
      STACKTOP = sp;return ($976|0);
     }
     $838 = $4;
     $839 = (($838) + 4|0);
     $840 = HEAP32[$839>>2]|0;
     $841 = ($840|0)==(0);
     if (!($841)) {
      break;
     }
     $842 = $3;
     _node_delete($842);
     $843 = $4;
     $0 = $843;
     $976 = $0;
     STACKTOP = sp;return ($976|0);
    }
   } while(0);
   break;
  }
  default: {
  }
  }
 } while(0);
 $910 = $1;
 if ((($910|0) == 14)) {
  $922 = $4;
  $923 = HEAP32[$922>>2]|0;
  $924 = ($923|0)==(50);
  if ($924) {
   $925 = $4;
   $926 = (($925) + 4|0);
   $927 = HEAP32[$926>>2]|0;
   $928 = ($927|0)<(255);
   if ($928) {
    $1 = 16;
    $929 = $4;
    $930 = (($929) + 4|0);
    $931 = HEAP32[$930>>2]|0;
    $932 = (($931) + 1)|0;
    HEAP32[$930>>2] = $932;
   }
  }
 } else if ((($910|0) == 12)) {
  $911 = $4;
  $912 = HEAP32[$911>>2]|0;
  $913 = ($912|0)==(50);
  if ($913) {
   $914 = $4;
   $915 = (($914) + 4|0);
   $916 = HEAP32[$915>>2]|0;
   $917 = ($916|0)<(255);
   if ($917) {
    $1 = 10;
    $918 = $4;
    $919 = (($918) + 4|0);
    $920 = HEAP32[$919>>2]|0;
    $921 = (($920) + 1)|0;
    HEAP32[$919>>2] = $921;
   }
  }
 } else if ((($910|0) == 13)) {
  $933 = $4;
  $934 = HEAP32[$933>>2]|0;
  $935 = ($934|0)==(51);
  if ($935) {
   $936 = $4;
   $937 = (($936) + 4|0);
   $938 = HEAP32[$937>>2]|0;
   $939 = ($938|0)<(65535);
   if ($939) {
    $1 = 11;
    $940 = $4;
    $941 = (($940) + 4|0);
    $942 = HEAP32[$941>>2]|0;
    $943 = (($942) + 1)|0;
    HEAP32[$941>>2] = $943;
   }
  }
 } else if ((($910|0) == 15)) {
  $944 = $4;
  $945 = HEAP32[$944>>2]|0;
  $946 = ($945|0)==(51);
  if ($946) {
   $947 = $4;
   $948 = (($947) + 4|0);
   $949 = HEAP32[$948>>2]|0;
   $950 = ($949|0)<(65535);
   if ($950) {
    $1 = 17;
    $951 = $4;
    $952 = (($951) + 4|0);
    $953 = HEAP32[$952>>2]|0;
    $954 = (($953) + 1)|0;
    HEAP32[$952>>2] = $954;
   }
  }
 } else {
 }
 $955 = (_malloc(28)|0);
 $new_node = $955;
 $956 = $new_node;
 $957 = ($956|0)==(0|0);
 if ($957) {
  _emit_error(55712);
  _exit(1);
  // unreachable;
 }
 $958 = $1;
 $959 = $new_node;
 HEAP32[$959>>2] = $958;
 $960 = $2;
 $961 = $new_node;
 $962 = (($961) + 4|0);
 HEAP32[$962>>2] = $960;
 $963 = $3;
 $964 = $new_node;
 $965 = (($964) + 8|0);
 HEAP32[$965>>2] = $963;
 $966 = $4;
 $967 = $new_node;
 $968 = (($967) + 12|0);
 HEAP32[$968>>2] = $966;
 $969 = $new_node;
 $970 = (($969) + 16|0);
 HEAP32[$970>>2] = 0;
 $971 = $new_node;
 $972 = (($971) + 24|0);
 HEAP32[$972>>2] = 0;
 $973 = $new_node;
 $974 = (($973) + 20|0);
 HEAP32[$974>>2] = 0;
 $975 = $new_node;
 $0 = $975;
 $976 = $0;
 STACKTOP = sp;return ($976|0);
}
function _node_delete($tree) {
 $tree = $tree|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tree;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $0;
  $8 = (($7) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  _node_delete($9);
 }
 $10 = $0;
 $11 = (($10) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $0;
  $15 = (($14) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  _node_delete($16);
 }
 $17 = $0;
 _free($17);
 STACKTOP = sp;return;
}
function _node_get_label($node,$parenthesis) {
 $node = $node|0;
 $parenthesis = $parenthesis|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $node;
 $1 = $parenthesis;
 HEAP8[33104>>0] = 0;
 $2 = $1;
 $3 = ($2|0)==(1);
 if ($3) {
  (_strcat((33104|0),(55728|0))|0);
 } else {
  $4 = $1;
  $5 = ($4|0)==(2);
  if ($5) {
   (_strcat((33104|0),(55736|0))|0);
  } else {
   $6 = $1;
   $7 = ($6|0)==(3);
   if ($7) {
    (_strcat((33104|0),(55744|0))|0);
   } else {
    $8 = $1;
    $9 = ($8|0)==(4);
    if ($9) {
     (_strcat((33104|0),(55752|0))|0);
    }
   }
  }
 }
 $10 = $0;
 $11 = (($10) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  (_strcat((33104|0),(55760|0))|0);
 } else {
  (_strcat((33104|0),(55768|0))|0);
 }
 $16 = $0;
 $17 = (($16) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 12|0);
 (_strcat((33104|0),($19|0))|0);
 $20 = $1;
 $21 = ($20|0)==(1);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 (_strcat((33104|0),(55776|0))|0);
 STACKTOP = sp;return;
}
function _node_label($node) {
 $node = $node|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $node;
 $1 = HEAP32[35640>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = $0;
  _cpuz80_node_label($3);
 }
 $4 = HEAP32[35640>>2]|0;
 $5 = ($4|0)==(1);
 if ($5) {
  $6 = $0;
  _cpu6502_node_label($6);
 }
 $7 = HEAP32[35640>>2]|0;
 $8 = ($7|0)==(2);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $0;
 _cpu9900_node_label($9);
 STACKTOP = sp;return;
}
function _node_generate($node,$decision) {
 $node = $node|0;
 $decision = $decision|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $node;
 $1 = $decision;
 $2 = HEAP32[35640>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = $0;
  $5 = $1;
  _cpuz80_node_generate($4,$5);
 }
 $6 = HEAP32[35640>>2]|0;
 $7 = ($6|0)==(1);
 if ($7) {
  $8 = $0;
  $9 = $1;
  _cpu6502_node_generate($8,$9);
 }
 $10 = HEAP32[35640>>2]|0;
 $11 = ($10|0)==(2);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $0;
 $13 = $1;
 _cpu9900_node_generate($12,$13);
 STACKTOP = sp;return;
}
function _generic_dump() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[35640>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  _cpuz80_dump();
 }
 STACKTOP = sp;return;
}
function _generic_test_8() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[35640>>2]|0;
 $1 = ($0|0)==(1);
 if ($1) {
  _cpu6502_1op(55784,55792);
 }
 $2 = HEAP32[35640>>2]|0;
 $3 = ($2|0)==(2);
 if ($3) {
  _cpu9900_2op(55800,55808,55808);
 }
 $4 = HEAP32[35640>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 _cpuz80_1op(55816,55824);
 STACKTOP = sp;return;
}
function _generic_test_16() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[35640>>2]|0;
 $1 = ($0|0)==(1);
 if ($1) {
  _cpu6502_1op(55832,55840);
  _cpu6502_1op(55848,55840);
 }
 $2 = HEAP32[35640>>2]|0;
 $3 = ($2|0)==(2);
 if ($3) {
  _cpu9900_2op(55856,55808,55808);
 }
 $4 = HEAP32[35640>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 _cpuz80_2op(55864,55824,55872);
 _cpuz80_1op(55816,55880);
 STACKTOP = sp;return;
}
function _generic_label($label) {
 $label = $label|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $label;
 $1 = HEAP32[35640>>2]|0;
 $2 = ($1|0)==(1);
 if ($2) {
  $3 = $0;
  _cpu6502_label($3);
 }
 $4 = HEAP32[35640>>2]|0;
 $5 = ($4|0)==(2);
 if ($5) {
  $6 = $0;
  _cpu9900_label($6);
 }
 $7 = HEAP32[35640>>2]|0;
 $8 = ($7|0)==(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $0;
 _cpuz80_label($9);
 STACKTOP = sp;return;
}
function _generic_call($label) {
 $label = $label|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $label;
 $1 = HEAP32[35640>>2]|0;
 $2 = ($1|0)==(1);
 if ($2) {
  $3 = $0;
  _cpu6502_1op(55888,$3);
 }
 $4 = HEAP32[35640>>2]|0;
 $5 = ($4|0)==(2);
 if ($5) {
  _cpu9900_1op(55896,55904);
  $6 = $0;
  _cpu9900_1op(55912,$6);
 }
 $7 = HEAP32[35640>>2]|0;
 $8 = ($7|0)==(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $0;
 _cpuz80_1op(55920,$9);
 STACKTOP = sp;return;
}
function _generic_return() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[35640>>2]|0;
 $1 = ($0|0)==(1);
 if ($1) {
  _cpu6502_noop(55928);
 }
 $2 = HEAP32[35640>>2]|0;
 $3 = ($2|0)==(2);
 if ($3) {
  _cpu9900_2op(55856,55936,55808);
  _cpu9900_1op(55944,55952);
 }
 $4 = HEAP32[35640>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 _cpuz80_noop(55960);
 STACKTOP = sp;return;
}
function _generic_jump($label) {
 $label = $label|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $temp = sp + 8|0;
 $0 = $label;
 $1 = HEAP32[35640>>2]|0;
 $2 = ($1|0)==(1);
 if ($2) {
  $3 = $0;
  _cpu6502_1op(55968,$3);
 }
 $4 = HEAP32[35640>>2]|0;
 $5 = ($4|0)==(2);
 if ($5) {
  $6 = $0;
  HEAP32[$vararg_buffer>>2] = $6;
  (_sprintf($temp,55976,$vararg_buffer)|0);
  _cpu9900_1op(55944,$temp);
 }
 $7 = HEAP32[35640>>2]|0;
 $8 = ($7|0)==(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $0;
 _cpuz80_1op(55984,$9);
 STACKTOP = sp;return;
}
function _generic_jump_zero($label) {
 $label = $label|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $internal_label = 0, $internal_label2 = 0, $number = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $internal_label = sp + 280|0;
 $internal_label2 = sp + 24|0;
 $0 = $label;
 $1 = HEAP32[35640>>2]|0;
 $2 = ($1|0)==(1);
 if ($2) {
  $3 = $0;
  _cpu6502_1op(55992,$3);
 }
 $4 = HEAP32[35640>>2]|0;
 $5 = ($4|0)==(2);
 if ($5) {
  $6 = HEAP32[1688>>2]|0;
  $7 = (($6) + 1)|0;
  HEAP32[1688>>2] = $7;
  $number = $6;
  $8 = $number;
  HEAP32[$vararg_buffer>>2] = $8;
  (_sprintf($internal_label,56000,$vararg_buffer)|0);
  $9 = $0;
  HEAP32[$vararg_buffer1>>2] = $9;
  (_sprintf($internal_label2,55976,$vararg_buffer1)|0);
  _cpu9900_1op(56008,$internal_label);
  _cpu9900_1op(55944,$internal_label2);
  _cpu9900_label($internal_label);
 }
 $10 = HEAP32[35640>>2]|0;
 $11 = ($10|0)==(0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $0;
 _cpuz80_2op(55984,56016,$12);
 STACKTOP = sp;return;
}
function _generic_comparison_8bit($min,$max,$label) {
 $min = $min|0;
 $max = $max|0;
 $label = $label|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $value = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer22 = sp + 16|0;
 $vararg_buffer19 = sp + 64|0;
 $vararg_buffer16 = sp + 56|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer4 = sp + 40|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $value = sp + 80|0;
 $0 = $min;
 $1 = $max;
 $2 = $label;
 $3 = $0;
 $4 = $1;
 $5 = ($3|0)==($4|0);
 if ($5) {
  $6 = HEAP32[35640>>2]|0;
  $7 = ($6|0)==(0);
  if ($7) {
   $8 = $0;
   HEAP32[$vararg_buffer>>2] = $8;
   (_sprintf($value,56024,$vararg_buffer)|0);
   _cpuz80_1op(56032,$value);
   $9 = $2;
   _cpuz80_2op(55984,56040,$9);
  }
  $10 = HEAP32[35640>>2]|0;
  $11 = ($10|0)==(1);
  if ($11) {
   $12 = $0;
   HEAP32[$vararg_buffer1>>2] = $12;
   (_sprintf($value,56048,$vararg_buffer1)|0);
   _cpu6502_1op(55784,$value);
   $13 = $2;
   _cpu6502_1op(56056,$13);
  }
  $14 = HEAP32[35640>>2]|0;
  $15 = ($14|0)==(2);
  if ($15) {
   $16 = $0;
   $17 = $16<<8;
   HEAP32[$vararg_buffer4>>2] = $17;
   (_sprintf($value,56024,$vararg_buffer4)|0);
   _cpu9900_2op(56064,55808,$value);
   $18 = $2;
   _cpu9900_1op(56008,$18);
  }
  STACKTOP = sp;return;
 } else {
  $19 = HEAP32[35640>>2]|0;
  $20 = ($19|0)==(0);
  if ($20) {
   $21 = $0;
   HEAP32[$vararg_buffer7>>2] = $21;
   (_sprintf($value,56024,$vararg_buffer7)|0);
   _cpuz80_1op(56032,$value);
   $22 = $2;
   _cpuz80_2op(55984,56072,$22);
   $23 = $1;
   $24 = (($23) + 1)|0;
   HEAP32[$vararg_buffer10>>2] = $24;
   (_sprintf($value,56024,$vararg_buffer10)|0);
   _cpuz80_1op(56032,$value);
   $25 = $2;
   _cpuz80_2op(55984,56080,$25);
  }
  $26 = HEAP32[35640>>2]|0;
  $27 = ($26|0)==(1);
  if ($27) {
   $28 = $0;
   HEAP32[$vararg_buffer13>>2] = $28;
   (_sprintf($value,56048,$vararg_buffer13)|0);
   _cpu6502_1op(55784,$value);
   $29 = $2;
   _cpu6502_1op(56088,$29);
   $30 = $1;
   $31 = (($30) + 1)|0;
   HEAP32[$vararg_buffer16>>2] = $31;
   (_sprintf($value,56048,$vararg_buffer16)|0);
   _cpu6502_1op(55784,$value);
   $32 = $2;
   _cpu6502_1op(56096,$32);
  }
  $33 = HEAP32[35640>>2]|0;
  $34 = ($33|0)==(2);
  if (!($34)) {
   STACKTOP = sp;return;
  }
  $35 = $0;
  $36 = $35<<8;
  HEAP32[$vararg_buffer19>>2] = $36;
  (_sprintf($value,56024,$vararg_buffer19)|0);
  _cpu9900_2op(56064,55808,$value);
  $37 = $2;
  _cpu9900_1op(56104,$37);
  $38 = $1;
  $39 = $38<<8;
  HEAP32[$vararg_buffer22>>2] = $39;
  (_sprintf($value,56024,$vararg_buffer22)|0);
  _cpu9900_2op(56064,55808,$value);
  $40 = $2;
  _cpu9900_1op(56112,$40);
  STACKTOP = sp;return;
 }
}
function _generic_comparison_16bit($min,$max,$label) {
 $min = $min|0;
 $max = $max|0;
 $label = $label|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $value = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0;
 var $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer31 = sp + 24|0;
 $vararg_buffer28 = sp + 88|0;
 $vararg_buffer25 = sp + 80|0;
 $vararg_buffer22 = sp + 72|0;
 $vararg_buffer19 = sp + 64|0;
 $vararg_buffer16 = sp + 32|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 48|0;
 $vararg_buffer7 = sp + 56|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $value = sp + 104|0;
 $0 = $min;
 $1 = $max;
 $2 = $label;
 $3 = $0;
 $4 = $1;
 $5 = ($3|0)==($4|0);
 if ($5) {
  $6 = HEAP32[35640>>2]|0;
  $7 = ($6|0)==(0);
  if ($7) {
   $8 = $0;
   HEAP32[$vararg_buffer>>2] = $8;
   (_sprintf($value,56024,$vararg_buffer)|0);
   _cpuz80_2op(55864,56120,$value);
   _cpuz80_1op(55816,55824);
   _cpuz80_2op(56128,56136,56120);
   _cpuz80_2op(56144,56136,56120);
   $9 = $2;
   _cpuz80_2op(55984,56040,$9);
  }
  $10 = HEAP32[35640>>2]|0;
  $11 = ($10|0)==(1);
  if ($11) {
   $12 = $0;
   $13 = $12 & 255;
   HEAP32[$vararg_buffer1>>2] = $13;
   (_sprintf($value,56048,$vararg_buffer1)|0);
   _cpu6502_1op(55784,$value);
   $14 = $2;
   _cpu6502_1op(56056,$14);
   $15 = $0;
   $16 = $15 >> 8;
   $17 = $16 & 255;
   HEAP32[$vararg_buffer4>>2] = $17;
   (_sprintf($value,56048,$vararg_buffer4)|0);
   _cpu6502_1op(56152,$value);
   $18 = $2;
   _cpu6502_1op(56056,$18);
  }
  $19 = HEAP32[35640>>2]|0;
  $20 = ($19|0)==(2);
  if ($20) {
   $21 = $0;
   HEAP32[$vararg_buffer7>>2] = $21;
   (_sprintf($value,56024,$vararg_buffer7)|0);
   _cpu9900_2op(56064,55808,$value);
   $22 = $2;
   _cpu9900_1op(56008,$22);
  }
  STACKTOP = sp;return;
 } else {
  $23 = HEAP32[35640>>2]|0;
  $24 = ($23|0)==(0);
  if ($24) {
   $25 = $0;
   HEAP32[$vararg_buffer10>>2] = $25;
   (_sprintf($value,56024,$vararg_buffer10)|0);
   _cpuz80_2op(55864,56120,$value);
   _cpuz80_1op(55816,55824);
   _cpuz80_2op(56128,56136,56120);
   _cpuz80_2op(56144,56136,56120);
   $26 = $2;
   _cpuz80_2op(55984,56072,$26);
   $27 = $1;
   $28 = (($27) + 1)|0;
   HEAP32[$vararg_buffer13>>2] = $28;
   (_sprintf($value,56024,$vararg_buffer13)|0);
   _cpuz80_2op(55864,56120,$value);
   _cpuz80_2op(56128,56136,56120);
   _cpuz80_2op(56144,56136,56120);
   $29 = $2;
   _cpuz80_2op(55984,56080,$29);
  }
  $30 = HEAP32[35640>>2]|0;
  $31 = ($30|0)==(1);
  if ($31) {
   _cpu6502_noop(56160);
   _cpu6502_noop(56168);
   $32 = $0;
   $33 = $32 & 255;
   HEAP32[$vararg_buffer16>>2] = $33;
   (_sprintf($value,56048,$vararg_buffer16)|0);
   _cpu6502_1op(56128,$value);
   _cpu6502_noop(56176);
   $34 = $0;
   $35 = $34 >> 8;
   $36 = $35 & 255;
   HEAP32[$vararg_buffer19>>2] = $36;
   (_sprintf($value,56048,$vararg_buffer19)|0);
   _cpu6502_1op(56128,$value);
   _cpu6502_noop(56184);
   $37 = $2;
   _cpu6502_1op(56088,$37);
   _cpu6502_noop(56160);
   $38 = $1;
   $39 = (($38) + 1)|0;
   $40 = $39 & 255;
   HEAP32[$vararg_buffer22>>2] = $40;
   (_sprintf($value,56048,$vararg_buffer22)|0);
   _cpu6502_1op(56128,$value);
   _cpu6502_noop(56176);
   $41 = $1;
   $42 = (($41) + 1)|0;
   $43 = $42 >> 8;
   $44 = $43 & 255;
   HEAP32[$vararg_buffer25>>2] = $44;
   (_sprintf($value,56048,$vararg_buffer25)|0);
   _cpu6502_1op(56128,$value);
   _cpu6502_noop(56184);
   $45 = $2;
   _cpu6502_1op(56096,$45);
  }
  $46 = HEAP32[35640>>2]|0;
  $47 = ($46|0)==(2);
  if (!($47)) {
   STACKTOP = sp;return;
  }
  $48 = $0;
  HEAP32[$vararg_buffer28>>2] = $48;
  (_sprintf($value,56024,$vararg_buffer28)|0);
  _cpu9900_2op(56064,55808,$value);
  $49 = $2;
  _cpu9900_1op(56104,$49);
  $50 = $1;
  HEAP32[$vararg_buffer31>>2] = $50;
  (_sprintf($value,56024,$vararg_buffer31)|0);
  _cpu9900_2op(56064,55808,$value);
  $51 = $2;
  _cpu9900_1op(56112,$51);
  STACKTOP = sp;return;
 }
}
function _generic_interrupt_disable() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2808>>2]|0;
 $1 = (1016 + (($0*48)|0)|0);
 $2 = (($1) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  _generic_call(56192);
  STACKTOP = sp;return;
 }
 $5 = HEAP32[35640>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  _cpuz80_noop(56200);
 } else {
  $7 = HEAP32[35640>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   _cpu6502_noop(56208);
  } else {
   $9 = HEAP32[35640>>2]|0;
   $10 = ($9|0)==(2);
   if ($10) {
    _cpu9900_1op(56216,56224);
   }
  }
 }
 STACKTOP = sp;return;
}
function _generic_interrupt_enable() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2808>>2]|0;
 $1 = (1016 + (($0*48)|0)|0);
 $2 = (($1) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  _generic_call(56232);
  STACKTOP = sp;return;
 }
 $5 = HEAP32[35640>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  _cpuz80_noop(56240);
 } else {
  $7 = HEAP32[35640>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   _cpu6502_noop(56248);
  } else {
   $9 = HEAP32[35640>>2]|0;
   $10 = ($9|0)==(2);
   if ($10) {
    _cpu9900_1op(56216,56256);
   }
  }
 }
 STACKTOP = sp;return;
}
function _cpu6502_label($label) {
 $label = $label|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $label;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 (_sprintf(56264,57288,$vararg_buffer)|0);
 _cpu6502_emit_line();
 HEAP8[57296>>0] = 0;
 HEAP8[58320>>0] = 0;
 HEAP8[59344>>0] = 0;
 HEAP32[60368>>2] = 0;
 STACKTOP = sp;return;
}
function _cpu6502_emit_line() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[2824>>2]|0;
 HEAP32[$vararg_buffer>>2] = 56264;
 (_fprintf(($0|0),(62296|0),($vararg_buffer|0))|0);
 STACKTOP = sp;return;
}
function _cpu6502_empty() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[57296>>0] = 0;
 HEAP8[58320>>0] = 0;
 HEAP8[59344>>0] = 0;
 HEAP32[60368>>2] = 0;
 STACKTOP = sp;return;
}
function _cpu6502_noop($mnemonic) {
 $mnemonic = $mnemonic|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $mnemonic;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 (_sprintf(56264,60376,$vararg_buffer)|0);
 _cpu6502_emit_line();
 $2 = $0;
 $3 = (_strcmp($2,60384)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = $0;
  $6 = (_strcmp($5,60392)|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = $0;
   $9 = (_strcmp($8,60400)|0);
   $10 = ($9|0)==(0);
   if (!($10)) {
    $11 = $0;
    $12 = (_strcmp($11,60408)|0);
    $13 = ($12|0)==(0);
    if (!($13)) {
     $14 = $0;
     $15 = (_strcmp($14,60416)|0);
     $16 = ($15|0)==(0);
     if (!($16)) {
      $17 = $0;
      $18 = (_strcmp($17,60424)|0);
      $19 = ($18|0)==(0);
      if ($19) {
       HEAP8[57296>>0] = 0;
       HEAP32[60368>>2] = 1;
      } else {
       $20 = $0;
       $21 = (_strcmp($20,60432)|0);
       $22 = ($21|0)==(0);
       if ($22) {
        (_strcpy((58320|0),(57296|0))|0);
        HEAP32[60368>>2] = 1;
       } else {
        $23 = $0;
        $24 = (_strcmp($23,60440)|0);
        $25 = ($24|0)==(0);
        if ($25) {
         (_strcpy((59344|0),(57296|0))|0);
         HEAP32[60368>>2] = 1;
        } else {
         $26 = $0;
         $27 = (_strcmp($26,60448)|0);
         $28 = ($27|0)==(0);
         if ($28) {
          (_strcpy((57296|0),(58320|0))|0);
          HEAP32[60368>>2] = 1;
         } else {
          $29 = $0;
          $30 = (_strcmp($29,60456)|0);
          $31 = ($30|0)==(0);
          if ($31) {
           (_strcpy((57296|0),(59344|0))|0);
           HEAP32[60368>>2] = 1;
          } else {
           $32 = $0;
           $33 = (_strcmp($32,60464)|0);
           $34 = ($33|0)==(0);
           if ($34) {
            label = 19;
           } else {
            $35 = $0;
            $36 = (_strcmp($35,60472)|0);
            $37 = ($36|0)==(0);
            if ($37) {
             label = 19;
            } else {
             $38 = $0;
             $39 = (_strcmp($38,60480)|0);
             $40 = ($39|0)==(0);
             do {
              if ($40) {
               label = 22;
              } else {
               $41 = $0;
               $42 = (_strcmp($41,60488)|0);
               $43 = ($42|0)==(0);
               if ($43) {
                label = 22;
                break;
               }
               $44 = $0;
               $45 = (_strcmp($44,60496)|0);
               $46 = ($45|0)==(0);
               if ($46) {
                HEAP8[57296>>0] = 0;
                HEAP8[58320>>0] = 0;
                HEAP8[59344>>0] = 0;
                HEAP32[60368>>2] = 0;
               } else {
                $47 = HEAP32[_stderr>>2]|0;
                $48 = $0;
                HEAP32[$vararg_buffer1>>2] = $48;
                (_fprintf(($47|0),(60504|0),($vararg_buffer1|0))|0);
               }
              }
             } while(0);
             if ((label|0) == 22) {
              HEAP8[59344>>0] = 0;
              HEAP32[60368>>2] = 0;
             }
            }
           }
           if ((label|0) == 19) {
            HEAP8[58320>>0] = 0;
            HEAP32[60368>>2] = 0;
           }
          }
         }
        }
       }
      }
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function _cpu6502_1op($mnemonic,$operand) {
 $mnemonic = $mnemonic|0;
 $operand = $operand|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $mnemonic;
 $1 = $operand;
 $2 = $0;
 $3 = (_strcmp($2,60544)|0);
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = $1;
   $6 = (_strcmp($5,58320)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    _cpu6502_noop(60448);
    STACKTOP = sp;return;
   }
   $8 = $1;
   $9 = (_strcmp($8,59344)|0);
   $10 = ($9|0)==(0);
   if (!($10)) {
    break;
   }
   _cpu6502_noop(60456);
   STACKTOP = sp;return;
  }
 } while(0);
 $11 = $0;
 $12 = (_strcmp($11,60552)|0);
 $13 = ($12|0)==(0);
 do {
  if ($13) {
   $14 = $1;
   $15 = (_strcmp($14,57296)|0);
   $16 = ($15|0)==(0);
   if (!($16)) {
    break;
   }
   _cpu6502_noop(60432);
   STACKTOP = sp;return;
  }
 } while(0);
 $17 = $0;
 $18 = (_strcmp($17,60560)|0);
 $19 = ($18|0)==(0);
 do {
  if ($19) {
   $20 = $1;
   $21 = (_strcmp($20,57296)|0);
   $22 = ($21|0)==(0);
   if (!($22)) {
    break;
   }
   _cpu6502_noop(60440);
   STACKTOP = sp;return;
  }
 } while(0);
 $23 = $0;
 $24 = $1;
 HEAP32[$vararg_buffer>>2] = $23;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $24;
 (_sprintf(56264,60568,$vararg_buffer)|0);
 _cpu6502_emit_line();
 $25 = $0;
 $26 = (_strcmp($25,60544)|0);
 $27 = ($26|0)==(0);
 if ($27) {
  $28 = $1;
  $29 = (_strchr($28,44)|0);
  $30 = ($29|0)!=(0|0);
  if ($30) {
   HEAP8[57296>>0] = 0;
  } else {
   $31 = $1;
   (_strcpy((57296|0),($31|0))|0);
  }
  HEAP32[60368>>2] = 1;
  STACKTOP = sp;return;
 }
 $32 = $0;
 $33 = (_strcmp($32,60552)|0);
 $34 = ($33|0)==(0);
 if ($34) {
  $35 = $1;
  $36 = (_strchr($35,44)|0);
  $37 = ($36|0)!=(0|0);
  if ($37) {
   HEAP8[58320>>0] = 0;
  } else {
   $38 = $1;
   (_strcpy((58320|0),($38|0))|0);
  }
  HEAP32[60368>>2] = 0;
 } else {
  $39 = $0;
  $40 = (_strcmp($39,60560)|0);
  $41 = ($40|0)==(0);
  if ($41) {
   $42 = $1;
   $43 = (_strchr($42,44)|0);
   $44 = ($43|0)!=(0|0);
   if ($44) {
    HEAP8[59344>>0] = 0;
   } else {
    $45 = $1;
    (_strcpy((59344|0),($45|0))|0);
   }
   HEAP32[60368>>2] = 0;
  } else {
   $46 = $0;
   $47 = (_strcmp($46,60576)|0);
   $48 = ($47|0)==(0);
   if ($48) {
    label = 33;
   } else {
    $49 = $0;
    $50 = (_strcmp($49,60584)|0);
    $51 = ($50|0)==(0);
    if ($51) {
     label = 33;
    } else {
     $52 = $0;
     $53 = (_strcmp($52,60592)|0);
     $54 = ($53|0)==(0);
     if ($54) {
      label = 33;
     } else {
      $55 = $0;
      $56 = (_strcmp($55,60600)|0);
      $57 = ($56|0)==(0);
      if ($57) {
       label = 39;
      } else {
       $58 = $0;
       $59 = (_strcmp($58,60608)|0);
       $60 = ($59|0)==(0);
       if ($60) {
        label = 39;
       } else {
        $61 = $0;
        $62 = (_strcmp($61,60616)|0);
        $63 = ($62|0)==(0);
        if ($63) {
         label = 39;
        } else {
         $64 = $0;
         $65 = (_strcmp($64,60624)|0);
         $66 = ($65|0)==(0);
         if ($66) {
          label = 39;
         } else {
          $67 = $0;
          $68 = (_strcmp($67,60632)|0);
          $69 = ($68|0)==(0);
          if ($69) {
           label = 39;
          } else {
           $70 = $0;
           $71 = (_strcmp($70,60640)|0);
           $72 = ($71|0)==(0);
           do {
            if ($72) {
             label = 44;
            } else {
             $73 = $0;
             $74 = (_strcmp($73,60648)|0);
             $75 = ($74|0)==(0);
             if ($75) {
              label = 44;
              break;
             }
             $76 = $0;
             $77 = (_strcmp($76,60656)|0);
             $78 = ($77|0)==(0);
             if ($78) {
              label = 44;
              break;
             }
             $79 = $0;
             $80 = (_strcmp($79,60664)|0);
             $81 = ($80|0)==(0);
             if ($81) {
              label = 44;
              break;
             }
             $94 = $0;
             $95 = (_strcmp($94,60680)|0);
             $96 = ($95|0)==(0);
             do {
              if ($96) {
               label = 56;
              } else {
               $97 = $0;
               $98 = (_strcmp($97,60688)|0);
               $99 = ($98|0)==(0);
               if ($99) {
                label = 56;
                break;
               }
               $109 = $0;
               $110 = (_strcmp($109,60696)|0);
               $111 = ($110|0)==(0);
               do {
                if ($111) {
                 label = 65;
                } else {
                 $112 = $0;
                 $113 = (_strcmp($112,60704)|0);
                 $114 = ($113|0)==(0);
                 if ($114) {
                  label = 65;
                  break;
                 }
                 $115 = $0;
                 $116 = (_strcmp($115,60712)|0);
                 $117 = ($116|0)==(0);
                 if ($117) {
                  $118 = $1;
                  $119 = (_strchr($118,44)|0);
                  $120 = ($119|0)!=(0|0);
                  if ($120) {
                   HEAP8[57296>>0] = 0;
                  } else {
                   $121 = $1;
                   (_strcpy((57296|0),($121|0))|0);
                  }
                 } else {
                  $122 = $0;
                  $123 = (_strcmp($122,60720)|0);
                  $124 = ($123|0)==(0);
                  if ($124) {
                   $125 = $1;
                   $126 = (_strchr($125,44)|0);
                   $127 = ($126|0)!=(0|0);
                   if ($127) {
                    HEAP8[58320>>0] = 0;
                   } else {
                    $128 = $1;
                    (_strcpy((58320|0),($128|0))|0);
                   }
                  } else {
                   $129 = $0;
                   $130 = (_strcmp($129,60728)|0);
                   $131 = ($130|0)==(0);
                   if ($131) {
                    $132 = $1;
                    $133 = (_strchr($132,44)|0);
                    $134 = ($133|0)!=(0|0);
                    if ($134) {
                     HEAP8[59344>>0] = 0;
                    } else {
                     $135 = $1;
                     (_strcpy((59344|0),($135|0))|0);
                    }
                   } else {
                    $136 = $0;
                    $137 = (_strcmp($136,60736)|0);
                    $138 = ($137|0)==(0);
                    do {
                     if ($138) {
                      label = 93;
                     } else {
                      $139 = $0;
                      $140 = (_strcmp($139,60744)|0);
                      $141 = ($140|0)==(0);
                      if ($141) {
                       label = 93;
                       break;
                      }
                      $142 = $0;
                      $143 = (_strcmp($142,60752)|0);
                      $144 = ($143|0)==(0);
                      if ($144) {
                       label = 93;
                       break;
                      }
                      $145 = $0;
                      $146 = (_strcmp($145,60760)|0);
                      $147 = ($146|0)==(0);
                      if ($147) {
                       label = 93;
                       break;
                      }
                      $148 = $0;
                      $149 = (_strcmp($148,60768)|0);
                      $150 = ($149|0)==(0);
                      if ($150) {
                       label = 93;
                       break;
                      }
                      $151 = $0;
                      $152 = (_strcmp($151,60776)|0);
                      $153 = ($152|0)==(0);
                      if ($153) {
                       label = 93;
                       break;
                      }
                      $154 = $0;
                      $155 = (_strcmp($154,60784)|0);
                      $156 = ($155|0)==(0);
                      if ($156) {
                       label = 93;
                       break;
                      }
                      $157 = $0;
                      $158 = (_strcmp($157,60792)|0);
                      $159 = ($158|0)==(0);
                      if ($159) {
                       label = 93;
                       break;
                      }
                      $160 = $0;
                      $161 = (_strcmp($160,60800)|0);
                      $162 = ($161|0)==(0);
                      if ($162) {
                       label = 93;
                       break;
                      }
                      $163 = $0;
                      $164 = (_strcmp($163,60808)|0);
                      $165 = ($164|0)==(0);
                      if ($165) {
                       label = 93;
                       break;
                      }
                      $166 = $0;
                      $167 = (_strcmp($166,60816)|0);
                      $168 = ($167|0)==(0);
                      if ($168) {
                       label = 93;
                       break;
                      }
                      $169 = $0;
                      $170 = (_strcmp($169,60824)|0);
                      $171 = ($170|0)==(0);
                      if ($171) {
                       label = 93;
                       break;
                      }
                      $172 = HEAP32[_stderr>>2]|0;
                      $173 = $0;
                      HEAP32[$vararg_buffer2>>2] = $173;
                      (_fprintf(($172|0),(60832|0),($vararg_buffer2|0))|0);
                     }
                    } while(0);
                    if ((label|0) == 93) {
                    }
                   }
                  }
                 }
                }
               } while(0);
               if ((label|0) == 65) {
                HEAP8[57296>>0] = 0;
                HEAP8[58320>>0] = 0;
                HEAP8[59344>>0] = 0;
                HEAP32[60368>>2] = 0;
               }
              }
             } while(0);
             if ((label|0) == 56) {
              $100 = HEAP8[57296>>0]|0;
              $101 = $100 << 24 >> 24;
              $102 = ($101|0)!=(35);
              if ($102) {
               HEAP8[57296>>0] = 0;
              }
              $103 = HEAP8[58320>>0]|0;
              $104 = $103 << 24 >> 24;
              $105 = ($104|0)!=(35);
              if ($105) {
               HEAP8[58320>>0] = 0;
              }
              $106 = HEAP8[59344>>0]|0;
              $107 = $106 << 24 >> 24;
              $108 = ($107|0)!=(35);
              if ($108) {
               HEAP8[59344>>0] = 0;
              }
              HEAP32[60368>>2] = 0;
             }
            }
           } while(0);
           if ((label|0) == 44) {
            $82 = $1;
            $83 = (_strcmp($82,60672)|0);
            $84 = ($83|0)==(0);
            if ($84) {
             HEAP8[57296>>0] = 0;
             HEAP32[60368>>2] = 1;
            } else {
             $85 = HEAP8[57296>>0]|0;
             $86 = $85 << 24 >> 24;
             $87 = ($86|0)!=(35);
             if ($87) {
              HEAP8[57296>>0] = 0;
             }
             $88 = HEAP8[58320>>0]|0;
             $89 = $88 << 24 >> 24;
             $90 = ($89|0)!=(35);
             if ($90) {
              HEAP8[58320>>0] = 0;
             }
             $91 = HEAP8[59344>>0]|0;
             $92 = $91 << 24 >> 24;
             $93 = ($92|0)!=(35);
             if ($93) {
              HEAP8[59344>>0] = 0;
             }
             HEAP32[60368>>2] = 0;
            }
           }
          }
         }
        }
       }
      }
      if ((label|0) == 39) {
       HEAP8[57296>>0] = 0;
       HEAP32[60368>>2] = 1;
      }
     }
    }
   }
   if ((label|0) == 33) {
    HEAP32[60368>>2] = 0;
   }
  }
 }
 STACKTOP = sp;return;
}
function _cpu6502_node_label($node) {
 $node = $node|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $node;
 STACKTOP = sp;return;
}
function _cpu6502_node_generate($node,$decision) {
 $node = $node|0;
 $decision = $decision|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0;
 var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0;
 var $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0;
 var $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0;
 var $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0;
 var $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $byte = 0;
 var $c = 0, $c1 = 0, $explore = 0, $mnemonic = 0, $p = 0, $stack = 0, $value = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer100 = 0, $vararg_buffer103 = 0, $vararg_buffer106 = 0, $vararg_buffer109 = 0, $vararg_buffer112 = 0, $vararg_buffer115 = 0, $vararg_buffer118 = 0, $vararg_buffer121 = 0, $vararg_buffer124 = 0, $vararg_buffer127 = 0;
 var $vararg_buffer13 = 0, $vararg_buffer130 = 0, $vararg_buffer133 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer52 = 0, $vararg_buffer55 = 0, $vararg_buffer58 = 0, $vararg_buffer61 = 0;
 var $vararg_buffer64 = 0, $vararg_buffer67 = 0, $vararg_buffer7 = 0, $vararg_buffer70 = 0, $vararg_buffer73 = 0, $vararg_buffer76 = 0, $vararg_buffer79 = 0, $vararg_buffer82 = 0, $vararg_buffer85 = 0, $vararg_buffer88 = 0, $vararg_buffer91 = 0, $vararg_buffer94 = 0, $vararg_buffer97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer133 = sp + 16|0;
 $vararg_buffer130 = sp + 360|0;
 $vararg_buffer127 = sp + 352|0;
 $vararg_buffer124 = sp + 344|0;
 $vararg_buffer121 = sp + 336|0;
 $vararg_buffer118 = sp + 328|0;
 $vararg_buffer115 = sp + 320|0;
 $vararg_buffer112 = sp + 312|0;
 $vararg_buffer109 = sp + 304|0;
 $vararg_buffer106 = sp + 296|0;
 $vararg_buffer103 = sp + 288|0;
 $vararg_buffer100 = sp + 280|0;
 $vararg_buffer97 = sp + 272|0;
 $vararg_buffer94 = sp + 264|0;
 $vararg_buffer91 = sp + 256|0;
 $vararg_buffer88 = sp + 248|0;
 $vararg_buffer85 = sp + 240|0;
 $vararg_buffer82 = sp + 232|0;
 $vararg_buffer79 = sp + 224|0;
 $vararg_buffer76 = sp + 24|0;
 $vararg_buffer73 = sp + 32|0;
 $vararg_buffer70 = sp + 48|0;
 $vararg_buffer67 = sp + 56|0;
 $vararg_buffer64 = sp + 64|0;
 $vararg_buffer61 = sp + 72|0;
 $vararg_buffer58 = sp + 80|0;
 $vararg_buffer55 = sp + 88|0;
 $vararg_buffer52 = sp + 96|0;
 $vararg_buffer49 = sp + 216|0;
 $vararg_buffer46 = sp + 8|0;
 $vararg_buffer43 = sp;
 $vararg_buffer40 = sp + 40|0;
 $vararg_buffer37 = sp + 104|0;
 $vararg_buffer34 = sp + 112|0;
 $vararg_buffer31 = sp + 120|0;
 $vararg_buffer28 = sp + 128|0;
 $vararg_buffer25 = sp + 136|0;
 $vararg_buffer22 = sp + 144|0;
 $vararg_buffer19 = sp + 152|0;
 $vararg_buffer16 = sp + 160|0;
 $vararg_buffer13 = sp + 168|0;
 $vararg_buffer10 = sp + 176|0;
 $vararg_buffer7 = sp + 184|0;
 $vararg_buffer4 = sp + 192|0;
 $vararg_buffer1 = sp + 200|0;
 $vararg_buffer = sp + 208|0;
 $0 = $node;
 $1 = $decision;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 do {
  switch ($3|0) {
  case 65:  {
   _cpu6502_1op(60544,61136);
   STACKTOP = sp;return;
   break;
  }
  case 51:  {
   $58 = $0;
   $59 = (($58) + 4|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $60 & 255;
   HEAP32[$vararg_buffer4>>2] = $61;
   (_sprintf(33104,60992,$vararg_buffer4)|0);
   _cpu6502_1op(60544,33104);
   $62 = $0;
   $63 = (($62) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $64 >> 8;
   HEAP32[$vararg_buffer7>>2] = $65;
   (_sprintf(33104,60992,$vararg_buffer7)|0);
   _cpu6502_1op(60560,33104);
   STACKTOP = sp;return;
   break;
  }
  case 37:  {
   $18 = $0;
   $19 = (($18) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   _cpu6502_node_generate($20,0);
   _cpu6502_1op(60624,60880);
   _cpu6502_noop(60416);
   _cpu6502_1op(60600,60888);
   STACKTOP = sp;return;
   break;
  }
  case 57:  {
   $33 = $0;
   $34 = (($33) + 8|0);
   $35 = HEAP32[$34>>2]|0;
   _cpu6502_node_generate($35,0);
   _cpu6502_1op(60696,60912);
   STACKTOP = sp;return;
   break;
  }
  case 52:  {
   $66 = $0;
   $67 = (($66) + 8|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = HEAP32[$68>>2]|0;
   $70 = ($69|0)==(68);
   if ($70) {
    $71 = $0;
    $72 = (($71) + 8|0);
    $73 = HEAP32[$72>>2]|0;
    _node_get_label($73,0);
    _cpu6502_1op(60544,33104);
    STACKTOP = sp;return;
   }
   $74 = $0;
   $75 = (($74) + 8|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = HEAP32[$76>>2]|0;
   $78 = ($77|0)==(27);
   if ($78) {
    label = 26;
   } else {
    $79 = $0;
    $80 = (($79) + 8|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==(29);
    if ($83) {
     label = 26;
    }
   }
   if ((label|0) == 26) {
    $84 = $0;
    $85 = (($84) + 8|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (($86) + 8|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)==(68);
    if ($90) {
     $91 = $0;
     $92 = (($91) + 8|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = (($93) + 12|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = HEAP32[$95>>2]|0;
     $97 = ($96|0)==(51);
     if ($97) {
      $98 = $0;
      $99 = (($98) + 8|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = (($100) + 8|0);
      $102 = HEAP32[$101>>2]|0;
      _node_get_label($102,0);
      $p = 33104;
      while(1) {
       $103 = $p;
       $104 = HEAP8[$103>>0]|0;
       $105 = ($104<<24>>24)!=(0);
       if (!($105)) {
        break;
       }
       $106 = $p;
       $107 = (($106) + 1|0);
       $p = $107;
      }
      $108 = $0;
      $109 = (($108) + 8|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = HEAP32[$110>>2]|0;
      $112 = ($111|0)==(27);
      if ($112) {
       $113 = $p;
       $114 = (($113) + 1|0);
       $p = $114;
       HEAP8[$113>>0] = 43;
      } else {
       $115 = $p;
       $116 = (($115) + 1|0);
       $p = $116;
       HEAP8[$115>>0] = 45;
      }
      $117 = $p;
      $118 = $0;
      $119 = (($118) + 8|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = (($120) + 12|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = (($122) + 4|0);
      $124 = HEAP32[$123>>2]|0;
      HEAP32[$vararg_buffer10>>2] = $124;
      (_sprintf($117,61000,$vararg_buffer10)|0);
      _cpu6502_1op(60544,33104);
      STACKTOP = sp;return;
     }
    }
   }
   $125 = $0;
   $126 = (($125) + 8|0);
   $127 = HEAP32[$126>>2]|0;
   _cpu6502_node_generate($127,0);
   _cpu6502_1op(60696,61008);
   STACKTOP = sp;return;
   break;
  }
  case 66:  {
   _cpu6502_1op(60544,60920);
   _cpu6502_1op(60560,60928);
   STACKTOP = sp;return;
   break;
  }
  case 50:  {
   $55 = $0;
   $56 = (($55) + 4|0);
   $57 = HEAP32[$56>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $57;
   (_sprintf(33104,60992,$vararg_buffer1)|0);
   _cpu6502_1op(60544,33104);
   STACKTOP = sp;return;
   break;
  }
  case 53:  {
   $128 = $0;
   $129 = (($128) + 8|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = HEAP32[$130>>2]|0;
   $132 = ($131|0)==(68);
   if ($132) {
    $133 = $0;
    $134 = (($133) + 8|0);
    $135 = HEAP32[$134>>2]|0;
    _node_get_label($135,0);
    _cpu6502_1op(60544,33104);
    (_strcat((33104|0),(60984|0))|0);
    _cpu6502_1op(60560,33104);
    STACKTOP = sp;return;
   }
   $136 = $0;
   $137 = (($136) + 8|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = HEAP32[$138>>2]|0;
   $140 = ($139|0)==(27);
   if ($140) {
    label = 40;
   } else {
    $141 = $0;
    $142 = (($141) + 8|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = HEAP32[$143>>2]|0;
    $145 = ($144|0)==(29);
    if ($145) {
     label = 40;
    }
   }
   if ((label|0) == 40) {
    $146 = $0;
    $147 = (($146) + 8|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = (($148) + 8|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = HEAP32[$150>>2]|0;
    $152 = ($151|0)==(68);
    if ($152) {
     $153 = $0;
     $154 = (($153) + 8|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = (($155) + 12|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)==(51);
     if ($159) {
      $160 = $0;
      $161 = (($160) + 8|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = (($162) + 8|0);
      $164 = HEAP32[$163>>2]|0;
      _node_get_label($164,0);
      $p = 33104;
      while(1) {
       $165 = $p;
       $166 = HEAP8[$165>>0]|0;
       $167 = ($166<<24>>24)!=(0);
       if (!($167)) {
        break;
       }
       $168 = $p;
       $169 = (($168) + 1|0);
       $p = $169;
      }
      $170 = $0;
      $171 = (($170) + 8|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==(27);
      if ($174) {
       $175 = $p;
       $176 = (($175) + 1|0);
       $p = $176;
       HEAP8[$175>>0] = 43;
      } else {
       $177 = $p;
       $178 = (($177) + 1|0);
       $p = $178;
       HEAP8[$177>>0] = 45;
      }
      $179 = $p;
      $180 = $0;
      $181 = (($180) + 8|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = (($182) + 12|0);
      $184 = HEAP32[$183>>2]|0;
      $185 = (($184) + 4|0);
      $186 = HEAP32[$185>>2]|0;
      HEAP32[$vararg_buffer13>>2] = $186;
      (_sprintf($179,61000,$vararg_buffer13)|0);
      _cpu6502_1op(60544,33104);
      (_strcat((33104|0),(60984|0))|0);
      _cpu6502_1op(60560,33104);
      STACKTOP = sp;return;
     }
    }
   }
   $187 = $0;
   $188 = (($187) + 8|0);
   $189 = HEAP32[$188>>2]|0;
   _cpu6502_node_generate($189,0);
   _cpu6502_1op(60696,61016);
   STACKTOP = sp;return;
   break;
  }
  case 68:  {
   $17 = $0;
   _node_get_label($17,2);
   _cpu6502_1op(60544,33104);
   (_strcat((33104|0),(60872|0))|0);
   _cpu6502_1op(60560,33104);
   STACKTOP = sp;return;
   break;
  }
  case 40:  {
   $27 = $0;
   $28 = (($27) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   _cpu6502_node_generate($29,0);
   _cpu6502_1op(60624,60880);
   _cpu6502_noop(60432);
   _cpu6502_noop(60456);
   _cpu6502_1op(60624,60880);
   _cpu6502_noop(60440);
   _cpu6502_noop(60448);
   STACKTOP = sp;return;
   break;
  }
  case 41:  {
   $41 = $0;
   $42 = (($41) + 8|0);
   $43 = HEAP32[$42>>2]|0;
   _cpu6502_node_generate($43,0);
   _cpu6502_1op(60560,60896);
   STACKTOP = sp;return;
   break;
  }
  case 43:  {
   $44 = $0;
   $45 = (($44) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   _cpu6502_node_generate($46,0);
   STACKTOP = sp;return;
   break;
  }
  case 45:  {
   (_strcpy((33104|0),(60976|0))|0);
   $51 = $0;
   $52 = (($51) + 16|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + 12|0);
   (_strcat((33104|0),($54|0))|0);
   _cpu6502_1op(60544,33104);
   (_strcat((33104|0),(60984|0))|0);
   _cpu6502_1op(60560,33104);
   STACKTOP = sp;return;
   break;
  }
  case 54:  {
   $190 = $0;
   $191 = (($190) + 8|0);
   $192 = HEAP32[$191>>2]|0;
   _cpu6502_node_generate($192,0);
   _cpu6502_noop(60392);
   _cpu6502_1op(60696,61024);
   _cpu6502_noop(60400);
   STACKTOP = sp;return;
   break;
  }
  case 44:  {
   (_strcpy((33104|0),(60976|0))|0);
   $47 = $0;
   $48 = (($47) + 16|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) + 12|0);
   (_strcat((33104|0),($50|0))|0);
   _cpu6502_1op(60544,33104);
   STACKTOP = sp;return;
   break;
  }
  case 58:  {
   _cpu6502_1op(60544,61032);
   STACKTOP = sp;return;
   break;
  }
  case 38:  {
   $24 = $0;
   $25 = (($24) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   _cpu6502_node_generate($26,0);
   _cpu6502_1op(60624,60880);
   _cpu6502_noop(60416);
   _cpu6502_1op(60600,60888);
   _cpu6502_noop(60432);
   _cpu6502_noop(60456);
   _cpu6502_1op(60624,60880);
   _cpu6502_1op(60600,60896);
   _cpu6502_noop(60440);
   _cpu6502_noop(60448);
   STACKTOP = sp;return;
   break;
  }
  case 39:  {
   $21 = $0;
   $22 = (($21) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   _cpu6502_node_generate($23,0);
   _cpu6502_1op(60624,60880);
   STACKTOP = sp;return;
   break;
  }
  case 59:  {
   _cpu6502_1op(60544,61048);
   STACKTOP = sp;return;
   break;
  }
  case 60:  {
   _cpu6502_1op(60544,61064);
   STACKTOP = sp;return;
   break;
  }
  case 69:  {
   $4 = $0;
   $5 = (($4) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)!=(0|0);
   if ($7) {
    $8 = $0;
    $9 = (($8) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    _cpu6502_node_generate($12,0);
   }
   $13 = $0;
   $14 = (($13) + 16|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($15) + 12|0);
   _cpu6502_1op(60696,$16);
   STACKTOP = sp;return;
   break;
  }
  case 42:  {
   $36 = $0;
   $37 = (($36) + 8|0);
   $38 = HEAP32[$37>>2]|0;
   _cpu6502_node_generate($38,0);
   $39 = HEAP32[1688>>2]|0;
   $40 = (($39) + 1)|0;
   HEAP32[1688>>2] = $40;
   HEAP32[$vararg_buffer>>2] = $39;
   (_sprintf(33104,60944,$vararg_buffer)|0);
   _cpu6502_noop(60432);
   _cpu6502_1op(60632,60952);
   _cpu6502_1op(60808,33104);
   _cpu6502_1op(60544,60880);
   _cpu6502_label(33104);
   _cpu6502_noop(60440);
   _cpu6502_noop(60448);
   STACKTOP = sp;return;
   break;
  }
  case 55:  {
   _cpu6502_1op(60544,60896);
   STACKTOP = sp;return;
   break;
  }
  case 62:  {
   _cpu6502_1op(60696,61096);
   STACKTOP = sp;return;
   break;
  }
  case 56:  {
   $30 = $0;
   $31 = (($30) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   _cpu6502_node_generate($32,0);
   _cpu6502_1op(60696,60904);
   STACKTOP = sp;return;
   break;
  }
  case 48:  {
   _cpu6502_1op(60696,60960);
   STACKTOP = sp;return;
   break;
  }
  case 49:  {
   _cpu6502_1op(60696,60968);
   STACKTOP = sp;return;
   break;
  }
  case 63:  {
   _cpu6502_1op(60544,61104);
   _cpu6502_1op(60560,61112);
   STACKTOP = sp;return;
   break;
  }
  case 61:  {
   _cpu6502_1op(60544,61080);
   STACKTOP = sp;return;
   break;
  }
  case 64:  {
   _cpu6502_1op(60544,61120);
   STACKTOP = sp;return;
   break;
  }
  case 32: case 30: case 28: case 26: case 16: case 14: case 12: case 10: case 8: case 6: case 4: case 2: case 0:  {
   $193 = $0;
   $194 = HEAP32[$193>>2]|0;
   $195 = ($194|0)==(30);
   if ($195) {
    $196 = $0;
    $197 = (($196) + 12|0);
    $198 = HEAP32[$197>>2]|0;
    $199 = HEAP32[$198>>2]|0;
    $200 = ($199|0)==(50);
    if ($200) {
     $201 = $0;
     $202 = (($201) + 12|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = (($203) + 4|0);
     $205 = HEAP32[$204>>2]|0;
     $206 = (_is_power_of_two($205)|0);
     $207 = ($206|0)!=(0);
     if ($207) {
      $208 = $0;
      $209 = (($208) + 8|0);
      $210 = HEAP32[$209>>2]|0;
      _cpu6502_node_generate($210,0);
      $211 = $0;
      $212 = (($211) + 12|0);
      $213 = HEAP32[$212>>2]|0;
      $214 = (($213) + 4|0);
      $215 = HEAP32[$214>>2]|0;
      $c = $215;
      while(1) {
       $216 = $c;
       $217 = ($216|0)>(1);
       if (!($217)) {
        break;
       }
       _cpu6502_1op(60656,60672);
       $218 = $c;
       $219 = (($218|0) / 2)&-1;
       $c = $219;
      }
      STACKTOP = sp;return;
     }
    }
   }
   $220 = $0;
   $221 = HEAP32[$220>>2]|0;
   $222 = ($221|0)==(32);
   if ($222) {
    $223 = $0;
    $224 = (($223) + 12|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = HEAP32[$225>>2]|0;
    $227 = ($226|0)==(50);
    if ($227) {
     $228 = $0;
     $229 = (($228) + 12|0);
     $230 = HEAP32[$229>>2]|0;
     $231 = (($230) + 4|0);
     $232 = HEAP32[$231>>2]|0;
     $233 = (_is_power_of_two($232)|0);
     $234 = ($233|0)!=(0);
     if ($234) {
      $235 = $0;
      $236 = (($235) + 8|0);
      $237 = HEAP32[$236>>2]|0;
      _cpu6502_node_generate($237,0);
      $238 = $0;
      $239 = (($238) + 12|0);
      $240 = HEAP32[$239>>2]|0;
      $241 = (($240) + 4|0);
      $242 = HEAP32[$241>>2]|0;
      $c = $242;
      while(1) {
       $243 = $c;
       $244 = ($243|0)>(1);
       if (!($244)) {
        break;
       }
       _cpu6502_1op(60664,60672);
       $245 = $c;
       $246 = (($245|0) / 2)&-1;
       $c = $246;
      }
      STACKTOP = sp;return;
     }
    }
   }
   $247 = $0;
   $248 = HEAP32[$247>>2]|0;
   $249 = ($248|0)==(12);
   if ($249) {
    label = 77;
   } else {
    $250 = $0;
    $251 = HEAP32[$250>>2]|0;
    $252 = ($251|0)==(14);
    if ($252) {
     label = 77;
    } else {
     $284 = $0;
     $285 = (($284) + 12|0);
     $286 = HEAP32[$285>>2]|0;
     $287 = HEAP32[$286>>2]|0;
     $288 = ($287|0)==(44);
     if ($288) {
      $289 = $0;
      $290 = (($289) + 8|0);
      $291 = HEAP32[$290>>2]|0;
      _cpu6502_node_generate($291,0);
      $292 = $0;
      $293 = (($292) + 12|0);
      $294 = HEAP32[$293>>2]|0;
      _node_get_label($294,0);
     } else {
      $295 = $0;
      $296 = (($295) + 12|0);
      $297 = HEAP32[$296>>2]|0;
      $298 = HEAP32[$297>>2]|0;
      $299 = ($298|0)==(50);
      if ($299) {
       $300 = $0;
       $301 = (($300) + 12|0);
       $302 = HEAP32[$301>>2]|0;
       $303 = (($302) + 4|0);
       $304 = HEAP32[$303>>2]|0;
       $305 = $304 & 255;
       $c = $305;
       $306 = $0;
       $307 = (($306) + 8|0);
       $308 = HEAP32[$307>>2]|0;
       _cpu6502_node_generate($308,0);
       $309 = $c;
       HEAP32[$vararg_buffer19>>2] = $309;
       (_sprintf(33104,60992,$vararg_buffer19)|0);
      } else {
       $310 = $0;
       $311 = (($310) + 8|0);
       $312 = HEAP32[$311>>2]|0;
       _cpu6502_node_generate($312,0);
       _cpu6502_noop(60384);
       $313 = $0;
       $314 = (($313) + 12|0);
       $315 = HEAP32[$314>>2]|0;
       _cpu6502_node_generate($315,0);
       _cpu6502_1op(60712,61160);
       _cpu6502_noop(60424);
       (_strcpy((33104|0),(61160|0))|0);
      }
     }
    }
   }
   if ((label|0) == 77) {
    $253 = $0;
    $254 = (($253) + 8|0);
    $255 = HEAP32[$254>>2]|0;
    $256 = HEAP32[$255>>2]|0;
    $257 = ($256|0)==(50);
    if ($257) {
     $258 = $0;
     $259 = (($258) + 12|0);
     $260 = HEAP32[$259>>2]|0;
     _cpu6502_node_generate($260,0);
     $261 = $0;
     $262 = (($261) + 8|0);
     $263 = HEAP32[$262>>2]|0;
     $264 = (($263) + 4|0);
     $265 = HEAP32[$264>>2]|0;
     $266 = $265 & 255;
     HEAP32[$vararg_buffer16>>2] = $266;
     (_sprintf(33104,60992,$vararg_buffer16)|0);
    } else {
     $267 = $0;
     $268 = (($267) + 8|0);
     $269 = HEAP32[$268>>2]|0;
     $270 = HEAP32[$269>>2]|0;
     $271 = ($270|0)==(44);
     if ($271) {
      $272 = $0;
      $273 = (($272) + 12|0);
      $274 = HEAP32[$273>>2]|0;
      _cpu6502_node_generate($274,0);
      $275 = $0;
      $276 = (($275) + 8|0);
      $277 = HEAP32[$276>>2]|0;
      _node_get_label($277,0);
     } else {
      $278 = $0;
      $279 = (($278) + 12|0);
      $280 = HEAP32[$279>>2]|0;
      _cpu6502_node_generate($280,0);
      _cpu6502_noop(60384);
      $281 = $0;
      $282 = (($281) + 8|0);
      $283 = HEAP32[$282>>2]|0;
      _cpu6502_node_generate($283,0);
      _cpu6502_1op(60712,61160);
      _cpu6502_noop(60424);
      (_strcpy((33104|0),(61160|0))|0);
     }
    }
   }
   $316 = $0;
   $317 = HEAP32[$316>>2]|0;
   $318 = ($317|0)==(0);
   if ($318) {
    _cpu6502_1op(60616,33104);
    $319 = $1;
    $320 = ($319|0)!=(0);
    if ($320) {
     HEAP32[34168>>2] = 1;
     $321 = $1;
     HEAP32[$vararg_buffer22>>2] = $321;
     (_sprintf(33104,60944,$vararg_buffer22)|0);
     _cpu6502_1op(60744,33104);
    }
   } else {
    $322 = $0;
    $323 = HEAP32[$322>>2]|0;
    $324 = ($323|0)==(2);
    if ($324) {
     _cpu6502_1op(60624,33104);
     $325 = $1;
     $326 = ($325|0)!=(0);
     if ($326) {
      HEAP32[34168>>2] = 1;
      $327 = $1;
      HEAP32[$vararg_buffer25>>2] = $327;
      (_sprintf(33104,60944,$vararg_buffer25)|0);
      _cpu6502_1op(60744,33104);
     }
    } else {
     $328 = $0;
     $329 = HEAP32[$328>>2]|0;
     $330 = ($329|0)==(4);
     if ($330) {
      _cpu6502_1op(60632,33104);
      $331 = $1;
      $332 = ($331|0)!=(0);
      if ($332) {
       HEAP32[34168>>2] = 1;
       $333 = $1;
       HEAP32[$vararg_buffer28>>2] = $333;
       (_sprintf(33104,60944,$vararg_buffer28)|0);
       _cpu6502_1op(60744,33104);
      }
     } else {
      $334 = $0;
      $335 = HEAP32[$334>>2]|0;
      $336 = ($335|0)==(6);
      if ($336) {
       $337 = (_strcmp(33104,60896)|0);
       $338 = ($337|0)!=(0);
       if ($338) {
        label = 106;
       } else {
        $339 = HEAP32[60368>>2]|0;
        $340 = ($339|0)!=(0);
        if (!($340)) {
         label = 106;
        }
       }
       if ((label|0) == 106) {
        _cpu6502_1op(60576,33104);
       }
       $341 = $1;
       $342 = ($341|0)!=(0);
       if ($342) {
        HEAP32[34168>>2] = 1;
        $343 = $1;
        HEAP32[$vararg_buffer31>>2] = $343;
        (_sprintf(33104,60944,$vararg_buffer31)|0);
        _cpu6502_1op(60760,33104);
       } else {
        $344 = HEAP32[1688>>2]|0;
        $345 = (($344) + 1)|0;
        HEAP32[1688>>2] = $345;
        HEAP32[$vararg_buffer34>>2] = $344;
        (_sprintf(33104,60944,$vararg_buffer34)|0);
        _cpu6502_1op(60736,33104);
        _cpu6502_1op(60544,60896);
        _cpu6502_1op(60816,61168);
        _cpu6502_label(33104);
        _cpu6502_1op(60544,60880);
        _cpu6502_empty();
       }
      } else {
       $346 = $0;
       $347 = HEAP32[$346>>2]|0;
       $348 = ($347|0)==(8);
       if ($348) {
        $349 = (_strcmp(33104,60896)|0);
        $350 = ($349|0)!=(0);
        if ($350) {
         label = 114;
        } else {
         $351 = HEAP32[60368>>2]|0;
         $352 = ($351|0)!=(0);
         if (!($352)) {
          label = 114;
         }
        }
        if ((label|0) == 114) {
         _cpu6502_1op(60576,33104);
        }
        $353 = $1;
        $354 = ($353|0)!=(0);
        if ($354) {
         HEAP32[34168>>2] = 1;
         $355 = $1;
         HEAP32[$vararg_buffer37>>2] = $355;
         (_sprintf(33104,60944,$vararg_buffer37)|0);
         _cpu6502_1op(60744,33104);
        } else {
         $356 = HEAP32[1688>>2]|0;
         $357 = (($356) + 1)|0;
         HEAP32[1688>>2] = $357;
         HEAP32[$vararg_buffer40>>2] = $356;
         (_sprintf(33104,60944,$vararg_buffer40)|0);
         _cpu6502_1op(60752,33104);
         _cpu6502_1op(60544,60896);
         _cpu6502_1op(60816,61168);
         _cpu6502_label(33104);
         _cpu6502_1op(60544,60880);
         _cpu6502_empty();
        }
       } else {
        $358 = $0;
        $359 = HEAP32[$358>>2]|0;
        $360 = ($359|0)==(10);
        if ($360) {
         label = 121;
        } else {
         $361 = $0;
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==(14);
         if ($363) {
          label = 121;
         } else {
          $367 = $0;
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(12);
          if ($369) {
           label = 127;
          } else {
           $370 = $0;
           $371 = HEAP32[$370>>2]|0;
           $372 = ($371|0)==(16);
           if ($372) {
            label = 127;
           } else {
            $376 = $0;
            $377 = HEAP32[$376>>2]|0;
            $378 = ($377|0)==(26);
            if ($378) {
             _cpu6502_noop(60416);
             _cpu6502_1op(60600,33104);
            } else {
             $379 = $0;
             $380 = HEAP32[$379>>2]|0;
             $381 = ($380|0)==(28);
             if ($381) {
              _cpu6502_noop(60408);
              _cpu6502_1op(60608,33104);
             }
            }
           }
          }
          if ((label|0) == 127) {
           _cpu6502_1op(60576,33104);
           $373 = $1;
           $374 = ($373|0)!=(0);
           if ($374) {
            HEAP32[34168>>2] = 1;
            $375 = $1;
            HEAP32[$vararg_buffer46>>2] = $375;
            (_sprintf(33104,60944,$vararg_buffer46)|0);
            _cpu6502_1op(60776,33104);
           } else {
            _cpu6502_1op(60544,60880);
            _cpu6502_1op(60600,60896);
            _cpu6502_1op(60624,60880);
           }
          }
         }
        }
        if ((label|0) == 121) {
         _cpu6502_1op(60576,33104);
         $364 = $1;
         $365 = ($364|0)!=(0);
         if ($365) {
          HEAP32[34168>>2] = 1;
          $366 = $1;
          HEAP32[$vararg_buffer43>>2] = $366;
          (_sprintf(33104,60944,$vararg_buffer43)|0);
          _cpu6502_1op(60792,33104);
         } else {
          _cpu6502_1op(60544,60880);
          _cpu6502_1op(60600,60896);
         }
        }
       }
      }
     }
    }
   }
   STACKTOP = sp;return;
   break;
  }
  case 67:  {
   _cpu6502_1op(60544,61144);
   STACKTOP = sp;return;
   break;
  }
  case 46:  {
   $382 = $0;
   $383 = (($382) + 8|0);
   $384 = HEAP32[$383>>2]|0;
   $385 = HEAP32[$384>>2]|0;
   $386 = ($385|0)==(26);
   if ($386) {
    label = 149;
   } else {
    $387 = $0;
    $388 = (($387) + 8|0);
    $389 = HEAP32[$388>>2]|0;
    $390 = HEAP32[$389>>2]|0;
    $391 = ($390|0)==(28);
    if ($391) {
     label = 149;
    } else {
     $392 = $0;
     $393 = (($392) + 8|0);
     $394 = HEAP32[$393>>2]|0;
     $395 = HEAP32[$394>>2]|0;
     $396 = ($395|0)==(0);
     if ($396) {
      label = 149;
     } else {
      $397 = $0;
      $398 = (($397) + 8|0);
      $399 = HEAP32[$398>>2]|0;
      $400 = HEAP32[$399>>2]|0;
      $401 = ($400|0)==(4);
      if ($401) {
       label = 149;
      } else {
       $402 = $0;
       $403 = (($402) + 8|0);
       $404 = HEAP32[$403>>2]|0;
       $405 = HEAP32[$404>>2]|0;
       $406 = ($405|0)==(2);
       if ($406) {
        label = 149;
       }
      }
     }
    }
   }
   do {
    if ((label|0) == 149) {
     $407 = $0;
     $408 = (($407) + 8|0);
     $409 = HEAP32[$408>>2]|0;
     $410 = (($409) + 12|0);
     $411 = HEAP32[$410>>2]|0;
     $412 = HEAP32[$411>>2]|0;
     $413 = ($412|0)==(50);
     if (!($413)) {
      $414 = $0;
      $415 = (($414) + 8|0);
      $416 = HEAP32[$415>>2]|0;
      $417 = (($416) + 12|0);
      $418 = HEAP32[$417>>2]|0;
      $419 = HEAP32[$418>>2]|0;
      $420 = ($419|0)==(44);
      if (!($420)) {
       break;
      }
     }
     $421 = $0;
     $422 = (($421) + 8|0);
     $423 = HEAP32[$422>>2]|0;
     $424 = (($423) + 8|0);
     $425 = HEAP32[$424>>2]|0;
     $426 = $0;
     $427 = (($426) + 12|0);
     $428 = HEAP32[$427>>2]|0;
     $429 = (_node_same_address($425,$428)|0);
     $430 = ($429|0)!=(0);
     if ($430) {
      $431 = $0;
      $432 = (($431) + 12|0);
      $433 = HEAP32[$432>>2]|0;
      $434 = HEAP32[$433>>2]|0;
      $435 = ($434|0)==(68);
      if ($435) {
       $436 = $0;
       $437 = (($436) + 12|0);
       $438 = HEAP32[$437>>2]|0;
       _node_get_label($438,0);
       (_strcpy((61176|0),(33104|0))|0);
       $c = 0;
      } else {
       $439 = $0;
       $440 = (($439) + 12|0);
       $441 = HEAP32[$440>>2]|0;
       $442 = HEAP32[$441>>2]|0;
       $443 = ($442|0)==(27);
       if ($443) {
        label = 156;
       } else {
        $444 = $0;
        $445 = (($444) + 12|0);
        $446 = HEAP32[$445>>2]|0;
        $447 = HEAP32[$446>>2]|0;
        $448 = ($447|0)==(29);
        if ($448) {
         label = 156;
        } else {
         label = 165;
        }
       }
       if ((label|0) == 156) {
        $449 = $0;
        $450 = (($449) + 12|0);
        $451 = HEAP32[$450>>2]|0;
        $452 = (($451) + 8|0);
        $453 = HEAP32[$452>>2]|0;
        $454 = HEAP32[$453>>2]|0;
        $455 = ($454|0)==(68);
        if ($455) {
         $456 = $0;
         $457 = (($456) + 12|0);
         $458 = HEAP32[$457>>2]|0;
         $459 = (($458) + 12|0);
         $460 = HEAP32[$459>>2]|0;
         $461 = HEAP32[$460>>2]|0;
         $462 = ($461|0)==(51);
         if ($462) {
          $463 = $0;
          $464 = (($463) + 12|0);
          $465 = HEAP32[$464>>2]|0;
          $466 = (($465) + 8|0);
          $467 = HEAP32[$466>>2]|0;
          _node_get_label($467,0);
          $p = 33104;
          while(1) {
           $468 = $p;
           $469 = HEAP8[$468>>0]|0;
           $470 = ($469<<24>>24)!=(0);
           if (!($470)) {
            break;
           }
           $471 = $p;
           $472 = (($471) + 1|0);
           $p = $472;
          }
          $473 = $0;
          $474 = (($473) + 12|0);
          $475 = HEAP32[$474>>2]|0;
          $476 = HEAP32[$475>>2]|0;
          $477 = ($476|0)==(27);
          if ($477) {
           $478 = $p;
           $479 = (($478) + 1|0);
           $p = $479;
           HEAP8[$478>>0] = 43;
          } else {
           $480 = $p;
           $481 = (($480) + 1|0);
           $p = $481;
           HEAP8[$480>>0] = 45;
          }
          $482 = $p;
          $483 = $0;
          $484 = (($483) + 12|0);
          $485 = HEAP32[$484>>2]|0;
          $486 = (($485) + 12|0);
          $487 = HEAP32[$486>>2]|0;
          $488 = (($487) + 4|0);
          $489 = HEAP32[$488>>2]|0;
          HEAP32[$vararg_buffer49>>2] = $489;
          (_sprintf($482,61000,$vararg_buffer49)|0);
          (_strcpy((61176|0),(33104|0))|0);
          $c = 0;
         } else {
          label = 165;
         }
        } else {
         label = 165;
        }
       }
       if ((label|0) == 165) {
        $490 = $0;
        $491 = (($490) + 12|0);
        $492 = HEAP32[$491>>2]|0;
        $493 = HEAP32[$492>>2]|0;
        $494 = ($493|0)==(27);
        if ($494) {
         $495 = $0;
         $496 = (($495) + 12|0);
         $497 = HEAP32[$496>>2]|0;
         $498 = (($497) + 8|0);
         $499 = HEAP32[$498>>2]|0;
         $500 = HEAP32[$499>>2]|0;
         $501 = ($500|0)==(68);
         if ($501) {
          $502 = $0;
          $503 = (($502) + 12|0);
          $504 = HEAP32[$503>>2]|0;
          $505 = (($504) + 12|0);
          $506 = HEAP32[$505>>2]|0;
          $507 = HEAP32[$506>>2]|0;
          $508 = ($507|0)==(41);
          if ($508) {
           $509 = $0;
           $510 = (($509) + 12|0);
           $511 = HEAP32[$510>>2]|0;
           $512 = (($511) + 12|0);
           $513 = HEAP32[$512>>2]|0;
           $514 = (($513) + 8|0);
           $515 = HEAP32[$514>>2]|0;
           $516 = HEAP32[$515>>2]|0;
           $517 = ($516|0)==(44);
           if ($517) {
            $518 = $0;
            $519 = (($518) + 12|0);
            $520 = HEAP32[$519>>2]|0;
            $521 = (($520) + 12|0);
            $522 = HEAP32[$521>>2]|0;
            $523 = (($522) + 8|0);
            $524 = HEAP32[$523>>2]|0;
            _node_get_label($524,0);
            (_strcpy((61176|0),(33104|0))|0);
            $525 = $0;
            $526 = (($525) + 12|0);
            $527 = HEAP32[$526>>2]|0;
            $528 = (($527) + 8|0);
            $529 = HEAP32[$528>>2]|0;
            _node_get_label($529,2);
            _cpu6502_1op(60544,33104);
            _cpu6502_noop(60416);
            _cpu6502_1op(60600,61176);
            _cpu6502_1op(60712,61160);
            (_strcat((33104|0),(60872|0))|0);
            _cpu6502_1op(60544,33104);
            _cpu6502_1op(60600,60896);
            _cpu6502_1op(60712,62200);
           } else {
            label = 170;
           }
          } else {
           label = 170;
          }
         } else {
          label = 170;
         }
        } else {
         label = 170;
        }
        if ((label|0) == 170) {
         $530 = $0;
         $531 = (($530) + 12|0);
         $532 = HEAP32[$531>>2]|0;
         _cpu6502_node_generate($532,0);
         _cpu6502_1op(60712,61160);
         _cpu6502_1op(60728,62200);
        }
        $c = 1;
        _cpu6502_1op(60560,60896);
        (_strcpy((61176|0),(62208|0))|0);
       }
      }
      $533 = $c;
      $534 = ($533|0)==(0);
      do {
       if ($534) {
        $535 = $0;
        $536 = (($535) + 8|0);
        $537 = HEAP32[$536>>2]|0;
        $538 = HEAP32[$537>>2]|0;
        $539 = ($538|0)==(26);
        if (!($539)) {
         $540 = $0;
         $541 = (($540) + 8|0);
         $542 = HEAP32[$541>>2]|0;
         $543 = HEAP32[$542>>2]|0;
         $544 = ($543|0)==(28);
         if (!($544)) {
          label = 185;
          break;
         }
        }
        $545 = $0;
        $546 = (($545) + 8|0);
        $547 = HEAP32[$546>>2]|0;
        $548 = (($547) + 12|0);
        $549 = HEAP32[$548>>2]|0;
        $550 = HEAP32[$549>>2]|0;
        $551 = ($550|0)==(50);
        if ($551) {
         $552 = $0;
         $553 = (($552) + 8|0);
         $554 = HEAP32[$553>>2]|0;
         $555 = (($554) + 12|0);
         $556 = HEAP32[$555>>2]|0;
         $557 = (($556) + 4|0);
         $558 = HEAP32[$557>>2]|0;
         $559 = ($558|0)<(4);
         if ($559) {
          $560 = $0;
          $561 = (($560) + 8|0);
          $562 = HEAP32[$561>>2]|0;
          $563 = (($562) + 12|0);
          $564 = HEAP32[$563>>2]|0;
          $565 = (($564) + 4|0);
          $566 = HEAP32[$565>>2]|0;
          $c = $566;
          while(1) {
           $567 = $0;
           $568 = (($567) + 8|0);
           $569 = HEAP32[$568>>2]|0;
           $570 = HEAP32[$569>>2]|0;
           $571 = ($570|0)==(26);
           if ($571) {
            _cpu6502_1op(60680,61176);
           } else {
            _cpu6502_1op(60688,61176);
           }
           $572 = $c;
           $573 = (($572) + -1)|0;
           $c = $573;
           $574 = ($573|0)!=(0);
           if (!($574)) {
            break;
           }
          }
         } else {
          label = 185;
         }
        } else {
         label = 185;
        }
       } else {
        label = 185;
       }
      } while(0);
      if ((label|0) == 185) {
       _cpu6502_1op(60544,61176);
       $575 = $0;
       $576 = (($575) + 8|0);
       $577 = HEAP32[$576>>2]|0;
       $578 = (($577) + 12|0);
       $579 = HEAP32[$578>>2]|0;
       $580 = HEAP32[$579>>2]|0;
       $581 = ($580|0)==(50);
       if ($581) {
        $582 = $0;
        $583 = (($582) + 8|0);
        $584 = HEAP32[$583>>2]|0;
        $585 = (($584) + 12|0);
        $586 = HEAP32[$585>>2]|0;
        $587 = (($586) + 4|0);
        $588 = HEAP32[$587>>2]|0;
        HEAP32[$vararg_buffer52>>2] = $588;
        (_sprintf(33104,60992,$vararg_buffer52)|0);
       } else {
        $589 = $0;
        $590 = (($589) + 8|0);
        $591 = HEAP32[$590>>2]|0;
        $592 = (($591) + 12|0);
        $593 = HEAP32[$592>>2]|0;
        $594 = HEAP32[$593>>2]|0;
        $595 = ($594|0)==(44);
        if ($595) {
         $596 = $0;
         $597 = (($596) + 8|0);
         $598 = HEAP32[$597>>2]|0;
         $599 = (($598) + 12|0);
         $600 = HEAP32[$599>>2]|0;
         _node_get_label($600,0);
        }
       }
       $601 = $0;
       $602 = (($601) + 8|0);
       $603 = HEAP32[$602>>2]|0;
       $604 = HEAP32[$603>>2]|0;
       $605 = ($604|0)==(26);
       if ($605) {
        _cpu6502_noop(60416);
        _cpu6502_1op(60600,33104);
       } else {
        $606 = $0;
        $607 = (($606) + 8|0);
        $608 = HEAP32[$607>>2]|0;
        $609 = HEAP32[$608>>2]|0;
        $610 = ($609|0)==(28);
        if ($610) {
         _cpu6502_noop(60408);
         _cpu6502_1op(60608,33104);
        } else {
         $611 = $0;
         $612 = (($611) + 8|0);
         $613 = HEAP32[$612>>2]|0;
         $614 = HEAP32[$613>>2]|0;
         $615 = ($614|0)==(0);
         if ($615) {
          _cpu6502_1op(60616,33104);
         } else {
          $616 = $0;
          $617 = (($616) + 8|0);
          $618 = HEAP32[$617>>2]|0;
          $619 = HEAP32[$618>>2]|0;
          $620 = ($619|0)==(4);
          if ($620) {
           _cpu6502_1op(60632,33104);
          } else {
           $621 = $0;
           $622 = (($621) + 8|0);
           $623 = HEAP32[$622>>2]|0;
           $624 = HEAP32[$623>>2]|0;
           $625 = ($624|0)==(2);
           if ($625) {
            _cpu6502_1op(60624,33104);
           }
          }
         }
        }
       }
       _cpu6502_1op(60712,61176);
      }
      STACKTOP = sp;return;
     }
    }
   } while(0);
   $626 = $0;
   $627 = (($626) + 12|0);
   $628 = HEAP32[$627>>2]|0;
   $629 = HEAP32[$628>>2]|0;
   $630 = ($629|0)==(68);
   do {
    if (!($630)) {
     $631 = $0;
     $632 = (($631) + 12|0);
     $633 = HEAP32[$632>>2]|0;
     $634 = HEAP32[$633>>2]|0;
     $635 = ($634|0)==(27);
     if ($635) {
      label = 209;
     } else {
      $636 = $0;
      $637 = (($636) + 12|0);
      $638 = HEAP32[$637>>2]|0;
      $639 = HEAP32[$638>>2]|0;
      $640 = ($639|0)==(29);
      if ($640) {
       label = 209;
      }
     }
     if ((label|0) == 209) {
      $641 = $0;
      $642 = (($641) + 12|0);
      $643 = HEAP32[$642>>2]|0;
      $644 = (($643) + 8|0);
      $645 = HEAP32[$644>>2]|0;
      $646 = HEAP32[$645>>2]|0;
      $647 = ($646|0)==(68);
      if ($647) {
       $648 = $0;
       $649 = (($648) + 12|0);
       $650 = HEAP32[$649>>2]|0;
       $651 = (($650) + 12|0);
       $652 = HEAP32[$651>>2]|0;
       $653 = HEAP32[$652>>2]|0;
       $654 = ($653|0)==(51);
       if ($654) {
        break;
       }
      }
     }
     $693 = $0;
     $694 = (($693) + 8|0);
     $695 = HEAP32[$694>>2]|0;
     $696 = (_cpu6502_8bit_simple($695)|0);
     $697 = ($696|0)!=(0);
     if ($697) {
      $698 = $0;
      $699 = (($698) + 12|0);
      $700 = HEAP32[$699>>2]|0;
      _cpu6502_node_generate($700,0);
      _cpu6502_1op(60712,61160);
      _cpu6502_1op(60728,62200);
      $701 = $0;
      $702 = (($701) + 8|0);
      $703 = HEAP32[$702>>2]|0;
      _cpu6502_node_generate($703,0);
      _cpu6502_1op(60560,60896);
      _cpu6502_1op(60712,62208);
     } else {
      $704 = $0;
      $705 = (($704) + 8|0);
      $706 = HEAP32[$705>>2]|0;
      _cpu6502_node_generate($706,0);
      _cpu6502_noop(60384);
      $707 = $0;
      $708 = (($707) + 12|0);
      $709 = HEAP32[$708>>2]|0;
      _cpu6502_node_generate($709,0);
      _cpu6502_1op(60712,61160);
      _cpu6502_1op(60728,62200);
      _cpu6502_noop(60424);
      _cpu6502_1op(60560,60896);
      _cpu6502_1op(60712,62208);
     }
     STACKTOP = sp;return;
    }
   } while(0);
   $655 = $0;
   $656 = (($655) + 8|0);
   $657 = HEAP32[$656>>2]|0;
   _cpu6502_node_generate($657,0);
   $658 = $0;
   $659 = (($658) + 12|0);
   $660 = HEAP32[$659>>2]|0;
   $661 = HEAP32[$660>>2]|0;
   $662 = ($661|0)==(68);
   if ($662) {
    $663 = $0;
    $664 = (($663) + 12|0);
    $665 = HEAP32[$664>>2]|0;
    _node_get_label($665,0);
   } else {
    $666 = $0;
    $667 = (($666) + 12|0);
    $668 = HEAP32[$667>>2]|0;
    $669 = (($668) + 8|0);
    $670 = HEAP32[$669>>2]|0;
    _node_get_label($670,0);
    $p = 33104;
    while(1) {
     $671 = $p;
     $672 = HEAP8[$671>>0]|0;
     $673 = ($672<<24>>24)!=(0);
     if (!($673)) {
      break;
     }
     $674 = $p;
     $675 = (($674) + 1|0);
     $p = $675;
    }
    $676 = $0;
    $677 = (($676) + 12|0);
    $678 = HEAP32[$677>>2]|0;
    $679 = HEAP32[$678>>2]|0;
    $680 = ($679|0)==(27);
    if ($680) {
     $681 = $p;
     $682 = (($681) + 1|0);
     $p = $682;
     HEAP8[$681>>0] = 43;
    } else {
     $683 = $p;
     $684 = (($683) + 1|0);
     $p = $684;
     HEAP8[$683>>0] = 45;
    }
    $685 = $p;
    $686 = $0;
    $687 = (($686) + 12|0);
    $688 = HEAP32[$687>>2]|0;
    $689 = (($688) + 12|0);
    $690 = HEAP32[$689>>2]|0;
    $691 = (($690) + 4|0);
    $692 = HEAP32[$691>>2]|0;
    HEAP32[$vararg_buffer55>>2] = $692;
    (_sprintf($685,61000,$vararg_buffer55)|0);
   }
   _cpu6502_1op(60712,33104);
   STACKTOP = sp;return;
   break;
  }
  case 47:  {
   $710 = $0;
   $711 = (($710) + 12|0);
   $712 = HEAP32[$711>>2]|0;
   $713 = HEAP32[$712>>2]|0;
   $714 = ($713|0)==(68);
   if ($714) {
    $c = 1;
   } else {
    $715 = $0;
    $716 = (($715) + 12|0);
    $717 = HEAP32[$716>>2]|0;
    $718 = HEAP32[$717>>2]|0;
    $719 = ($718|0)==(27);
    if ($719) {
     label = 229;
    } else {
     $720 = $0;
     $721 = (($720) + 12|0);
     $722 = HEAP32[$721>>2]|0;
     $723 = HEAP32[$722>>2]|0;
     $724 = ($723|0)==(29);
     if ($724) {
      label = 229;
     } else {
      label = 232;
     }
    }
    if ((label|0) == 229) {
     $725 = $0;
     $726 = (($725) + 12|0);
     $727 = HEAP32[$726>>2]|0;
     $728 = (($727) + 8|0);
     $729 = HEAP32[$728>>2]|0;
     $730 = HEAP32[$729>>2]|0;
     $731 = ($730|0)==(68);
     if ($731) {
      $732 = $0;
      $733 = (($732) + 12|0);
      $734 = HEAP32[$733>>2]|0;
      $735 = (($734) + 12|0);
      $736 = HEAP32[$735>>2]|0;
      $737 = HEAP32[$736>>2]|0;
      $738 = ($737|0)==(51);
      if ($738) {
       $c = 1;
      } else {
       label = 232;
      }
     } else {
      label = 232;
     }
    }
    if ((label|0) == 232) {
     $c = 0;
    }
   }
   $739 = $0;
   $740 = (($739) + 8|0);
   $741 = HEAP32[$740>>2]|0;
   $742 = HEAP32[$741>>2]|0;
   $743 = ($742|0)==(27);
   do {
    if ($743) {
     $744 = $0;
     $745 = (($744) + 8|0);
     $746 = HEAP32[$745>>2]|0;
     $747 = (($746) + 12|0);
     $748 = HEAP32[$747>>2]|0;
     $749 = HEAP32[$748>>2]|0;
     $750 = ($749|0)==(51);
     if ($750) {
      $751 = $c;
      $752 = ($751|0)!=(0);
      if ($752) {
       $753 = $0;
       $754 = (($753) + 8|0);
       $755 = HEAP32[$754>>2]|0;
       $756 = (($755) + 12|0);
       $757 = HEAP32[$756>>2]|0;
       $758 = (($757) + 4|0);
       $759 = HEAP32[$758>>2]|0;
       $760 = ($759|0)==(1);
       if (!($760)) {
        label = 238;
       }
      } else {
       label = 238;
      }
      if ((label|0) == 238) {
       $761 = $c;
       $762 = ($761|0)!=(0);
       if ($762) {
        break;
       }
      }
      $763 = $0;
      $764 = (($763) + 8|0);
      $765 = HEAP32[$764>>2]|0;
      $766 = (($765) + 8|0);
      $767 = HEAP32[$766>>2]|0;
      $768 = $0;
      $769 = (($768) + 12|0);
      $770 = HEAP32[$769>>2]|0;
      $771 = (_node_same_address($767,$770)|0);
      $772 = ($771|0)!=(0);
      if ($772) {
       $773 = $0;
       $774 = (($773) + 12|0);
       $775 = HEAP32[$774>>2]|0;
       $776 = HEAP32[$775>>2]|0;
       $777 = ($776|0)==(68);
       if ($777) {
        $778 = $0;
        $779 = (($778) + 12|0);
        $780 = HEAP32[$779>>2]|0;
        _node_get_label($780,0);
        $c = 0;
       } else {
        $781 = $0;
        $782 = (($781) + 12|0);
        $783 = HEAP32[$782>>2]|0;
        $784 = HEAP32[$783>>2]|0;
        $785 = ($784|0)==(27);
        if ($785) {
         label = 244;
        } else {
         $786 = $0;
         $787 = (($786) + 12|0);
         $788 = HEAP32[$787>>2]|0;
         $789 = HEAP32[$788>>2]|0;
         $790 = ($789|0)==(29);
         if ($790) {
          label = 244;
         } else {
          label = 253;
         }
        }
        if ((label|0) == 244) {
         $791 = $0;
         $792 = (($791) + 12|0);
         $793 = HEAP32[$792>>2]|0;
         $794 = (($793) + 8|0);
         $795 = HEAP32[$794>>2]|0;
         $796 = HEAP32[$795>>2]|0;
         $797 = ($796|0)==(68);
         if ($797) {
          $798 = $0;
          $799 = (($798) + 12|0);
          $800 = HEAP32[$799>>2]|0;
          $801 = (($800) + 12|0);
          $802 = HEAP32[$801>>2]|0;
          $803 = HEAP32[$802>>2]|0;
          $804 = ($803|0)==(51);
          if ($804) {
           $805 = $0;
           $806 = (($805) + 12|0);
           $807 = HEAP32[$806>>2]|0;
           $808 = (($807) + 8|0);
           $809 = HEAP32[$808>>2]|0;
           _node_get_label($809,0);
           $p = 33104;
           while(1) {
            $810 = $p;
            $811 = HEAP8[$810>>0]|0;
            $812 = ($811<<24>>24)!=(0);
            if (!($812)) {
             break;
            }
            $813 = $p;
            $814 = (($813) + 1|0);
            $p = $814;
           }
           $815 = $0;
           $816 = (($815) + 12|0);
           $817 = HEAP32[$816>>2]|0;
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(27);
           if ($819) {
            $820 = $p;
            $821 = (($820) + 1|0);
            $p = $821;
            HEAP8[$820>>0] = 43;
           } else {
            $822 = $p;
            $823 = (($822) + 1|0);
            $p = $823;
            HEAP8[$822>>0] = 45;
           }
           $824 = $p;
           $825 = $0;
           $826 = (($825) + 12|0);
           $827 = HEAP32[$826>>2]|0;
           $828 = (($827) + 12|0);
           $829 = HEAP32[$828>>2]|0;
           $830 = (($829) + 4|0);
           $831 = HEAP32[$830>>2]|0;
           HEAP32[$vararg_buffer58>>2] = $831;
           (_sprintf($824,61000,$vararg_buffer58)|0);
           $c = 0;
          } else {
           label = 253;
          }
         } else {
          label = 253;
         }
        }
        if ((label|0) == 253) {
         $832 = $0;
         $833 = (($832) + 12|0);
         $834 = HEAP32[$833>>2]|0;
         _cpu6502_node_generate($834,0);
         _cpu6502_1op(60712,61160);
         _cpu6502_1op(60728,62200);
         _cpu6502_1op(60560,60896);
         $835 = $0;
         $836 = (($835) + 8|0);
         $837 = HEAP32[$836>>2]|0;
         $838 = (($837) + 12|0);
         $839 = HEAP32[$838>>2]|0;
         $840 = (($839) + 4|0);
         $841 = HEAP32[$840>>2]|0;
         $842 = $841 & 255;
         HEAP32[$vararg_buffer61>>2] = $842;
         (_sprintf(33104,60992,$vararg_buffer61)|0);
         $843 = $0;
         $844 = (($843) + 8|0);
         $845 = HEAP32[$844>>2]|0;
         $846 = (($845) + 12|0);
         $847 = HEAP32[$846>>2]|0;
         $848 = (($847) + 4|0);
         $849 = HEAP32[$848>>2]|0;
         $850 = $849 >> 8;
         HEAP32[$vararg_buffer64>>2] = $850;
         (_sprintf(61176,60992,$vararg_buffer64)|0);
         $c = 1;
        }
       }
       $851 = $c;
       $852 = ($851|0)==(1);
       if ($852) {
        _cpu6502_noop(60416);
        _cpu6502_1op(60544,62208);
        _cpu6502_1op(60600,33104);
        _cpu6502_1op(60712,62208);
        _cpu6502_noop(60480);
        _cpu6502_1op(60544,62208);
        _cpu6502_1op(60600,61176);
        _cpu6502_1op(60712,62208);
       } else {
        _cpu6502_1op(60680,33104);
        $853 = HEAP32[1688>>2]|0;
        $854 = (($853) + 1)|0;
        HEAP32[1688>>2] = $854;
        HEAP32[$vararg_buffer67>>2] = $853;
        (_sprintf(61176,60944,$vararg_buffer67)|0);
        _cpu6502_1op(60752,61176);
        $855 = $c;
        $856 = ($855|0)==(1);
        if ($856) {
         _cpu6502_noop(60480);
        } else {
         (_strcat((33104|0),(60984|0))|0);
        }
        _cpu6502_1op(60680,33104);
        _cpu6502_label(61176);
       }
       STACKTOP = sp;return;
      }
     }
    }
   } while(0);
   $857 = $0;
   $858 = (($857) + 12|0);
   $859 = HEAP32[$858>>2]|0;
   $860 = HEAP32[$859>>2]|0;
   $861 = ($860|0)==(68);
   do {
    if (!($861)) {
     $862 = $0;
     $863 = (($862) + 12|0);
     $864 = HEAP32[$863>>2]|0;
     $865 = HEAP32[$864>>2]|0;
     $866 = ($865|0)==(27);
     if ($866) {
      label = 265;
     } else {
      $867 = $0;
      $868 = (($867) + 12|0);
      $869 = HEAP32[$868>>2]|0;
      $870 = HEAP32[$869>>2]|0;
      $871 = ($870|0)==(29);
      if ($871) {
       label = 265;
      }
     }
     if ((label|0) == 265) {
      $872 = $0;
      $873 = (($872) + 12|0);
      $874 = HEAP32[$873>>2]|0;
      $875 = (($874) + 8|0);
      $876 = HEAP32[$875>>2]|0;
      $877 = HEAP32[$876>>2]|0;
      $878 = ($877|0)==(68);
      if ($878) {
       $879 = $0;
       $880 = (($879) + 12|0);
       $881 = HEAP32[$880>>2]|0;
       $882 = (($881) + 12|0);
       $883 = HEAP32[$882>>2]|0;
       $884 = HEAP32[$883>>2]|0;
       $885 = ($884|0)==(51);
       if ($885) {
        break;
       }
      }
     }
     $924 = $0;
     $925 = (($924) + 8|0);
     $926 = HEAP32[$925>>2]|0;
     $927 = HEAP32[$926>>2]|0;
     $928 = ($927|0)==(51);
     if ($928) {
      label = 279;
     } else {
      $929 = $0;
      $930 = (($929) + 8|0);
      $931 = HEAP32[$930>>2]|0;
      $932 = HEAP32[$931>>2]|0;
      $933 = ($932|0)==(45);
      if ($933) {
       label = 279;
      } else {
       $940 = $0;
       $941 = (($940) + 8|0);
       $942 = HEAP32[$941>>2]|0;
       _cpu6502_node_generate($942,0);
       _cpu6502_noop(60384);
       _cpu6502_noop(60456);
       _cpu6502_noop(60384);
       $943 = $0;
       $944 = (($943) + 12|0);
       $945 = HEAP32[$944>>2]|0;
       _cpu6502_node_generate($945,0);
       _cpu6502_1op(60712,61160);
       _cpu6502_1op(60728,62200);
       _cpu6502_noop(60424);
       _cpu6502_1op(60560,60888);
       _cpu6502_1op(60712,62208);
       _cpu6502_noop(60424);
       _cpu6502_noop(60488);
       _cpu6502_1op(60712,62208);
      }
     }
     if ((label|0) == 279) {
      $934 = $0;
      $935 = (($934) + 12|0);
      $936 = HEAP32[$935>>2]|0;
      _cpu6502_node_generate($936,0);
      _cpu6502_1op(60712,61160);
      _cpu6502_1op(60728,62200);
      $937 = $0;
      $938 = (($937) + 8|0);
      $939 = HEAP32[$938>>2]|0;
      _cpu6502_node_generate($939,0);
      _cpu6502_noop(60432);
      _cpu6502_noop(60456);
      _cpu6502_1op(60560,60888);
      _cpu6502_1op(60712,62208);
      _cpu6502_noop(60448);
      _cpu6502_noop(60488);
      _cpu6502_1op(60712,62208);
     }
     STACKTOP = sp;return;
    }
   } while(0);
   $886 = $0;
   $887 = (($886) + 8|0);
   $888 = HEAP32[$887>>2]|0;
   _cpu6502_node_generate($888,0);
   $889 = $0;
   $890 = (($889) + 12|0);
   $891 = HEAP32[$890>>2]|0;
   $892 = HEAP32[$891>>2]|0;
   $893 = ($892|0)==(68);
   if ($893) {
    $894 = $0;
    $895 = (($894) + 12|0);
    $896 = HEAP32[$895>>2]|0;
    _node_get_label($896,0);
   } else {
    $897 = $0;
    $898 = (($897) + 12|0);
    $899 = HEAP32[$898>>2]|0;
    $900 = (($899) + 8|0);
    $901 = HEAP32[$900>>2]|0;
    _node_get_label($901,0);
    $p = 33104;
    while(1) {
     $902 = $p;
     $903 = HEAP8[$902>>0]|0;
     $904 = ($903<<24>>24)!=(0);
     if (!($904)) {
      break;
     }
     $905 = $p;
     $906 = (($905) + 1|0);
     $p = $906;
    }
    $907 = $0;
    $908 = (($907) + 12|0);
    $909 = HEAP32[$908>>2]|0;
    $910 = HEAP32[$909>>2]|0;
    $911 = ($910|0)==(27);
    if ($911) {
     $912 = $p;
     $913 = (($912) + 1|0);
     $p = $913;
     HEAP8[$912>>0] = 43;
    } else {
     $914 = $p;
     $915 = (($914) + 1|0);
     $p = $915;
     HEAP8[$914>>0] = 45;
    }
    $916 = $p;
    $917 = $0;
    $918 = (($917) + 12|0);
    $919 = HEAP32[$918>>2]|0;
    $920 = (($919) + 12|0);
    $921 = HEAP32[$920>>2]|0;
    $922 = (($921) + 4|0);
    $923 = HEAP32[$922>>2]|0;
    HEAP32[$vararg_buffer70>>2] = $923;
    (_sprintf($916,61000,$vararg_buffer70)|0);
   }
   _cpu6502_1op(60712,33104);
   (_strcat((33104|0),(60984|0))|0);
   _cpu6502_1op(60728,33104);
   STACKTOP = sp;return;
   break;
  }
  default: {
   $946 = $0;
   $947 = HEAP32[$946>>2]|0;
   $948 = ($947|0)==(27);
   if ($948) {
    label = 284;
   } else {
    $949 = $0;
    $950 = HEAP32[$949>>2]|0;
    $951 = ($950|0)==(29);
    if ($951) {
     label = 284;
    }
   }
   if ((label|0) == 284) {
    $952 = $0;
    $953 = (($952) + 8|0);
    $954 = HEAP32[$953>>2]|0;
    $955 = HEAP32[$954>>2]|0;
    $956 = ($955|0)==(68);
    do {
     if ($956) {
      $957 = $0;
      $958 = (($957) + 12|0);
      $959 = HEAP32[$958>>2]|0;
      $960 = HEAP32[$959>>2]|0;
      $961 = ($960|0)==(51);
      if (!($961)) {
       $996 = $0;
       $997 = (($996) + 12|0);
       $998 = HEAP32[$997>>2]|0;
       $999 = HEAP32[$998>>2]|0;
       $1000 = ($999|0)==(41);
       if ($1000) {
        $1001 = $0;
        $1002 = (($1001) + 12|0);
        $1003 = HEAP32[$1002>>2]|0;
        $1004 = (($1003) + 8|0);
        $1005 = HEAP32[$1004>>2]|0;
        $1006 = HEAP32[$1005>>2]|0;
        $1007 = ($1006|0)==(44);
        if ($1007) {
         $1008 = $0;
         $1009 = (($1008) + 8|0);
         $1010 = HEAP32[$1009>>2]|0;
         _node_get_label($1010,2);
         _cpu6502_1op(60544,33104);
         _cpu6502_noop(60416);
         $1011 = $0;
         $1012 = (($1011) + 12|0);
         $1013 = HEAP32[$1012>>2]|0;
         $1014 = (($1013) + 8|0);
         $1015 = HEAP32[$1014>>2]|0;
         _node_get_label($1015,0);
         _cpu6502_1op(60600,33104);
         _cpu6502_noop(60432);
         $1016 = $0;
         $1017 = (($1016) + 8|0);
         $1018 = HEAP32[$1017>>2]|0;
         _node_get_label($1018,2);
         (_strcat((33104|0),(60872|0))|0);
         _cpu6502_1op(60544,33104);
         _cpu6502_1op(60600,60896);
         _cpu6502_noop(60440);
         _cpu6502_noop(60448);
         STACKTOP = sp;return;
        }
       }
       break;
      }
      $962 = $0;
      $963 = (($962) + 8|0);
      $964 = HEAP32[$963>>2]|0;
      _node_get_label($964,2);
      $965 = $0;
      $966 = HEAP32[$965>>2]|0;
      $967 = ($966|0)==(27);
      if ($967) {
       (_strcat((33104|0),(62224|0))|0);
      } else {
       (_strcat((33104|0),(62232|0))|0);
      }
      $p = 33104;
      while(1) {
       $968 = $p;
       $969 = HEAP8[$968>>0]|0;
       $970 = ($969<<24>>24)!=(0);
       if (!($970)) {
        break;
       }
       $971 = $p;
       $972 = (($971) + 1|0);
       $p = $972;
      }
      $973 = $p;
      $974 = $0;
      $975 = (($974) + 12|0);
      $976 = HEAP32[$975>>2]|0;
      $977 = (($976) + 4|0);
      $978 = HEAP32[$977>>2]|0;
      HEAP32[$vararg_buffer73>>2] = $978;
      (_sprintf($973,61000,$vararg_buffer73)|0);
      _cpu6502_1op(60544,33104);
      $979 = $0;
      $980 = (($979) + 8|0);
      $981 = HEAP32[$980>>2]|0;
      _node_get_label($981,3);
      $982 = $0;
      $983 = HEAP32[$982>>2]|0;
      $984 = ($983|0)==(27);
      if ($984) {
       (_strcat((33104|0),(62224|0))|0);
      } else {
       (_strcat((33104|0),(62232|0))|0);
      }
      $p = 33104;
      while(1) {
       $985 = $p;
       $986 = HEAP8[$985>>0]|0;
       $987 = ($986<<24>>24)!=(0);
       if (!($987)) {
        break;
       }
       $988 = $p;
       $989 = (($988) + 1|0);
       $p = $989;
      }
      $990 = $p;
      $991 = $0;
      $992 = (($991) + 12|0);
      $993 = HEAP32[$992>>2]|0;
      $994 = (($993) + 4|0);
      $995 = HEAP32[$994>>2]|0;
      HEAP32[$vararg_buffer76>>2] = $995;
      (_sprintf($990,62240,$vararg_buffer76)|0);
      _cpu6502_1op(60560,33104);
      STACKTOP = sp;return;
     }
    } while(0);
   }
   $1019 = $0;
   $1020 = HEAP32[$1019>>2]|0;
   $1021 = ($1020|0)==(27);
   do {
    if ($1021) {
     $1022 = $0;
     $1023 = (($1022) + 8|0);
     $1024 = HEAP32[$1023>>2]|0;
     $1025 = HEAP32[$1024>>2]|0;
     $1026 = ($1025|0)==(68);
     if ($1026) {
      $1027 = $0;
      $1028 = (($1027) + 12|0);
      $1029 = HEAP32[$1028>>2]|0;
      _cpu6502_node_generate($1029,0);
      $1030 = $0;
      $1031 = (($1030) + 8|0);
      $1032 = HEAP32[$1031>>2]|0;
      _node_get_label($1032,2);
      _cpu6502_noop(60416);
      _cpu6502_1op(60600,33104);
      _cpu6502_noop(60432);
      _cpu6502_noop(60456);
      (_strcat((33104|0),(60872|0))|0);
      _cpu6502_1op(60600,33104);
      _cpu6502_noop(60440);
      _cpu6502_noop(60448);
      STACKTOP = sp;return;
     }
     $1033 = $0;
     $1034 = (($1033) + 8|0);
     $1035 = HEAP32[$1034>>2]|0;
     $1036 = HEAP32[$1035>>2]|0;
     $1037 = ($1036|0)==(51);
     if (!($1037)) {
      $1038 = $0;
      $1039 = (($1038) + 12|0);
      $1040 = HEAP32[$1039>>2]|0;
      $1041 = HEAP32[$1040>>2]|0;
      $1042 = ($1041|0)==(51);
      if (!($1042)) {
       break;
      }
     }
     $1043 = $0;
     $1044 = (($1043) + 8|0);
     $1045 = HEAP32[$1044>>2]|0;
     $1046 = HEAP32[$1045>>2]|0;
     $1047 = ($1046|0)==(51);
     if ($1047) {
      $1048 = $0;
      $1049 = (($1048) + 8|0);
      $1050 = HEAP32[$1049>>2]|0;
      $explore = $1050;
     } else {
      $1051 = $0;
      $1052 = (($1051) + 12|0);
      $1053 = HEAP32[$1052>>2]|0;
      $explore = $1053;
     }
     $1054 = $0;
     $1055 = (($1054) + 8|0);
     $1056 = HEAP32[$1055>>2]|0;
     $1057 = $explore;
     $1058 = ($1056|0)!=($1057|0);
     if ($1058) {
      $1059 = $0;
      $1060 = (($1059) + 8|0);
      $1061 = HEAP32[$1060>>2]|0;
      _cpu6502_node_generate($1061,0);
     } else {
      $1062 = $0;
      $1063 = (($1062) + 12|0);
      $1064 = HEAP32[$1063>>2]|0;
      _cpu6502_node_generate($1064,0);
     }
     $1065 = $explore;
     $1066 = (($1065) + 4|0);
     $1067 = HEAP32[$1066>>2]|0;
     $c = $1067;
     $1068 = $c;
     $1069 = $1068 & 255;
     $1070 = ($1069|0)==(0);
     if ($1070) {
      $1071 = $c;
      $1072 = $1071 & 65280;
      $1073 = ($1072|0)<(2048);
      if ($1073) {
       $1074 = $c;
       $1075 = (($1074|0) / 256)&-1;
       $c = $1075;
       while(1) {
        $1076 = $c;
        $1077 = (($1076) + -1)|0;
        $c = $1077;
        $1078 = ($1076|0)!=(0);
        if (!($1078)) {
         break;
        }
        _cpu6502_noop(60480);
       }
       STACKTOP = sp;return;
      }
     }
     $1079 = $c;
     $1080 = $1079 & 255;
     HEAP32[$vararg_buffer79>>2] = $1080;
     (_sprintf(33104,60992,$vararg_buffer79)|0);
     _cpu6502_noop(60416);
     $1081 = $c;
     $1082 = $1081 & 255;
     $1083 = ($1082|0)!=(0);
     if ($1083) {
      _cpu6502_1op(60600,33104);
     }
     _cpu6502_noop(60432);
     _cpu6502_noop(60456);
     $1084 = $c;
     $1085 = $1084 >> 8;
     HEAP32[$vararg_buffer82>>2] = $1085;
     (_sprintf(33104,60992,$vararg_buffer82)|0);
     _cpu6502_1op(60600,33104);
     _cpu6502_noop(60440);
     _cpu6502_noop(60448);
     STACKTOP = sp;return;
    }
   } while(0);
   $1086 = $0;
   $1087 = HEAP32[$1086>>2]|0;
   $1088 = ($1087|0)==(29);
   do {
    if ($1088) {
     $1089 = $0;
     $1090 = (($1089) + 12|0);
     $1091 = HEAP32[$1090>>2]|0;
     $1092 = HEAP32[$1091>>2]|0;
     $1093 = ($1092|0)==(51);
     if ($1093) {
      $1094 = $0;
      $1095 = (($1094) + 12|0);
      $1096 = HEAP32[$1095>>2]|0;
      $explore = $1096;
     } else {
      $explore = 0;
     }
     $1097 = $explore;
     $1098 = ($1097|0)!=(0|0);
     if (!($1098)) {
      break;
     }
     $1099 = $explore;
     $1100 = (($1099) + 4|0);
     $1101 = HEAP32[$1100>>2]|0;
     $c1 = $1101;
     $1102 = $0;
     $1103 = (($1102) + 8|0);
     $1104 = HEAP32[$1103>>2]|0;
     _cpu6502_node_generate($1104,0);
     $1105 = $c1;
     $1106 = $1105 & 255;
     $1107 = ($1106|0)==(0);
     if ($1107) {
      $1108 = $c1;
      $1109 = $1108 & 65280;
      $1110 = ($1109|0)<(2048);
      if ($1110) {
       $1111 = $c1;
       $1112 = (($1111|0) / 256)&-1;
       $c1 = $1112;
       while(1) {
        $1113 = $c1;
        $1114 = (($1113) + -1)|0;
        $c1 = $1114;
        $1115 = ($1113|0)!=(0);
        if (!($1115)) {
         break;
        }
        _cpu6502_noop(60488);
       }
       STACKTOP = sp;return;
      }
     }
     $1116 = $c1;
     $1117 = $1116 & 255;
     HEAP32[$vararg_buffer85>>2] = $1117;
     (_sprintf(33104,60992,$vararg_buffer85)|0);
     _cpu6502_noop(60408);
     $1118 = $c1;
     $1119 = $1118 & 255;
     $1120 = ($1119|0)!=(0);
     if ($1120) {
      _cpu6502_1op(60608,33104);
     }
     _cpu6502_noop(60432);
     _cpu6502_noop(60456);
     $1121 = $c1;
     $1122 = $1121 >> 8;
     HEAP32[$vararg_buffer88>>2] = $1122;
     (_sprintf(33104,60992,$vararg_buffer88)|0);
     _cpu6502_1op(60608,33104);
     _cpu6502_noop(60440);
     _cpu6502_noop(60448);
     STACKTOP = sp;return;
    }
   } while(0);
   $1123 = $0;
   $1124 = HEAP32[$1123>>2]|0;
   $1125 = ($1124|0)==(1);
   if ($1125) {
    label = 344;
   } else {
    $1126 = $0;
    $1127 = HEAP32[$1126>>2]|0;
    $1128 = ($1127|0)==(5);
    if ($1128) {
     label = 344;
    } else {
     $1129 = $0;
     $1130 = HEAP32[$1129>>2]|0;
     $1131 = ($1130|0)==(3);
     if ($1131) {
      label = 344;
     }
    }
   }
   do {
    if ((label|0) == 344) {
     $1132 = $0;
     $1133 = (($1132) + 12|0);
     $1134 = HEAP32[$1133>>2]|0;
     $1135 = HEAP32[$1134>>2]|0;
     $1136 = ($1135|0)==(51);
     if ($1136) {
      $1137 = $0;
      $1138 = (($1137) + 12|0);
      $1139 = HEAP32[$1138>>2]|0;
      $explore = $1139;
     } else {
      $explore = 0;
     }
     $1140 = $explore;
     $1141 = ($1140|0)!=(0|0);
     if (!($1141)) {
      break;
     }
     $1142 = $explore;
     $1143 = (($1142) + 4|0);
     $1144 = HEAP32[$1143>>2]|0;
     $value = $1144;
     $1145 = $0;
     $1146 = HEAP32[$1145>>2]|0;
     $1147 = ($1146|0)==(1);
     if ($1147) {
      $mnemonic = 60616;
     } else {
      $1148 = $0;
      $1149 = HEAP32[$1148>>2]|0;
      $1150 = ($1149|0)==(5);
      if ($1150) {
       $mnemonic = 60632;
      } else {
       $mnemonic = 60624;
      }
     }
     $1151 = $0;
     $1152 = (($1151) + 8|0);
     $1153 = HEAP32[$1152>>2]|0;
     $1154 = $explore;
     $1155 = ($1153|0)!=($1154|0);
     if ($1155) {
      $1156 = $0;
      $1157 = (($1156) + 8|0);
      $1158 = HEAP32[$1157>>2]|0;
      _cpu6502_node_generate($1158,0);
     } else {
      $1159 = $0;
      $1160 = (($1159) + 12|0);
      $1161 = HEAP32[$1160>>2]|0;
      _cpu6502_node_generate($1161,0);
     }
     $1162 = $value;
     $1163 = $1162 & 255;
     $byte = $1163;
     $1164 = $0;
     $1165 = HEAP32[$1164>>2]|0;
     $1166 = ($1165|0)==(1);
     if ($1166) {
      label = 359;
     } else {
      $1167 = $0;
      $1168 = HEAP32[$1167>>2]|0;
      $1169 = ($1168|0)==(3);
      if ($1169) {
       label = 359;
      } else {
       label = 361;
      }
     }
     if ((label|0) == 359) {
      $1170 = $byte;
      $1171 = ($1170|0)==(0);
      if ($1171) {
      } else {
       label = 361;
      }
     }
     if ((label|0) == 361) {
      $1172 = $0;
      $1173 = HEAP32[$1172>>2]|0;
      $1174 = ($1173|0)==(5);
      if ($1174) {
       $1175 = $byte;
       $1176 = ($1175|0)==(255);
       if ($1176) {
       } else {
        label = 364;
       }
      } else {
       label = 364;
      }
      if ((label|0) == 364) {
       $1177 = $0;
       $1178 = HEAP32[$1177>>2]|0;
       $1179 = ($1178|0)==(5);
       if ($1179) {
        $1180 = $byte;
        $1181 = ($1180|0)==(0);
        if ($1181) {
         _cpu6502_1op(60544,60896);
        } else {
         label = 367;
        }
       } else {
        label = 367;
       }
       if ((label|0) == 367) {
        $1182 = $0;
        $1183 = HEAP32[$1182>>2]|0;
        $1184 = ($1183|0)==(1);
        if ($1184) {
         $1185 = $byte;
         $1186 = ($1185|0)==(255);
         if ($1186) {
          _cpu6502_1op(60544,60880);
         } else {
          label = 370;
         }
        } else {
         label = 370;
        }
        if ((label|0) == 370) {
         $1187 = $byte;
         HEAP32[$vararg_buffer91>>2] = $1187;
         (_sprintf(33104,60992,$vararg_buffer91)|0);
         $1188 = $mnemonic;
         _cpu6502_1op($1188,33104);
        }
       }
      }
     }
     $1189 = $value;
     $1190 = $1189 >> 8;
     $1191 = $1190 & 255;
     $byte = $1191;
     $1192 = $0;
     $1193 = HEAP32[$1192>>2]|0;
     $1194 = ($1193|0)==(1);
     if ($1194) {
      label = 376;
     } else {
      $1195 = $0;
      $1196 = HEAP32[$1195>>2]|0;
      $1197 = ($1196|0)==(3);
      if ($1197) {
       label = 376;
      } else {
       label = 378;
      }
     }
     if ((label|0) == 376) {
      $1198 = $byte;
      $1199 = ($1198|0)==(0);
      if ($1199) {
      } else {
       label = 378;
      }
     }
     if ((label|0) == 378) {
      $1200 = $0;
      $1201 = HEAP32[$1200>>2]|0;
      $1202 = ($1201|0)==(5);
      if ($1202) {
       $1203 = $byte;
       $1204 = ($1203|0)==(255);
       if ($1204) {
       } else {
        label = 381;
       }
      } else {
       label = 381;
      }
      if ((label|0) == 381) {
       $1205 = $0;
       $1206 = HEAP32[$1205>>2]|0;
       $1207 = ($1206|0)==(5);
       if ($1207) {
        $1208 = $byte;
        $1209 = ($1208|0)==(0);
        if ($1209) {
         _cpu6502_1op(60560,60896);
        } else {
         label = 384;
        }
       } else {
        label = 384;
       }
       if ((label|0) == 384) {
        $1210 = $0;
        $1211 = HEAP32[$1210>>2]|0;
        $1212 = ($1211|0)==(1);
        if ($1212) {
         $1213 = $byte;
         $1214 = ($1213|0)==(255);
         if ($1214) {
          _cpu6502_1op(60560,60880);
         } else {
          label = 387;
         }
        } else {
         label = 387;
        }
        if ((label|0) == 387) {
         _cpu6502_noop(60432);
         _cpu6502_noop(60456);
         $1215 = $byte;
         HEAP32[$vararg_buffer94>>2] = $1215;
         (_sprintf(33104,60992,$vararg_buffer94)|0);
         $1216 = $mnemonic;
         _cpu6502_1op($1216,33104);
         _cpu6502_noop(60440);
         _cpu6502_noop(60448);
        }
       }
      }
     }
     STACKTOP = sp;return;
    }
   } while(0);
   $1217 = $0;
   $1218 = HEAP32[$1217>>2]|0;
   $1219 = ($1218|0)==(31);
   if ($1219) {
    $1220 = $0;
    $1221 = (($1220) + 8|0);
    $1222 = HEAP32[$1221>>2]|0;
    $1223 = HEAP32[$1222>>2]|0;
    $1224 = ($1223|0)==(51);
    if ($1224) {
     $1225 = $0;
     $1226 = (($1225) + 8|0);
     $1227 = HEAP32[$1226>>2]|0;
     $explore = $1227;
    } else {
     $1228 = $0;
     $1229 = (($1228) + 12|0);
     $1230 = HEAP32[$1229>>2]|0;
     $1231 = HEAP32[$1230>>2]|0;
     $1232 = ($1231|0)==(51);
     if ($1232) {
      $1233 = $0;
      $1234 = (($1233) + 12|0);
      $1235 = HEAP32[$1234>>2]|0;
      $explore = $1235;
     } else {
      $explore = 0;
     }
    }
    $1236 = $explore;
    $1237 = ($1236|0)!=(0|0);
    do {
     if ($1237) {
      $1238 = $explore;
      $1239 = (($1238) + 4|0);
      $1240 = HEAP32[$1239>>2]|0;
      $1241 = ($1240|0)==(0);
      if (!($1241)) {
       $1242 = $explore;
       $1243 = (($1242) + 4|0);
       $1244 = HEAP32[$1243>>2]|0;
       $1245 = ($1244|0)==(1);
       if (!($1245)) {
        $1246 = $explore;
        $1247 = (($1246) + 4|0);
        $1248 = HEAP32[$1247>>2]|0;
        $1249 = (_is_power_of_two($1248)|0);
        $1250 = ($1249|0)!=(0);
        if (!($1250)) {
         break;
        }
       }
      }
      $1251 = $explore;
      $1252 = (($1251) + 4|0);
      $1253 = HEAP32[$1252>>2]|0;
      $c = $1253;
      $1254 = $c;
      $1255 = ($1254|0)==(0);
      if ($1255) {
       _cpu6502_1op(60544,60896);
       _cpu6502_noop(60440);
      } else {
       $1256 = $0;
       $1257 = (($1256) + 8|0);
       $1258 = HEAP32[$1257>>2]|0;
       $1259 = $explore;
       $1260 = ($1258|0)!=($1259|0);
       if ($1260) {
        $1261 = $0;
        $1262 = (($1261) + 8|0);
        $1263 = HEAP32[$1262>>2]|0;
        $0 = $1263;
       } else {
        $1264 = $0;
        $1265 = (($1264) + 12|0);
        $1266 = HEAP32[$1265>>2]|0;
        $0 = $1266;
       }
       $1267 = $c;
       $1268 = ($1267|0)==(2);
       if ($1268) {
        $1269 = $0;
        $1270 = HEAP32[$1269>>2]|0;
        $1271 = ($1270|0)==(41);
        if ($1271) {
         $1272 = $0;
         $1273 = (($1272) + 8|0);
         $1274 = HEAP32[$1273>>2]|0;
         _cpu6502_node_generate($1274,0);
         _cpu6502_1op(60656,60672);
         _cpu6502_1op(60560,60896);
         _cpu6502_1op(60768,62248);
         _cpu6502_noop(60480);
         STACKTOP = sp;return;
        }
       }
       $1275 = $c;
       $1276 = ($1275|0)>=(256);
       if ($1276) {
        $1277 = $0;
        $1278 = HEAP32[$1277>>2]|0;
        $1279 = ($1278|0)==(41);
        if ($1279) {
         label = 415;
        } else {
         $1280 = $0;
         $1281 = HEAP32[$1280>>2]|0;
         $1282 = ($1281|0)==(42);
         if ($1282) {
          label = 415;
         } else {
          $1286 = $0;
          _cpu6502_node_generate($1286,0);
          _cpu6502_noop(60440);
          _cpu6502_1op(60544,60896);
         }
        }
        if ((label|0) == 415) {
         $1283 = $0;
         $1284 = (($1283) + 8|0);
         $1285 = HEAP32[$1284>>2]|0;
         _cpu6502_node_generate($1285,0);
         _cpu6502_noop(60440);
         _cpu6502_1op(60544,60896);
        }
        $1287 = $c;
        $1288 = (($1287|0) / 256)&-1;
        $c = $1288;
       } else {
        $1289 = $0;
        _cpu6502_node_generate($1289,0);
       }
       _cpu6502_1op(60728,61160);
       while(1) {
        $1290 = $c;
        $1291 = ($1290|0)>(1);
        if (!($1291)) {
         break;
        }
        _cpu6502_1op(60656,60672);
        _cpu6502_1op(60648,61160);
        $1292 = $c;
        $1293 = (($1292|0) / 2)&-1;
        $c = $1293;
       }
       _cpu6502_1op(60560,61160);
      }
      STACKTOP = sp;return;
     }
    } while(0);
   }
   $1294 = $0;
   $1295 = HEAP32[$1294>>2]|0;
   $1296 = ($1295|0)==(33);
   if ($1296) {
    $1297 = $0;
    $1298 = (($1297) + 12|0);
    $1299 = HEAP32[$1298>>2]|0;
    $1300 = HEAP32[$1299>>2]|0;
    $1301 = ($1300|0)==(51);
    do {
     if ($1301) {
      $1302 = $0;
      $1303 = (($1302) + 12|0);
      $1304 = HEAP32[$1303>>2]|0;
      $1305 = (($1304) + 4|0);
      $1306 = HEAP32[$1305>>2]|0;
      $1307 = ($1306|0)==(2);
      if (!($1307)) {
       $1308 = $0;
       $1309 = (($1308) + 12|0);
       $1310 = HEAP32[$1309>>2]|0;
       $1311 = (($1310) + 4|0);
       $1312 = HEAP32[$1311>>2]|0;
       $1313 = ($1312|0)==(4);
       if (!($1313)) {
        $1314 = $0;
        $1315 = (($1314) + 12|0);
        $1316 = HEAP32[$1315>>2]|0;
        $1317 = (($1316) + 4|0);
        $1318 = HEAP32[$1317>>2]|0;
        $1319 = ($1318|0)==(8);
        if (!($1319)) {
         break;
        }
       }
      }
      $1320 = $0;
      $1321 = (($1320) + 8|0);
      $1322 = HEAP32[$1321>>2]|0;
      _cpu6502_node_generate($1322,0);
      $1323 = $0;
      $1324 = (($1323) + 12|0);
      $1325 = HEAP32[$1324>>2]|0;
      $1326 = (($1325) + 4|0);
      $1327 = HEAP32[$1326>>2]|0;
      $c = $1327;
      _cpu6502_1op(60728,61160);
      while(1) {
       _cpu6502_1op(60664,61160);
       _cpu6502_1op(60640,60672);
       $1328 = $c;
       $1329 = (($1328|0) / 2)&-1;
       $c = $1329;
       $1330 = $c;
       $1331 = ($1330|0)>(1);
       if (!($1331)) {
        break;
       }
      }
      _cpu6502_1op(60560,61160);
      STACKTOP = sp;return;
     }
    } while(0);
   }
   $1332 = $0;
   $1333 = HEAP32[$1332>>2]|0;
   $1334 = ($1333|0)==(13);
   if ($1334) {
    label = 437;
   } else {
    $1335 = $0;
    $1336 = HEAP32[$1335>>2]|0;
    $1337 = ($1336|0)==(15);
    if ($1337) {
     label = 437;
    } else {
     $1396 = $0;
     $1397 = (($1396) + 12|0);
     $1398 = HEAP32[$1397>>2]|0;
     $1399 = HEAP32[$1398>>2]|0;
     $1400 = ($1399|0)==(51);
     if ($1400) {
      $1401 = $0;
      $1402 = (($1401) + 8|0);
      $1403 = HEAP32[$1402>>2]|0;
      _cpu6502_node_generate($1403,0);
      $1404 = $0;
      $1405 = (($1404) + 12|0);
      $1406 = HEAP32[$1405>>2]|0;
      $1407 = (($1406) + 4|0);
      $1408 = HEAP32[$1407>>2]|0;
      $1409 = $1408 & 255;
      HEAP32[$vararg_buffer103>>2] = $1409;
      (_sprintf(33104,60992,$vararg_buffer103)|0);
      $1410 = $0;
      $1411 = (($1410) + 12|0);
      $1412 = HEAP32[$1411>>2]|0;
      $1413 = (($1412) + 4|0);
      $1414 = HEAP32[$1413>>2]|0;
      $1415 = $1414 >> 8;
      $1416 = $1415 & 255;
      HEAP32[$vararg_buffer106>>2] = $1416;
      (_sprintf(61176,60992,$vararg_buffer106)|0);
      $stack = 0;
     } else {
      $1417 = $0;
      $1418 = (($1417) + 12|0);
      $1419 = HEAP32[$1418>>2]|0;
      $1420 = HEAP32[$1419>>2]|0;
      $1421 = ($1420|0)==(45);
      if ($1421) {
       $1422 = $0;
       $1423 = (($1422) + 8|0);
       $1424 = HEAP32[$1423>>2]|0;
       _cpu6502_node_generate($1424,0);
       $1425 = $0;
       $1426 = (($1425) + 12|0);
       $1427 = HEAP32[$1426>>2]|0;
       _node_get_label($1427,0);
       (_strcpy((61176|0),(33104|0))|0);
       (_strcat((61176|0),(60984|0))|0);
       $stack = 0;
      } else {
       $1428 = $0;
       $1429 = (($1428) + 12|0);
       $1430 = HEAP32[$1429>>2]|0;
       $1431 = HEAP32[$1430>>2]|0;
       $1432 = ($1431|0)==(41);
       if ($1432) {
        $1433 = $0;
        $1434 = (($1433) + 12|0);
        $1435 = HEAP32[$1434>>2]|0;
        $1436 = (($1435) + 8|0);
        $1437 = HEAP32[$1436>>2]|0;
        $1438 = HEAP32[$1437>>2]|0;
        $1439 = ($1438|0)==(44);
        if ($1439) {
         $1440 = $0;
         $1441 = (($1440) + 8|0);
         $1442 = HEAP32[$1441>>2]|0;
         _cpu6502_node_generate($1442,0);
         $1443 = $0;
         $1444 = (($1443) + 12|0);
         $1445 = HEAP32[$1444>>2]|0;
         $1446 = (($1445) + 8|0);
         $1447 = HEAP32[$1446>>2]|0;
         _node_get_label($1447,0);
         (_strcpy((61176|0),(60896|0))|0);
         $stack = 0;
        } else {
         label = 455;
        }
       } else {
        label = 455;
       }
       if ((label|0) == 455) {
        $1448 = $0;
        $1449 = (($1448) + 8|0);
        $1450 = HEAP32[$1449>>2]|0;
        _cpu6502_node_generate($1450,0);
        _cpu6502_noop(60384);
        _cpu6502_noop(60456);
        _cpu6502_noop(60384);
        $1451 = $0;
        $1452 = (($1451) + 12|0);
        $1453 = HEAP32[$1452>>2]|0;
        _cpu6502_node_generate($1453,0);
        _cpu6502_1op(60712,61160);
        _cpu6502_1op(60728,62200);
        $stack = 1;
       }
      }
     }
    }
   }
   if ((label|0) == 437) {
    $1338 = $0;
    $1339 = (($1338) + 8|0);
    $1340 = HEAP32[$1339>>2]|0;
    $1341 = HEAP32[$1340>>2]|0;
    $1342 = ($1341|0)==(51);
    if ($1342) {
     $1343 = $0;
     $1344 = (($1343) + 12|0);
     $1345 = HEAP32[$1344>>2]|0;
     _cpu6502_node_generate($1345,0);
     $1346 = $0;
     $1347 = (($1346) + 8|0);
     $1348 = HEAP32[$1347>>2]|0;
     $1349 = (($1348) + 4|0);
     $1350 = HEAP32[$1349>>2]|0;
     $1351 = $1350 & 255;
     HEAP32[$vararg_buffer97>>2] = $1351;
     (_sprintf(33104,60992,$vararg_buffer97)|0);
     $1352 = $0;
     $1353 = (($1352) + 8|0);
     $1354 = HEAP32[$1353>>2]|0;
     $1355 = (($1354) + 4|0);
     $1356 = HEAP32[$1355>>2]|0;
     $1357 = $1356 >> 8;
     $1358 = $1357 & 255;
     HEAP32[$vararg_buffer100>>2] = $1358;
     (_sprintf(61176,60992,$vararg_buffer100)|0);
     $stack = 0;
    } else {
     $1359 = $0;
     $1360 = (($1359) + 8|0);
     $1361 = HEAP32[$1360>>2]|0;
     $1362 = HEAP32[$1361>>2]|0;
     $1363 = ($1362|0)==(45);
     if ($1363) {
      $1364 = $0;
      $1365 = (($1364) + 12|0);
      $1366 = HEAP32[$1365>>2]|0;
      _cpu6502_node_generate($1366,0);
      $1367 = $0;
      $1368 = (($1367) + 8|0);
      $1369 = HEAP32[$1368>>2]|0;
      _node_get_label($1369,0);
      (_strcpy((61176|0),(33104|0))|0);
      (_strcat((61176|0),(60984|0))|0);
      $stack = 0;
     } else {
      $1370 = $0;
      $1371 = (($1370) + 8|0);
      $1372 = HEAP32[$1371>>2]|0;
      $1373 = HEAP32[$1372>>2]|0;
      $1374 = ($1373|0)==(41);
      if ($1374) {
       $1375 = $0;
       $1376 = (($1375) + 8|0);
       $1377 = HEAP32[$1376>>2]|0;
       $1378 = (($1377) + 8|0);
       $1379 = HEAP32[$1378>>2]|0;
       $1380 = HEAP32[$1379>>2]|0;
       $1381 = ($1380|0)==(44);
       if ($1381) {
        $1382 = $0;
        $1383 = (($1382) + 12|0);
        $1384 = HEAP32[$1383>>2]|0;
        _cpu6502_node_generate($1384,0);
        $1385 = $0;
        $1386 = (($1385) + 8|0);
        $1387 = HEAP32[$1386>>2]|0;
        $1388 = (($1387) + 8|0);
        $1389 = HEAP32[$1388>>2]|0;
        _node_get_label($1389,0);
        (_strcpy((61176|0),(60896|0))|0);
        $stack = 0;
       } else {
        label = 444;
       }
      } else {
       label = 444;
      }
      if ((label|0) == 444) {
       $1390 = $0;
       $1391 = (($1390) + 12|0);
       $1392 = HEAP32[$1391>>2]|0;
       _cpu6502_node_generate($1392,0);
       _cpu6502_noop(60384);
       _cpu6502_noop(60456);
       _cpu6502_noop(60384);
       $1393 = $0;
       $1394 = (($1393) + 8|0);
       $1395 = HEAP32[$1394>>2]|0;
       _cpu6502_node_generate($1395,0);
       _cpu6502_1op(60712,61160);
       _cpu6502_1op(60728,62200);
       $stack = 1;
      }
     }
    }
   }
   $1454 = $0;
   $1455 = HEAP32[$1454>>2]|0;
   $1456 = ($1455|0)==(1);
   if ($1456) {
    $1457 = $stack;
    $1458 = ($1457|0)!=(0);
    if ($1458) {
     _cpu6502_noop(60424);
     _cpu6502_1op(60616,62200);
     _cpu6502_noop(60440);
     _cpu6502_noop(60424);
     _cpu6502_1op(60616,61160);
    } else {
     _cpu6502_1op(60616,33104);
     _cpu6502_noop(60432);
     _cpu6502_noop(60456);
     _cpu6502_1op(60616,61176);
     _cpu6502_noop(60440);
     _cpu6502_noop(60448);
    }
    $1459 = $1;
    $1460 = ($1459|0)!=(0);
    if ($1460) {
     HEAP32[34168>>2] = 1;
     _cpu6502_1op(60728,61160);
     _cpu6502_1op(60616,61160);
     $1461 = $1;
     HEAP32[$vararg_buffer109>>2] = $1461;
     (_sprintf(33104,60944,$vararg_buffer109)|0);
     _cpu6502_1op(60744,33104);
    }
   } else {
    $1462 = $0;
    $1463 = HEAP32[$1462>>2]|0;
    $1464 = ($1463|0)==(3);
    if ($1464) {
     $1465 = $stack;
     $1466 = ($1465|0)!=(0);
     if ($1466) {
      _cpu6502_noop(60424);
      _cpu6502_1op(60624,62200);
      _cpu6502_noop(60440);
      _cpu6502_noop(60424);
      _cpu6502_1op(60624,61160);
     } else {
      _cpu6502_1op(60624,33104);
      _cpu6502_noop(60432);
      _cpu6502_noop(60456);
      _cpu6502_1op(60624,61176);
      _cpu6502_noop(60440);
      _cpu6502_noop(60448);
     }
     $1467 = $1;
     $1468 = ($1467|0)!=(0);
     if ($1468) {
      HEAP32[34168>>2] = 1;
      _cpu6502_1op(60728,61160);
      _cpu6502_1op(60616,61160);
      $1469 = $1;
      HEAP32[$vararg_buffer112>>2] = $1469;
      (_sprintf(33104,60944,$vararg_buffer112)|0);
      _cpu6502_1op(60744,33104);
     }
    } else {
     $1470 = $0;
     $1471 = HEAP32[$1470>>2]|0;
     $1472 = ($1471|0)==(5);
     if ($1472) {
      $1473 = $stack;
      $1474 = ($1473|0)!=(0);
      if ($1474) {
       _cpu6502_noop(60424);
       _cpu6502_1op(60632,62200);
       _cpu6502_noop(60440);
       _cpu6502_noop(60424);
       _cpu6502_1op(60632,61160);
      } else {
       _cpu6502_1op(60632,33104);
       _cpu6502_noop(60432);
       _cpu6502_noop(60456);
       _cpu6502_1op(60632,61176);
       _cpu6502_noop(60440);
       _cpu6502_noop(60448);
      }
      $1475 = $1;
      $1476 = ($1475|0)!=(0);
      if ($1476) {
       HEAP32[34168>>2] = 1;
       _cpu6502_1op(60728,61160);
       _cpu6502_1op(60616,61160);
       $1477 = $1;
       HEAP32[$vararg_buffer115>>2] = $1477;
       (_sprintf(33104,60944,$vararg_buffer115)|0);
       _cpu6502_1op(60744,33104);
      }
     } else {
      $1478 = $0;
      $1479 = HEAP32[$1478>>2]|0;
      $1480 = ($1479|0)==(7);
      if ($1480) {
       $1481 = $stack;
       $1482 = ($1481|0)!=(0);
       if ($1482) {
        _cpu6502_noop(60424);
        _cpu6502_noop(60440);
        _cpu6502_noop(60424);
        _cpu6502_noop(60408);
        _cpu6502_1op(60608,61160);
        _cpu6502_1op(60712,61160);
        _cpu6502_noop(60456);
        _cpu6502_1op(60608,62200);
        _cpu6502_1op(60616,61160);
       } else {
        $1483 = (_strcmp(33104,60896)|0);
        $1484 = ($1483|0)==(0);
        do {
         if ($1484) {
          $1485 = (_strcmp(61176,60896)|0);
          $1486 = ($1485|0)==(0);
          if (!($1486)) {
           label = 486;
           break;
          }
          _cpu6502_1op(60728,61160);
          _cpu6502_1op(60616,61160);
         } else {
          label = 486;
         }
        } while(0);
        if ((label|0) == 486) {
         _cpu6502_noop(60408);
         $1487 = (_strcmp(33104,60896)|0);
         $1488 = ($1487|0)!=(0);
         if ($1488) {
          _cpu6502_1op(60608,33104);
         }
         _cpu6502_1op(60712,61160);
         _cpu6502_noop(60456);
         _cpu6502_1op(60608,61176);
         _cpu6502_1op(60616,61160);
        }
       }
       $1489 = $1;
       $1490 = ($1489|0)!=(0);
       if ($1490) {
        HEAP32[34168>>2] = 1;
        $1491 = $1;
        HEAP32[$vararg_buffer118>>2] = $1491;
        (_sprintf(33104,60944,$vararg_buffer118)|0);
        _cpu6502_1op(60760,33104);
       } else {
        $1492 = HEAP32[1688>>2]|0;
        $1493 = (($1492) + 1)|0;
        HEAP32[1688>>2] = $1493;
        HEAP32[$vararg_buffer121>>2] = $1492;
        (_sprintf(33104,60944,$vararg_buffer121)|0);
        _cpu6502_1op(60736,33104);
        _cpu6502_1op(60544,60896);
        _cpu6502_1op(60816,61168);
        _cpu6502_label(33104);
        _cpu6502_1op(60544,60880);
        _cpu6502_empty();
       }
      } else {
       $1494 = $0;
       $1495 = HEAP32[$1494>>2]|0;
       $1496 = ($1495|0)==(9);
       if ($1496) {
        $1497 = $stack;
        $1498 = ($1497|0)!=(0);
        if ($1498) {
         _cpu6502_noop(60424);
         _cpu6502_noop(60440);
         _cpu6502_noop(60424);
         _cpu6502_noop(60408);
         _cpu6502_1op(60608,61160);
         _cpu6502_1op(60712,61160);
         _cpu6502_noop(60456);
         _cpu6502_1op(60608,62200);
         _cpu6502_1op(60616,61160);
        } else {
         $1499 = (_strcmp(33104,60896)|0);
         $1500 = ($1499|0)==(0);
         do {
          if ($1500) {
           $1501 = (_strcmp(61176,60896)|0);
           $1502 = ($1501|0)==(0);
           if (!($1502)) {
            label = 500;
            break;
           }
           _cpu6502_1op(60728,61160);
           _cpu6502_1op(60616,61160);
          } else {
           label = 500;
          }
         } while(0);
         if ((label|0) == 500) {
          _cpu6502_noop(60408);
          $1503 = (_strcmp(33104,60896)|0);
          $1504 = ($1503|0)!=(0);
          if ($1504) {
           _cpu6502_1op(60608,33104);
          }
          _cpu6502_1op(60712,61160);
          _cpu6502_noop(60456);
          _cpu6502_1op(60608,61176);
          _cpu6502_1op(60616,61160);
         }
        }
        $1505 = $1;
        $1506 = ($1505|0)!=(0);
        if ($1506) {
         HEAP32[34168>>2] = 1;
         $1507 = $1;
         HEAP32[$vararg_buffer124>>2] = $1507;
         (_sprintf(33104,60944,$vararg_buffer124)|0);
         _cpu6502_1op(60744,33104);
        } else {
         $1508 = HEAP32[1688>>2]|0;
         $1509 = (($1508) + 1)|0;
         HEAP32[1688>>2] = $1509;
         HEAP32[$vararg_buffer127>>2] = $1508;
         (_sprintf(33104,60944,$vararg_buffer127)|0);
         _cpu6502_1op(60752,33104);
         _cpu6502_1op(60544,60896);
         _cpu6502_1op(60816,61168);
         _cpu6502_label(33104);
         _cpu6502_1op(60544,60880);
         _cpu6502_empty();
        }
       } else {
        $1510 = $0;
        $1511 = HEAP32[$1510>>2]|0;
        $1512 = ($1511|0)==(11);
        do {
         if ($1512) {
          label = 510;
         } else {
          $1513 = $0;
          $1514 = HEAP32[$1513>>2]|0;
          $1515 = ($1514|0)==(15);
          if ($1515) {
           label = 510;
           break;
          }
          $1521 = $0;
          $1522 = HEAP32[$1521>>2]|0;
          $1523 = ($1522|0)==(13);
          do {
           if ($1523) {
            label = 519;
           } else {
            $1524 = $0;
            $1525 = HEAP32[$1524>>2]|0;
            $1526 = ($1525|0)==(17);
            if ($1526) {
             label = 519;
             break;
            }
            $1532 = $0;
            $1533 = HEAP32[$1532>>2]|0;
            $1534 = ($1533|0)==(27);
            if ($1534) {
             $1535 = $stack;
             $1536 = ($1535|0)!=(0);
             if ($1536) {
              _cpu6502_noop(60424);
              _cpu6502_noop(60440);
              _cpu6502_noop(60424);
              _cpu6502_noop(60416);
              _cpu6502_1op(60600,61160);
              _cpu6502_noop(60432);
              _cpu6502_noop(60456);
              _cpu6502_1op(60600,62200);
              _cpu6502_noop(60440);
              _cpu6502_noop(60448);
             } else {
              _cpu6502_noop(60416);
              _cpu6502_1op(60600,33104);
              _cpu6502_noop(60432);
              _cpu6502_noop(60456);
              _cpu6502_1op(60600,61176);
              _cpu6502_noop(60440);
              _cpu6502_noop(60448);
             }
            } else {
             $1537 = $0;
             $1538 = HEAP32[$1537>>2]|0;
             $1539 = ($1538|0)==(29);
             if ($1539) {
              $1540 = $stack;
              $1541 = ($1540|0)!=(0);
              if ($1541) {
               _cpu6502_noop(60424);
               _cpu6502_noop(60440);
               _cpu6502_noop(60424);
               _cpu6502_noop(60408);
               _cpu6502_1op(60608,61160);
               _cpu6502_noop(60432);
               _cpu6502_noop(60456);
               _cpu6502_1op(60608,62200);
               _cpu6502_noop(60440);
               _cpu6502_noop(60448);
              } else {
               _cpu6502_noop(60408);
               _cpu6502_1op(60608,33104);
               _cpu6502_noop(60432);
               _cpu6502_noop(60456);
               _cpu6502_1op(60608,61176);
               _cpu6502_noop(60440);
               _cpu6502_noop(60448);
              }
             } else {
              $1542 = $stack;
              $1543 = ($1542|0)!=(0);
              if (!($1543)) {
               _cpu6502_noop(60384);
               _cpu6502_noop(60456);
               _cpu6502_noop(60384);
               _cpu6502_1op(60544,33104);
               _cpu6502_1op(60560,61176);
               _cpu6502_1op(60712,61160);
               _cpu6502_1op(60728,62200);
              }
              $1544 = $0;
              $1545 = HEAP32[$1544>>2]|0;
              $1546 = ($1545|0)==(31);
              if ($1546) {
               _cpu6502_1op(60696,62256);
              } else {
               $1547 = $0;
               $1548 = HEAP32[$1547>>2]|0;
               $1549 = ($1548|0)==(33);
               if ($1549) {
                _cpu6502_1op(60696,62264);
               } else {
                $1550 = $0;
                $1551 = HEAP32[$1550>>2]|0;
                $1552 = ($1551|0)==(35);
                if ($1552) {
                 _cpu6502_1op(60696,62272);
                } else {
                 $1553 = $0;
                 $1554 = HEAP32[$1553>>2]|0;
                 $1555 = ($1554|0)==(34);
                 if ($1555) {
                  _cpu6502_1op(60696,62280);
                 } else {
                  $1556 = $0;
                  $1557 = HEAP32[$1556>>2]|0;
                  $1558 = ($1557|0)==(36);
                  if ($1558) {
                   _cpu6502_1op(60696,62288);
                  }
                 }
                }
               }
              }
             }
            }
           }
          } while(0);
          if ((label|0) == 519) {
           $1527 = $stack;
           $1528 = ($1527|0)!=(0);
           if ($1528) {
            _cpu6502_noop(60424);
            _cpu6502_noop(60440);
            _cpu6502_noop(60424);
            _cpu6502_noop(60408);
            _cpu6502_1op(60608,61160);
            _cpu6502_noop(60456);
            _cpu6502_1op(60608,62200);
           } else {
            _cpu6502_noop(60408);
            _cpu6502_1op(60608,33104);
            _cpu6502_noop(60456);
            _cpu6502_1op(60608,61176);
           }
           $1529 = $1;
           $1530 = ($1529|0)!=(0);
           if ($1530) {
            HEAP32[34168>>2] = 1;
            $1531 = $1;
            HEAP32[$vararg_buffer133>>2] = $1531;
            (_sprintf(33104,60944,$vararg_buffer133)|0);
            _cpu6502_1op(60776,33104);
           } else {
            _cpu6502_1op(60544,60880);
            _cpu6502_1op(60600,60896);
            _cpu6502_1op(60624,60880);
           }
          }
         }
        } while(0);
        if ((label|0) == 510) {
         $1516 = $stack;
         $1517 = ($1516|0)!=(0);
         if ($1517) {
          _cpu6502_noop(60424);
          _cpu6502_noop(60440);
          _cpu6502_noop(60424);
          _cpu6502_noop(60408);
          _cpu6502_1op(60608,61160);
          _cpu6502_noop(60456);
          _cpu6502_1op(60608,62200);
         } else {
          _cpu6502_noop(60408);
          _cpu6502_1op(60608,33104);
          _cpu6502_noop(60456);
          _cpu6502_1op(60608,61176);
         }
         $1518 = $1;
         $1519 = ($1518|0)!=(0);
         if ($1519) {
          HEAP32[34168>>2] = 1;
          $1520 = $1;
          HEAP32[$vararg_buffer130>>2] = $1520;
          (_sprintf(33104,60944,$vararg_buffer130)|0);
          _cpu6502_1op(60792,33104);
         } else {
          _cpu6502_1op(60544,60880);
          _cpu6502_1op(60600,60896);
         }
        }
       }
      }
     }
    }
   }
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function _cpu6502_8bit_simple($node) {
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $node;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 L1: do {
  switch ($3|0) {
  case 39: case 37:  {
   $4 = $1;
   $5 = (($4) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (_cpu6502_8bit_simple($6)|0);
   $0 = $7;
   break;
  }
  case 67: case 65: case 64: case 61: case 60: case 59: case 58: case 55: case 50: case 44:  {
   $0 = 1;
   break;
  }
  case 32: case 30: case 28: case 26: case 16: case 10: case 8: case 6: case 4: case 2: case 0:  {
   $22 = $1;
   $23 = (($22) + 12|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)!=(50);
   if ($26) {
    $27 = $1;
    $28 = (($27) + 12|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30|0)!=(44);
    if ($31) {
     $0 = 0;
     break L1;
    }
   }
   $32 = $1;
   $33 = (($32) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (_cpu6502_8bit_simple($34)|0);
   $0 = $35;
   break;
  }
  case 14: case 12:  {
   $8 = $1;
   $9 = (($8) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)!=(50);
   if ($12) {
    $13 = $1;
    $14 = (($13) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)!=(44);
    if ($17) {
     $0 = 0;
     break L1;
    }
   }
   $18 = $1;
   $19 = (($18) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (_cpu6502_8bit_simple($20)|0);
   $0 = $21;
   break;
  }
  default: {
   $0 = 0;
  }
  }
 } while(0);
 $36 = $0;
 STACKTOP = sp;return ($36|0);
}
function _cpuz80_dump() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $0 = HEAP8[62304>>0]|0;
 $1 = ($0<<24>>24)!=(0);
 if ($1) {
  $2 = HEAP32[2824>>2]|0;
  HEAP32[$vararg_buffer>>2] = 62304;
  (_fprintf(($2|0),(63328|0),($vararg_buffer|0))|0);
 }
 $3 = HEAP8[63336>>0]|0;
 $4 = ($3<<24>>24)!=(0);
 if ($4) {
  $5 = HEAP32[2824>>2]|0;
  HEAP32[$vararg_buffer1>>2] = 63336;
  (_fprintf(($5|0),(63328|0),($vararg_buffer1|0))|0);
 }
 $6 = HEAP8[64360>>0]|0;
 $7 = ($6<<24>>24)!=(0);
 if (!($7)) {
  HEAP8[62304>>0] = 0;
  HEAP8[63336>>0] = 0;
  HEAP8[64360>>0] = 0;
  STACKTOP = sp;return;
 }
 $8 = HEAP32[2824>>2]|0;
 HEAP32[$vararg_buffer4>>2] = 64360;
 (_fprintf(($8|0),(63328|0),($vararg_buffer4|0))|0);
 HEAP8[62304>>0] = 0;
 HEAP8[63336>>0] = 0;
 HEAP8[64360>>0] = 0;
 STACKTOP = sp;return;
}
function _cpuz80_label($label) {
 $label = $label|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $label;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 (_sprintf(65384,66408,$vararg_buffer)|0);
 _z80_emit_line();
 HEAP8[66416>>0] = 0;
 HEAP8[67440>>0] = 0;
 HEAP32[68464>>2] = 0;
 STACKTOP = sp;return;
}
function _z80_emit_line() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_memcmp(63336,69344,9)|0);
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $2 = HEAP8[((63336 + 9|0))>>0]|0;
   $3 = $2 << 24 >> 24;
   $4 = (_isdigit($3)|0);
   $5 = ($4|0)!=(0);
   if ($5) {
    $6 = (_memcmp(64360,69360,4)|0);
    $7 = ($6|0)==(0);
    if (!($7)) {
     $8 = (_memcmp(64360,69368,6)|0);
     $9 = ($8|0)==(0);
     if (!($9)) {
      break;
     }
    }
    $10 = (_memcmp(65384,69376,2)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $12 = HEAP8[((65384 + 2|0))>>0]|0;
     $13 = $12 << 24 >> 24;
     $14 = (_isdigit($13)|0);
     $15 = ($14|0)!=(0);
     if ($15) {
      $16 = (_atoi(((63336 + 9|0)))|0);
      $17 = (_atoi(((65384 + 2|0)))|0);
      $18 = ($16|0)==($17|0);
      if ($18) {
       $19 = HEAP8[((64360 + 1|0))>>0]|0;
       $20 = $19 << 24 >> 24;
       $21 = ($20|0)==(74);
       if ($21) {
        (_strcpy((63336|0),(69384|0))|0);
        (_strcat((63336|0),(((64360 + 4|0))|0))|0);
       } else {
        (_strcpy((63336|0),(69392|0))|0);
        (_strcat((63336|0),(((64360 + 6|0))|0))|0);
       }
       HEAP8[64360>>0] = 0;
       HEAP8[65384>>0] = 0;
      }
     }
    }
   }
  }
 } while(0);
 $22 = (_memcmp(64360,69408,8)|0);
 $23 = ($22|0)==(0);
 if ($23) {
  $24 = (_memcmp(65384,69424,5)|0);
  $25 = ($24|0)==(0);
  if ($25) {
   (_strcpy((65384|0),(69360|0))|0);
   (_strcat((65384|0),(((64360 + 6|0))|0))|0);
   HEAP8[64360>>0] = 0;
  }
 }
 $26 = HEAP8[62304>>0]|0;
 $27 = ($26<<24>>24)!=(0);
 if (!($27)) {
  (_strcpy((62304|0),(63336|0))|0);
  (_strcpy((63336|0),(64360|0))|0);
  (_strcpy((64360|0),(65384|0))|0);
  STACKTOP = sp;return;
 }
 $28 = HEAP32[2824>>2]|0;
 HEAP32[$vararg_buffer>>2] = 62304;
 (_fprintf(($28|0),(63328|0),($vararg_buffer|0))|0);
 (_strcpy((62304|0),(63336|0))|0);
 (_strcpy((63336|0),(64360|0))|0);
 (_strcpy((64360|0),(65384|0))|0);
 STACKTOP = sp;return;
}
function _cpuz80_empty() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[66416>>0] = 0;
 HEAP32[68464>>2] = 0;
 STACKTOP = sp;return;
}
function _cpuz80_noop($mnemonic) {
 $mnemonic = $mnemonic|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $mnemonic;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 (_sprintf(65384,68472,$vararg_buffer)|0);
 _z80_emit_line();
 HEAP8[66416>>0] = 0;
 $2 = $0;
 $3 = (_strcmp($2,68480)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  HEAP32[68464>>2] = 1;
  STACKTOP = sp;return;
 } else {
  HEAP32[68464>>2] = 0;
  STACKTOP = sp;return;
 }
}
function _cpuz80_1op($mnemonic,$operand) {
 $mnemonic = $mnemonic|0;
 $operand = $operand|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0;
 var $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $mnemonic;
 $1 = $operand;
 $2 = $0;
 $3 = (_strcmp($2,68488)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = $1;
  $6 = (_strcmp($5,68496)|0);
  $7 = ($6|0)==(0);
  do {
   if ($7) {
    $8 = (_strcmp(66416,68504)|0);
    $9 = ($8|0)==(0);
    if (!($9)) {
     break;
    }
    STACKTOP = sp;return;
   }
  } while(0);
 }
 $10 = $0;
 $11 = (_strcmp($10,68512)|0);
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = $1;
  $14 = (_strcmp($13,68496)|0);
  $15 = ($14|0)==(0);
  do {
   if ($15) {
    $16 = HEAP32[68464>>2]|0;
    $17 = ($16|0)!=(0);
    if (!($17)) {
     break;
    }
    STACKTOP = sp;return;
   }
  } while(0);
 }
 $18 = $0;
 $19 = $1;
 HEAP32[$vararg_buffer>>2] = $18;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $19;
 (_sprintf(65384,68520,$vararg_buffer)|0);
 _z80_emit_line();
 $20 = $0;
 $21 = (_strcmp($20,68528)|0);
 $22 = ($21|0)==(0);
 if ($22) {
  STACKTOP = sp;return;
 }
 $23 = $0;
 $24 = (_strcmp($23,68536)|0);
 $25 = ($24|0)==(0);
 if ($25) {
  HEAP32[68464>>2] = 0;
 } else {
  $26 = $0;
  $27 = (_strcmp($26,68544)|0);
  $28 = ($27|0)==(0);
  if ($28) {
   $29 = $1;
   $30 = (_strcmp($29,68552)|0);
   $31 = ($30|0)==(0);
   if ($31) {
    HEAP8[66416>>0] = 0;
    HEAP32[68464>>2] = 0;
   } else {
    $32 = $1;
    $33 = (_strcmp($32,68560)|0);
    $34 = ($33|0)==(0);
    if ($34) {
     HEAP8[67440>>0] = 0;
    }
   }
  } else {
   $35 = $0;
   $36 = (_strcmp($35,68568)|0);
   $37 = ($36|0)==(0);
   if ($37) {
    label = 26;
   } else {
    $38 = $0;
    $39 = (_strcmp($38,68576)|0);
    $40 = ($39|0)==(0);
    if ($40) {
     label = 26;
    } else {
     $41 = $0;
     $42 = (_strcmp($41,68488)|0);
     $43 = ($42|0)==(0);
     if ($43) {
      $44 = $1;
      $45 = (_strcmp($44,68496)|0);
      $46 = ($45|0)==(0);
      if ($46) {
       (_strcpy((66416|0),(68504|0))|0);
      } else {
       HEAP8[66416>>0] = 0;
      }
      HEAP32[68464>>2] = 1;
     } else {
      $47 = $0;
      $48 = (_strcmp($47,68584)|0);
      $49 = ($48|0)==(0);
      if ($49) {
       label = 35;
      } else {
       $50 = $0;
       $51 = (_strcmp($50,68592)|0);
       $52 = ($51|0)==(0);
       if ($52) {
        label = 35;
       } else {
        $53 = $0;
        $54 = (_strcmp($53,68512)|0);
        $55 = ($54|0)==(0);
        if ($55) {
         label = 35;
        } else {
         $56 = $0;
         $57 = (_strcmp($56,68600)|0);
         $58 = ($57|0)==(0);
         if ($58) {
          $59 = $1;
          $60 = (_strcmp($59,68608)|0);
          $61 = ($60|0)==(0);
          if ($61) {
           HEAP8[67440>>0] = 0;
          } else {
           $62 = $1;
           $63 = (_strcmp($62,68496)|0);
           $64 = ($63|0)==(0);
           if ($64) {
            HEAP32[68464>>2] = 1;
           }
          }
         } else {
          $65 = $0;
          $66 = (_strcmp($65,68616)|0);
          $67 = ($66|0)==(0);
          if ($67) {
           $68 = $1;
           $69 = (_strcmp($68,68624)|0);
           $70 = ($69|0)==(0);
           if ($70) {
            HEAP8[67440>>0] = 0;
           }
           HEAP32[68464>>2] = 0;
          } else {
           $71 = $0;
           $72 = (_strcmp($71,68632)|0);
           $73 = ($72|0)==(0);
           if ($73) {
            $74 = $1;
            $75 = (_strcmp($74,68608)|0);
            $76 = ($75|0)==(0);
            do {
             if ($76) {
              label = 51;
             } else {
              $77 = $1;
              $78 = (_strcmp($77,68624)|0);
              $79 = ($78|0)==(0);
              if ($79) {
               label = 51;
               break;
              }
              $80 = $1;
              $81 = (_strcmp($80,68560)|0);
              $82 = ($81|0)==(0);
              if ($82) {
               label = 51;
               break;
              }
              $83 = $1;
              $84 = (_strcmp($83,68496)|0);
              $85 = ($84|0)==(0);
              if ($85) {
               HEAP8[66416>>0] = 0;
               HEAP32[68464>>2] = 1;
              } else {
               $86 = $1;
               $87 = (_strcmp($86,68640)|0);
               $88 = ($87|0)==(0);
               if ($88) {
                HEAP8[66416>>0] = 0;
                HEAP32[68464>>2] = 0;
               }
              }
             }
            } while(0);
            if ((label|0) == 51) {
             HEAP8[67440>>0] = 0;
             HEAP32[68464>>2] = 0;
            }
           } else {
            $89 = $0;
            $90 = (_strcmp($89,68648)|0);
            $91 = ($90|0)==(0);
            if ($91) {
             $92 = $1;
             $93 = (_strcmp($92,68608)|0);
             $94 = ($93|0)==(0);
             do {
              if ($94) {
               label = 63;
              } else {
               $95 = $1;
               $96 = (_strcmp($95,68624)|0);
               $97 = ($96|0)==(0);
               if ($97) {
                label = 63;
                break;
               }
               $98 = $1;
               $99 = (_strcmp($98,68560)|0);
               $100 = ($99|0)==(0);
               if ($100) {
                label = 63;
                break;
               }
               $101 = $1;
               $102 = (_strcmp($101,68496)|0);
               $103 = ($102|0)==(0);
               if ($103) {
                HEAP8[66416>>0] = 0;
                HEAP32[68464>>2] = 1;
               } else {
                $104 = $1;
                $105 = (_strcmp($104,68640)|0);
                $106 = ($105|0)==(0);
                if ($106) {
                 HEAP8[66416>>0] = 0;
                 HEAP32[68464>>2] = 0;
                }
               }
              }
             } while(0);
             if ((label|0) == 63) {
              HEAP8[67440>>0] = 0;
              HEAP32[68464>>2] = 0;
             }
            } else {
             $107 = $0;
             $108 = (_strcmp($107,68656)|0);
             $109 = ($108|0)==(0);
             do {
              if ($109) {
               label = 74;
              } else {
               $110 = $0;
               $111 = (_strcmp($110,68664)|0);
               $112 = ($111|0)==(0);
               if ($112) {
                label = 74;
                break;
               }
               $113 = $0;
               $114 = (_strcmp($113,68672)|0);
               $115 = ($114|0)==(0);
               if ($115) {
                label = 74;
                break;
               }
               $116 = HEAP32[_stderr>>2]|0;
               $117 = $0;
               HEAP32[$vararg_buffer2>>2] = $117;
               (_fprintf(($116|0),(68680|0),($vararg_buffer2|0))|0);
              }
             } while(0);
             if ((label|0) == 74) {
             }
            }
           }
          }
         }
        }
       }
      }
      if ((label|0) == 35) {
       HEAP8[66416>>0] = 0;
       HEAP32[68464>>2] = 1;
      }
     }
    }
   }
   if ((label|0) == 26) {
    HEAP8[66416>>0] = 0;
    HEAP8[67440>>0] = 0;
    HEAP32[68464>>2] = 0;
   }
  }
 }
 STACKTOP = sp;return;
}
function _cpuz80_2op($mnemonic,$operand1,$operand2) {
 $mnemonic = $mnemonic|0;
 $operand1 = $operand1|0;
 $operand2 = $operand2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $special = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = $mnemonic;
 $1 = $operand1;
 $2 = $operand2;
 $special = 0;
 $3 = $0;
 $4 = (_strcmp($3,68720)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = $1;
  $7 = (_strcmp($6,68496)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $9 = $2;
   $10 = (_strcmp($9,66416)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    STACKTOP = sp;return;
   }
   $12 = $2;
   $13 = (_strcmp($12,67440)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    $2 = 68624;
   } else {
    $15 = $2;
    $16 = HEAP8[$15>>0]|0;
    $17 = $16 << 24 >> 24;
    $18 = ($17|0)==(40);
    if ($18) {
     $19 = $2;
     $20 = (_strlen(($19|0))|0);
     $21 = (($20) - 1)|0;
     $22 = $2;
     $23 = (($22) + ($21)|0);
     $24 = HEAP8[$23>>0]|0;
     $25 = $24 << 24 >> 24;
     $26 = ($25|0)==(41);
     if ($26) {
      $27 = $2;
      $28 = (($27) + 1|0);
      $29 = $2;
      $30 = (_strlen(($29|0))|0);
      $31 = (($30) - 2)|0;
      $32 = (_memcmp($28,67440,$31)|0);
      $33 = ($32|0)==(0);
      if ($33) {
       $34 = $2;
       $35 = (_strlen(($34|0))|0);
       $36 = (($35) - 2)|0;
       $37 = (67440 + ($36)|0);
       $38 = HEAP8[$37>>0]|0;
       $39 = $38 << 24 >> 24;
       $40 = ($39|0)==(0);
       if ($40) {
        HEAP32[68464>>2] = 0;
        $41 = $2;
        (_strcpy((66416|0),($41|0))|0);
        $special = 1;
        $2 = 68640;
       }
      }
     }
    }
   }
  } else {
   $42 = $1;
   $43 = (_strcmp($42,68560)|0);
   $44 = ($43|0)==(0);
   do {
    if ($44) {
     $45 = $2;
     $46 = (_strcmp($45,67440)|0);
     $47 = ($46|0)==(0);
     if (!($47)) {
      break;
     }
     STACKTOP = sp;return;
    } else {
     $48 = $2;
     $49 = (_strcmp($48,68496)|0);
     $50 = ($49|0)==(0);
     if ($50) {
      $51 = $1;
      $52 = HEAP8[$51>>0]|0;
      $53 = $52 << 24 >> 24;
      $54 = ($53|0)==(40);
      if ($54) {
       $55 = $1;
       $56 = (_strlen(($55|0))|0);
       $57 = (($56) - 1)|0;
       $58 = $1;
       $59 = (($58) + ($57)|0);
       $60 = HEAP8[$59>>0]|0;
       $61 = $60 << 24 >> 24;
       $62 = ($61|0)==(41);
       if ($62) {
        $63 = $1;
        $64 = (($63) + 1|0);
        $65 = $1;
        $66 = (_strlen(($65|0))|0);
        $67 = (($66) - 2)|0;
        $68 = (_memcmp($64,67440,$67)|0);
        $69 = ($68|0)==(0);
        if ($69) {
         $70 = $1;
         $71 = (_strlen(($70|0))|0);
         $72 = (($71) - 2)|0;
         $73 = (67440 + ($72)|0);
         $74 = HEAP8[$73>>0]|0;
         $75 = $74 << 24 >> 24;
         $76 = ($75|0)==(0);
         if ($76) {
          $77 = $1;
          (_strcpy((66416|0),($77|0))|0);
          $special = 1;
          $1 = 68640;
         }
        }
       }
      }
     }
    }
   } while(0);
  }
 }
 $78 = $0;
 $79 = $1;
 $80 = $2;
 HEAP32[$vararg_buffer>>2] = $78;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $79;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $80;
 (_sprintf(65384,68728,$vararg_buffer)|0);
 _z80_emit_line();
 $81 = $0;
 $82 = (_strcmp($81,68576)|0);
 $83 = ($82|0)==(0);
 if (!($83)) {
  $84 = $0;
  $85 = (_strcmp($84,68744)|0);
  $86 = ($85|0)==(0);
  if (!($86)) {
   $87 = $0;
   $88 = (_strcmp($87,68752)|0);
   $89 = ($88|0)==(0);
   if (!($89)) {
    $90 = $0;
    $91 = (_strcmp($90,68760)|0);
    $92 = ($91|0)==(0);
    if (!($92)) {
     $93 = $0;
     $94 = (_strcmp($93,68768)|0);
     $95 = ($94|0)==(0);
     if (!($95)) {
      $96 = $0;
      $97 = (_strcmp($96,68776)|0);
      $98 = ($97|0)==(0);
      if ($98) {
       HEAP8[67440>>0] = 0;
      } else {
       $99 = $0;
       $100 = (_strcmp($99,68784)|0);
       $101 = ($100|0)==(0);
       if ($101) {
        HEAP8[66416>>0] = 0;
        HEAP32[68464>>2] = 0;
       } else {
        $102 = $0;
        $103 = (_strcmp($102,68792)|0);
        $104 = ($103|0)==(0);
        if ($104) {
         label = 41;
        } else {
         $105 = $0;
         $106 = (_strcmp($105,68800)|0);
         $107 = ($106|0)==(0);
         if ($107) {
          label = 41;
         } else {
          $108 = $0;
          $109 = (_strcmp($108,68808)|0);
          $110 = ($109|0)==(0);
          if ($110) {
           label = 41;
          } else {
           $114 = $0;
           $115 = (_strcmp($114,68720)|0);
           $116 = ($115|0)==(0);
           if ($116) {
            $117 = $special;
            $118 = ($117|0)!=(0);
            if ($118) {
             STACKTOP = sp;return;
            }
            $119 = $1;
            $120 = (_strcmp($119,68496)|0);
            $121 = ($120|0)==(0);
            if ($121) {
             HEAP32[68464>>2] = 0;
            }
            $122 = $1;
            $123 = (_strcmp($122,68624)|0);
            $124 = ($123|0)==(0);
            if ($124) {
             label = 52;
            } else {
             $125 = $1;
             $126 = (_strcmp($125,68608)|0);
             $127 = ($126|0)==(0);
             if ($127) {
              label = 52;
             }
            }
            if ((label|0) == 52) {
             HEAP8[67440>>0] = 0;
            }
            $128 = $1;
            $129 = (_strcmp($128,68560)|0);
            $130 = ($129|0)==(0);
            if ($130) {
             $131 = $2;
             (_strcpy((67440|0),($131|0))|0);
            } else {
             $132 = $2;
             $133 = (_strcmp($132,68560)|0);
             $134 = ($133|0)==(0);
             if ($134) {
              $135 = $1;
              (_strcpy((67440|0),($135|0))|0);
             }
            }
            $136 = $1;
            $137 = (_strcmp($136,68496)|0);
            $138 = ($137|0)==(0);
            do {
             if ($138) {
              $139 = $2;
              $140 = (_strcmp($139,68640)|0);
              $141 = ($140|0)==(0);
              if (!($141)) {
               label = 61;
               break;
              }
              HEAP8[66416>>0] = 0;
             } else {
              label = 61;
             }
            } while(0);
            if ((label|0) == 61) {
             $142 = $1;
             $143 = (_strcmp($142,68640)|0);
             $144 = ($143|0)==(0);
             do {
              if ($144) {
               $145 = $2;
               $146 = (_strcmp($145,68496)|0);
               $147 = ($146|0)==(0);
               if (!($147)) {
                label = 64;
                break;
               }
              } else {
               label = 64;
              }
             } while(0);
             if ((label|0) == 64) {
              $148 = $1;
              $149 = (_strcmp($148,68496)|0);
              $150 = ($149|0)==(0);
              if ($150) {
               $151 = $2;
               $152 = HEAP8[$151>>0]|0;
               $153 = $152 << 24 >> 24;
               $154 = (_isdigit($153)|0);
               $155 = ($154|0)!=(0);
               do {
                if ($155) {
                 label = 67;
                } else {
                 $156 = $2;
                 $157 = HEAP8[$156>>0]|0;
                 $158 = $157 << 24 >> 24;
                 $159 = ($158|0)==(40);
                 if ($159) {
                  label = 67;
                  break;
                 }
                 HEAP8[66416>>0] = 0;
                }
               } while(0);
               if ((label|0) == 67) {
                $160 = $2;
                (_strcpy((66416|0),($160|0))|0);
               }
              } else {
               $161 = $2;
               $162 = (_strcmp($161,68496)|0);
               $163 = ($162|0)==(0);
               do {
                if ($163) {
                 $164 = $1;
                 $165 = HEAP8[$164>>0]|0;
                 $166 = $165 << 24 >> 24;
                 $167 = ($166|0)==(40);
                 if (!($167)) {
                  break;
                 }
                 $168 = $1;
                 (_strcpy((66416|0),($168|0))|0);
                }
               } while(0);
              }
             }
            }
           } else {
            $169 = HEAP32[_stderr>>2]|0;
            $170 = $0;
            HEAP32[$vararg_buffer3>>2] = $170;
            (_fprintf(($169|0),(68816|0),($vararg_buffer3|0))|0);
           }
          }
         }
        }
        if ((label|0) == 41) {
         $111 = $1;
         $112 = (_strcmp($111,68496)|0);
         $113 = ($112|0)==(0);
         if ($113) {
          HEAP8[66416>>0] = 0;
          HEAP32[68464>>2] = 1;
         } else {
          HEAP8[67440>>0] = 0;
          HEAP32[68464>>2] = 0;
         }
        }
       }
      }
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function _cpuz80_node_label($node) {
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0;
 var $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0;
 var $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0;
 var $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0;
 var $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0;
 var $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0;
 var $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0;
 var $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0;
 var $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0;
 var $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0;
 var $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0;
 var $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0;
 var $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0;
 var $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0;
 var $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0;
 var $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0;
 var $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0;
 var $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0;
 var $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0;
 var $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0;
 var $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0;
 var $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0;
 var $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0;
 var $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0;
 var $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0;
 var $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0;
 var $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0;
 var $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0;
 var $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0;
 var $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0;
 var $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $c = 0, $explore = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $node;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 do {
  switch ($2|0) {
  case 32: case 30: case 28: case 26: case 16: case 14: case 12: case 10: case 8: case 6: case 4: case 2: case 0:  {
   $294 = $0;
   $295 = HEAP32[$294>>2]|0;
   $296 = ($295|0)==(0);
   if ($296) {
    $297 = $0;
    $298 = (($297) + 8|0);
    $299 = HEAP32[$298>>2]|0;
    $300 = HEAP32[$299>>2]|0;
    $301 = ($300|0)==(58);
    if ($301) {
     $302 = $0;
     $303 = (($302) + 12|0);
     $304 = HEAP32[$303>>2]|0;
     $305 = HEAP32[$304>>2]|0;
     $306 = ($305|0)==(59);
     if ($306) {
      $307 = $0;
      $308 = (($307) + 20|0);
      HEAP32[$308>>2] = 195;
      STACKTOP = sp;return;
     }
    }
   }
   $309 = $0;
   $310 = HEAP32[$309>>2]|0;
   $311 = ($310|0)==(4);
   if ($311) {
    $312 = $0;
    $313 = (($312) + 8|0);
    $314 = HEAP32[$313>>2]|0;
    $315 = HEAP32[$314>>2]|0;
    $316 = ($315|0)==(60);
    if ($316) {
     $317 = $0;
     $318 = (($317) + 12|0);
     $319 = HEAP32[$318>>2]|0;
     $320 = HEAP32[$319>>2]|0;
     $321 = ($320|0)==(61);
     if ($321) {
      $322 = $0;
      $323 = (($322) + 20|0);
      HEAP32[$323>>2] = 195;
      STACKTOP = sp;return;
     }
    }
   }
   $324 = $0;
   $325 = HEAP32[$324>>2]|0;
   $326 = ($325|0)==(30);
   if ($326) {
    $327 = $0;
    $328 = (($327) + 12|0);
    $329 = HEAP32[$328>>2]|0;
    $330 = HEAP32[$329>>2]|0;
    $331 = ($330|0)==(50);
    if ($331) {
     $332 = $0;
     $333 = (($332) + 12|0);
     $334 = HEAP32[$333>>2]|0;
     $335 = (($334) + 4|0);
     $336 = HEAP32[$335>>2]|0;
     $337 = (_is_power_of_two($336)|0);
     $338 = ($337|0)!=(0);
     if ($338) {
      $339 = $0;
      $340 = (($339) + 8|0);
      $341 = HEAP32[$340>>2]|0;
      _cpuz80_node_label($341);
      $342 = $0;
      $343 = (($342) + 8|0);
      $344 = HEAP32[$343>>2]|0;
      $345 = (($344) + 20|0);
      $346 = HEAP32[$345>>2]|0;
      $347 = $0;
      $348 = (($347) + 20|0);
      HEAP32[$348>>2] = $346;
      $349 = $0;
      $350 = (($349) + 12|0);
      $351 = HEAP32[$350>>2]|0;
      $352 = (($351) + 4|0);
      $353 = HEAP32[$352>>2]|0;
      $c = $353;
      $354 = $c;
      $355 = ($354|0)>(1);
      if ($355) {
       $356 = $0;
       $357 = (($356) + 20|0);
       $358 = HEAP32[$357>>2]|0;
       $359 = $358 | 2;
       HEAP32[$357>>2] = $359;
      }
      STACKTOP = sp;return;
     }
    }
   }
   $360 = $0;
   $361 = HEAP32[$360>>2]|0;
   $362 = ($361|0)==(32);
   if ($362) {
    $363 = $0;
    $364 = (($363) + 12|0);
    $365 = HEAP32[$364>>2]|0;
    $366 = HEAP32[$365>>2]|0;
    $367 = ($366|0)==(50);
    if ($367) {
     $368 = $0;
     $369 = (($368) + 12|0);
     $370 = HEAP32[$369>>2]|0;
     $371 = (($370) + 4|0);
     $372 = HEAP32[$371>>2]|0;
     $373 = (_is_power_of_two($372)|0);
     $374 = ($373|0)!=(0);
     if ($374) {
      $375 = $0;
      $376 = (($375) + 8|0);
      $377 = HEAP32[$376>>2]|0;
      _cpuz80_node_label($377);
      $378 = $0;
      $379 = (($378) + 8|0);
      $380 = HEAP32[$379>>2]|0;
      $381 = (($380) + 20|0);
      $382 = HEAP32[$381>>2]|0;
      $383 = $0;
      $384 = (($383) + 20|0);
      HEAP32[$384>>2] = $382;
      $385 = $0;
      $386 = (($385) + 12|0);
      $387 = HEAP32[$386>>2]|0;
      $388 = (($387) + 4|0);
      $389 = HEAP32[$388>>2]|0;
      $c = $389;
      $390 = $c;
      $391 = ($390|0)>(1);
      if ($391) {
       $392 = $0;
       $393 = (($392) + 20|0);
       $394 = HEAP32[$393>>2]|0;
       $395 = $394 | 2;
       HEAP32[$393>>2] = $395;
      }
      STACKTOP = sp;return;
     }
    }
   }
   $396 = $0;
   $397 = HEAP32[$396>>2]|0;
   $398 = ($397|0)==(12);
   if ($398) {
    label = 70;
   } else {
    $399 = $0;
    $400 = HEAP32[$399>>2]|0;
    $401 = ($400|0)==(14);
    if ($401) {
     label = 70;
    } else {
     $445 = $0;
     $446 = (($445) + 12|0);
     $447 = HEAP32[$446>>2]|0;
     $448 = HEAP32[$447>>2]|0;
     $449 = ($448|0)==(50);
     if ($449) {
      $450 = $0;
      $451 = (($450) + 12|0);
      $452 = HEAP32[$451>>2]|0;
      $453 = (($452) + 4|0);
      $454 = HEAP32[$453>>2]|0;
      $455 = $454 & 255;
      $c = $455;
      $456 = $0;
      $457 = (($456) + 8|0);
      $458 = HEAP32[$457>>2]|0;
      _cpuz80_node_label($458);
      $459 = $0;
      $460 = (($459) + 8|0);
      $461 = HEAP32[$460>>2]|0;
      $462 = (($461) + 20|0);
      $463 = HEAP32[$462>>2]|0;
      $464 = $0;
      $465 = (($464) + 20|0);
      HEAP32[$465>>2] = $463;
     } else {
      $466 = $0;
      $467 = (($466) + 12|0);
      $468 = HEAP32[$467>>2]|0;
      _cpuz80_node_label($468);
      $469 = $0;
      $470 = (($469) + 8|0);
      $471 = HEAP32[$470>>2]|0;
      _cpuz80_node_label($471);
      $472 = $0;
      $473 = (($472) + 8|0);
      $474 = HEAP32[$473>>2]|0;
      $475 = (($474) + 20|0);
      $476 = HEAP32[$475>>2]|0;
      $477 = ($476|0)==(1);
      if ($477) {
       $478 = $0;
       $479 = (($478) + 20|0);
       HEAP32[$479>>2] = 5;
      } else {
       $480 = $0;
       $481 = (($480) + 8|0);
       $482 = HEAP32[$481>>2]|0;
       $483 = (($482) + 20|0);
       $484 = HEAP32[$483>>2]|0;
       $485 = $0;
       $486 = (($485) + 12|0);
       $487 = HEAP32[$486>>2]|0;
       $488 = (($487) + 20|0);
       $489 = HEAP32[$488>>2]|0;
       $490 = $484 | $489;
       $491 = $490 | 12;
       $492 = $0;
       $493 = (($492) + 20|0);
       HEAP32[$493>>2] = $491;
      }
     }
    }
   }
   if ((label|0) == 70) {
    $402 = $0;
    $403 = (($402) + 8|0);
    $404 = HEAP32[$403>>2]|0;
    $405 = HEAP32[$404>>2]|0;
    $406 = ($405|0)==(50);
    if ($406) {
     $407 = $0;
     $408 = (($407) + 12|0);
     $409 = HEAP32[$408>>2]|0;
     _cpuz80_node_label($409);
     $410 = $0;
     $411 = (($410) + 12|0);
     $412 = HEAP32[$411>>2]|0;
     $413 = (($412) + 20|0);
     $414 = HEAP32[$413>>2]|0;
     $415 = $0;
     $416 = (($415) + 20|0);
     HEAP32[$416>>2] = $414;
    } else {
     $417 = $0;
     $418 = (($417) + 8|0);
     $419 = HEAP32[$418>>2]|0;
     _cpuz80_node_label($419);
     $420 = $0;
     $421 = (($420) + 12|0);
     $422 = HEAP32[$421>>2]|0;
     _cpuz80_node_label($422);
     $423 = $0;
     $424 = (($423) + 12|0);
     $425 = HEAP32[$424>>2]|0;
     $426 = (($425) + 20|0);
     $427 = HEAP32[$426>>2]|0;
     $428 = ($427|0)==(1);
     if ($428) {
      $429 = $0;
      $430 = (($429) + 20|0);
      HEAP32[$430>>2] = 5;
     } else {
      $431 = $0;
      $432 = (($431) + 8|0);
      $433 = HEAP32[$432>>2]|0;
      $434 = (($433) + 20|0);
      $435 = HEAP32[$434>>2]|0;
      $436 = $0;
      $437 = (($436) + 12|0);
      $438 = HEAP32[$437>>2]|0;
      $439 = (($438) + 20|0);
      $440 = HEAP32[$439>>2]|0;
      $441 = $435 | $440;
      $442 = $441 | 12;
      $443 = $0;
      $444 = (($443) + 20|0);
      HEAP32[$444>>2] = $442;
     }
    }
   }
   STACKTOP = sp;return;
   break;
  }
  case 62:  {
   $292 = $0;
   $293 = (($292) + 20|0);
   HEAP32[$293>>2] = 255;
   STACKTOP = sp;return;
   break;
  }
  case 50:  {
   $173 = $0;
   $174 = (($173) + 4|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = ($175|0)==(0);
   if ($176) {
    $177 = $0;
    $178 = (($177) + 20|0);
    HEAP32[$178>>2] = 3;
   } else {
    $179 = $0;
    $180 = (($179) + 20|0);
    HEAP32[$180>>2] = 1;
   }
   STACKTOP = sp;return;
   break;
  }
  case 52:  {
   $181 = $0;
   $182 = (($181) + 8|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = HEAP32[$183>>2]|0;
   $185 = ($184|0)==(68);
   if ($185) {
    $186 = $0;
    $187 = (($186) + 20|0);
    HEAP32[$187>>2] = 1;
    STACKTOP = sp;return;
   }
   $188 = $0;
   $189 = (($188) + 8|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = HEAP32[$190>>2]|0;
   $192 = ($191|0)==(27);
   if ($192) {
    label = 33;
   } else {
    $193 = $0;
    $194 = (($193) + 8|0);
    $195 = HEAP32[$194>>2]|0;
    $196 = HEAP32[$195>>2]|0;
    $197 = ($196|0)==(29);
    if ($197) {
     label = 33;
    }
   }
   if ((label|0) == 33) {
    $198 = $0;
    $199 = (($198) + 8|0);
    $200 = HEAP32[$199>>2]|0;
    $201 = (($200) + 8|0);
    $202 = HEAP32[$201>>2]|0;
    $203 = HEAP32[$202>>2]|0;
    $204 = ($203|0)==(68);
    if ($204) {
     $205 = $0;
     $206 = (($205) + 8|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = (($207) + 12|0);
     $209 = HEAP32[$208>>2]|0;
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(51);
     if ($211) {
      $212 = $0;
      $213 = (($212) + 20|0);
      HEAP32[$213>>2] = 1;
      STACKTOP = sp;return;
     }
    }
   }
   $214 = $0;
   $215 = (($214) + 8|0);
   $216 = HEAP32[$215>>2]|0;
   _cpuz80_node_label($216);
   $217 = $0;
   $218 = (($217) + 8|0);
   $219 = HEAP32[$218>>2]|0;
   $220 = (($219) + 20|0);
   $221 = HEAP32[$220>>2]|0;
   $222 = $221 | 1;
   $223 = $0;
   $224 = (($223) + 20|0);
   HEAP32[$224>>2] = $222;
   STACKTOP = sp;return;
   break;
  }
  case 55:  {
   $280 = $0;
   $281 = (($280) + 8|0);
   $282 = HEAP32[$281>>2]|0;
   _cpuz80_node_label($282);
   $283 = $0;
   $284 = (($283) + 8|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = (($285) + 20|0);
   $287 = HEAP32[$286>>2]|0;
   $288 = $287 | 8;
   $289 = $288 | 3;
   $290 = $0;
   $291 = (($290) + 20|0);
   HEAP32[$291>>2] = $289;
   STACKTOP = sp;return;
   break;
  }
  case 69:  {
   $3 = $0;
   $4 = (($3) + 8|0);
   $5 = HEAP32[$4>>2]|0;
   $explore = $5;
   while(1) {
    $6 = $explore;
    $7 = ($6|0)!=(0|0);
    if (!($7)) {
     break;
    }
    $8 = $explore;
    $9 = (($8) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    _cpuz80_node_label($10);
    $11 = $explore;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $explore = $13;
   }
   $14 = $0;
   $15 = (($14) + 20|0);
   HEAP32[$15>>2] = 255;
   STACKTOP = sp;return;
   break;
  }
  case 49:  {
   $169 = $0;
   $170 = (($169) + 20|0);
   HEAP32[$170>>2] = 241;
   STACKTOP = sp;return;
   break;
  }
  case 42:  {
   $39 = $0;
   $40 = (($39) + 8|0);
   $41 = HEAP32[$40>>2]|0;
   _cpuz80_node_label($41);
   $42 = $0;
   $43 = (($42) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) + 20|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $46 | 192;
   $48 = $0;
   $49 = (($48) + 20|0);
   HEAP32[$49>>2] = $47;
   STACKTOP = sp;return;
   break;
  }
  case 53:  {
   $225 = $0;
   $226 = (($225) + 8|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = HEAP32[$227>>2]|0;
   $229 = ($228|0)==(68);
   if ($229) {
    $230 = $0;
    $231 = (($230) + 20|0);
    HEAP32[$231>>2] = 192;
    STACKTOP = sp;return;
   }
   $232 = $0;
   $233 = (($232) + 8|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = HEAP32[$234>>2]|0;
   $236 = ($235|0)==(27);
   if ($236) {
    label = 41;
   } else {
    $237 = $0;
    $238 = (($237) + 8|0);
    $239 = HEAP32[$238>>2]|0;
    $240 = HEAP32[$239>>2]|0;
    $241 = ($240|0)==(29);
    if ($241) {
     label = 41;
    }
   }
   if ((label|0) == 41) {
    $242 = $0;
    $243 = (($242) + 8|0);
    $244 = HEAP32[$243>>2]|0;
    $245 = (($244) + 8|0);
    $246 = HEAP32[$245>>2]|0;
    $247 = HEAP32[$246>>2]|0;
    $248 = ($247|0)==(68);
    if ($248) {
     $249 = $0;
     $250 = (($249) + 8|0);
     $251 = HEAP32[$250>>2]|0;
     $252 = (($251) + 12|0);
     $253 = HEAP32[$252>>2]|0;
     $254 = HEAP32[$253>>2]|0;
     $255 = ($254|0)==(51);
     if ($255) {
      $256 = $0;
      $257 = (($256) + 20|0);
      HEAP32[$257>>2] = 192;
      STACKTOP = sp;return;
     }
    }
   }
   $258 = $0;
   $259 = (($258) + 8|0);
   $260 = HEAP32[$259>>2]|0;
   _cpuz80_node_label($260);
   $261 = $0;
   $262 = (($261) + 8|0);
   $263 = HEAP32[$262>>2]|0;
   $264 = (($263) + 20|0);
   $265 = HEAP32[$264>>2]|0;
   $266 = $265 | 3;
   $267 = $0;
   $268 = (($267) + 20|0);
   HEAP32[$268>>2] = $266;
   STACKTOP = sp;return;
   break;
  }
  case 63: case 51: case 45: case 66: case 68:  {
   $16 = $0;
   $17 = (($16) + 20|0);
   HEAP32[$17>>2] = 192;
   STACKTOP = sp;return;
   break;
  }
  case 48:  {
   $167 = $0;
   $168 = (($167) + 20|0);
   HEAP32[$168>>2] = 193;
   STACKTOP = sp;return;
   break;
  }
  case 57: case 56: case 40: case 38:  {
   $28 = $0;
   $29 = (($28) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   _cpuz80_node_label($30);
   $31 = $0;
   $32 = (($31) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + 20|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $35 | 3;
   $37 = $0;
   $38 = (($37) + 20|0);
   HEAP32[$38>>2] = $36;
   STACKTOP = sp;return;
   break;
  }
  case 39: case 37:  {
   $18 = $0;
   $19 = (($18) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   _cpuz80_node_label($20);
   $21 = $0;
   $22 = (($21) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + 20|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $0;
   $27 = (($26) + 20|0);
   HEAP32[$27>>2] = $25;
   STACKTOP = sp;return;
   break;
  }
  case 43:  {
   $156 = $0;
   $157 = (($156) + 8|0);
   $158 = HEAP32[$157>>2]|0;
   _cpuz80_node_label($158);
   $159 = $0;
   $160 = (($159) + 8|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = (($161) + 20|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = $163 | 1;
   $165 = $0;
   $166 = (($165) + 20|0);
   HEAP32[$166>>2] = $164;
   STACKTOP = sp;return;
   break;
  }
  case 54:  {
   $269 = $0;
   $270 = (($269) + 8|0);
   $271 = HEAP32[$270>>2]|0;
   _cpuz80_node_label($271);
   $272 = $0;
   $273 = (($272) + 8|0);
   $274 = HEAP32[$273>>2]|0;
   $275 = (($274) + 20|0);
   $276 = HEAP32[$275>>2]|0;
   $277 = $276 | 3;
   $278 = $0;
   $279 = (($278) + 20|0);
   HEAP32[$279>>2] = $277;
   STACKTOP = sp;return;
   break;
  }
  case 67: case 65: case 64: case 61: case 60: case 59: case 58: case 44:  {
   $171 = $0;
   $172 = (($171) + 20|0);
   HEAP32[$172>>2] = 1;
   STACKTOP = sp;return;
   break;
  }
  case 41:  {
   $50 = $0;
   $51 = (($50) + 8|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)==(44);
   if ($54) {
    $55 = $0;
    $56 = (($55) + 8|0);
    $57 = HEAP32[$56>>2]|0;
    HEAP32[$57>>2] = 45;
    $58 = $0;
    $59 = (($58) + 8|0);
    $60 = HEAP32[$59>>2]|0;
    _cpuz80_node_label($60);
    $61 = $0;
    $62 = (($61) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    HEAP32[$63>>2] = 44;
    $64 = $0;
    $65 = (($64) + 8|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = (($66) + 20|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = $0;
    $70 = (($69) + 20|0);
    HEAP32[$70>>2] = $68;
    STACKTOP = sp;return;
   }
   $71 = $0;
   $72 = (($71) + 8|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = HEAP32[$73>>2]|0;
   $75 = ($74|0)==(52);
   if (!($75)) {
    $145 = $0;
    $146 = (($145) + 8|0);
    $147 = HEAP32[$146>>2]|0;
    _cpuz80_node_label($147);
    $148 = $0;
    $149 = (($148) + 8|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = (($150) + 20|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = $152 | 192;
    $154 = $0;
    $155 = (($154) + 20|0);
    HEAP32[$155>>2] = $153;
    STACKTOP = sp;return;
   }
   $76 = $0;
   $77 = (($76) + 8|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (($78) + 8|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)==(68);
   do {
    if (!($82)) {
     $83 = $0;
     $84 = (($83) + 8|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = (($85) + 8|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = HEAP32[$87>>2]|0;
     $89 = ($88|0)==(27);
     if ($89) {
      label = 16;
     } else {
      $90 = $0;
      $91 = (($90) + 8|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = (($92) + 8|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = HEAP32[$94>>2]|0;
      $96 = ($95|0)==(29);
      if ($96) {
       label = 16;
      }
     }
     if ((label|0) == 16) {
      $97 = $0;
      $98 = (($97) + 8|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = (($99) + 8|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = (($101) + 8|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = HEAP32[$103>>2]|0;
      $105 = ($104|0)==(68);
      if ($105) {
       $106 = $0;
       $107 = (($106) + 8|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = (($108) + 8|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = (($110) + 12|0);
       $112 = HEAP32[$111>>2]|0;
       $113 = HEAP32[$112>>2]|0;
       $114 = ($113|0)==(51);
       if ($114) {
        break;
       }
      }
     }
     $131 = $0;
     $132 = (($131) + 8|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = (($133) + 8|0);
     $135 = HEAP32[$134>>2]|0;
     _cpuz80_node_label($135);
     $136 = $0;
     $137 = (($136) + 8|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = (($138) + 8|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = (($140) + 20|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = $0;
     $144 = (($143) + 20|0);
     HEAP32[$144>>2] = $142;
     STACKTOP = sp;return;
    }
   } while(0);
   $115 = $0;
   $116 = (($115) + 8|0);
   $117 = HEAP32[$116>>2]|0;
   HEAP32[$117>>2] = 53;
   $118 = $0;
   $119 = (($118) + 8|0);
   $120 = HEAP32[$119>>2]|0;
   _cpuz80_node_label($120);
   $121 = $0;
   $122 = (($121) + 8|0);
   $123 = HEAP32[$122>>2]|0;
   HEAP32[$123>>2] = 52;
   $124 = $0;
   $125 = (($124) + 8|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = (($126) + 20|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = $0;
   $130 = (($129) + 20|0);
   HEAP32[$130>>2] = $128;
   STACKTOP = sp;return;
   break;
  }
  case 47:  {
   $667 = $0;
   $668 = (($667) + 12|0);
   $669 = HEAP32[$668>>2]|0;
   $670 = HEAP32[$669>>2]|0;
   $671 = ($670|0)==(68);
   if ($671) {
    $672 = $0;
    $673 = (($672) + 8|0);
    $674 = HEAP32[$673>>2]|0;
    _cpuz80_node_label($674);
    $675 = $0;
    $676 = (($675) + 8|0);
    $677 = HEAP32[$676>>2]|0;
    $678 = (($677) + 20|0);
    $679 = HEAP32[$678>>2]|0;
    $680 = $0;
    $681 = (($680) + 20|0);
    HEAP32[$681>>2] = $679;
    STACKTOP = sp;return;
   }
   $682 = $0;
   $683 = (($682) + 12|0);
   $684 = HEAP32[$683>>2]|0;
   $685 = HEAP32[$684>>2]|0;
   $686 = ($685|0)==(27);
   if ($686) {
    label = 118;
   } else {
    $687 = $0;
    $688 = (($687) + 12|0);
    $689 = HEAP32[$688>>2]|0;
    $690 = HEAP32[$689>>2]|0;
    $691 = ($690|0)==(29);
    if ($691) {
     label = 118;
    }
   }
   if ((label|0) == 118) {
    $692 = $0;
    $693 = (($692) + 12|0);
    $694 = HEAP32[$693>>2]|0;
    $695 = (($694) + 8|0);
    $696 = HEAP32[$695>>2]|0;
    $697 = HEAP32[$696>>2]|0;
    $698 = ($697|0)==(68);
    if ($698) {
     $699 = $0;
     $700 = (($699) + 12|0);
     $701 = HEAP32[$700>>2]|0;
     $702 = (($701) + 12|0);
     $703 = HEAP32[$702>>2]|0;
     $704 = HEAP32[$703>>2]|0;
     $705 = ($704|0)==(51);
     if ($705) {
      $706 = $0;
      $707 = (($706) + 8|0);
      $708 = HEAP32[$707>>2]|0;
      _cpuz80_node_label($708);
      $709 = $0;
      $710 = (($709) + 8|0);
      $711 = HEAP32[$710>>2]|0;
      $712 = (($711) + 20|0);
      $713 = HEAP32[$712>>2]|0;
      $714 = $0;
      $715 = (($714) + 20|0);
      HEAP32[$715>>2] = $713;
      STACKTOP = sp;return;
     }
    }
   }
   $716 = $0;
   $717 = (($716) + 12|0);
   $718 = HEAP32[$717>>2]|0;
   _cpuz80_node_label($718);
   $719 = $0;
   $720 = (($719) + 8|0);
   $721 = HEAP32[$720>>2]|0;
   _cpuz80_node_label($721);
   $722 = $0;
   $723 = (($722) + 12|0);
   $724 = HEAP32[$723>>2]|0;
   $725 = (($724) + 20|0);
   $726 = HEAP32[$725>>2]|0;
   $727 = $0;
   $728 = (($727) + 8|0);
   $729 = HEAP32[$728>>2]|0;
   $730 = (($729) + 20|0);
   $731 = HEAP32[$730>>2]|0;
   $732 = $726 | $731;
   $733 = $732 | 48;
   $734 = $733 | 1;
   $735 = $0;
   $736 = (($735) + 20|0);
   HEAP32[$736>>2] = $734;
   STACKTOP = sp;return;
   break;
  }
  case 46:  {
   $494 = $0;
   $495 = (($494) + 8|0);
   $496 = HEAP32[$495>>2]|0;
   $497 = HEAP32[$496>>2]|0;
   $498 = ($497|0)==(26);
   if ($498) {
    label = 90;
   } else {
    $499 = $0;
    $500 = (($499) + 8|0);
    $501 = HEAP32[$500>>2]|0;
    $502 = HEAP32[$501>>2]|0;
    $503 = ($502|0)==(28);
    if ($503) {
     label = 90;
    } else {
     $504 = $0;
     $505 = (($504) + 8|0);
     $506 = HEAP32[$505>>2]|0;
     $507 = HEAP32[$506>>2]|0;
     $508 = ($507|0)==(0);
     if ($508) {
      label = 90;
     } else {
      $509 = $0;
      $510 = (($509) + 8|0);
      $511 = HEAP32[$510>>2]|0;
      $512 = HEAP32[$511>>2]|0;
      $513 = ($512|0)==(4);
      if ($513) {
       label = 90;
      } else {
       $514 = $0;
       $515 = (($514) + 8|0);
       $516 = HEAP32[$515>>2]|0;
       $517 = HEAP32[$516>>2]|0;
       $518 = ($517|0)==(2);
       if ($518) {
        label = 90;
       }
      }
     }
    }
   }
   do {
    if ((label|0) == 90) {
     $519 = $0;
     $520 = (($519) + 8|0);
     $521 = HEAP32[$520>>2]|0;
     $522 = (($521) + 12|0);
     $523 = HEAP32[$522>>2]|0;
     $524 = HEAP32[$523>>2]|0;
     $525 = ($524|0)==(50);
     if (!($525)) {
      $526 = $0;
      $527 = (($526) + 8|0);
      $528 = HEAP32[$527>>2]|0;
      $529 = (($528) + 12|0);
      $530 = HEAP32[$529>>2]|0;
      $531 = HEAP32[$530>>2]|0;
      $532 = ($531|0)==(44);
      if (!($532)) {
       break;
      }
     }
     $533 = $0;
     $534 = (($533) + 8|0);
     $535 = HEAP32[$534>>2]|0;
     $536 = (($535) + 8|0);
     $537 = HEAP32[$536>>2]|0;
     $538 = $0;
     $539 = (($538) + 12|0);
     $540 = HEAP32[$539>>2]|0;
     $541 = (_node_same_address($537,$540)|0);
     $542 = ($541|0)!=(0);
     if ($542) {
      $543 = $0;
      $544 = (($543) + 12|0);
      $545 = HEAP32[$544>>2]|0;
      $546 = HEAP32[$545>>2]|0;
      $547 = ($546|0)==(68);
      if ($547) {
       $548 = $0;
       $549 = (($548) + 20|0);
       HEAP32[$549>>2] = 195;
      } else {
       $550 = $0;
       $551 = (($550) + 12|0);
       $552 = HEAP32[$551>>2]|0;
       $553 = HEAP32[$552>>2]|0;
       $554 = ($553|0)==(27);
       if ($554) {
        label = 97;
       } else {
        $555 = $0;
        $556 = (($555) + 12|0);
        $557 = HEAP32[$556>>2]|0;
        $558 = HEAP32[$557>>2]|0;
        $559 = ($558|0)==(29);
        if ($559) {
         label = 97;
        } else {
         label = 100;
        }
       }
       if ((label|0) == 97) {
        $560 = $0;
        $561 = (($560) + 12|0);
        $562 = HEAP32[$561>>2]|0;
        $563 = (($562) + 8|0);
        $564 = HEAP32[$563>>2]|0;
        $565 = HEAP32[$564>>2]|0;
        $566 = ($565|0)==(68);
        if ($566) {
         $567 = $0;
         $568 = (($567) + 12|0);
         $569 = HEAP32[$568>>2]|0;
         $570 = (($569) + 12|0);
         $571 = HEAP32[$570>>2]|0;
         $572 = HEAP32[$571>>2]|0;
         $573 = ($572|0)==(51);
         if ($573) {
          $574 = $0;
          $575 = (($574) + 20|0);
          HEAP32[$575>>2] = 195;
         } else {
          label = 100;
         }
        } else {
         label = 100;
        }
       }
       if ((label|0) == 100) {
        $576 = $0;
        $577 = (($576) + 12|0);
        $578 = HEAP32[$577>>2]|0;
        _cpuz80_node_label($578);
        $579 = $0;
        $580 = (($579) + 12|0);
        $581 = HEAP32[$580>>2]|0;
        $582 = (($581) + 20|0);
        $583 = HEAP32[$582>>2]|0;
        $584 = $583 | 3;
        $585 = $0;
        $586 = (($585) + 20|0);
        HEAP32[$586>>2] = $584;
       }
      }
      STACKTOP = sp;return;
     }
    }
   } while(0);
   $587 = $0;
   $588 = (($587) + 12|0);
   $589 = HEAP32[$588>>2]|0;
   $590 = HEAP32[$589>>2]|0;
   $591 = ($590|0)==(68);
   if ($591) {
    $592 = $0;
    $593 = (($592) + 8|0);
    $594 = HEAP32[$593>>2]|0;
    _cpuz80_node_label($594);
    $595 = $0;
    $596 = (($595) + 8|0);
    $597 = HEAP32[$596>>2]|0;
    $598 = (($597) + 20|0);
    $599 = HEAP32[$598>>2]|0;
    $600 = $0;
    $601 = (($600) + 20|0);
    HEAP32[$601>>2] = $599;
    STACKTOP = sp;return;
   }
   $602 = $0;
   $603 = (($602) + 12|0);
   $604 = HEAP32[$603>>2]|0;
   $605 = HEAP32[$604>>2]|0;
   $606 = ($605|0)==(27);
   if ($606) {
    label = 107;
   } else {
    $607 = $0;
    $608 = (($607) + 12|0);
    $609 = HEAP32[$608>>2]|0;
    $610 = HEAP32[$609>>2]|0;
    $611 = ($610|0)==(29);
    if ($611) {
     label = 107;
    }
   }
   if ((label|0) == 107) {
    $612 = $0;
    $613 = (($612) + 12|0);
    $614 = HEAP32[$613>>2]|0;
    $615 = (($614) + 8|0);
    $616 = HEAP32[$615>>2]|0;
    $617 = HEAP32[$616>>2]|0;
    $618 = ($617|0)==(68);
    if ($618) {
     $619 = $0;
     $620 = (($619) + 12|0);
     $621 = HEAP32[$620>>2]|0;
     $622 = (($621) + 12|0);
     $623 = HEAP32[$622>>2]|0;
     $624 = HEAP32[$623>>2]|0;
     $625 = ($624|0)==(51);
     if ($625) {
      $626 = $0;
      $627 = (($626) + 8|0);
      $628 = HEAP32[$627>>2]|0;
      _cpuz80_node_label($628);
      $629 = $0;
      $630 = (($629) + 8|0);
      $631 = HEAP32[$630>>2]|0;
      $632 = (($631) + 20|0);
      $633 = HEAP32[$632>>2]|0;
      $634 = $0;
      $635 = (($634) + 20|0);
      HEAP32[$635>>2] = $633;
      STACKTOP = sp;return;
     }
    }
   }
   $636 = $0;
   $637 = (($636) + 12|0);
   $638 = HEAP32[$637>>2]|0;
   _cpuz80_node_label($638);
   $639 = $0;
   $640 = (($639) + 8|0);
   $641 = HEAP32[$640>>2]|0;
   _cpuz80_node_label($641);
   $642 = $0;
   $643 = (($642) + 8|0);
   $644 = HEAP32[$643>>2]|0;
   $645 = HEAP32[$644>>2]|0;
   $646 = ($645|0)==(50);
   if ($646) {
    $647 = $0;
    $648 = (($647) + 12|0);
    $649 = HEAP32[$648>>2]|0;
    $650 = (($649) + 20|0);
    $651 = HEAP32[$650>>2]|0;
    $652 = $0;
    $653 = (($652) + 20|0);
    HEAP32[$653>>2] = $651;
   } else {
    $654 = $0;
    $655 = (($654) + 8|0);
    $656 = HEAP32[$655>>2]|0;
    $657 = (($656) + 20|0);
    $658 = HEAP32[$657>>2]|0;
    $659 = $0;
    $660 = (($659) + 12|0);
    $661 = HEAP32[$660>>2]|0;
    $662 = (($661) + 20|0);
    $663 = HEAP32[$662>>2]|0;
    $664 = $658 | $663;
    $665 = $0;
    $666 = (($665) + 20|0);
    HEAP32[$666>>2] = $664;
   }
   STACKTOP = sp;return;
   break;
  }
  default: {
   $737 = $0;
   $738 = HEAP32[$737>>2]|0;
   $739 = ($738|0)==(27);
   if ($739) {
    label = 124;
   } else {
    $740 = $0;
    $741 = HEAP32[$740>>2]|0;
    $742 = ($741|0)==(29);
    if ($742) {
     label = 124;
    }
   }
   if ((label|0) == 124) {
    $743 = $0;
    $744 = (($743) + 8|0);
    $745 = HEAP32[$744>>2]|0;
    $746 = HEAP32[$745>>2]|0;
    $747 = ($746|0)==(68);
    do {
     if ($747) {
      $748 = $0;
      $749 = (($748) + 12|0);
      $750 = HEAP32[$749>>2]|0;
      $751 = HEAP32[$750>>2]|0;
      $752 = ($751|0)==(51);
      if (!($752)) {
       break;
      }
      $753 = $0;
      $754 = (($753) + 20|0);
      HEAP32[$754>>2] = 192;
      STACKTOP = sp;return;
     }
    } while(0);
   }
   $755 = $0;
   $756 = HEAP32[$755>>2]|0;
   $757 = ($756|0)==(27);
   if ($757) {
    $758 = $0;
    $759 = (($758) + 8|0);
    $760 = HEAP32[$759>>2]|0;
    $761 = HEAP32[$760>>2]|0;
    $762 = ($761|0)==(68);
    if ($762) {
     $763 = $0;
     $764 = (($763) + 12|0);
     $765 = HEAP32[$764>>2]|0;
     _cpuz80_node_label($765);
     $766 = $0;
     $767 = (($766) + 12|0);
     $768 = HEAP32[$767>>2]|0;
     $769 = (($768) + 20|0);
     $770 = HEAP32[$769>>2]|0;
     $771 = $770 | 48;
     $772 = $0;
     $773 = (($772) + 20|0);
     HEAP32[$773>>2] = $771;
     STACKTOP = sp;return;
    }
    $774 = $0;
    $775 = (($774) + 8|0);
    $776 = HEAP32[$775>>2]|0;
    $777 = HEAP32[$776>>2]|0;
    $778 = ($777|0)==(51);
    if ($778) {
     label = 134;
    } else {
     $779 = $0;
     $780 = (($779) + 12|0);
     $781 = HEAP32[$780>>2]|0;
     $782 = HEAP32[$781>>2]|0;
     $783 = ($782|0)==(51);
     if ($783) {
      label = 134;
     }
    }
    L217: do {
     if ((label|0) == 134) {
      $784 = $0;
      $785 = (($784) + 8|0);
      $786 = HEAP32[$785>>2]|0;
      $787 = HEAP32[$786>>2]|0;
      $788 = ($787|0)==(51);
      if ($788) {
       $789 = $0;
       $790 = (($789) + 8|0);
       $791 = HEAP32[$790>>2]|0;
       $explore = $791;
      } else {
       $792 = $0;
       $793 = (($792) + 12|0);
       $794 = HEAP32[$793>>2]|0;
       $explore = $794;
      }
      $795 = $explore;
      $796 = (($795) + 4|0);
      $797 = HEAP32[$796>>2]|0;
      $c = $797;
      $798 = $c;
      $799 = ($798|0)==(0);
      do {
       if (!($799)) {
        $800 = $c;
        $801 = ($800|0)==(1);
        if (!($801)) {
         $802 = $c;
         $803 = ($802|0)==(2);
         if (!($803)) {
          $804 = $c;
          $805 = ($804|0)==(3);
          if (!($805)) {
           $806 = $c;
           $807 = ($806|0)==(65535);
           if (!($807)) {
            $808 = $c;
            $809 = ($808|0)==(65534);
            if (!($809)) {
             $810 = $c;
             $811 = ($810|0)==(65533);
             if (!($811)) {
              $812 = $c;
              $813 = ($812|0)==(64512);
              if (!($813)) {
               $814 = $c;
               $815 = ($814|0)==(64768);
               if (!($815)) {
                $816 = $c;
                $817 = ($816|0)==(65024);
                if (!($817)) {
                 $818 = $c;
                 $819 = ($818|0)==(65280);
                 if (!($819)) {
                  $820 = $c;
                  $821 = ($820|0)==(256);
                  if ($821) {
                   break;
                  }
                  $822 = $c;
                  $823 = ($822|0)==(512);
                  if ($823) {
                   break;
                  }
                  $824 = $c;
                  $825 = ($824|0)==(768);
                  if ($825) {
                   break;
                  }
                  $826 = $c;
                  $827 = ($826|0)==(1024);
                  if ($827) {
                   break;
                  }
                  break L217;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      } while(0);
      $828 = $0;
      $829 = (($828) + 8|0);
      $830 = HEAP32[$829>>2]|0;
      $831 = $explore;
      $832 = ($830|0)!=($831|0);
      if ($832) {
       $833 = $0;
       $834 = (($833) + 8|0);
       $835 = HEAP32[$834>>2]|0;
       _cpuz80_node_label($835);
       $836 = $0;
       $837 = (($836) + 8|0);
       $838 = HEAP32[$837>>2]|0;
       $839 = (($838) + 20|0);
       $840 = HEAP32[$839>>2]|0;
       $841 = $0;
       $842 = (($841) + 20|0);
       HEAP32[$842>>2] = $840;
      } else {
       $843 = $0;
       $844 = (($843) + 12|0);
       $845 = HEAP32[$844>>2]|0;
       _cpuz80_node_label($845);
       $846 = $0;
       $847 = (($846) + 12|0);
       $848 = HEAP32[$847>>2]|0;
       $849 = (($848) + 20|0);
       $850 = HEAP32[$849>>2]|0;
       $851 = $0;
       $852 = (($851) + 20|0);
       HEAP32[$852>>2] = $850;
      }
      STACKTOP = sp;return;
     }
    } while(0);
   }
   $853 = $0;
   $854 = HEAP32[$853>>2]|0;
   $855 = ($854|0)==(29);
   do {
    if ($855) {
     $856 = $0;
     $857 = (($856) + 12|0);
     $858 = HEAP32[$857>>2]|0;
     $859 = HEAP32[$858>>2]|0;
     $860 = ($859|0)==(68);
     if ($860) {
      $861 = $0;
      $862 = (($861) + 8|0);
      $863 = HEAP32[$862>>2]|0;
      _cpuz80_node_label($863);
      $864 = $0;
      $865 = (($864) + 8|0);
      $866 = HEAP32[$865>>2]|0;
      $867 = (($866) + 20|0);
      $868 = HEAP32[$867>>2]|0;
      $869 = $868 | 48;
      $870 = $869 | 2;
      $871 = $0;
      $872 = (($871) + 20|0);
      HEAP32[$872>>2] = $870;
      STACKTOP = sp;return;
     }
     $873 = $0;
     $874 = (($873) + 12|0);
     $875 = HEAP32[$874>>2]|0;
     $876 = HEAP32[$875>>2]|0;
     $877 = ($876|0)==(51);
     if ($877) {
      $878 = $0;
      $879 = (($878) + 12|0);
      $880 = HEAP32[$879>>2]|0;
      $explore = $880;
     } else {
      $explore = 0;
     }
     $881 = $explore;
     $882 = ($881|0)!=(0|0);
     do {
      if ($882) {
       $883 = $explore;
       $884 = (($883) + 4|0);
       $885 = HEAP32[$884>>2]|0;
       $886 = ($885|0)==(0);
       if (!($886)) {
        $887 = $explore;
        $888 = (($887) + 4|0);
        $889 = HEAP32[$888>>2]|0;
        $890 = ($889|0)==(1);
        if (!($890)) {
         $891 = $explore;
         $892 = (($891) + 4|0);
         $893 = HEAP32[$892>>2]|0;
         $894 = ($893|0)==(2);
         if (!($894)) {
          $895 = $explore;
          $896 = (($895) + 4|0);
          $897 = HEAP32[$896>>2]|0;
          $898 = ($897|0)==(3);
          if (!($898)) {
           break;
          }
         }
        }
       }
       $899 = $0;
       $900 = (($899) + 8|0);
       $901 = HEAP32[$900>>2]|0;
       _cpuz80_node_label($901);
       $902 = $0;
       $903 = (($902) + 8|0);
       $904 = HEAP32[$903>>2]|0;
       $905 = (($904) + 20|0);
       $906 = HEAP32[$905>>2]|0;
       $907 = $0;
       $908 = (($907) + 20|0);
       HEAP32[$908>>2] = $906;
       STACKTOP = sp;return;
      }
     } while(0);
     $909 = $explore;
     $910 = ($909|0)!=(0|0);
     do {
      if ($910) {
       $911 = $explore;
       $912 = (($911) + 4|0);
       $913 = HEAP32[$912>>2]|0;
       $914 = ($913|0)==(65535);
       if (!($914)) {
        $915 = $explore;
        $916 = (($915) + 4|0);
        $917 = HEAP32[$916>>2]|0;
        $918 = ($917|0)==(65534);
        if (!($918)) {
         $919 = $explore;
         $920 = (($919) + 4|0);
         $921 = HEAP32[$920>>2]|0;
         $922 = ($921|0)==(65533);
         if (!($922)) {
          break;
         }
        }
       }
       $923 = $0;
       $924 = (($923) + 8|0);
       $925 = HEAP32[$924>>2]|0;
       _cpuz80_node_label($925);
       $926 = $0;
       $927 = (($926) + 8|0);
       $928 = HEAP32[$927>>2]|0;
       $929 = (($928) + 20|0);
       $930 = HEAP32[$929>>2]|0;
       $931 = $0;
       $932 = (($931) + 20|0);
       HEAP32[$932>>2] = $930;
       STACKTOP = sp;return;
      }
     } while(0);
     $933 = $explore;
     $934 = ($933|0)!=(0|0);
     if (!($934)) {
      break;
     }
     $935 = $0;
     $936 = (($935) + 8|0);
     $937 = HEAP32[$936>>2]|0;
     _cpuz80_node_label($937);
     $938 = $0;
     $939 = (($938) + 8|0);
     $940 = HEAP32[$939>>2]|0;
     $941 = (($940) + 20|0);
     $942 = HEAP32[$941>>2]|0;
     $943 = $942 | 48;
     $944 = $943 | 2;
     $945 = $0;
     $946 = (($945) + 20|0);
     HEAP32[$946>>2] = $944;
     STACKTOP = sp;return;
    }
   } while(0);
   $947 = $0;
   $948 = HEAP32[$947>>2]|0;
   $949 = ($948|0)==(1);
   if ($949) {
    label = 181;
   } else {
    $950 = $0;
    $951 = HEAP32[$950>>2]|0;
    $952 = ($951|0)==(5);
    if ($952) {
     label = 181;
    } else {
     $953 = $0;
     $954 = HEAP32[$953>>2]|0;
     $955 = ($954|0)==(3);
     if ($955) {
      label = 181;
     }
    }
   }
   do {
    if ((label|0) == 181) {
     $956 = $0;
     $957 = (($956) + 12|0);
     $958 = HEAP32[$957>>2]|0;
     $959 = HEAP32[$958>>2]|0;
     $960 = ($959|0)==(51);
     if (!($960)) {
      break;
     }
     $961 = $0;
     $962 = (($961) + 8|0);
     $963 = HEAP32[$962>>2]|0;
     _cpuz80_node_label($963);
     $964 = $0;
     $965 = (($964) + 8|0);
     $966 = HEAP32[$965>>2]|0;
     $967 = (($966) + 20|0);
     $968 = HEAP32[$967>>2]|0;
     $969 = $968 | 3;
     $970 = $0;
     $971 = (($970) + 20|0);
     HEAP32[$971>>2] = $969;
     STACKTOP = sp;return;
    }
   } while(0);
   $972 = $0;
   $973 = HEAP32[$972>>2]|0;
   $974 = ($973|0)==(31);
   if ($974) {
    $975 = $0;
    $976 = (($975) + 8|0);
    $977 = HEAP32[$976>>2]|0;
    $978 = HEAP32[$977>>2]|0;
    $979 = ($978|0)==(51);
    if ($979) {
     $980 = $0;
     $981 = (($980) + 8|0);
     $982 = HEAP32[$981>>2]|0;
     $explore = $982;
    } else {
     $983 = $0;
     $984 = (($983) + 12|0);
     $985 = HEAP32[$984>>2]|0;
     $986 = HEAP32[$985>>2]|0;
     $987 = ($986|0)==(51);
     if ($987) {
      $988 = $0;
      $989 = (($988) + 12|0);
      $990 = HEAP32[$989>>2]|0;
      $explore = $990;
     } else {
      $explore = 0;
     }
    }
    $991 = $explore;
    $992 = ($991|0)!=(0|0);
    do {
     if ($992) {
      $993 = $explore;
      $994 = (($993) + 4|0);
      $995 = HEAP32[$994>>2]|0;
      $996 = ($995|0)==(0);
      if (!($996)) {
       $997 = $explore;
       $998 = (($997) + 4|0);
       $999 = HEAP32[$998>>2]|0;
       $1000 = ($999|0)==(1);
       if (!($1000)) {
        $1001 = $explore;
        $1002 = (($1001) + 4|0);
        $1003 = HEAP32[$1002>>2]|0;
        $1004 = (_is_power_of_two($1003)|0);
        $1005 = ($1004|0)!=(0);
        if (!($1005)) {
         break;
        }
       }
      }
      $1006 = $explore;
      $1007 = (($1006) + 4|0);
      $1008 = HEAP32[$1007>>2]|0;
      $c = $1008;
      $1009 = $0;
      $1010 = (($1009) + 8|0);
      $1011 = HEAP32[$1010>>2]|0;
      _cpuz80_node_label($1011);
      $1012 = $0;
      $1013 = (($1012) + 12|0);
      $1014 = HEAP32[$1013>>2]|0;
      _cpuz80_node_label($1014);
      $1015 = $c;
      $1016 = ($1015|0)==(0);
      if ($1016) {
       $1017 = $0;
       $1018 = (($1017) + 20|0);
       HEAP32[$1018>>2] = 192;
      } else {
       $1019 = $0;
       $1020 = (($1019) + 8|0);
       $1021 = HEAP32[$1020>>2]|0;
       $1022 = (($1021) + 20|0);
       $1023 = HEAP32[$1022>>2]|0;
       $1024 = $0;
       $1025 = (($1024) + 12|0);
       $1026 = HEAP32[$1025>>2]|0;
       $1027 = (($1026) + 20|0);
       $1028 = HEAP32[$1027>>2]|0;
       $1029 = $1023 | $1028;
       $1030 = $0;
       $1031 = (($1030) + 20|0);
       HEAP32[$1031>>2] = $1029;
      }
      STACKTOP = sp;return;
     }
    } while(0);
   }
   $1032 = $0;
   $1033 = HEAP32[$1032>>2]|0;
   $1034 = ($1033|0)==(33);
   if ($1034) {
    $1035 = $0;
    $1036 = (($1035) + 12|0);
    $1037 = HEAP32[$1036>>2]|0;
    $1038 = HEAP32[$1037>>2]|0;
    $1039 = ($1038|0)==(51);
    do {
     if ($1039) {
      $1040 = $0;
      $1041 = (($1040) + 12|0);
      $1042 = HEAP32[$1041>>2]|0;
      $1043 = (($1042) + 4|0);
      $1044 = HEAP32[$1043>>2]|0;
      $1045 = ($1044|0)==(2);
      if (!($1045)) {
       $1046 = $0;
       $1047 = (($1046) + 12|0);
       $1048 = HEAP32[$1047>>2]|0;
       $1049 = (($1048) + 4|0);
       $1050 = HEAP32[$1049>>2]|0;
       $1051 = ($1050|0)==(4);
       if (!($1051)) {
        $1052 = $0;
        $1053 = (($1052) + 12|0);
        $1054 = HEAP32[$1053>>2]|0;
        $1055 = (($1054) + 4|0);
        $1056 = HEAP32[$1055>>2]|0;
        $1057 = ($1056|0)==(8);
        if (!($1057)) {
         $1058 = $0;
         $1059 = (($1058) + 12|0);
         $1060 = HEAP32[$1059>>2]|0;
         $1061 = (($1060) + 4|0);
         $1062 = HEAP32[$1061>>2]|0;
         $1063 = ($1062|0)==(16);
         if (!($1063)) {
          break;
         }
        }
       }
      }
      $1064 = $0;
      $1065 = (($1064) + 8|0);
      $1066 = HEAP32[$1065>>2]|0;
      _cpuz80_node_label($1066);
      $1067 = $0;
      $1068 = (($1067) + 12|0);
      $1069 = HEAP32[$1068>>2]|0;
      $1070 = (($1069) + 4|0);
      $1071 = HEAP32[$1070>>2]|0;
      $1072 = ($1071|0)==(8);
      if ($1072) {
       label = 208;
      } else {
       $1073 = $0;
       $1074 = (($1073) + 12|0);
       $1075 = HEAP32[$1074>>2]|0;
       $1076 = (($1075) + 4|0);
       $1077 = HEAP32[$1076>>2]|0;
       $1078 = ($1077|0)==(16);
       if ($1078) {
        label = 208;
       } else {
        $1087 = $0;
        $1088 = (($1087) + 8|0);
        $1089 = HEAP32[$1088>>2]|0;
        $1090 = (($1089) + 20|0);
        $1091 = HEAP32[$1090>>2]|0;
        $1092 = $0;
        $1093 = (($1092) + 20|0);
        HEAP32[$1093>>2] = $1091;
       }
      }
      if ((label|0) == 208) {
       $1079 = $0;
       $1080 = (($1079) + 8|0);
       $1081 = HEAP32[$1080>>2]|0;
       $1082 = (($1081) + 20|0);
       $1083 = HEAP32[$1082>>2]|0;
       $1084 = $1083 | 3;
       $1085 = $0;
       $1086 = (($1085) + 20|0);
       HEAP32[$1086>>2] = $1084;
      }
      STACKTOP = sp;return;
     }
    } while(0);
    $1094 = $0;
    $1095 = (($1094) + 12|0);
    $1096 = HEAP32[$1095>>2]|0;
    $1097 = HEAP32[$1096>>2]|0;
    $1098 = ($1097|0)==(51);
    if ($1098) {
     $1099 = $0;
     $1100 = (($1099) + 12|0);
     $1101 = HEAP32[$1100>>2]|0;
     $1102 = (($1101) + 4|0);
     $1103 = HEAP32[$1102>>2]|0;
     $1104 = ($1103|0)==(256);
     if ($1104) {
      $1105 = $0;
      $1106 = (($1105) + 8|0);
      $1107 = HEAP32[$1106>>2]|0;
      _cpuz80_node_label($1107);
      $1108 = $0;
      $1109 = (($1108) + 8|0);
      $1110 = HEAP32[$1109>>2]|0;
      $1111 = (($1110) + 20|0);
      $1112 = HEAP32[$1111>>2]|0;
      $1113 = $0;
      $1114 = (($1113) + 20|0);
      HEAP32[$1114>>2] = $1112;
      STACKTOP = sp;return;
     }
    }
   }
   $1115 = $0;
   $1116 = HEAP32[$1115>>2]|0;
   $1117 = ($1116|0)==(13);
   if ($1117) {
    label = 217;
   } else {
    $1118 = $0;
    $1119 = HEAP32[$1118>>2]|0;
    $1120 = ($1119|0)==(15);
    if ($1120) {
     label = 217;
    } else {
     $1173 = $0;
     $1174 = HEAP32[$1173>>2]|0;
     $1175 = ($1174|0)==(7);
     if ($1175) {
      label = 226;
     } else {
      $1176 = $0;
      $1177 = HEAP32[$1176>>2]|0;
      $1178 = ($1177|0)==(9);
      if ($1178) {
       label = 226;
      }
     }
     do {
      if ((label|0) == 226) {
       $1179 = $0;
       $1180 = (($1179) + 12|0);
       $1181 = HEAP32[$1180>>2]|0;
       $1182 = HEAP32[$1181>>2]|0;
       $1183 = ($1182|0)==(51);
       if ($1183) {
        $1184 = $0;
        $1185 = (($1184) + 12|0);
        $1186 = HEAP32[$1185>>2]|0;
        $1187 = (($1186) + 4|0);
        $1188 = HEAP32[$1187>>2]|0;
        $1189 = ($1188|0)==(65535);
        if (!($1189)) {
         $1190 = $0;
         $1191 = (($1190) + 12|0);
         $1192 = HEAP32[$1191>>2]|0;
         $1193 = (($1192) + 4|0);
         $1194 = HEAP32[$1193>>2]|0;
         $1195 = ($1194|0)==(0);
         if (!($1195)) {
          $1196 = $0;
          $1197 = (($1196) + 12|0);
          $1198 = HEAP32[$1197>>2]|0;
          $1199 = (($1198) + 4|0);
          $1200 = HEAP32[$1199>>2]|0;
          $1201 = ($1200|0)==(1);
          if (!($1201)) {
           break;
          }
         }
        }
        $1202 = $0;
        $1203 = (($1202) + 8|0);
        $1204 = HEAP32[$1203>>2]|0;
        _cpuz80_node_label($1204);
        $1205 = $0;
        $1206 = (($1205) + 8|0);
        $1207 = HEAP32[$1206>>2]|0;
        $1208 = (($1207) + 20|0);
        $1209 = HEAP32[$1208>>2]|0;
        $1210 = $1209 | 3;
        $1211 = $0;
        $1212 = (($1211) + 20|0);
        HEAP32[$1212>>2] = $1210;
        STACKTOP = sp;return;
       }
      }
     } while(0);
     $1213 = $0;
     $1214 = (($1213) + 12|0);
     $1215 = HEAP32[$1214>>2]|0;
     _cpuz80_node_label($1215);
     $1216 = $0;
     $1217 = (($1216) + 8|0);
     $1218 = HEAP32[$1217>>2]|0;
     _cpuz80_node_label($1218);
     $1219 = $0;
     $1220 = (($1219) + 8|0);
     $1221 = HEAP32[$1220>>2]|0;
     $1222 = (($1221) + 20|0);
     $1223 = HEAP32[$1222>>2]|0;
     $1224 = $0;
     $1225 = (($1224) + 12|0);
     $1226 = HEAP32[$1225>>2]|0;
     $1227 = (($1226) + 20|0);
     $1228 = HEAP32[$1227>>2]|0;
     $1229 = $1223 | $1228;
     $1230 = $1229 | 48;
     $1231 = $0;
     $1232 = (($1231) + 20|0);
     HEAP32[$1232>>2] = $1230;
    }
   }
   if ((label|0) == 217) {
    $1121 = $0;
    $1122 = (($1121) + 8|0);
    $1123 = HEAP32[$1122>>2]|0;
    $1124 = HEAP32[$1123>>2]|0;
    $1125 = ($1124|0)==(51);
    if ($1125) {
     $1126 = $0;
     $1127 = (($1126) + 12|0);
     $1128 = HEAP32[$1127>>2]|0;
     _cpuz80_node_label($1128);
     $1129 = $0;
     $1130 = (($1129) + 12|0);
     $1131 = HEAP32[$1130>>2]|0;
     $1132 = (($1131) + 20|0);
     $1133 = HEAP32[$1132>>2]|0;
     $1134 = $1133 | 48;
     $1135 = $0;
     $1136 = (($1135) + 20|0);
     HEAP32[$1136>>2] = $1134;
    } else {
     $1137 = $0;
     $1138 = (($1137) + 8|0);
     $1139 = HEAP32[$1138>>2]|0;
     $1140 = HEAP32[$1139>>2]|0;
     $1141 = ($1140|0)==(45);
     if ($1141) {
      $1142 = $0;
      $1143 = (($1142) + 12|0);
      $1144 = HEAP32[$1143>>2]|0;
      _cpuz80_node_label($1144);
      $1145 = $0;
      $1146 = (($1145) + 12|0);
      $1147 = HEAP32[$1146>>2]|0;
      $1148 = (($1147) + 20|0);
      $1149 = HEAP32[$1148>>2]|0;
      $1150 = $1149 | 48;
      $1151 = $0;
      $1152 = (($1151) + 20|0);
      HEAP32[$1152>>2] = $1150;
     } else {
      $1153 = $0;
      $1154 = (($1153) + 8|0);
      $1155 = HEAP32[$1154>>2]|0;
      _cpuz80_node_label($1155);
      $1156 = $0;
      $1157 = (($1156) + 12|0);
      $1158 = HEAP32[$1157>>2]|0;
      _cpuz80_node_label($1158);
      $1159 = $0;
      $1160 = (($1159) + 8|0);
      $1161 = HEAP32[$1160>>2]|0;
      $1162 = (($1161) + 20|0);
      $1163 = HEAP32[$1162>>2]|0;
      $1164 = $0;
      $1165 = (($1164) + 12|0);
      $1166 = HEAP32[$1165>>2]|0;
      $1167 = (($1166) + 20|0);
      $1168 = HEAP32[$1167>>2]|0;
      $1169 = $1163 | $1168;
      $1170 = $1169 | 48;
      $1171 = $0;
      $1172 = (($1171) + 20|0);
      HEAP32[$1172>>2] = $1170;
     }
    }
   }
   $1233 = $0;
   $1234 = HEAP32[$1233>>2]|0;
   $1235 = ($1234|0)==(1);
   if ($1235) {
    label = 242;
   } else {
    $1236 = $0;
    $1237 = HEAP32[$1236>>2]|0;
    $1238 = ($1237|0)==(3);
    if ($1238) {
     label = 242;
    } else {
     $1239 = $0;
     $1240 = HEAP32[$1239>>2]|0;
     $1241 = ($1240|0)==(5);
     if ($1241) {
      label = 242;
     } else {
      $1242 = $0;
      $1243 = HEAP32[$1242>>2]|0;
      $1244 = ($1243|0)==(7);
      if ($1244) {
       label = 242;
      } else {
       $1245 = $0;
       $1246 = HEAP32[$1245>>2]|0;
       $1247 = ($1246|0)==(9);
       if ($1247) {
        label = 242;
       } else {
        $1248 = $0;
        $1249 = HEAP32[$1248>>2]|0;
        $1250 = ($1249|0)==(11);
        if ($1250) {
         label = 242;
        } else {
         $1251 = $0;
         $1252 = HEAP32[$1251>>2]|0;
         $1253 = ($1252|0)==(13);
         if ($1253) {
          label = 242;
         } else {
          $1254 = $0;
          $1255 = HEAP32[$1254>>2]|0;
          $1256 = ($1255|0)==(15);
          if ($1256) {
           label = 242;
          } else {
           $1257 = $0;
           $1258 = HEAP32[$1257>>2]|0;
           $1259 = ($1258|0)==(17);
           if ($1259) {
            label = 242;
           } else {
            $1264 = $0;
            $1265 = HEAP32[$1264>>2]|0;
            $1266 = ($1265|0)==(27);
            do {
             if ($1266) {
              label = 245;
             } else {
              $1267 = $0;
              $1268 = HEAP32[$1267>>2]|0;
              $1269 = ($1268|0)==(29);
              if ($1269) {
               label = 245;
               break;
              }
              $1274 = $0;
              $1275 = HEAP32[$1274>>2]|0;
              $1276 = ($1275|0)==(31);
              do {
               if ($1276) {
                label = 251;
               } else {
                $1277 = $0;
                $1278 = HEAP32[$1277>>2]|0;
                $1279 = ($1278|0)==(33);
                if ($1279) {
                 label = 251;
                 break;
                }
                $1280 = $0;
                $1281 = HEAP32[$1280>>2]|0;
                $1282 = ($1281|0)==(35);
                if ($1282) {
                 label = 251;
                 break;
                }
                $1283 = $0;
                $1284 = HEAP32[$1283>>2]|0;
                $1285 = ($1284|0)==(34);
                if ($1285) {
                 label = 251;
                 break;
                }
                $1286 = $0;
                $1287 = HEAP32[$1286>>2]|0;
                $1288 = ($1287|0)==(36);
                if ($1288) {
                 label = 251;
                }
               }
              } while(0);
              if ((label|0) == 251) {
               $1289 = $0;
               $1290 = (($1289) + 20|0);
               $1291 = HEAP32[$1290>>2]|0;
               $1292 = $1291 | 255;
               HEAP32[$1290>>2] = $1292;
              }
             }
            } while(0);
            if ((label|0) == 245) {
             $1270 = $0;
             $1271 = (($1270) + 20|0);
             $1272 = HEAP32[$1271>>2]|0;
             $1273 = $1272 | 2;
             HEAP32[$1271>>2] = $1273;
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
   if ((label|0) == 242) {
    $1260 = $0;
    $1261 = (($1260) + 20|0);
    $1262 = HEAP32[$1261>>2]|0;
    $1263 = $1262 | 3;
    HEAP32[$1261>>2] = $1263;
   }
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function _cpuz80_node_generate($node,$decision) {
 $node = $node|0;
 $decision = $decision|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
 var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
 var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0;
 var $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0;
 var $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0;
 var $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
 var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
 var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
 var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
 var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0;
 var $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
 var $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
 var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
 var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
 var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
 var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0;
 var $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
 var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0;
 var $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0;
 var $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0;
 var $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0;
 var $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0;
 var $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0;
 var $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0;
 var $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0;
 var $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0;
 var $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0;
 var $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0;
 var $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0;
 var $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0;
 var $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0;
 var $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0;
 var $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0;
 var $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a = 0, $byte = 0, $c = 0, $explore = 0, $expression = 0, $mnemonic = 0, $p = 0, $value = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer100 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0;
 var $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer52 = 0, $vararg_buffer55 = 0, $vararg_buffer58 = 0, $vararg_buffer61 = 0, $vararg_buffer64 = 0, $vararg_buffer67 = 0, $vararg_buffer7 = 0, $vararg_buffer70 = 0;
 var $vararg_buffer73 = 0, $vararg_buffer76 = 0, $vararg_buffer79 = 0, $vararg_buffer82 = 0, $vararg_buffer85 = 0, $vararg_buffer88 = 0, $vararg_buffer91 = 0, $vararg_buffer94 = 0, $vararg_buffer97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer100 = sp;
 $vararg_buffer97 = sp + 272|0;
 $vararg_buffer94 = sp + 264|0;
 $vararg_buffer91 = sp + 256|0;
 $vararg_buffer88 = sp + 248|0;
 $vararg_buffer85 = sp + 240|0;
 $vararg_buffer82 = sp + 232|0;
 $vararg_buffer79 = sp + 224|0;
 $vararg_buffer76 = sp + 216|0;
 $vararg_buffer73 = sp + 208|0;
 $vararg_buffer70 = sp + 200|0;
 $vararg_buffer67 = sp + 192|0;
 $vararg_buffer64 = sp + 184|0;
 $vararg_buffer61 = sp + 176|0;
 $vararg_buffer58 = sp + 8|0;
 $vararg_buffer55 = sp + 16|0;
 $vararg_buffer52 = sp + 32|0;
 $vararg_buffer49 = sp + 40|0;
 $vararg_buffer46 = sp + 48|0;
 $vararg_buffer43 = sp + 56|0;
 $vararg_buffer40 = sp + 64|0;
 $vararg_buffer37 = sp + 72|0;
 $vararg_buffer34 = sp + 168|0;
 $vararg_buffer31 = sp + 24|0;
 $vararg_buffer28 = sp + 80|0;
 $vararg_buffer25 = sp + 88|0;
 $vararg_buffer22 = sp + 96|0;
 $vararg_buffer19 = sp + 104|0;
 $vararg_buffer16 = sp + 112|0;
 $vararg_buffer13 = sp + 120|0;
 $vararg_buffer10 = sp + 128|0;
 $vararg_buffer7 = sp + 136|0;
 $vararg_buffer4 = sp + 144|0;
 $vararg_buffer1 = sp + 152|0;
 $vararg_buffer = sp + 160|0;
 $expression = sp + 312|0;
 $0 = $node;
 $1 = $decision;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 do {
  switch ($3|0) {
  case 69:  {
   $4 = $0;
   $5 = (($4) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (($6) - 1)|0;
   $c = $7;
   while(1) {
    $8 = $c;
    $9 = ($8|0)>=(0);
    if (!($9)) {
     break;
    }
    $10 = $c;
    $a = $10;
    $11 = $0;
    $12 = (($11) + 8|0);
    $13 = HEAP32[$12>>2]|0;
    $explore = $13;
    while(1) {
     $14 = $a;
     $15 = ($14|0)!=(0);
     if (!($15)) {
      break;
     }
     $16 = $explore;
     $17 = (($16) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $explore = $18;
     $19 = $a;
     $20 = (($19) + -1)|0;
     $a = $20;
    }
    $21 = $explore;
    $22 = (($21) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    _cpuz80_node_generate($23,0);
    $24 = $c;
    $25 = ($24|0)>(0);
    if ($25) {
     _cpuz80_1op(68528,68560);
    }
    $26 = $c;
    $27 = (($26) + -1)|0;
    $c = $27;
   }
   $28 = $0;
   $29 = (($28) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)>(1);
   if ($31) {
    _cpuz80_1op(68544,68848);
   }
   $32 = $0;
   $33 = (($32) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)>(2);
   if ($35) {
    _cpuz80_1op(68544,68856);
   }
   $36 = $0;
   $37 = (($36) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)>(3);
   if ($39) {
    _cpuz80_1op(68544,68864);
   }
   $40 = $0;
   $41 = (($40) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)>(4);
   if ($43) {
    _cpuz80_1op(68544,68872);
   }
   $44 = $0;
   $45 = (($44) + 16|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) + 12|0);
   _cpuz80_1op(68568,$47);
   STACKTOP = sp;return;
   break;
  }
  case 38:  {
   $55 = $0;
   $56 = (($55) + 8|0);
   $57 = HEAP32[$56>>2]|0;
   _cpuz80_node_generate($57,0);
   _cpuz80_2op(68720,68496,68608);
   _cpuz80_noop(68880);
   _cpuz80_2op(68720,68608,68496);
   _cpuz80_2op(68720,68496,68624);
   _cpuz80_noop(68880);
   _cpuz80_2op(68720,68624,68496);
   _cpuz80_1op(68632,68560);
   STACKTOP = sp;return;
   break;
  }
  case 56:  {
   $61 = $0;
   $62 = (($61) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   _cpuz80_node_generate($63,0);
   _cpuz80_1op(68568,68888);
   STACKTOP = sp;return;
   break;
  }
  case 43:  {
   $145 = $0;
   $146 = (($145) + 8|0);
   $147 = HEAP32[$146>>2]|0;
   _cpuz80_node_generate($147,0);
   _cpuz80_2op(68720,68496,68624);
   STACKTOP = sp;return;
   break;
  }
  case 40:  {
   $58 = $0;
   $59 = (($58) + 8|0);
   $60 = HEAP32[$59>>2]|0;
   _cpuz80_node_generate($60,0);
   _cpuz80_2op(68720,68496,68608);
   _cpuz80_noop(68880);
   _cpuz80_2op(68720,68608,68496);
   _cpuz80_2op(68720,68496,68624);
   _cpuz80_noop(68880);
   _cpuz80_2op(68720,68624,68496);
   STACKTOP = sp;return;
   break;
  }
  case 49:  {
   _cpuz80_2op(68720,68560,68928);
   _cpuz80_2op(68720,68944,68640);
   _cpuz80_1op(68632,68560);
   _cpuz80_2op(68720,68952,68640);
   _cpuz80_1op(68632,68560);
   _cpuz80_2op(68720,68928,68560);
   _cpuz80_2op(68776,68848,68560);
   STACKTOP = sp;return;
   break;
  }
  case 45:  {
   (_strcpy((33104|0),(68960|0))|0);
   $152 = $0;
   $153 = (($152) + 16|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = (($154) + 12|0);
   (_strcat((33104|0),($155|0))|0);
   (_strcat((33104|0),(68968|0))|0);
   _cpuz80_2op(68720,68560,33104);
   STACKTOP = sp;return;
   break;
  }
  case 50:  {
   $156 = $0;
   $157 = (($156) + 4|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = ($158|0)==(0);
   if ($159) {
    _cpuz80_1op(68488,68496);
   } else {
    $160 = $0;
    $161 = (($160) + 4|0);
    $162 = HEAP32[$161>>2]|0;
    HEAP32[$vararg_buffer>>2] = $162;
    (_sprintf(33104,68976,$vararg_buffer)|0);
    _cpuz80_2op(68720,68496,33104);
   }
   STACKTOP = sp;return;
   break;
  }
  case 52:  {
   $166 = $0;
   $167 = (($166) + 8|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = HEAP32[$168>>2]|0;
   $170 = ($169|0)==(68);
   if ($170) {
    $171 = $0;
    $172 = (($171) + 8|0);
    $173 = HEAP32[$172>>2]|0;
    _node_get_label($173,1);
    _cpuz80_2op(68720,68496,33104);
    STACKTOP = sp;return;
   }
   $174 = $0;
   $175 = (($174) + 8|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = HEAP32[$176>>2]|0;
   $178 = ($177|0)==(27);
   if ($178) {
    label = 54;
   } else {
    $179 = $0;
    $180 = (($179) + 8|0);
    $181 = HEAP32[$180>>2]|0;
    $182 = HEAP32[$181>>2]|0;
    $183 = ($182|0)==(29);
    if ($183) {
     label = 54;
    }
   }
   if ((label|0) == 54) {
    $184 = $0;
    $185 = (($184) + 8|0);
    $186 = HEAP32[$185>>2]|0;
    $187 = (($186) + 8|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = HEAP32[$188>>2]|0;
    $190 = ($189|0)==(68);
    if ($190) {
     $191 = $0;
     $192 = (($191) + 8|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (($193) + 12|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = HEAP32[$195>>2]|0;
     $197 = ($196|0)==(51);
     if ($197) {
      $198 = $0;
      $199 = (($198) + 8|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = (($200) + 8|0);
      $202 = HEAP32[$201>>2]|0;
      _node_get_label($202,1);
      $p = 33104;
      while(1) {
       $203 = $p;
       $204 = HEAP8[$203>>0]|0;
       $205 = ($204<<24>>24)!=(0);
       if (!($205)) {
        break;
       }
       $206 = $p;
       $207 = (($206) + 1|0);
       $p = $207;
      }
      $208 = $p;
      $209 = (($208) + -1|0);
      $p = $209;
      $210 = $0;
      $211 = (($210) + 8|0);
      $212 = HEAP32[$211>>2]|0;
      $213 = HEAP32[$212>>2]|0;
      $214 = ($213|0)==(27);
      if ($214) {
       $215 = $p;
       $216 = (($215) + 1|0);
       $p = $216;
       HEAP8[$215>>0] = 43;
      } else {
       $217 = $p;
       $218 = (($217) + 1|0);
       $p = $218;
       HEAP8[$217>>0] = 45;
      }
      $219 = $p;
      $220 = $0;
      $221 = (($220) + 8|0);
      $222 = HEAP32[$221>>2]|0;
      $223 = (($222) + 12|0);
      $224 = HEAP32[$223>>2]|0;
      $225 = (($224) + 4|0);
      $226 = HEAP32[$225>>2]|0;
      HEAP32[$vararg_buffer4>>2] = $226;
      (_sprintf($219,68984,$vararg_buffer4)|0);
      _cpuz80_2op(68720,68496,33104);
      STACKTOP = sp;return;
     }
    }
   }
   $227 = $0;
   $228 = (($227) + 8|0);
   $229 = HEAP32[$228>>2]|0;
   _cpuz80_node_generate($229,0);
   _cpuz80_2op(68720,68496,68640);
   STACKTOP = sp;return;
   break;
  }
  case 44:  {
   (_strcpy((33104|0),(68960|0))|0);
   $148 = $0;
   $149 = (($148) + 16|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = (($150) + 12|0);
   (_strcat((33104|0),($151|0))|0);
   (_strcat((33104|0),(68968|0))|0);
   _cpuz80_2op(68720,68496,33104);
   STACKTOP = sp;return;
   break;
  }
  case 68:  {
   $48 = $0;
   _node_get_label($48,0);
   _cpuz80_2op(68720,68560,33104);
   STACKTOP = sp;return;
   break;
  }
  case 37:  {
   $49 = $0;
   $50 = (($49) + 8|0);
   $51 = HEAP32[$50>>2]|0;
   _cpuz80_node_generate($51,0);
   _cpuz80_noop(68480);
   STACKTOP = sp;return;
   break;
  }
  case 39:  {
   $52 = $0;
   $53 = (($52) + 8|0);
   $54 = HEAP32[$53>>2]|0;
   _cpuz80_node_generate($54,0);
   _cpuz80_noop(68880);
   STACKTOP = sp;return;
   break;
  }
  case 66:  {
   _cpuz80_2op(68720,68560,68904);
   STACKTOP = sp;return;
   break;
  }
  case 48:  {
   _cpuz80_2op(68720,68560,68928);
   _cpuz80_2op(68720,68496,68640);
   _cpuz80_1op(68632,68560);
   _cpuz80_2op(68720,68928,68560);
   STACKTOP = sp;return;
   break;
  }
  case 42:  {
   $67 = $0;
   $68 = (($67) + 8|0);
   $69 = HEAP32[$68>>2]|0;
   _cpuz80_node_generate($69,0);
   _cpuz80_2op(68720,68624,68496);
   _cpuz80_noop(68920);
   _cpuz80_2op(68808,68496,68496);
   _cpuz80_2op(68720,68608,68496);
   STACKTOP = sp;return;
   break;
  }
  case 51:  {
   $163 = $0;
   $164 = (($163) + 4|0);
   $165 = HEAP32[$164>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $165;
   (_sprintf(33104,68976,$vararg_buffer1)|0);
   _cpuz80_2op(68720,68560,33104);
   STACKTOP = sp;return;
   break;
  }
  case 57:  {
   $64 = $0;
   $65 = (($64) + 8|0);
   $66 = HEAP32[$65>>2]|0;
   _cpuz80_node_generate($66,0);
   _cpuz80_1op(68568,68896);
   STACKTOP = sp;return;
   break;
  }
  case 41:  {
   $70 = $0;
   $71 = (($70) + 8|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = HEAP32[$72>>2]|0;
   $74 = ($73|0)==(44);
   if ($74) {
    $75 = $0;
    $76 = (($75) + 8|0);
    $77 = HEAP32[$76>>2]|0;
    HEAP32[$77>>2] = 45;
    $78 = $0;
    $79 = (($78) + 8|0);
    $80 = HEAP32[$79>>2]|0;
    _cpuz80_node_generate($80,0);
    $81 = $0;
    $82 = (($81) + 8|0);
    $83 = HEAP32[$82>>2]|0;
    HEAP32[$83>>2] = 44;
    _cpuz80_2op(68720,68608,68504);
    STACKTOP = sp;return;
   }
   $84 = $0;
   $85 = (($84) + 8|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==(52);
   if (!($88)) {
    $142 = $0;
    $143 = (($142) + 8|0);
    $144 = HEAP32[$143>>2]|0;
    _cpuz80_node_generate($144,0);
    _cpuz80_2op(68720,68624,68496);
    _cpuz80_2op(68720,68608,68504);
    STACKTOP = sp;return;
   }
   $89 = $0;
   $90 = (($89) + 8|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = (($91) + 8|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = HEAP32[$93>>2]|0;
   $95 = ($94|0)==(68);
   do {
    if (!($95)) {
     $96 = $0;
     $97 = (($96) + 8|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = (($98) + 8|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101|0)==(27);
     if ($102) {
      label = 35;
     } else {
      $103 = $0;
      $104 = (($103) + 8|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = (($105) + 8|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = HEAP32[$107>>2]|0;
      $109 = ($108|0)==(29);
      if ($109) {
       label = 35;
      }
     }
     if ((label|0) == 35) {
      $110 = $0;
      $111 = (($110) + 8|0);
      $112 = HEAP32[$111>>2]|0;
      $113 = (($112) + 8|0);
      $114 = HEAP32[$113>>2]|0;
      $115 = (($114) + 8|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = HEAP32[$116>>2]|0;
      $118 = ($117|0)==(68);
      if ($118) {
       $119 = $0;
       $120 = (($119) + 8|0);
       $121 = HEAP32[$120>>2]|0;
       $122 = (($121) + 8|0);
       $123 = HEAP32[$122>>2]|0;
       $124 = (($123) + 12|0);
       $125 = HEAP32[$124>>2]|0;
       $126 = HEAP32[$125>>2]|0;
       $127 = ($126|0)==(51);
       if ($127) {
        break;
       }
      }
     }
     $137 = $0;
     $138 = (($137) + 8|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (($139) + 8|0);
     $141 = HEAP32[$140>>2]|0;
     _cpuz80_node_generate($141,0);
     _cpuz80_2op(68720,68624,68640);
     _cpuz80_2op(68720,68608,68504);
     STACKTOP = sp;return;
    }
   } while(0);
   $128 = $0;
   $129 = (($128) + 8|0);
   $130 = HEAP32[$129>>2]|0;
   HEAP32[$130>>2] = 53;
   $131 = $0;
   $132 = (($131) + 8|0);
   $133 = HEAP32[$132>>2]|0;
   _cpuz80_node_generate($133,0);
   $134 = $0;
   $135 = (($134) + 8|0);
   $136 = HEAP32[$135>>2]|0;
   HEAP32[$136>>2] = 52;
   _cpuz80_2op(68720,68608,68504);
   STACKTOP = sp;return;
   break;
  }
  case 59:  {
   _cpuz80_2op(68720,68496,69048);
   STACKTOP = sp;return;
   break;
  }
  case 32: case 30: case 28: case 26: case 16: case 14: case 12: case 10: case 8: case 6: case 4: case 2: case 0:  {
   $300 = $0;
   $301 = HEAP32[$300>>2]|0;
   $302 = ($301|0)==(0);
   if ($302) {
    $303 = $0;
    $304 = (($303) + 8|0);
    $305 = HEAP32[$304>>2]|0;
    $306 = HEAP32[$305>>2]|0;
    $307 = ($306|0)==(58);
    if ($307) {
     $308 = $0;
     $309 = (($308) + 12|0);
     $310 = HEAP32[$309>>2]|0;
     $311 = HEAP32[$310>>2]|0;
     $312 = ($311|0)==(59);
     if ($312) {
      _cpuz80_2op(68720,68560,69032);
      _cpuz80_2op(68720,68496,68608);
      _cpuz80_1op(68584,68624);
      STACKTOP = sp;return;
     }
    }
   }
   $313 = $0;
   $314 = HEAP32[$313>>2]|0;
   $315 = ($314|0)==(4);
   if ($315) {
    $316 = $0;
    $317 = (($316) + 8|0);
    $318 = HEAP32[$317>>2]|0;
    $319 = HEAP32[$318>>2]|0;
    $320 = ($319|0)==(60);
    if ($320) {
     $321 = $0;
     $322 = (($321) + 12|0);
     $323 = HEAP32[$322>>2]|0;
     $324 = HEAP32[$323>>2]|0;
     $325 = ($324|0)==(61);
     if ($325) {
      _cpuz80_2op(68720,68560,69064);
      _cpuz80_2op(68720,68496,68608);
      _cpuz80_1op(68512,68624);
      STACKTOP = sp;return;
     }
    }
   }
   $326 = $0;
   $327 = HEAP32[$326>>2]|0;
   $328 = ($327|0)==(30);
   if ($328) {
    $329 = $0;
    $330 = (($329) + 12|0);
    $331 = HEAP32[$330>>2]|0;
    $332 = HEAP32[$331>>2]|0;
    $333 = ($332|0)==(50);
    if ($333) {
     $334 = $0;
     $335 = (($334) + 12|0);
     $336 = HEAP32[$335>>2]|0;
     $337 = (($336) + 4|0);
     $338 = HEAP32[$337>>2]|0;
     $339 = (_is_power_of_two($338)|0);
     $340 = ($339|0)!=(0);
     if ($340) {
      $341 = $0;
      $342 = (($341) + 8|0);
      $343 = HEAP32[$342>>2]|0;
      _cpuz80_node_generate($343,0);
      $344 = $0;
      $345 = (($344) + 12|0);
      $346 = HEAP32[$345>>2]|0;
      $347 = (($346) + 4|0);
      $348 = HEAP32[$347>>2]|0;
      $c = $348;
      while(1) {
       $349 = $c;
       $350 = ($349|0)>(1);
       if (!($350)) {
        break;
       }
       _cpuz80_2op(68792,68496,68496);
       $351 = $c;
       $352 = (($351|0) / 2)&-1;
       $c = $352;
      }
      STACKTOP = sp;return;
     }
    }
   }
   $353 = $0;
   $354 = HEAP32[$353>>2]|0;
   $355 = ($354|0)==(32);
   if ($355) {
    $356 = $0;
    $357 = (($356) + 12|0);
    $358 = HEAP32[$357>>2]|0;
    $359 = HEAP32[$358>>2]|0;
    $360 = ($359|0)==(50);
    if ($360) {
     $361 = $0;
     $362 = (($361) + 12|0);
     $363 = HEAP32[$362>>2]|0;
     $364 = (($363) + 4|0);
     $365 = HEAP32[$364>>2]|0;
     $366 = (_is_power_of_two($365)|0);
     $367 = ($366|0)!=(0);
     if ($367) {
      $368 = $0;
      $369 = (($368) + 8|0);
      $370 = HEAP32[$369>>2]|0;
      _cpuz80_node_generate($370,0);
      $371 = $0;
      $372 = (($371) + 12|0);
      $373 = HEAP32[$372>>2]|0;
      $374 = (($373) + 4|0);
      $375 = HEAP32[$374>>2]|0;
      $c = $375;
      $376 = $c;
      $377 = ($376|0)==(2);
      if ($377) {
       _cpuz80_1op(68600,68496);
      } else {
       $378 = $c;
       $379 = ($378|0)==(4);
       if ($379) {
        _cpuz80_1op(68600,68496);
        _cpuz80_1op(68600,68496);
       } else {
        $380 = $c;
        $381 = ($380|0)==(8);
        if ($381) {
         _cpuz80_noop(69152);
         _cpuz80_noop(69152);
         _cpuz80_noop(69152);
         _cpuz80_1op(68512,69160);
        } else {
         $382 = $c;
         $383 = ($382|0)==(16);
         if ($383) {
          _cpuz80_noop(69152);
          _cpuz80_noop(69152);
          _cpuz80_noop(69152);
          _cpuz80_noop(69152);
          _cpuz80_1op(68512,69168);
         } else {
          $384 = $c;
          $385 = ($384|0)==(32);
          if ($385) {
           _cpuz80_noop(69176);
           _cpuz80_noop(69176);
           _cpuz80_noop(69176);
           _cpuz80_1op(68512,69184);
          } else {
           $386 = $c;
           $387 = ($386|0)==(64);
           if ($387) {
            _cpuz80_noop(69176);
            _cpuz80_noop(69176);
            _cpuz80_1op(68512,69192);
           } else {
            $388 = $c;
            $389 = ($388|0)==(128);
            if ($389) {
             _cpuz80_noop(69176);
             _cpuz80_1op(68512,69200);
            }
           }
          }
         }
        }
       }
      }
      STACKTOP = sp;return;
     }
    }
   }
   $390 = $0;
   $391 = HEAP32[$390>>2]|0;
   $392 = ($391|0)==(12);
   if ($392) {
    label = 130;
   } else {
    $393 = $0;
    $394 = HEAP32[$393>>2]|0;
    $395 = ($394|0)==(14);
    if ($395) {
     label = 130;
    } else {
     $426 = $0;
     $427 = (($426) + 12|0);
     $428 = HEAP32[$427>>2]|0;
     $429 = HEAP32[$428>>2]|0;
     $430 = ($429|0)==(50);
     L167: do {
      if ($430) {
       $431 = $0;
       $432 = (($431) + 12|0);
       $433 = HEAP32[$432>>2]|0;
       $434 = (($433) + 4|0);
       $435 = HEAP32[$434>>2]|0;
       $436 = $435 & 255;
       $c = $436;
       $437 = $0;
       $438 = (($437) + 8|0);
       $439 = HEAP32[$438>>2]|0;
       _cpuz80_node_generate($439,0);
       $440 = $0;
       $441 = HEAP32[$440>>2]|0;
       $442 = ($441|0)==(26);
       if ($442) {
        $443 = $c;
        $444 = ($443|0)==(1);
        if (!($444)) {
         label = 140;
        }
       } else {
        label = 140;
       }
       do {
        if ((label|0) == 140) {
         $445 = $0;
         $446 = HEAP32[$445>>2]|0;
         $447 = ($446|0)==(28);
         if ($447) {
          $448 = $c;
          $449 = ($448|0)==(255);
          if ($449) {
           break;
          }
         }
         $450 = $0;
         $451 = HEAP32[$450>>2]|0;
         $452 = ($451|0)==(26);
         if ($452) {
          $453 = $c;
          $454 = ($453|0)==(255);
          if (!($454)) {
           label = 145;
          }
         } else {
          label = 145;
         }
         do {
          if ((label|0) == 145) {
           $455 = $0;
           $456 = HEAP32[$455>>2]|0;
           $457 = ($456|0)==(28);
           if ($457) {
            $458 = $c;
            $459 = ($458|0)==(1);
            if ($459) {
             break;
            }
           }
           $460 = $c;
           HEAP32[$vararg_buffer13>>2] = $460;
           (_sprintf(33104,68976,$vararg_buffer13)|0);
           break L167;
          }
         } while(0);
         _cpuz80_1op(68648,68496);
         STACKTOP = sp;return;
        }
       } while(0);
       _cpuz80_1op(68632,68496);
       STACKTOP = sp;return;
      } else {
       $461 = $0;
       $462 = (($461) + 8|0);
       $463 = HEAP32[$462>>2]|0;
       $464 = (($463) + 20|0);
       $465 = HEAP32[$464>>2]|0;
       $466 = $465 & 4;
       $467 = ($466|0)==(0);
       if ($467) {
        $468 = $0;
        $469 = (($468) + 12|0);
        $470 = HEAP32[$469>>2]|0;
        _cpuz80_node_generate($470,0);
        _cpuz80_2op(68720,69208,68496);
        $471 = $0;
        $472 = (($471) + 8|0);
        $473 = HEAP32[$472>>2]|0;
        _cpuz80_node_generate($473,0);
       } else {
        $474 = $0;
        $475 = HEAP32[$474>>2]|0;
        $476 = (_is_commutative($475)|0);
        $477 = ($476|0)!=(0);
        if ($477) {
         $478 = $0;
         $479 = (($478) + 12|0);
         $480 = HEAP32[$479>>2]|0;
         $481 = (($480) + 20|0);
         $482 = HEAP32[$481>>2]|0;
         $483 = $482 & 4;
         $484 = ($483|0)==(0);
         if ($484) {
          $485 = $0;
          $486 = (($485) + 8|0);
          $487 = HEAP32[$486>>2]|0;
          _cpuz80_node_generate($487,0);
          _cpuz80_2op(68720,69208,68496);
          $488 = $0;
          $489 = (($488) + 12|0);
          $490 = HEAP32[$489>>2]|0;
          _cpuz80_node_generate($490,0);
         } else {
          label = 154;
         }
        } else {
         label = 154;
        }
        if ((label|0) == 154) {
         $491 = $0;
         $492 = (($491) + 12|0);
         $493 = HEAP32[$492>>2]|0;
         _cpuz80_node_generate($493,0);
         _cpuz80_1op(68528,68552);
         $494 = $0;
         $495 = (($494) + 8|0);
         $496 = HEAP32[$495>>2]|0;
         _cpuz80_node_generate($496,0);
         _cpuz80_1op(68544,68856);
        }
       }
       (_strcpy((33104|0),(69208|0))|0);
      }
     } while(0);
    }
   }
   if ((label|0) == 130) {
    $396 = $0;
    $397 = (($396) + 8|0);
    $398 = HEAP32[$397>>2]|0;
    $399 = HEAP32[$398>>2]|0;
    $400 = ($399|0)==(50);
    if ($400) {
     $401 = $0;
     $402 = (($401) + 12|0);
     $403 = HEAP32[$402>>2]|0;
     _cpuz80_node_generate($403,0);
     $404 = $0;
     $405 = (($404) + 8|0);
     $406 = HEAP32[$405>>2]|0;
     $407 = (($406) + 4|0);
     $408 = HEAP32[$407>>2]|0;
     $409 = $408 & 255;
     HEAP32[$vararg_buffer10>>2] = $409;
     (_sprintf(33104,68976,$vararg_buffer10)|0);
    } else {
     $410 = $0;
     $411 = (($410) + 8|0);
     $412 = HEAP32[$411>>2]|0;
     _cpuz80_node_generate($412,0);
     $413 = $0;
     $414 = (($413) + 12|0);
     $415 = HEAP32[$414>>2]|0;
     $416 = (($415) + 20|0);
     $417 = HEAP32[$416>>2]|0;
     $418 = $417 & 4;
     $419 = ($418|0)==(0);
     if ($419) {
      _cpuz80_2op(68720,69208,68496);
      $420 = $0;
      $421 = (($420) + 12|0);
      $422 = HEAP32[$421>>2]|0;
      _cpuz80_node_generate($422,0);
     } else {
      _cpuz80_1op(68528,68552);
      $423 = $0;
      $424 = (($423) + 12|0);
      $425 = HEAP32[$424>>2]|0;
      _cpuz80_node_generate($425,0);
      _cpuz80_1op(68544,68856);
     }
     (_strcpy((33104|0),(69208|0))|0);
    }
   }
   $497 = $0;
   $498 = HEAP32[$497>>2]|0;
   $499 = ($498|0)==(0);
   if ($499) {
    _cpuz80_1op(68584,33104);
    $500 = $1;
    $501 = ($500|0)!=(0);
    if ($501) {
     HEAP32[34168>>2] = 1;
     $502 = $1;
     HEAP32[$vararg_buffer16>>2] = $502;
     (_sprintf(33104,69216,$vararg_buffer16)|0);
     _cpuz80_2op(68576,69224,33104);
    }
   } else {
    $503 = $0;
    $504 = HEAP32[$503>>2]|0;
    $505 = ($504|0)==(2);
    if ($505) {
     _cpuz80_1op(68592,33104);
     $506 = $1;
     $507 = ($506|0)!=(0);
     if ($507) {
      HEAP32[34168>>2] = 1;
      $508 = $1;
      HEAP32[$vararg_buffer19>>2] = $508;
      (_sprintf(33104,69216,$vararg_buffer19)|0);
      _cpuz80_2op(68576,69224,33104);
     }
    } else {
     $509 = $0;
     $510 = HEAP32[$509>>2]|0;
     $511 = ($510|0)==(4);
     if ($511) {
      _cpuz80_1op(68512,33104);
      $512 = $1;
      $513 = ($512|0)!=(0);
      if ($513) {
       HEAP32[34168>>2] = 1;
       $514 = $1;
       HEAP32[$vararg_buffer22>>2] = $514;
       (_sprintf(33104,69216,$vararg_buffer22)|0);
       _cpuz80_2op(68576,69224,33104);
      }
     } else {
      $515 = $0;
      $516 = HEAP32[$515>>2]|0;
      $517 = ($516|0)==(6);
      if ($517) {
       $518 = (_strcmp(33104,68504)|0);
       $519 = ($518|0)==(0);
       if ($519) {
        _cpuz80_1op(68512,68496);
       } else {
        _cpuz80_1op(68536,33104);
       }
       $520 = $1;
       $521 = ($520|0)!=(0);
       if ($521) {
        HEAP32[34168>>2] = 1;
        $522 = $1;
        HEAP32[$vararg_buffer25>>2] = $522;
        (_sprintf(33104,69216,$vararg_buffer25)|0);
        _cpuz80_2op(68576,69232,33104);
       } else {
        _cpuz80_2op(68720,68496,68504);
        _cpuz80_2op(68744,69232,69240);
        _cpuz80_1op(68648,68496);
        _cpuz80_empty();
       }
      } else {
       $523 = $0;
       $524 = HEAP32[$523>>2]|0;
       $525 = ($524|0)==(8);
       if ($525) {
        $526 = (_strcmp(33104,68504)|0);
        $527 = ($526|0)==(0);
        if ($527) {
         _cpuz80_1op(68512,68496);
        } else {
         _cpuz80_1op(68536,33104);
        }
        $528 = $1;
        $529 = ($528|0)!=(0);
        if ($529) {
         HEAP32[34168>>2] = 1;
         $530 = $1;
         HEAP32[$vararg_buffer28>>2] = $530;
         (_sprintf(33104,69216,$vararg_buffer28)|0);
         _cpuz80_2op(68576,69224,33104);
        } else {
         _cpuz80_2op(68720,68496,68504);
         _cpuz80_2op(68744,69224,69240);
         _cpuz80_1op(68648,68496);
         _cpuz80_empty();
        }
       } else {
        $531 = $0;
        $532 = HEAP32[$531>>2]|0;
        $533 = ($532|0)==(10);
        if ($533) {
         label = 188;
        } else {
         $534 = $0;
         $535 = HEAP32[$534>>2]|0;
         $536 = ($535|0)==(14);
         if ($536) {
          label = 188;
         } else {
          $542 = $0;
          $543 = HEAP32[$542>>2]|0;
          $544 = ($543|0)==(12);
          do {
           if ($544) {
            label = 197;
           } else {
            $545 = $0;
            $546 = HEAP32[$545>>2]|0;
            $547 = ($546|0)==(16);
            if ($547) {
             label = 197;
             break;
            }
            $553 = $0;
            $554 = HEAP32[$553>>2]|0;
            $555 = ($554|0)==(26);
            if ($555) {
             _cpuz80_2op(68792,68496,33104);
            } else {
             $556 = $0;
             $557 = HEAP32[$556>>2]|0;
             $558 = ($557|0)==(28);
             if ($558) {
              _cpuz80_1op(68488,33104);
             }
            }
           }
          } while(0);
          if ((label|0) == 197) {
           $548 = (_strcmp(33104,68504)|0);
           $549 = ($548|0)==(0);
           if ($549) {
            _cpuz80_1op(68512,68496);
           } else {
            _cpuz80_1op(68536,33104);
           }
           $550 = $1;
           $551 = ($550|0)!=(0);
           if ($551) {
            HEAP32[34168>>2] = 1;
            $552 = $1;
            HEAP32[$vararg_buffer34>>2] = $552;
            (_sprintf(33104,69216,$vararg_buffer34)|0);
            _cpuz80_2op(68576,69016,33104);
           } else {
            _cpuz80_2op(68720,68496,69256);
            _cpuz80_2op(68800,68496,68504);
           }
          }
         }
        }
        if ((label|0) == 188) {
         $537 = (_strcmp(33104,68504)|0);
         $538 = ($537|0)==(0);
         if ($538) {
          _cpuz80_1op(68512,68496);
         } else {
          _cpuz80_1op(68536,33104);
         }
         $539 = $1;
         $540 = ($539|0)!=(0);
         if ($540) {
          HEAP32[34168>>2] = 1;
          $541 = $1;
          HEAP32[$vararg_buffer31>>2] = $541;
          (_sprintf(33104,69216,$vararg_buffer31)|0);
          _cpuz80_2op(68576,69248,33104);
         } else {
          _cpuz80_2op(68720,68496,68504);
          _cpuz80_2op(68808,68496,68496);
         }
        }
       }
      }
     }
    }
   }
   STACKTOP = sp;return;
   break;
  }
  case 64:  {
   _cpuz80_2op(68720,68496,69112);
   STACKTOP = sp;return;
   break;
  }
  case 54:  {
   $294 = $0;
   $295 = (($294) + 8|0);
   $296 = HEAP32[$295>>2]|0;
   _cpuz80_node_generate($296,0);
   _cpuz80_1op(68568,68992);
   _cpuz80_1op(68568,69000);
   _cpuz80_1op(68568,69008);
   STACKTOP = sp;return;
   break;
  }
  case 58:  {
   _cpuz80_2op(68720,68496,69032);
   STACKTOP = sp;return;
   break;
  }
  case 65:  {
   _cpuz80_2op(68720,68496,69128);
   STACKTOP = sp;return;
   break;
  }
  case 61:  {
   _cpuz80_2op(68720,68496,69080);
   STACKTOP = sp;return;
   break;
  }
  case 60:  {
   _cpuz80_2op(68720,68496,69064);
   STACKTOP = sp;return;
   break;
  }
  case 62:  {
   _cpuz80_1op(68568,69096);
   STACKTOP = sp;return;
   break;
  }
  case 55:  {
   $297 = $0;
   $298 = (($297) + 8|0);
   $299 = HEAP32[$298>>2]|0;
   _cpuz80_node_generate($299,0);
   _cpuz80_2op(68720,69016,68624);
   _cpuz80_2op(68784,68496,69024);
   STACKTOP = sp;return;
   break;
  }
  case 63:  {
   _cpuz80_2op(68720,68560,69104);
   STACKTOP = sp;return;
   break;
  }
  case 67:  {
   _cpuz80_2op(68720,68496,69136);
   STACKTOP = sp;return;
   break;
  }
  case 53:  {
   $230 = $0;
   $231 = (($230) + 8|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[$232>>2]|0;
   $234 = ($233|0)==(68);
   if ($234) {
    $235 = $0;
    $236 = (($235) + 8|0);
    $237 = HEAP32[$236>>2]|0;
    _node_get_label($237,1);
    _cpuz80_2op(68720,68560,33104);
    STACKTOP = sp;return;
   }
   $238 = $0;
   $239 = (($238) + 8|0);
   $240 = HEAP32[$239>>2]|0;
   $241 = HEAP32[$240>>2]|0;
   $242 = ($241|0)==(27);
   if ($242) {
    label = 68;
   } else {
    $243 = $0;
    $244 = (($243) + 8|0);
    $245 = HEAP32[$244>>2]|0;
    $246 = HEAP32[$245>>2]|0;
    $247 = ($246|0)==(29);
    if ($247) {
     label = 68;
    }
   }
   if ((label|0) == 68) {
    $248 = $0;
    $249 = (($248) + 8|0);
    $250 = HEAP32[$249>>2]|0;
    $251 = (($250) + 8|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = HEAP32[$252>>2]|0;
    $254 = ($253|0)==(68);
    if ($254) {
     $255 = $0;
     $256 = (($255) + 8|0);
     $257 = HEAP32[$256>>2]|0;
     $258 = (($257) + 12|0);
     $259 = HEAP32[$258>>2]|0;
     $260 = HEAP32[$259>>2]|0;
     $261 = ($260|0)==(51);
     if ($261) {
      $262 = $0;
      $263 = (($262) + 8|0);
      $264 = HEAP32[$263>>2]|0;
      $265 = (($264) + 8|0);
      $266 = HEAP32[$265>>2]|0;
      _node_get_label($266,1);
      $p = 33104;
      while(1) {
       $267 = $p;
       $268 = HEAP8[$267>>0]|0;
       $269 = ($268<<24>>24)!=(0);
       if (!($269)) {
        break;
       }
       $270 = $p;
       $271 = (($270) + 1|0);
       $p = $271;
      }
      $272 = $p;
      $273 = (($272) + -1|0);
      $p = $273;
      $274 = $0;
      $275 = (($274) + 8|0);
      $276 = HEAP32[$275>>2]|0;
      $277 = HEAP32[$276>>2]|0;
      $278 = ($277|0)==(27);
      if ($278) {
       $279 = $p;
       $280 = (($279) + 1|0);
       $p = $280;
       HEAP8[$279>>0] = 43;
      } else {
       $281 = $p;
       $282 = (($281) + 1|0);
       $p = $282;
       HEAP8[$281>>0] = 45;
      }
      $283 = $p;
      $284 = $0;
      $285 = (($284) + 8|0);
      $286 = HEAP32[$285>>2]|0;
      $287 = (($286) + 12|0);
      $288 = HEAP32[$287>>2]|0;
      $289 = (($288) + 4|0);
      $290 = HEAP32[$289>>2]|0;
      HEAP32[$vararg_buffer7>>2] = $290;
      (_sprintf($283,68984,$vararg_buffer7)|0);
      _cpuz80_2op(68720,68560,33104);
      STACKTOP = sp;return;
     }
    }
   }
   $291 = $0;
   $292 = (($291) + 8|0);
   $293 = HEAP32[$292>>2]|0;
   _cpuz80_node_generate($293,0);
   _cpuz80_2op(68720,68496,68640);
   _cpuz80_1op(68632,68560);
   _cpuz80_2op(68720,68608,68640);
   _cpuz80_2op(68720,68624,68496);
   STACKTOP = sp;return;
   break;
  }
  case 46:  {
   $559 = $0;
   $560 = (($559) + 8|0);
   $561 = HEAP32[$560>>2]|0;
   $562 = HEAP32[$561>>2]|0;
   $563 = ($562|0)==(26);
   if ($563) {
    label = 222;
   } else {
    $564 = $0;
    $565 = (($564) + 8|0);
    $566 = HEAP32[$565>>2]|0;
    $567 = HEAP32[$566>>2]|0;
    $568 = ($567|0)==(28);
    if ($568) {
     label = 222;
    } else {
     $569 = $0;
     $570 = (($569) + 8|0);
     $571 = HEAP32[$570>>2]|0;
     $572 = HEAP32[$571>>2]|0;
     $573 = ($572|0)==(0);
     if ($573) {
      label = 222;
     } else {
      $574 = $0;
      $575 = (($574) + 8|0);
      $576 = HEAP32[$575>>2]|0;
      $577 = HEAP32[$576>>2]|0;
      $578 = ($577|0)==(4);
      if ($578) {
       label = 222;
      } else {
       $579 = $0;
       $580 = (($579) + 8|0);
       $581 = HEAP32[$580>>2]|0;
       $582 = HEAP32[$581>>2]|0;
       $583 = ($582|0)==(2);
       if ($583) {
        label = 222;
       }
      }
     }
    }
   }
   do {
    if ((label|0) == 222) {
     $584 = $0;
     $585 = (($584) + 8|0);
     $586 = HEAP32[$585>>2]|0;
     $587 = (($586) + 12|0);
     $588 = HEAP32[$587>>2]|0;
     $589 = HEAP32[$588>>2]|0;
     $590 = ($589|0)==(50);
     if (!($590)) {
      $591 = $0;
      $592 = (($591) + 8|0);
      $593 = HEAP32[$592>>2]|0;
      $594 = (($593) + 12|0);
      $595 = HEAP32[$594>>2]|0;
      $596 = HEAP32[$595>>2]|0;
      $597 = ($596|0)==(44);
      if (!($597)) {
       break;
      }
     }
     $598 = $0;
     $599 = (($598) + 8|0);
     $600 = HEAP32[$599>>2]|0;
     $601 = (($600) + 8|0);
     $602 = HEAP32[$601>>2]|0;
     $603 = $0;
     $604 = (($603) + 12|0);
     $605 = HEAP32[$604>>2]|0;
     $606 = (_node_same_address($602,$605)|0);
     $607 = ($606|0)!=(0);
     if ($607) {
      $608 = $0;
      $609 = (($608) + 12|0);
      $610 = HEAP32[$609>>2]|0;
      $611 = HEAP32[$610>>2]|0;
      $612 = ($611|0)==(68);
      if ($612) {
       $613 = $0;
       $614 = (($613) + 12|0);
       $615 = HEAP32[$614>>2]|0;
       _node_get_label($615,0);
       _cpuz80_2op(68720,68560,33104);
      } else {
       $616 = $0;
       $617 = (($616) + 12|0);
       $618 = HEAP32[$617>>2]|0;
       $619 = HEAP32[$618>>2]|0;
       $620 = ($619|0)==(27);
       if ($620) {
        label = 229;
       } else {
        $621 = $0;
        $622 = (($621) + 12|0);
        $623 = HEAP32[$622>>2]|0;
        $624 = HEAP32[$623>>2]|0;
        $625 = ($624|0)==(29);
        if ($625) {
         label = 229;
        } else {
         label = 238;
        }
       }
       if ((label|0) == 229) {
        $626 = $0;
        $627 = (($626) + 12|0);
        $628 = HEAP32[$627>>2]|0;
        $629 = (($628) + 8|0);
        $630 = HEAP32[$629>>2]|0;
        $631 = HEAP32[$630>>2]|0;
        $632 = ($631|0)==(68);
        if ($632) {
         $633 = $0;
         $634 = (($633) + 12|0);
         $635 = HEAP32[$634>>2]|0;
         $636 = (($635) + 12|0);
         $637 = HEAP32[$636>>2]|0;
         $638 = HEAP32[$637>>2]|0;
         $639 = ($638|0)==(51);
         if ($639) {
          $640 = $0;
          $641 = (($640) + 12|0);
          $642 = HEAP32[$641>>2]|0;
          $643 = (($642) + 8|0);
          $644 = HEAP32[$643>>2]|0;
          _node_get_label($644,0);
          $p = 33104;
          while(1) {
           $645 = $p;
           $646 = HEAP8[$645>>0]|0;
           $647 = ($646<<24>>24)!=(0);
           if (!($647)) {
            break;
           }
           $648 = $p;
           $649 = (($648) + 1|0);
           $p = $649;
          }
          $650 = $0;
          $651 = (($650) + 12|0);
          $652 = HEAP32[$651>>2]|0;
          $653 = HEAP32[$652>>2]|0;
          $654 = ($653|0)==(27);
          if ($654) {
           $655 = $p;
           $656 = (($655) + 1|0);
           $p = $656;
           HEAP8[$655>>0] = 43;
          } else {
           $657 = $p;
           $658 = (($657) + 1|0);
           $p = $658;
           HEAP8[$657>>0] = 45;
          }
          $659 = $p;
          $660 = $0;
          $661 = (($660) + 12|0);
          $662 = HEAP32[$661>>2]|0;
          $663 = (($662) + 12|0);
          $664 = HEAP32[$663>>2]|0;
          $665 = (($664) + 4|0);
          $666 = HEAP32[$665>>2]|0;
          HEAP32[$vararg_buffer37>>2] = $666;
          (_sprintf($659,68976,$vararg_buffer37)|0);
          _cpuz80_2op(68720,68560,33104);
         } else {
          label = 238;
         }
        } else {
         label = 238;
        }
       }
       if ((label|0) == 238) {
        $667 = $0;
        $668 = (($667) + 12|0);
        $669 = HEAP32[$668>>2]|0;
        _cpuz80_node_generate($669,0);
       }
      }
      $670 = $0;
      $671 = (($670) + 8|0);
      $672 = HEAP32[$671>>2]|0;
      $673 = HEAP32[$672>>2]|0;
      $674 = ($673|0)==(26);
      if ($674) {
       label = 242;
      } else {
       $675 = $0;
       $676 = (($675) + 8|0);
       $677 = HEAP32[$676>>2]|0;
       $678 = HEAP32[$677>>2]|0;
       $679 = ($678|0)==(28);
       if ($679) {
        label = 242;
       } else {
        label = 251;
       }
      }
      if ((label|0) == 242) {
       $680 = $0;
       $681 = (($680) + 8|0);
       $682 = HEAP32[$681>>2]|0;
       $683 = (($682) + 12|0);
       $684 = HEAP32[$683>>2]|0;
       $685 = HEAP32[$684>>2]|0;
       $686 = ($685|0)==(50);
       if ($686) {
        $687 = $0;
        $688 = (($687) + 8|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = (($689) + 12|0);
        $691 = HEAP32[$690>>2]|0;
        $692 = (($691) + 4|0);
        $693 = HEAP32[$692>>2]|0;
        $694 = ($693|0)<(4);
        if ($694) {
         $695 = $0;
         $696 = (($695) + 8|0);
         $697 = HEAP32[$696>>2]|0;
         $698 = (($697) + 12|0);
         $699 = HEAP32[$698>>2]|0;
         $700 = (($699) + 4|0);
         $701 = HEAP32[$700>>2]|0;
         $c = $701;
         while(1) {
          $702 = $0;
          $703 = (($702) + 8|0);
          $704 = HEAP32[$703>>2]|0;
          $705 = HEAP32[$704>>2]|0;
          $706 = ($705|0)==(26);
          if ($706) {
           _cpuz80_1op(68632,68640);
          } else {
           _cpuz80_1op(68648,68640);
          }
          $707 = $c;
          $708 = (($707) + -1)|0;
          $c = $708;
          $709 = ($708|0)!=(0);
          if (!($709)) {
           break;
          }
         }
        } else {
         label = 251;
        }
       } else {
        label = 251;
       }
      }
      if ((label|0) == 251) {
       $710 = $0;
       $711 = (($710) + 8|0);
       $712 = HEAP32[$711>>2]|0;
       $713 = (($712) + 12|0);
       $714 = HEAP32[$713>>2]|0;
       $715 = HEAP32[$714>>2]|0;
       $716 = ($715|0)==(50);
       if ($716) {
        $717 = $0;
        $718 = (($717) + 8|0);
        $719 = HEAP32[$718>>2]|0;
        $720 = HEAP32[$719>>2]|0;
        $721 = ($720|0)==(28);
        if ($721) {
         $722 = $0;
         $723 = (($722) + 8|0);
         $724 = HEAP32[$723>>2]|0;
         $725 = (($724) + 12|0);
         $726 = HEAP32[$725>>2]|0;
         $727 = (($726) + 4|0);
         $728 = HEAP32[$727>>2]|0;
         $729 = (0 - ($728))|0;
         $730 = $729 & 255;
         HEAP32[$vararg_buffer40>>2] = $730;
         (_sprintf(33104,68976,$vararg_buffer40)|0);
        } else {
         $731 = $0;
         $732 = (($731) + 8|0);
         $733 = HEAP32[$732>>2]|0;
         $734 = (($733) + 12|0);
         $735 = HEAP32[$734>>2]|0;
         $736 = (($735) + 4|0);
         $737 = HEAP32[$736>>2]|0;
         HEAP32[$vararg_buffer43>>2] = $737;
         (_sprintf(33104,68976,$vararg_buffer43)|0);
        }
        _cpuz80_2op(68720,68496,33104);
       } else {
        $738 = $0;
        $739 = (($738) + 8|0);
        $740 = HEAP32[$739>>2]|0;
        $741 = (($740) + 12|0);
        $742 = HEAP32[$741>>2]|0;
        $743 = HEAP32[$742>>2]|0;
        $744 = ($743|0)==(44);
        if ($744) {
         $745 = $0;
         $746 = (($745) + 8|0);
         $747 = HEAP32[$746>>2]|0;
         $748 = (($747) + 12|0);
         $749 = HEAP32[$748>>2]|0;
         _node_get_label($749,1);
         _cpuz80_2op(68720,68496,33104);
         $750 = $0;
         $751 = (($750) + 8|0);
         $752 = HEAP32[$751>>2]|0;
         $753 = HEAP32[$752>>2]|0;
         $754 = ($753|0)==(28);
         if ($754) {
          _cpuz80_noop(68480);
         }
        }
       }
       $755 = $0;
       $756 = (($755) + 8|0);
       $757 = HEAP32[$756>>2]|0;
       $758 = HEAP32[$757>>2]|0;
       $759 = ($758|0)==(26);
       if ($759) {
        _cpuz80_2op(68792,68496,68640);
       } else {
        $760 = $0;
        $761 = (($760) + 8|0);
        $762 = HEAP32[$761>>2]|0;
        $763 = HEAP32[$762>>2]|0;
        $764 = ($763|0)==(28);
        if ($764) {
         _cpuz80_2op(68792,68496,68640);
        } else {
         $765 = $0;
         $766 = (($765) + 8|0);
         $767 = HEAP32[$766>>2]|0;
         $768 = HEAP32[$767>>2]|0;
         $769 = ($768|0)==(0);
         if ($769) {
          _cpuz80_1op(68584,68640);
         } else {
          $770 = $0;
          $771 = (($770) + 8|0);
          $772 = HEAP32[$771>>2]|0;
          $773 = HEAP32[$772>>2]|0;
          $774 = ($773|0)==(4);
          if ($774) {
           _cpuz80_1op(68512,68640);
          } else {
           $775 = $0;
           $776 = (($775) + 8|0);
           $777 = HEAP32[$776>>2]|0;
           $778 = HEAP32[$777>>2]|0;
           $779 = ($778|0)==(2);
           if ($779) {
            _cpuz80_1op(68592,68640);
           }
          }
         }
        }
       }
       _cpuz80_2op(68720,68640,68496);
      }
      STACKTOP = sp;return;
     }
    }
   } while(0);
   $780 = $0;
   $781 = (($780) + 12|0);
   $782 = HEAP32[$781>>2]|0;
   $783 = HEAP32[$782>>2]|0;
   $784 = ($783|0)==(68);
   if ($784) {
    $785 = $0;
    $786 = (($785) + 8|0);
    $787 = HEAP32[$786>>2]|0;
    _cpuz80_node_generate($787,0);
    $788 = $0;
    $789 = (($788) + 12|0);
    $790 = HEAP32[$789>>2]|0;
    _node_get_label($790,1);
    _cpuz80_2op(68720,33104,68496);
    STACKTOP = sp;return;
   }
   $791 = $0;
   $792 = (($791) + 12|0);
   $793 = HEAP32[$792>>2]|0;
   $794 = HEAP32[$793>>2]|0;
   $795 = ($794|0)==(27);
   if ($795) {
    label = 281;
   } else {
    $796 = $0;
    $797 = (($796) + 12|0);
    $798 = HEAP32[$797>>2]|0;
    $799 = HEAP32[$798>>2]|0;
    $800 = ($799|0)==(29);
    if ($800) {
     label = 281;
    }
   }
   if ((label|0) == 281) {
    $801 = $0;
    $802 = (($801) + 12|0);
    $803 = HEAP32[$802>>2]|0;
    $804 = (($803) + 8|0);
    $805 = HEAP32[$804>>2]|0;
    $806 = HEAP32[$805>>2]|0;
    $807 = ($806|0)==(68);
    if ($807) {
     $808 = $0;
     $809 = (($808) + 12|0);
     $810 = HEAP32[$809>>2]|0;
     $811 = (($810) + 12|0);
     $812 = HEAP32[$811>>2]|0;
     $813 = HEAP32[$812>>2]|0;
     $814 = ($813|0)==(51);
     if ($814) {
      $815 = $0;
      $816 = (($815) + 8|0);
      $817 = HEAP32[$816>>2]|0;
      _cpuz80_node_generate($817,0);
      $818 = $0;
      $819 = (($818) + 12|0);
      $820 = HEAP32[$819>>2]|0;
      $821 = (($820) + 8|0);
      $822 = HEAP32[$821>>2]|0;
      _node_get_label($822,1);
      $p = 33104;
      while(1) {
       $823 = $p;
       $824 = HEAP8[$823>>0]|0;
       $825 = ($824<<24>>24)!=(0);
       if (!($825)) {
        break;
       }
       $826 = $p;
       $827 = (($826) + 1|0);
       $p = $827;
      }
      $828 = $p;
      $829 = (($828) + -1|0);
      $p = $829;
      $830 = $0;
      $831 = (($830) + 12|0);
      $832 = HEAP32[$831>>2]|0;
      $833 = HEAP32[$832>>2]|0;
      $834 = ($833|0)==(27);
      if ($834) {
       $835 = $p;
       $836 = (($835) + 1|0);
       $p = $836;
       HEAP8[$835>>0] = 43;
      } else {
       $837 = $p;
       $838 = (($837) + 1|0);
       $p = $838;
       HEAP8[$837>>0] = 45;
      }
      $839 = $p;
      $840 = $0;
      $841 = (($840) + 12|0);
      $842 = HEAP32[$841>>2]|0;
      $843 = (($842) + 12|0);
      $844 = HEAP32[$843>>2]|0;
      $845 = (($844) + 4|0);
      $846 = HEAP32[$845>>2]|0;
      HEAP32[$vararg_buffer46>>2] = $846;
      (_sprintf($839,68984,$vararg_buffer46)|0);
      _cpuz80_2op(68720,33104,68496);
      STACKTOP = sp;return;
     }
    }
   }
   $847 = $0;
   $848 = (($847) + 12|0);
   $849 = HEAP32[$848>>2]|0;
   _cpuz80_node_generate($849,0);
   $850 = $0;
   $851 = (($850) + 8|0);
   $852 = HEAP32[$851>>2]|0;
   $853 = HEAP32[$852>>2]|0;
   $854 = ($853|0)==(50);
   if ($854) {
    $855 = $0;
    $856 = (($855) + 8|0);
    $857 = HEAP32[$856>>2]|0;
    $858 = (($857) + 4|0);
    $859 = HEAP32[$858>>2]|0;
    HEAP32[$vararg_buffer49>>2] = $859;
    (_sprintf(33104,68976,$vararg_buffer49)|0);
    _cpuz80_2op(68720,68640,33104);
   } else {
    $860 = $0;
    $861 = (($860) + 8|0);
    $862 = HEAP32[$861>>2]|0;
    $863 = (($862) + 20|0);
    $864 = HEAP32[$863>>2]|0;
    $865 = $864 & 192;
    $866 = ($865|0)==(0);
    if ($866) {
     $867 = $0;
     $868 = (($867) + 8|0);
     $869 = HEAP32[$868>>2]|0;
     _cpuz80_node_generate($869,0);
    } else {
     _cpuz80_1op(68528,68560);
     $870 = $0;
     $871 = (($870) + 8|0);
     $872 = HEAP32[$871>>2]|0;
     _cpuz80_node_generate($872,0);
     _cpuz80_1op(68544,68560);
    }
    _cpuz80_2op(68720,68640,68496);
   }
   STACKTOP = sp;return;
   break;
  }
  case 47:  {
   $873 = $0;
   $874 = (($873) + 12|0);
   $875 = HEAP32[$874>>2]|0;
   $876 = HEAP32[$875>>2]|0;
   $877 = ($876|0)==(68);
   if ($877) {
    $878 = $0;
    $879 = (($878) + 8|0);
    $880 = HEAP32[$879>>2]|0;
    _cpuz80_node_generate($880,0);
    $881 = $0;
    $882 = (($881) + 12|0);
    $883 = HEAP32[$882>>2]|0;
    _node_get_label($883,1);
    _cpuz80_2op(68720,33104,68560);
    STACKTOP = sp;return;
   }
   $884 = $0;
   $885 = (($884) + 12|0);
   $886 = HEAP32[$885>>2]|0;
   $887 = HEAP32[$886>>2]|0;
   $888 = ($887|0)==(27);
   if ($888) {
    label = 301;
   } else {
    $889 = $0;
    $890 = (($889) + 12|0);
    $891 = HEAP32[$890>>2]|0;
    $892 = HEAP32[$891>>2]|0;
    $893 = ($892|0)==(29);
    if ($893) {
     label = 301;
    }
   }
   if ((label|0) == 301) {
    $894 = $0;
    $895 = (($894) + 12|0);
    $896 = HEAP32[$895>>2]|0;
    $897 = (($896) + 8|0);
    $898 = HEAP32[$897>>2]|0;
    $899 = HEAP32[$898>>2]|0;
    $900 = ($899|0)==(68);
    if ($900) {
     $901 = $0;
     $902 = (($901) + 12|0);
     $903 = HEAP32[$902>>2]|0;
     $904 = (($903) + 12|0);
     $905 = HEAP32[$904>>2]|0;
     $906 = HEAP32[$905>>2]|0;
     $907 = ($906|0)==(51);
     if ($907) {
      $908 = $0;
      $909 = (($908) + 8|0);
      $910 = HEAP32[$909>>2]|0;
      _cpuz80_node_generate($910,0);
      $911 = $0;
      $912 = (($911) + 12|0);
      $913 = HEAP32[$912>>2]|0;
      $914 = (($913) + 8|0);
      $915 = HEAP32[$914>>2]|0;
      _node_get_label($915,1);
      $p = 33104;
      while(1) {
       $916 = $p;
       $917 = HEAP8[$916>>0]|0;
       $918 = ($917<<24>>24)!=(0);
       if (!($918)) {
        break;
       }
       $919 = $p;
       $920 = (($919) + 1|0);
       $p = $920;
      }
      $921 = $p;
      $922 = (($921) + -1|0);
      $p = $922;
      $923 = $0;
      $924 = (($923) + 12|0);
      $925 = HEAP32[$924>>2]|0;
      $926 = HEAP32[$925>>2]|0;
      $927 = ($926|0)==(27);
      if ($927) {
       $928 = $p;
       $929 = (($928) + 1|0);
       $p = $929;
       HEAP8[$928>>0] = 43;
      } else {
       $930 = $p;
       $931 = (($930) + 1|0);
       $p = $931;
       HEAP8[$930>>0] = 45;
      }
      $932 = $p;
      $933 = $0;
      $934 = (($933) + 12|0);
      $935 = HEAP32[$934>>2]|0;
      $936 = (($935) + 12|0);
      $937 = HEAP32[$936>>2]|0;
      $938 = (($937) + 4|0);
      $939 = HEAP32[$938>>2]|0;
      HEAP32[$vararg_buffer52>>2] = $939;
      (_sprintf($932,68984,$vararg_buffer52)|0);
      _cpuz80_2op(68720,33104,68560);
      STACKTOP = sp;return;
     }
    }
   }
   $940 = $0;
   $941 = (($940) + 12|0);
   $942 = HEAP32[$941>>2]|0;
   _cpuz80_node_generate($942,0);
   $943 = $0;
   $944 = (($943) + 8|0);
   $945 = HEAP32[$944>>2]|0;
   $946 = (($945) + 20|0);
   $947 = HEAP32[$946>>2]|0;
   $948 = $947 & 48;
   $949 = ($948|0)==(0);
   if ($949) {
    _cpuz80_2op(68776,68848,68560);
    $950 = $0;
    $951 = (($950) + 8|0);
    $952 = HEAP32[$951>>2]|0;
    _cpuz80_node_generate($952,0);
   } else {
    _cpuz80_1op(68528,68560);
    $953 = $0;
    $954 = (($953) + 8|0);
    $955 = HEAP32[$954>>2]|0;
    _cpuz80_node_generate($955,0);
    _cpuz80_1op(68544,68848);
   }
   _cpuz80_2op(68720,68496,68624);
   _cpuz80_2op(68720,69264,68496);
   _cpuz80_1op(68632,68848);
   _cpuz80_2op(68720,68496,68608);
   _cpuz80_2op(68720,69264,68496);
   STACKTOP = sp;return;
   break;
  }
  default: {
   $956 = $0;
   $957 = HEAP32[$956>>2]|0;
   $958 = ($957|0)==(29);
   if ($958) {
    $959 = $0;
    $960 = (($959) + 8|0);
    $961 = HEAP32[$960>>2]|0;
    $962 = HEAP32[$961>>2]|0;
    $963 = ($962|0)==(68);
    do {
     if ($963) {
      label = 320;
     } else {
      $964 = $0;
      $965 = (($964) + 8|0);
      $966 = HEAP32[$965>>2]|0;
      $967 = HEAP32[$966>>2]|0;
      $968 = ($967|0)==(27);
      if (!($968)) {
       $969 = $0;
       $970 = (($969) + 8|0);
       $971 = HEAP32[$970>>2]|0;
       $972 = HEAP32[$971>>2]|0;
       $973 = ($972|0)==(29);
       if (!($973)) {
        break;
       }
      }
      $974 = $0;
      $975 = (($974) + 8|0);
      $976 = HEAP32[$975>>2]|0;
      $977 = (($976) + 8|0);
      $978 = HEAP32[$977>>2]|0;
      $979 = HEAP32[$978>>2]|0;
      $980 = ($979|0)==(68);
      if ($980) {
       $981 = $0;
       $982 = (($981) + 8|0);
       $983 = HEAP32[$982>>2]|0;
       $984 = (($983) + 12|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = HEAP32[$985>>2]|0;
       $987 = ($986|0)==(51);
       if ($987) {
        label = 320;
       }
      }
     }
    } while(0);
    do {
     if ((label|0) == 320) {
      $988 = $0;
      $989 = (($988) + 12|0);
      $990 = HEAP32[$989>>2]|0;
      $991 = HEAP32[$990>>2]|0;
      $992 = ($991|0)==(68);
      if (!($992)) {
       $993 = $0;
       $994 = (($993) + 12|0);
       $995 = HEAP32[$994>>2]|0;
       $996 = HEAP32[$995>>2]|0;
       $997 = ($996|0)==(27);
       if (!($997)) {
        $998 = $0;
        $999 = (($998) + 12|0);
        $1000 = HEAP32[$999>>2]|0;
        $1001 = HEAP32[$1000>>2]|0;
        $1002 = ($1001|0)==(29);
        if (!($1002)) {
         break;
        }
       }
       $1003 = $0;
       $1004 = (($1003) + 12|0);
       $1005 = HEAP32[$1004>>2]|0;
       $1006 = (($1005) + 8|0);
       $1007 = HEAP32[$1006>>2]|0;
       $1008 = HEAP32[$1007>>2]|0;
       $1009 = ($1008|0)==(68);
       if (!($1009)) {
        break;
       }
       $1010 = $0;
       $1011 = (($1010) + 12|0);
       $1012 = HEAP32[$1011>>2]|0;
       $1013 = (($1012) + 12|0);
       $1014 = HEAP32[$1013>>2]|0;
       $1015 = HEAP32[$1014>>2]|0;
       $1016 = ($1015|0)==(51);
       if (!($1016)) {
        break;
       }
      }
      $1017 = $0;
      $1018 = (($1017) + 8|0);
      $1019 = HEAP32[$1018>>2]|0;
      $1020 = HEAP32[$1019>>2]|0;
      $1021 = ($1020|0)==(27);
      if ($1021) {
       $1022 = $0;
       $1023 = (($1022) + 8|0);
       $1024 = HEAP32[$1023>>2]|0;
       $1025 = (($1024) + 12|0);
       $1026 = HEAP32[$1025>>2]|0;
       $1027 = (($1026) + 4|0);
       $1028 = HEAP32[$1027>>2]|0;
       $c = $1028;
       $1029 = $0;
       $1030 = (($1029) + 8|0);
       $1031 = HEAP32[$1030>>2]|0;
       $1032 = (($1031) + 8|0);
       $1033 = HEAP32[$1032>>2]|0;
       _node_get_label($1033,0);
      } else {
       $1034 = $0;
       $1035 = (($1034) + 8|0);
       $1036 = HEAP32[$1035>>2]|0;
       $1037 = HEAP32[$1036>>2]|0;
       $1038 = ($1037|0)==(29);
       if ($1038) {
        $1039 = $0;
        $1040 = (($1039) + 8|0);
        $1041 = HEAP32[$1040>>2]|0;
        $1042 = (($1041) + 12|0);
        $1043 = HEAP32[$1042>>2]|0;
        $1044 = (($1043) + 4|0);
        $1045 = HEAP32[$1044>>2]|0;
        $1046 = (0 - ($1045))|0;
        $c = $1046;
        $1047 = $0;
        $1048 = (($1047) + 8|0);
        $1049 = HEAP32[$1048>>2]|0;
        $1050 = (($1049) + 8|0);
        $1051 = HEAP32[$1050>>2]|0;
        _node_get_label($1051,0);
       } else {
        $c = 0;
        $1052 = $0;
        $1053 = (($1052) + 8|0);
        $1054 = HEAP32[$1053>>2]|0;
        _node_get_label($1054,0);
       }
      }
      (_strcpy(($expression|0),(33104|0))|0);
      (_strcat(($expression|0),(69272|0))|0);
      $1055 = $0;
      $1056 = (($1055) + 12|0);
      $1057 = HEAP32[$1056>>2]|0;
      $1058 = HEAP32[$1057>>2]|0;
      $1059 = ($1058|0)==(27);
      if ($1059) {
       $1060 = $0;
       $1061 = (($1060) + 12|0);
       $1062 = HEAP32[$1061>>2]|0;
       $1063 = (($1062) + 12|0);
       $1064 = HEAP32[$1063>>2]|0;
       $1065 = (($1064) + 4|0);
       $1066 = HEAP32[$1065>>2]|0;
       $1067 = $c;
       $1068 = (($1067) - ($1066))|0;
       $c = $1068;
       $1069 = $0;
       $1070 = (($1069) + 12|0);
       $1071 = HEAP32[$1070>>2]|0;
       $1072 = (($1071) + 8|0);
       $1073 = HEAP32[$1072>>2]|0;
       _node_get_label($1073,0);
      } else {
       $1074 = $0;
       $1075 = (($1074) + 12|0);
       $1076 = HEAP32[$1075>>2]|0;
       $1077 = HEAP32[$1076>>2]|0;
       $1078 = ($1077|0)==(29);
       if ($1078) {
        $1079 = $0;
        $1080 = (($1079) + 12|0);
        $1081 = HEAP32[$1080>>2]|0;
        $1082 = (($1081) + 12|0);
        $1083 = HEAP32[$1082>>2]|0;
        $1084 = (($1083) + 4|0);
        $1085 = HEAP32[$1084>>2]|0;
        $1086 = $c;
        $1087 = (($1086) + ($1085))|0;
        $c = $1087;
        $1088 = $0;
        $1089 = (($1088) + 12|0);
        $1090 = HEAP32[$1089>>2]|0;
        $1091 = (($1090) + 8|0);
        $1092 = HEAP32[$1091>>2]|0;
        _node_get_label($1092,0);
       } else {
        $1093 = $0;
        $1094 = (($1093) + 12|0);
        $1095 = HEAP32[$1094>>2]|0;
        _node_get_label($1095,0);
       }
      }
      (_strcat(($expression|0),(33104|0))|0);
      $1096 = $c;
      $1097 = ($1096|0)!=(0);
      if ($1097) {
       $1098 = $c;
       $1099 = $1098 & 65535;
       HEAP32[$vararg_buffer55>>2] = $1099;
       (_sprintf(33104,69280,$vararg_buffer55)|0);
       (_strcat(($expression|0),(33104|0))|0);
      }
      _cpuz80_2op(68720,68560,$expression);
      STACKTOP = sp;return;
     }
    } while(0);
   }
   $1100 = $0;
   $1101 = HEAP32[$1100>>2]|0;
   $1102 = ($1101|0)==(27);
   if ($1102) {
    label = 343;
   } else {
    $1103 = $0;
    $1104 = HEAP32[$1103>>2]|0;
    $1105 = ($1104|0)==(29);
    if ($1105) {
     label = 343;
    }
   }
   if ((label|0) == 343) {
    $1106 = $0;
    $1107 = (($1106) + 8|0);
    $1108 = HEAP32[$1107>>2]|0;
    $1109 = HEAP32[$1108>>2]|0;
    $1110 = ($1109|0)==(68);
    do {
     if ($1110) {
      $1111 = $0;
      $1112 = (($1111) + 12|0);
      $1113 = HEAP32[$1112>>2]|0;
      $1114 = HEAP32[$1113>>2]|0;
      $1115 = ($1114|0)==(51);
      if (!($1115)) {
       break;
      }
      $1116 = $0;
      $1117 = (($1116) + 8|0);
      $1118 = HEAP32[$1117>>2]|0;
      _node_get_label($1118,0);
      $1119 = $0;
      $1120 = HEAP32[$1119>>2]|0;
      $1121 = ($1120|0)==(27);
      if ($1121) {
       (_strcat((33104|0),(69288|0))|0);
      } else {
       (_strcat((33104|0),(69272|0))|0);
      }
      $p = 33104;
      while(1) {
       $1122 = $p;
       $1123 = HEAP8[$1122>>0]|0;
       $1124 = ($1123<<24>>24)!=(0);
       if (!($1124)) {
        break;
       }
       $1125 = $p;
       $1126 = (($1125) + 1|0);
       $p = $1126;
      }
      $1127 = $p;
      $1128 = $0;
      $1129 = (($1128) + 12|0);
      $1130 = HEAP32[$1129>>2]|0;
      $1131 = (($1130) + 4|0);
      $1132 = HEAP32[$1131>>2]|0;
      HEAP32[$vararg_buffer58>>2] = $1132;
      (_sprintf($1127,68976,$vararg_buffer58)|0);
      _cpuz80_2op(68720,68560,33104);
      STACKTOP = sp;return;
     }
    } while(0);
   }
   $1133 = $0;
   $1134 = HEAP32[$1133>>2]|0;
   $1135 = ($1134|0)==(27);
   if ($1135) {
    $1136 = $0;
    $1137 = (($1136) + 8|0);
    $1138 = HEAP32[$1137>>2]|0;
    $1139 = HEAP32[$1138>>2]|0;
    $1140 = ($1139|0)==(68);
    if ($1140) {
     $1141 = $0;
     $1142 = (($1141) + 12|0);
     $1143 = HEAP32[$1142>>2]|0;
     _cpuz80_node_generate($1143,0);
     $1144 = $0;
     $1145 = (($1144) + 8|0);
     $1146 = HEAP32[$1145>>2]|0;
     _node_get_label($1146,0);
     _cpuz80_2op(68720,68848,33104);
     _cpuz80_2op(68792,68560,68848);
     STACKTOP = sp;return;
    }
    $1147 = $0;
    $1148 = (($1147) + 8|0);
    $1149 = HEAP32[$1148>>2]|0;
    $1150 = HEAP32[$1149>>2]|0;
    $1151 = ($1150|0)==(51);
    if ($1151) {
     label = 359;
    } else {
     $1152 = $0;
     $1153 = (($1152) + 12|0);
     $1154 = HEAP32[$1153>>2]|0;
     $1155 = HEAP32[$1154>>2]|0;
     $1156 = ($1155|0)==(51);
     if ($1156) {
      label = 359;
     }
    }
    L541: do {
     if ((label|0) == 359) {
      $1157 = $0;
      $1158 = (($1157) + 8|0);
      $1159 = HEAP32[$1158>>2]|0;
      $1160 = HEAP32[$1159>>2]|0;
      $1161 = ($1160|0)==(51);
      if ($1161) {
       $1162 = $0;
       $1163 = (($1162) + 8|0);
       $1164 = HEAP32[$1163>>2]|0;
       $explore = $1164;
      } else {
       $1165 = $0;
       $1166 = (($1165) + 12|0);
       $1167 = HEAP32[$1166>>2]|0;
       $explore = $1167;
      }
      $1168 = $explore;
      $1169 = (($1168) + 4|0);
      $1170 = HEAP32[$1169>>2]|0;
      $c = $1170;
      $1171 = $c;
      $1172 = ($1171|0)==(0);
      if (!($1172)) {
       $1173 = $c;
       $1174 = ($1173|0)==(1);
       if (!($1174)) {
        $1175 = $c;
        $1176 = ($1175|0)==(2);
        if (!($1176)) {
         $1177 = $c;
         $1178 = ($1177|0)==(3);
         if (!($1178)) {
          $1194 = $c;
          $1195 = ($1194|0)==(65535);
          if (!($1195)) {
           $1196 = $c;
           $1197 = ($1196|0)==(65534);
           if (!($1197)) {
            $1198 = $c;
            $1199 = ($1198|0)==(65533);
            if (!($1199)) {
             $1215 = $c;
             $1216 = ($1215|0)==(64512);
             do {
              if (!($1216)) {
               $1217 = $c;
               $1218 = ($1217|0)==(64768);
               if ($1218) {
                break;
               }
               $1219 = $c;
               $1220 = ($1219|0)==(65024);
               if ($1220) {
                break;
               }
               $1221 = $c;
               $1222 = ($1221|0)==(65280);
               if ($1222) {
                break;
               }
               $1223 = $c;
               $1224 = ($1223|0)==(256);
               if ($1224) {
                break;
               }
               $1225 = $c;
               $1226 = ($1225|0)==(512);
               if ($1226) {
                break;
               }
               $1227 = $c;
               $1228 = ($1227|0)==(768);
               if ($1228) {
                break;
               }
               $1229 = $c;
               $1230 = ($1229|0)==(1024);
               if ($1230) {
                break;
               }
               break L541;
              }
             } while(0);
             $1231 = $0;
             $1232 = (($1231) + 8|0);
             $1233 = HEAP32[$1232>>2]|0;
             $1234 = $explore;
             $1235 = ($1233|0)!=($1234|0);
             if ($1235) {
              $1236 = $0;
              $1237 = (($1236) + 8|0);
              $1238 = HEAP32[$1237>>2]|0;
              _cpuz80_node_generate($1238,0);
             } else {
              $1239 = $0;
              $1240 = (($1239) + 12|0);
              $1241 = HEAP32[$1240>>2]|0;
              _cpuz80_node_generate($1241,0);
             }
             while(1) {
              $1242 = $c;
              $1243 = ($1242|0)!=(0);
              if (!($1243)) {
               break;
              }
              $1244 = $c;
              $1245 = $1244 & 32768;
              $1246 = ($1245|0)!=(0);
              if ($1246) {
               _cpuz80_1op(68648,68608);
               $1247 = $c;
               $1248 = (($1247) + 256)|0;
               $c = $1248;
              } else {
               _cpuz80_1op(68632,68608);
               $1249 = $c;
               $1250 = (($1249) - 256)|0;
               $c = $1250;
              }
              $1251 = $c;
              $1252 = $1251 & 65535;
              $c = $1252;
             }
             STACKTOP = sp;return;
            }
           }
          }
          $1200 = $0;
          $1201 = (($1200) + 8|0);
          $1202 = HEAP32[$1201>>2]|0;
          $1203 = $explore;
          $1204 = ($1202|0)!=($1203|0);
          if ($1204) {
           $1205 = $0;
           $1206 = (($1205) + 8|0);
           $1207 = HEAP32[$1206>>2]|0;
           _cpuz80_node_generate($1207,0);
          } else {
           $1208 = $0;
           $1209 = (($1208) + 12|0);
           $1210 = HEAP32[$1209>>2]|0;
           _cpuz80_node_generate($1210,0);
          }
          while(1) {
           $1211 = $c;
           $1212 = ($1211|0)<(65536);
           if (!($1212)) {
            break;
           }
           _cpuz80_1op(68648,68560);
           $1213 = $c;
           $1214 = (($1213) + 1)|0;
           $c = $1214;
          }
          STACKTOP = sp;return;
         }
        }
       }
      }
      $1179 = $0;
      $1180 = (($1179) + 8|0);
      $1181 = HEAP32[$1180>>2]|0;
      $1182 = $explore;
      $1183 = ($1181|0)!=($1182|0);
      if ($1183) {
       $1184 = $0;
       $1185 = (($1184) + 8|0);
       $1186 = HEAP32[$1185>>2]|0;
       _cpuz80_node_generate($1186,0);
      } else {
       $1187 = $0;
       $1188 = (($1187) + 12|0);
       $1189 = HEAP32[$1188>>2]|0;
       _cpuz80_node_generate($1189,0);
      }
      while(1) {
       $1190 = $c;
       $1191 = ($1190|0)!=(0);
       if (!($1191)) {
        break;
       }
       _cpuz80_1op(68632,68560);
       $1192 = $c;
       $1193 = (($1192) + -1)|0;
       $c = $1193;
      }
      STACKTOP = sp;return;
     }
    } while(0);
   }
   $1253 = $0;
   $1254 = HEAP32[$1253>>2]|0;
   $1255 = ($1254|0)==(29);
   do {
    if ($1255) {
     $1256 = $0;
     $1257 = (($1256) + 12|0);
     $1258 = HEAP32[$1257>>2]|0;
     $1259 = HEAP32[$1258>>2]|0;
     $1260 = ($1259|0)==(68);
     if ($1260) {
      $1261 = $0;
      $1262 = (($1261) + 8|0);
      $1263 = HEAP32[$1262>>2]|0;
      _cpuz80_node_generate($1263,0);
      $1264 = $0;
      $1265 = (($1264) + 12|0);
      $1266 = HEAP32[$1265>>2]|0;
      _node_get_label($1266,0);
      _cpuz80_2op(68720,68848,33104);
      _cpuz80_1op(68584,68496);
      _cpuz80_2op(68808,68560,68848);
      STACKTOP = sp;return;
     }
     $1267 = $0;
     $1268 = (($1267) + 12|0);
     $1269 = HEAP32[$1268>>2]|0;
     $1270 = HEAP32[$1269>>2]|0;
     $1271 = ($1270|0)==(51);
     if ($1271) {
      $1272 = $0;
      $1273 = (($1272) + 12|0);
      $1274 = HEAP32[$1273>>2]|0;
      $explore = $1274;
     } else {
      $explore = 0;
     }
     $1275 = $explore;
     $1276 = ($1275|0)!=(0|0);
     do {
      if ($1276) {
       $1277 = $explore;
       $1278 = (($1277) + 4|0);
       $1279 = HEAP32[$1278>>2]|0;
       $1280 = ($1279|0)==(0);
       if (!($1280)) {
        $1281 = $explore;
        $1282 = (($1281) + 4|0);
        $1283 = HEAP32[$1282>>2]|0;
        $1284 = ($1283|0)==(1);
        if (!($1284)) {
         $1285 = $explore;
         $1286 = (($1285) + 4|0);
         $1287 = HEAP32[$1286>>2]|0;
         $1288 = ($1287|0)==(2);
         if (!($1288)) {
          $1289 = $explore;
          $1290 = (($1289) + 4|0);
          $1291 = HEAP32[$1290>>2]|0;
          $1292 = ($1291|0)==(3);
          if (!($1292)) {
           break;
          }
         }
        }
       }
       $1293 = $explore;
       $1294 = (($1293) + 4|0);
       $1295 = HEAP32[$1294>>2]|0;
       $c = $1295;
       $1296 = $0;
       $1297 = (($1296) + 8|0);
       $1298 = HEAP32[$1297>>2]|0;
       _cpuz80_node_generate($1298,0);
       while(1) {
        $1299 = $c;
        $1300 = ($1299|0)!=(0);
        if (!($1300)) {
         break;
        }
        _cpuz80_1op(68648,68560);
        $1301 = $c;
        $1302 = (($1301) + -1)|0;
        $c = $1302;
       }
       STACKTOP = sp;return;
      }
     } while(0);
     $1303 = $explore;
     $1304 = ($1303|0)!=(0|0);
     do {
      if ($1304) {
       $1305 = $explore;
       $1306 = (($1305) + 4|0);
       $1307 = HEAP32[$1306>>2]|0;
       $1308 = ($1307|0)==(65535);
       if (!($1308)) {
        $1309 = $explore;
        $1310 = (($1309) + 4|0);
        $1311 = HEAP32[$1310>>2]|0;
        $1312 = ($1311|0)==(65534);
        if (!($1312)) {
         $1313 = $explore;
         $1314 = (($1313) + 4|0);
         $1315 = HEAP32[$1314>>2]|0;
         $1316 = ($1315|0)==(65533);
         if (!($1316)) {
          break;
         }
        }
       }
       $1317 = $explore;
       $1318 = (($1317) + 4|0);
       $1319 = HEAP32[$1318>>2]|0;
       $c = $1319;
       $1320 = $0;
       $1321 = (($1320) + 8|0);
       $1322 = HEAP32[$1321>>2]|0;
       _cpuz80_node_generate($1322,0);
       while(1) {
        $1323 = $c;
        $1324 = ($1323|0)<(65536);
        if (!($1324)) {
         break;
        }
        _cpuz80_1op(68632,68560);
        $1325 = $c;
        $1326 = (($1325) + 1)|0;
        $c = $1326;
       }
       STACKTOP = sp;return;
      }
     } while(0);
     $1327 = $explore;
     $1328 = ($1327|0)!=(0|0);
     if (!($1328)) {
      break;
     }
     $1329 = $0;
     $1330 = (($1329) + 8|0);
     $1331 = HEAP32[$1330>>2]|0;
     _cpuz80_node_generate($1331,0);
     $1332 = $explore;
     $1333 = (($1332) + 4|0);
     $1334 = HEAP32[$1333>>2]|0;
     $1335 = (65536 - ($1334))|0;
     $1336 = $1335 & 65535;
     HEAP32[$vararg_buffer61>>2] = $1336;
     (_sprintf(33104,68976,$vararg_buffer61)|0);
     _cpuz80_2op(68720,68848,33104);
     _cpuz80_2op(68792,68560,68848);
     STACKTOP = sp;return;
    }
   } while(0);
   $1337 = $0;
   $1338 = HEAP32[$1337>>2]|0;
   $1339 = ($1338|0)==(1);
   if ($1339) {
    label = 432;
   } else {
    $1340 = $0;
    $1341 = HEAP32[$1340>>2]|0;
    $1342 = ($1341|0)==(5);
    if ($1342) {
     label = 432;
    } else {
     $1343 = $0;
     $1344 = HEAP32[$1343>>2]|0;
     $1345 = ($1344|0)==(3);
     if ($1345) {
      label = 432;
     }
    }
   }
   do {
    if ((label|0) == 432) {
     $1346 = $0;
     $1347 = (($1346) + 12|0);
     $1348 = HEAP32[$1347>>2]|0;
     $1349 = HEAP32[$1348>>2]|0;
     $1350 = ($1349|0)==(51);
     if ($1350) {
      $1351 = $0;
      $1352 = (($1351) + 12|0);
      $1353 = HEAP32[$1352>>2]|0;
      $explore = $1353;
     } else {
      $explore = 0;
     }
     $1354 = $explore;
     $1355 = ($1354|0)!=(0|0);
     if (!($1355)) {
      break;
     }
     $1356 = $explore;
     $1357 = (($1356) + 4|0);
     $1358 = HEAP32[$1357>>2]|0;
     $value = $1358;
     $1359 = $0;
     $1360 = HEAP32[$1359>>2]|0;
     $1361 = ($1360|0)==(1);
     if ($1361) {
      $mnemonic = 68584;
     } else {
      $1362 = $0;
      $1363 = HEAP32[$1362>>2]|0;
      $1364 = ($1363|0)==(5);
      if ($1364) {
       $mnemonic = 68512;
      } else {
       $mnemonic = 68592;
      }
     }
     $1365 = $0;
     $1366 = (($1365) + 8|0);
     $1367 = HEAP32[$1366>>2]|0;
     $1368 = $explore;
     $1369 = ($1367|0)!=($1368|0);
     if ($1369) {
      $1370 = $0;
      $1371 = (($1370) + 8|0);
      $1372 = HEAP32[$1371>>2]|0;
      _cpuz80_node_generate($1372,0);
     } else {
      $1373 = $0;
      $1374 = (($1373) + 12|0);
      $1375 = HEAP32[$1374>>2]|0;
      _cpuz80_node_generate($1375,0);
     }
     $1376 = $value;
     $1377 = $1376 & 255;
     $byte = $1377;
     $1378 = $0;
     $1379 = HEAP32[$1378>>2]|0;
     $1380 = ($1379|0)==(1);
     if ($1380) {
      label = 447;
     } else {
      $1381 = $0;
      $1382 = HEAP32[$1381>>2]|0;
      $1383 = ($1382|0)==(3);
      if ($1383) {
       label = 447;
      } else {
       label = 449;
      }
     }
     if ((label|0) == 447) {
      $1384 = $byte;
      $1385 = ($1384|0)==(0);
      if ($1385) {
      } else {
       label = 449;
      }
     }
     if ((label|0) == 449) {
      $1386 = $0;
      $1387 = HEAP32[$1386>>2]|0;
      $1388 = ($1387|0)==(5);
      if ($1388) {
       $1389 = $byte;
       $1390 = ($1389|0)==(255);
       if ($1390) {
       } else {
        label = 452;
       }
      } else {
       label = 452;
      }
      if ((label|0) == 452) {
       $1391 = $0;
       $1392 = HEAP32[$1391>>2]|0;
       $1393 = ($1392|0)==(5);
       if ($1393) {
        $1394 = $byte;
        $1395 = ($1394|0)==(0);
        if ($1395) {
         _cpuz80_2op(68720,68624,68504);
        } else {
         label = 455;
        }
       } else {
        label = 455;
       }
       if ((label|0) == 455) {
        $1396 = $0;
        $1397 = HEAP32[$1396>>2]|0;
        $1398 = ($1397|0)==(1);
        if ($1398) {
         $1399 = $byte;
         $1400 = ($1399|0)==(255);
         if ($1400) {
          _cpuz80_2op(68720,68624,69256);
         } else {
          label = 458;
         }
        } else {
         label = 458;
        }
        if ((label|0) == 458) {
         $1401 = $0;
         $1402 = HEAP32[$1401>>2]|0;
         $1403 = ($1402|0)==(3);
         do {
          if ($1403) {
           $1404 = $byte;
           $1405 = ($1404|0)==(255);
           if (!($1405)) {
            label = 461;
            break;
           }
           _cpuz80_2op(68720,68496,68624);
           _cpuz80_noop(68880);
           _cpuz80_2op(68720,68624,68496);
          } else {
           label = 461;
          }
         } while(0);
         if ((label|0) == 461) {
          _cpuz80_2op(68720,68496,68624);
          $1406 = $byte;
          HEAP32[$vararg_buffer64>>2] = $1406;
          (_sprintf(33104,68976,$vararg_buffer64)|0);
          $1407 = $mnemonic;
          _cpuz80_1op($1407,33104);
          _cpuz80_2op(68720,68624,68496);
         }
        }
       }
      }
     }
     $1408 = $value;
     $1409 = $1408 >> 8;
     $1410 = $1409 & 255;
     $byte = $1410;
     $1411 = $0;
     $1412 = HEAP32[$1411>>2]|0;
     $1413 = ($1412|0)==(1);
     if ($1413) {
      label = 468;
     } else {
      $1414 = $0;
      $1415 = HEAP32[$1414>>2]|0;
      $1416 = ($1415|0)==(3);
      if ($1416) {
       label = 468;
      } else {
       label = 470;
      }
     }
     if ((label|0) == 468) {
      $1417 = $byte;
      $1418 = ($1417|0)==(0);
      if ($1418) {
      } else {
       label = 470;
      }
     }
     if ((label|0) == 470) {
      $1419 = $0;
      $1420 = HEAP32[$1419>>2]|0;
      $1421 = ($1420|0)==(5);
      if ($1421) {
       $1422 = $byte;
       $1423 = ($1422|0)==(255);
       if ($1423) {
       } else {
        label = 473;
       }
      } else {
       label = 473;
      }
      if ((label|0) == 473) {
       $1424 = $0;
       $1425 = HEAP32[$1424>>2]|0;
       $1426 = ($1425|0)==(5);
       if ($1426) {
        $1427 = $byte;
        $1428 = ($1427|0)==(0);
        if ($1428) {
         _cpuz80_2op(68720,68608,68504);
        } else {
         label = 476;
        }
       } else {
        label = 476;
       }
       if ((label|0) == 476) {
        $1429 = $0;
        $1430 = HEAP32[$1429>>2]|0;
        $1431 = ($1430|0)==(1);
        do {
         if ($1431) {
          $1432 = $byte;
          $1433 = ($1432|0)==(255);
          if (!($1433)) {
           label = 479;
           break;
          }
          _cpuz80_2op(68720,68608,69256);
         } else {
          label = 479;
         }
        } while(0);
        if ((label|0) == 479) {
         $1434 = $0;
         $1435 = HEAP32[$1434>>2]|0;
         $1436 = ($1435|0)==(3);
         do {
          if ($1436) {
           $1437 = $byte;
           $1438 = ($1437|0)==(255);
           if (!($1438)) {
            label = 482;
            break;
           }
           _cpuz80_2op(68720,68496,68608);
           _cpuz80_noop(68880);
           _cpuz80_2op(68720,68608,68496);
          } else {
           label = 482;
          }
         } while(0);
         if ((label|0) == 482) {
          _cpuz80_2op(68720,68496,68608);
          $1439 = $byte;
          HEAP32[$vararg_buffer67>>2] = $1439;
          (_sprintf(33104,68976,$vararg_buffer67)|0);
          $1440 = $mnemonic;
          _cpuz80_1op($1440,33104);
          _cpuz80_2op(68720,68608,68496);
         }
        }
       }
      }
     }
     STACKTOP = sp;return;
    }
   } while(0);
   $1441 = $0;
   $1442 = HEAP32[$1441>>2]|0;
   $1443 = ($1442|0)==(31);
   if ($1443) {
    $1444 = $0;
    $1445 = (($1444) + 8|0);
    $1446 = HEAP32[$1445>>2]|0;
    $1447 = HEAP32[$1446>>2]|0;
    $1448 = ($1447|0)==(51);
    if ($1448) {
     $1449 = $0;
     $1450 = (($1449) + 8|0);
     $1451 = HEAP32[$1450>>2]|0;
     $explore = $1451;
    } else {
     $1452 = $0;
     $1453 = (($1452) + 12|0);
     $1454 = HEAP32[$1453>>2]|0;
     $1455 = HEAP32[$1454>>2]|0;
     $1456 = ($1455|0)==(51);
     if ($1456) {
      $1457 = $0;
      $1458 = (($1457) + 12|0);
      $1459 = HEAP32[$1458>>2]|0;
      $explore = $1459;
     } else {
      $explore = 0;
     }
    }
    $1460 = $explore;
    $1461 = ($1460|0)!=(0|0);
    do {
     if ($1461) {
      $1462 = $explore;
      $1463 = (($1462) + 4|0);
      $1464 = HEAP32[$1463>>2]|0;
      $1465 = ($1464|0)==(0);
      if (!($1465)) {
       $1466 = $explore;
       $1467 = (($1466) + 4|0);
       $1468 = HEAP32[$1467>>2]|0;
       $1469 = ($1468|0)==(1);
       if (!($1469)) {
        $1470 = $explore;
        $1471 = (($1470) + 4|0);
        $1472 = HEAP32[$1471>>2]|0;
        $1473 = (_is_power_of_two($1472)|0);
        $1474 = ($1473|0)!=(0);
        if (!($1474)) {
         break;
        }
       }
      }
      $1475 = $explore;
      $1476 = (($1475) + 4|0);
      $1477 = HEAP32[$1476>>2]|0;
      $c = $1477;
      $1478 = $c;
      $1479 = ($1478|0)==(0);
      if ($1479) {
       _cpuz80_2op(68720,68560,68504);
      } else {
       $1480 = $0;
       $1481 = (($1480) + 8|0);
       $1482 = HEAP32[$1481>>2]|0;
       $1483 = $explore;
       $1484 = ($1482|0)!=($1483|0);
       if ($1484) {
        $1485 = $0;
        $1486 = (($1485) + 8|0);
        $1487 = HEAP32[$1486>>2]|0;
        $0 = $1487;
       } else {
        $1488 = $0;
        $1489 = (($1488) + 12|0);
        $1490 = HEAP32[$1489>>2]|0;
        $0 = $1490;
       }
       $1491 = $c;
       $1492 = ($1491|0)>=(256);
       if ($1492) {
        $1493 = $0;
        $1494 = HEAP32[$1493>>2]|0;
        $1495 = ($1494|0)==(41);
        if ($1495) {
         label = 508;
        } else {
         $1496 = $0;
         $1497 = HEAP32[$1496>>2]|0;
         $1498 = ($1497|0)==(42);
         if ($1498) {
          label = 508;
         } else {
          $1502 = $0;
          _cpuz80_node_generate($1502,0);
          _cpuz80_2op(68720,68608,68624);
          _cpuz80_2op(68720,68624,68504);
         }
        }
        if ((label|0) == 508) {
         $1499 = $0;
         $1500 = (($1499) + 8|0);
         $1501 = HEAP32[$1500>>2]|0;
         _cpuz80_node_generate($1501,0);
         _cpuz80_2op(68720,68608,68496);
         _cpuz80_2op(68720,68624,68504);
        }
        $1503 = $c;
        $1504 = (($1503|0) / 256)&-1;
        $c = $1504;
       } else {
        $1505 = $0;
        _cpuz80_node_generate($1505,0);
       }
       while(1) {
        $1506 = $c;
        $1507 = ($1506|0)>(1);
        if (!($1507)) {
         break;
        }
        _cpuz80_2op(68792,68560,68560);
        $1508 = $c;
        $1509 = (($1508|0) / 2)&-1;
        $c = $1509;
       }
      }
      STACKTOP = sp;return;
     }
    } while(0);
   }
   $1510 = $0;
   $1511 = HEAP32[$1510>>2]|0;
   $1512 = ($1511|0)==(33);
   if ($1512) {
    $1513 = $0;
    $1514 = (($1513) + 12|0);
    $1515 = HEAP32[$1514>>2]|0;
    $1516 = HEAP32[$1515>>2]|0;
    $1517 = ($1516|0)==(51);
    do {
     if ($1517) {
      $1518 = $0;
      $1519 = (($1518) + 12|0);
      $1520 = HEAP32[$1519>>2]|0;
      $1521 = (($1520) + 4|0);
      $1522 = HEAP32[$1521>>2]|0;
      $1523 = ($1522|0)==(2);
      if (!($1523)) {
       $1524 = $0;
       $1525 = (($1524) + 12|0);
       $1526 = HEAP32[$1525>>2]|0;
       $1527 = (($1526) + 4|0);
       $1528 = HEAP32[$1527>>2]|0;
       $1529 = ($1528|0)==(4);
       if (!($1529)) {
        $1530 = $0;
        $1531 = (($1530) + 12|0);
        $1532 = HEAP32[$1531>>2]|0;
        $1533 = (($1532) + 4|0);
        $1534 = HEAP32[$1533>>2]|0;
        $1535 = ($1534|0)==(8);
        if (!($1535)) {
         $1536 = $0;
         $1537 = (($1536) + 12|0);
         $1538 = HEAP32[$1537>>2]|0;
         $1539 = (($1538) + 4|0);
         $1540 = HEAP32[$1539>>2]|0;
         $1541 = ($1540|0)==(16);
         if (!($1541)) {
          break;
         }
        }
       }
      }
      $1542 = $0;
      $1543 = (($1542) + 8|0);
      $1544 = HEAP32[$1543>>2]|0;
      _cpuz80_node_generate($1544,0);
      $1545 = $0;
      $1546 = (($1545) + 12|0);
      $1547 = HEAP32[$1546>>2]|0;
      $1548 = (($1547) + 4|0);
      $1549 = HEAP32[$1548>>2]|0;
      $c = $1549;
      $1550 = $c;
      $1551 = ($1550|0)==(2);
      if ($1551) {
       label = 526;
      } else {
       $1552 = $c;
       $1553 = ($1552|0)==(4);
       if ($1553) {
        label = 526;
       } else {
        _cpuz80_2op(68720,68496,68624);
        while(1) {
         _cpuz80_1op(68600,68608);
         _cpuz80_noop(69296);
         $1558 = $c;
         $1559 = (($1558|0) / 2)&-1;
         $c = $1559;
         $1560 = $c;
         $1561 = ($1560|0)>(1);
         if (!($1561)) {
          break;
         }
        }
        _cpuz80_2op(68720,68624,68496);
       }
      }
      if ((label|0) == 526) {
       while(1) {
        _cpuz80_1op(68600,68608);
        _cpuz80_1op(68616,68624);
        $1554 = $c;
        $1555 = (($1554|0) / 2)&-1;
        $c = $1555;
        $1556 = $c;
        $1557 = ($1556|0)>(1);
        if (!($1557)) {
         break;
        }
       }
      }
      STACKTOP = sp;return;
     }
    } while(0);
    $1562 = $0;
    $1563 = (($1562) + 12|0);
    $1564 = HEAP32[$1563>>2]|0;
    $1565 = HEAP32[$1564>>2]|0;
    $1566 = ($1565|0)==(51);
    if ($1566) {
     $1567 = $0;
     $1568 = (($1567) + 12|0);
     $1569 = HEAP32[$1568>>2]|0;
     $1570 = (($1569) + 4|0);
     $1571 = HEAP32[$1570>>2]|0;
     $1572 = ($1571|0)==(256);
     if ($1572) {
      $1573 = $0;
      $1574 = (($1573) + 8|0);
      $1575 = HEAP32[$1574>>2]|0;
      _cpuz80_node_generate($1575,0);
      _cpuz80_2op(68720,68624,68608);
      _cpuz80_2op(68720,68608,68504);
      STACKTOP = sp;return;
     }
    }
   }
   $1576 = $0;
   $1577 = HEAP32[$1576>>2]|0;
   $1578 = ($1577|0)==(13);
   if ($1578) {
    label = 541;
   } else {
    $1579 = $0;
    $1580 = HEAP32[$1579>>2]|0;
    $1581 = ($1580|0)==(15);
    if ($1581) {
     label = 541;
    } else {
     $1622 = $0;
     $1623 = HEAP32[$1622>>2]|0;
     $1624 = ($1623|0)==(7);
     if ($1624) {
      label = 553;
     } else {
      $1625 = $0;
      $1626 = HEAP32[$1625>>2]|0;
      $1627 = ($1626|0)==(9);
      if ($1627) {
       label = 553;
      }
     }
     do {
      if ((label|0) == 553) {
       $1628 = $0;
       $1629 = (($1628) + 12|0);
       $1630 = HEAP32[$1629>>2]|0;
       $1631 = HEAP32[$1630>>2]|0;
       $1632 = ($1631|0)==(51);
       if ($1632) {
        $1633 = $0;
        $1634 = (($1633) + 12|0);
        $1635 = HEAP32[$1634>>2]|0;
        $1636 = (($1635) + 4|0);
        $1637 = HEAP32[$1636>>2]|0;
        $1638 = ($1637|0)==(65535);
        if (!($1638)) {
         $1639 = $0;
         $1640 = (($1639) + 12|0);
         $1641 = HEAP32[$1640>>2]|0;
         $1642 = (($1641) + 4|0);
         $1643 = HEAP32[$1642>>2]|0;
         $1644 = ($1643|0)==(0);
         if (!($1644)) {
          $1645 = $0;
          $1646 = (($1645) + 12|0);
          $1647 = HEAP32[$1646>>2]|0;
          $1648 = (($1647) + 4|0);
          $1649 = HEAP32[$1648>>2]|0;
          $1650 = ($1649|0)==(1);
          if (!($1650)) {
           break;
          }
         }
        }
        $1651 = $0;
        $1652 = (($1651) + 8|0);
        $1653 = HEAP32[$1652>>2]|0;
        _cpuz80_node_generate($1653,0);
        $1654 = $0;
        $1655 = (($1654) + 12|0);
        $1656 = HEAP32[$1655>>2]|0;
        $1657 = (($1656) + 4|0);
        $1658 = HEAP32[$1657>>2]|0;
        $1659 = ($1658|0)==(65535);
        if ($1659) {
         _cpuz80_1op(68632,68560);
        } else {
         $1660 = $0;
         $1661 = (($1660) + 12|0);
         $1662 = HEAP32[$1661>>2]|0;
         $1663 = (($1662) + 4|0);
         $1664 = HEAP32[$1663>>2]|0;
         $1665 = ($1664|0)==(1);
         if ($1665) {
          _cpuz80_1op(68648,68560);
         }
        }
        _cpuz80_2op(68720,68496,68608);
        _cpuz80_1op(68584,68624);
        $1666 = $0;
        $1667 = HEAP32[$1666>>2]|0;
        $1668 = ($1667|0)==(7);
        if ($1668) {
         $1669 = $1;
         $1670 = ($1669|0)!=(0);
         if ($1670) {
          HEAP32[34168>>2] = 1;
          $1671 = $1;
          HEAP32[$vararg_buffer73>>2] = $1671;
          (_sprintf(33104,69216,$vararg_buffer73)|0);
          _cpuz80_2op(68576,69232,33104);
         } else {
          _cpuz80_2op(68720,68496,68504);
          _cpuz80_2op(68744,69232,69240);
          _cpuz80_1op(68648,68496);
          _cpuz80_empty();
         }
        } else {
         $1672 = $0;
         $1673 = HEAP32[$1672>>2]|0;
         $1674 = ($1673|0)==(9);
         if ($1674) {
          $1675 = $1;
          $1676 = ($1675|0)!=(0);
          if ($1676) {
           HEAP32[34168>>2] = 1;
           $1677 = $1;
           HEAP32[$vararg_buffer76>>2] = $1677;
           (_sprintf(33104,69216,$vararg_buffer76)|0);
           _cpuz80_2op(68576,69224,33104);
          } else {
           _cpuz80_2op(68720,68496,68504);
           _cpuz80_2op(68744,69224,69240);
           _cpuz80_1op(68648,68496);
           _cpuz80_empty();
          }
         }
        }
        STACKTOP = sp;return;
       }
      }
     } while(0);
     $1678 = $0;
     $1679 = (($1678) + 12|0);
     $1680 = HEAP32[$1679>>2]|0;
     $1681 = HEAP32[$1680>>2]|0;
     $1682 = ($1681|0)==(51);
     if ($1682) {
      $1683 = $0;
      $1684 = (($1683) + 8|0);
      $1685 = HEAP32[$1684>>2]|0;
      _cpuz80_node_generate($1685,0);
      $1686 = $0;
      $1687 = (($1686) + 12|0);
      $1688 = HEAP32[$1687>>2]|0;
      $1689 = (($1688) + 4|0);
      $1690 = HEAP32[$1689>>2]|0;
      HEAP32[$vararg_buffer79>>2] = $1690;
      (_sprintf(33104,68976,$vararg_buffer79)|0);
      _cpuz80_2op(68720,68848,33104);
     } else {
      $1691 = $0;
      $1692 = (($1691) + 12|0);
      $1693 = HEAP32[$1692>>2]|0;
      $1694 = HEAP32[$1693>>2]|0;
      $1695 = ($1694|0)==(45);
      if ($1695) {
       $1696 = $0;
       $1697 = (($1696) + 8|0);
       $1698 = HEAP32[$1697>>2]|0;
       _cpuz80_node_generate($1698,0);
       (_strcpy((33104|0),(68960|0))|0);
       $1699 = $0;
       $1700 = (($1699) + 12|0);
       $1701 = HEAP32[$1700>>2]|0;
       $1702 = (($1701) + 16|0);
       $1703 = HEAP32[$1702>>2]|0;
       $1704 = (($1703) + 12|0);
       (_strcat((33104|0),($1704|0))|0);
       (_strcat((33104|0),(68968|0))|0);
       _cpuz80_2op(68720,68848,33104);
      } else {
       $1705 = $0;
       $1706 = (($1705) + 8|0);
       $1707 = HEAP32[$1706>>2]|0;
       $1708 = HEAP32[$1707>>2]|0;
       $1709 = ($1708|0)==(45);
       if ($1709) {
        label = 580;
       } else {
        $1710 = $0;
        $1711 = (($1710) + 8|0);
        $1712 = HEAP32[$1711>>2]|0;
        $1713 = HEAP32[$1712>>2]|0;
        $1714 = ($1713|0)==(51);
        if ($1714) {
         label = 580;
        } else {
         $1721 = $0;
         $1722 = (($1721) + 8|0);
         $1723 = HEAP32[$1722>>2]|0;
         $1724 = (($1723) + 20|0);
         $1725 = HEAP32[$1724>>2]|0;
         $1726 = $1725 & 48;
         $1727 = ($1726|0)==(0);
         if ($1727) {
          $1728 = $0;
          $1729 = (($1728) + 12|0);
          $1730 = HEAP32[$1729>>2]|0;
          _cpuz80_node_generate($1730,0);
          _cpuz80_2op(68776,68848,68560);
          $1731 = $0;
          $1732 = (($1731) + 8|0);
          $1733 = HEAP32[$1732>>2]|0;
          _cpuz80_node_generate($1733,0);
         } else {
          $1734 = $0;
          $1735 = HEAP32[$1734>>2]|0;
          $1736 = (_is_commutative($1735)|0);
          $1737 = ($1736|0)!=(0);
          do {
           if ($1737) {
            $1738 = $0;
            $1739 = (($1738) + 12|0);
            $1740 = HEAP32[$1739>>2]|0;
            $1741 = (($1740) + 20|0);
            $1742 = HEAP32[$1741>>2]|0;
            $1743 = $1742 & 48;
            $1744 = ($1743|0)==(0);
            if (!($1744)) {
             label = 586;
             break;
            }
            $1745 = $0;
            $1746 = (($1745) + 8|0);
            $1747 = HEAP32[$1746>>2]|0;
            _cpuz80_node_generate($1747,0);
            _cpuz80_2op(68776,68848,68560);
            $1748 = $0;
            $1749 = (($1748) + 12|0);
            $1750 = HEAP32[$1749>>2]|0;
            _cpuz80_node_generate($1750,0);
           } else {
            label = 586;
           }
          } while(0);
          if ((label|0) == 586) {
           $1751 = $0;
           $1752 = (($1751) + 12|0);
           $1753 = HEAP32[$1752>>2]|0;
           _cpuz80_node_generate($1753,0);
           _cpuz80_1op(68528,68560);
           $1754 = $0;
           $1755 = (($1754) + 8|0);
           $1756 = HEAP32[$1755>>2]|0;
           _cpuz80_node_generate($1756,0);
           _cpuz80_1op(68544,68848);
          }
         }
        }
       }
       if ((label|0) == 580) {
        $1715 = $0;
        $1716 = (($1715) + 12|0);
        $1717 = HEAP32[$1716>>2]|0;
        _cpuz80_node_generate($1717,0);
        _cpuz80_2op(68776,68848,68560);
        $1718 = $0;
        $1719 = (($1718) + 8|0);
        $1720 = HEAP32[$1719>>2]|0;
        _cpuz80_node_generate($1720,0);
       }
      }
     }
    }
   }
   if ((label|0) == 541) {
    $1582 = $0;
    $1583 = (($1582) + 8|0);
    $1584 = HEAP32[$1583>>2]|0;
    $1585 = HEAP32[$1584>>2]|0;
    $1586 = ($1585|0)==(51);
    if ($1586) {
     $1587 = $0;
     $1588 = (($1587) + 12|0);
     $1589 = HEAP32[$1588>>2]|0;
     _cpuz80_node_generate($1589,0);
     $1590 = $0;
     $1591 = (($1590) + 8|0);
     $1592 = HEAP32[$1591>>2]|0;
     $1593 = (($1592) + 4|0);
     $1594 = HEAP32[$1593>>2]|0;
     HEAP32[$vararg_buffer70>>2] = $1594;
     (_sprintf(33104,68976,$vararg_buffer70)|0);
     _cpuz80_2op(68720,68848,33104);
    } else {
     $1595 = $0;
     $1596 = (($1595) + 8|0);
     $1597 = HEAP32[$1596>>2]|0;
     $1598 = HEAP32[$1597>>2]|0;
     $1599 = ($1598|0)==(45);
     if ($1599) {
      $1600 = $0;
      $1601 = (($1600) + 12|0);
      $1602 = HEAP32[$1601>>2]|0;
      _cpuz80_node_generate($1602,0);
      (_strcpy((33104|0),(68960|0))|0);
      $1603 = $0;
      $1604 = (($1603) + 8|0);
      $1605 = HEAP32[$1604>>2]|0;
      $1606 = (($1605) + 16|0);
      $1607 = HEAP32[$1606>>2]|0;
      $1608 = (($1607) + 12|0);
      (_strcat((33104|0),($1608|0))|0);
      (_strcat((33104|0),(68968|0))|0);
      _cpuz80_2op(68720,68848,33104);
     } else {
      $1609 = $0;
      $1610 = (($1609) + 8|0);
      $1611 = HEAP32[$1610>>2]|0;
      _cpuz80_node_generate($1611,0);
      $1612 = $0;
      $1613 = (($1612) + 12|0);
      $1614 = HEAP32[$1613>>2]|0;
      $1615 = (($1614) + 20|0);
      $1616 = HEAP32[$1615>>2]|0;
      $1617 = $1616 & 48;
      $1618 = ($1617|0)==(0);
      if ($1618) {
       _cpuz80_2op(68776,68848,68560);
      } else {
       _cpuz80_1op(68528,68560);
       $1619 = $0;
       $1620 = (($1619) + 12|0);
       $1621 = HEAP32[$1620>>2]|0;
       _cpuz80_node_generate($1621,0);
       _cpuz80_1op(68544,68848);
      }
     }
    }
   }
   $1757 = $0;
   $1758 = HEAP32[$1757>>2]|0;
   $1759 = ($1758|0)==(1);
   if ($1759) {
    _cpuz80_2op(68720,68496,68624);
    _cpuz80_1op(68584,68944);
    _cpuz80_2op(68720,68624,68496);
    _cpuz80_2op(68720,68496,68608);
    _cpuz80_1op(68584,68952);
    _cpuz80_2op(68720,68608,68496);
    $1760 = $1;
    $1761 = ($1760|0)!=(0);
    if ($1761) {
     HEAP32[34168>>2] = 1;
     _cpuz80_1op(68584,68624);
     $1762 = $1;
     HEAP32[$vararg_buffer82>>2] = $1762;
     (_sprintf(33104,69216,$vararg_buffer82)|0);
     _cpuz80_2op(68576,69224,33104);
    }
   } else {
    $1763 = $0;
    $1764 = HEAP32[$1763>>2]|0;
    $1765 = ($1764|0)==(3);
    if ($1765) {
     _cpuz80_2op(68720,68496,68624);
     _cpuz80_1op(68592,68944);
     _cpuz80_2op(68720,68624,68496);
     _cpuz80_2op(68720,68496,68608);
     _cpuz80_1op(68592,68952);
     _cpuz80_2op(68720,68608,68496);
     $1766 = $1;
     $1767 = ($1766|0)!=(0);
     if ($1767) {
      HEAP32[34168>>2] = 1;
      _cpuz80_1op(68584,68624);
      $1768 = $1;
      HEAP32[$vararg_buffer85>>2] = $1768;
      (_sprintf(33104,69216,$vararg_buffer85)|0);
      _cpuz80_2op(68576,69224,33104);
     }
    } else {
     $1769 = $0;
     $1770 = HEAP32[$1769>>2]|0;
     $1771 = ($1770|0)==(5);
     if ($1771) {
      _cpuz80_2op(68720,68496,68624);
      _cpuz80_1op(68512,68944);
      _cpuz80_2op(68720,68624,68496);
      _cpuz80_2op(68720,68496,68608);
      _cpuz80_1op(68512,68952);
      _cpuz80_2op(68720,68608,68496);
      $1772 = $1;
      $1773 = ($1772|0)!=(0);
      if ($1773) {
       HEAP32[34168>>2] = 1;
       _cpuz80_1op(68584,68624);
       $1774 = $1;
       HEAP32[$vararg_buffer88>>2] = $1774;
       (_sprintf(33104,69216,$vararg_buffer88)|0);
       _cpuz80_2op(68576,69224,33104);
      }
     } else {
      $1775 = $0;
      $1776 = HEAP32[$1775>>2]|0;
      $1777 = ($1776|0)==(7);
      if ($1777) {
       _cpuz80_1op(68584,68496);
       _cpuz80_2op(68808,68560,68848);
       $1778 = $1;
       $1779 = ($1778|0)!=(0);
       if ($1779) {
        HEAP32[34168>>2] = 1;
        $1780 = $1;
        HEAP32[$vararg_buffer91>>2] = $1780;
        (_sprintf(33104,69216,$vararg_buffer91)|0);
        _cpuz80_2op(68576,69232,33104);
       } else {
        _cpuz80_2op(68720,68496,68504);
        _cpuz80_2op(68744,69232,69240);
        _cpuz80_1op(68648,68496);
        _cpuz80_empty();
       }
      } else {
       $1781 = $0;
       $1782 = HEAP32[$1781>>2]|0;
       $1783 = ($1782|0)==(9);
       if ($1783) {
        _cpuz80_1op(68584,68496);
        _cpuz80_2op(68808,68560,68848);
        $1784 = $1;
        $1785 = ($1784|0)!=(0);
        if ($1785) {
         HEAP32[34168>>2] = 1;
         $1786 = $1;
         HEAP32[$vararg_buffer94>>2] = $1786;
         (_sprintf(33104,69216,$vararg_buffer94)|0);
         _cpuz80_2op(68576,69224,33104);
        } else {
         _cpuz80_2op(68720,68496,68504);
         _cpuz80_2op(68744,69224,69240);
         _cpuz80_1op(68648,68496);
         _cpuz80_empty();
        }
       } else {
        $1787 = $0;
        $1788 = HEAP32[$1787>>2]|0;
        $1789 = ($1788|0)==(11);
        do {
         if ($1789) {
          label = 617;
         } else {
          $1790 = $0;
          $1791 = HEAP32[$1790>>2]|0;
          $1792 = ($1791|0)==(15);
          if ($1792) {
           label = 617;
           break;
          }
          $1796 = $0;
          $1797 = HEAP32[$1796>>2]|0;
          $1798 = ($1797|0)==(13);
          do {
           if ($1798) {
            label = 623;
           } else {
            $1799 = $0;
            $1800 = HEAP32[$1799>>2]|0;
            $1801 = ($1800|0)==(17);
            if ($1801) {
             label = 623;
             break;
            }
            $1805 = $0;
            $1806 = HEAP32[$1805>>2]|0;
            $1807 = ($1806|0)==(27);
            if ($1807) {
             _cpuz80_2op(68792,68560,68848);
            } else {
             $1808 = $0;
             $1809 = HEAP32[$1808>>2]|0;
             $1810 = ($1809|0)==(29);
             if ($1810) {
              _cpuz80_1op(68584,68496);
              _cpuz80_2op(68808,68560,68848);
             } else {
              $1811 = $0;
              $1812 = HEAP32[$1811>>2]|0;
              $1813 = ($1812|0)==(31);
              if ($1813) {
               _cpuz80_1op(68568,69304);
              } else {
               $1814 = $0;
               $1815 = HEAP32[$1814>>2]|0;
               $1816 = ($1815|0)==(33);
               if ($1816) {
                _cpuz80_1op(68568,69312);
               } else {
                $1817 = $0;
                $1818 = HEAP32[$1817>>2]|0;
                $1819 = ($1818|0)==(35);
                if ($1819) {
                 _cpuz80_1op(68568,69320);
                } else {
                 $1820 = $0;
                 $1821 = HEAP32[$1820>>2]|0;
                 $1822 = ($1821|0)==(34);
                 if ($1822) {
                  _cpuz80_1op(68568,69328);
                 } else {
                  $1823 = $0;
                  $1824 = HEAP32[$1823>>2]|0;
                  $1825 = ($1824|0)==(36);
                  if ($1825) {
                   _cpuz80_1op(68568,69336);
                  }
                 }
                }
               }
              }
             }
            }
           }
          } while(0);
          if ((label|0) == 623) {
           _cpuz80_1op(68584,68496);
           _cpuz80_2op(68808,68560,68848);
           $1802 = $1;
           $1803 = ($1802|0)!=(0);
           if ($1803) {
            HEAP32[34168>>2] = 1;
            $1804 = $1;
            HEAP32[$vararg_buffer100>>2] = $1804;
            (_sprintf(33104,69216,$vararg_buffer100)|0);
            _cpuz80_2op(68576,69016,33104);
           } else {
            _cpuz80_2op(68720,68496,69256);
            _cpuz80_2op(68800,68496,68504);
           }
          }
         }
        } while(0);
        if ((label|0) == 617) {
         _cpuz80_1op(68584,68496);
         _cpuz80_2op(68808,68560,68848);
         $1793 = $1;
         $1794 = ($1793|0)!=(0);
         if ($1794) {
          HEAP32[34168>>2] = 1;
          $1795 = $1;
          HEAP32[$vararg_buffer97>>2] = $1795;
          (_sprintf(33104,69216,$vararg_buffer97)|0);
          _cpuz80_2op(68576,69248,33104);
         } else {
          _cpuz80_2op(68720,68496,68504);
          _cpuz80_2op(68808,68496,68496);
         }
        }
       }
      }
     }
    }
   }
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function _nomatch($src) {
 $src = $src|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $src;
 $1 = $0;
 $2 = HEAP32[69432>>2]|0;
 $3 = (($2) + 1)|0;
 HEAP32[69432>>2] = $3;
 HEAP32[$vararg_buffer>>2] = $3;
 (_sprintf($1,69440,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _skipcomma($src,$start) {
 $src = $src|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $src;
 $1 = $start;
 $2 = $0;
 $p = $2;
 $3 = $1;
 $4 = $0;
 $5 = (($4) + ($3)|0);
 $0 = $5;
 while(1) {
  $6 = $0;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = ($8|0)!=(0);
  if ($9) {
   $10 = $0;
   $11 = HEAP8[$10>>0]|0;
   $12 = $11 << 24 >> 24;
   $13 = ($12|0)!=(44);
   $27 = $13;
  } else {
   $27 = 0;
  }
  if (!($27)) {
   break;
  }
  $14 = $0;
  $15 = (($14) + 1|0);
  $0 = $15;
 }
 $16 = $0;
 $17 = HEAP8[$16>>0]|0;
 $18 = $17 << 24 >> 24;
 $19 = ($18|0)==(44);
 if (!($19)) {
  $22 = $0;
  $23 = $p;
  $24 = $22;
  $25 = $23;
  $26 = (($24) - ($25))|0;
  STACKTOP = sp;return ($26|0);
 }
 $20 = $0;
 $21 = (($20) + 1|0);
 $0 = $21;
 $22 = $0;
 $23 = $p;
 $24 = $22;
 $25 = $23;
 $26 = (($24) - ($25))|0;
 STACKTOP = sp;return ($26|0);
}
function _parseline($buf,$op,$s1,$s2) {
 $buf = $buf|0;
 $op = $op|0;
 $s1 = $s1|0;
 $s2 = $s2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $1 = $op;
 $2 = $s1;
 $3 = $s2;
 $p = 0;
 while(1) {
  $4 = $p;
  $5 = $0;
  $6 = (($5) + ($4)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = ($8|0)!=(0);
  if ($9) {
   $10 = $p;
   $11 = $0;
   $12 = (($11) + ($10)|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = ($14|0)<=(32);
   $63 = $15;
  } else {
   $63 = 0;
  }
  if (!($63)) {
   break;
  }
  $16 = $p;
  $17 = (($16) + 1)|0;
  $p = $17;
 }
 $18 = $p;
 $19 = $0;
 $20 = (($19) + ($18)|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21 << 24 >> 24;
 $23 = ($22|0)==(59);
 if (!($23)) {
  $24 = $p;
  $25 = $0;
  $26 = (($25) + ($24)|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 << 24 >> 24;
  $29 = ($28|0)==(42);
  if (!($29)) {
   $30 = $p;
   $31 = $0;
   $32 = (($31) + ($30)|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33 << 24 >> 24;
   $35 = ($34|0)==(0);
   if (!($35)) {
    $39 = $0;
    $40 = HEAP8[$39>>0]|0;
    $41 = $40 << 24 >> 24;
    $42 = ($41|0)>(32);
    if ($42) {
     $43 = $0;
     $44 = $1;
     $45 = $p;
     (_getargument($43,$44,$45)|0);
     $46 = $2;
     _nomatch($46);
     $47 = $3;
     _nomatch($47);
    } else {
     $48 = $0;
     $49 = $1;
     $50 = $p;
     $51 = (_getargument($48,$49,$50)|0);
     $p = $51;
     $52 = $0;
     $53 = $2;
     $54 = $p;
     $55 = (_getargument($52,$53,$54)|0);
     $p = $55;
     $56 = $0;
     $57 = $p;
     $58 = (_skipcomma($56,$57)|0);
     $p = $58;
     $59 = $0;
     $60 = $3;
     $61 = $p;
     $62 = (_getargument($59,$60,$61)|0);
     $p = $62;
    }
    STACKTOP = sp;return;
   }
  }
 }
 $36 = $1;
 _nomatch($36);
 $37 = $2;
 _nomatch($37);
 $38 = $3;
 _nomatch($38);
 STACKTOP = sp;return;
}
function _getargument($src,$dest,$start) {
 $src = $src|0;
 $dest = $dest|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $src;
 $2 = $dest;
 $3 = $start;
 $4 = $1;
 $p = $4;
 $5 = $3;
 $6 = $1;
 $7 = (($6) + ($5)|0);
 $1 = $7;
 $8 = $1;
 $9 = (_strlen(($8|0))|0);
 $10 = ($9>>>0)>(127);
 if ($10) {
  $11 = $2;
  _nomatch($11);
  $0 = 0;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 while(1) {
  $12 = $1;
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = $1;
   $17 = HEAP8[$16>>0]|0;
   $18 = $17 << 24 >> 24;
   $19 = ($18|0)<=(32);
   $46 = $19;
  } else {
   $46 = 0;
  }
  if (!($46)) {
   break;
  }
  $20 = $1;
  $21 = (($20) + 1|0);
  $1 = $21;
 }
 while(1) {
  $22 = $1;
  $23 = HEAP8[$22>>0]|0;
  $24 = $23 << 24 >> 24;
  $25 = ($24|0)>(32);
  if ($25) {
   $26 = $1;
   $27 = HEAP8[$26>>0]|0;
   $28 = $27 << 24 >> 24;
   $29 = ($28|0)<=(122);
   if ($29) {
    $30 = $1;
    $31 = HEAP8[$30>>0]|0;
    $32 = $31 << 24 >> 24;
    $33 = ($32|0)!=(44);
    $47 = $33;
   } else {
    $47 = 0;
   }
  } else {
   $47 = 0;
  }
  if (!($47)) {
   break;
  }
  $34 = $1;
  $35 = (($34) + 1|0);
  $1 = $35;
  $36 = HEAP8[$34>>0]|0;
  $37 = $2;
  $38 = (($37) + 1|0);
  $2 = $38;
  HEAP8[$37>>0] = $36;
 }
 $39 = $2;
 HEAP8[$39>>0] = 0;
 $40 = $1;
 $41 = $p;
 $42 = $40;
 $43 = $41;
 $44 = (($42) - ($43))|0;
 $0 = $44;
 $45 = $0;
 STACKTOP = sp;return ($45|0);
}
function _loadsr0($op,$s1,$s2) {
 $op = $op|0;
 $s1 = $s1|0;
 $s2 = $s2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $op;
 $2 = $s1;
 $3 = $s2;
 $4 = $1;
 $5 = (_strcmp($4,69456)|0);
 $6 = (0)==($5|0);
 if ($6) {
  $7 = $2;
  $8 = (_strcmp($7,69464)|0);
  $9 = (0)==($8|0);
  if (!($9)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $10 = $1;
   $11 = (_strncmp($10,69472,3)|0);
   $12 = (0)==($11|0);
   if ($12) {
    $13 = $3;
    $14 = (_strcmp($13,69464)|0);
    $15 = (0)==($14|0);
    if ($15) {
     break;
    }
   }
   $16 = $1;
   $17 = (_strcmp($16,69480)|0);
   $18 = (0)==($17|0);
   if ($18) {
    $19 = $2;
    $20 = (_strcmp($19,69464)|0);
    $21 = (0)==($20|0);
    if ($21) {
     break;
    }
   }
   $22 = $1;
   $23 = (_strcmp($22,69488)|0);
   $24 = (0)==($23|0);
   if ($24) {
    $25 = $2;
    $26 = (_strcmp($25,69464)|0);
    $27 = (0)==($26|0);
    if ($27) {
     break;
    }
   }
   $0 = 0;
   $28 = $0;
   STACKTOP = sp;return ($28|0);
  }
 } while(0);
 $0 = 1;
 $28 = $0;
 STACKTOP = sp;return ($28|0);
}
function _cpu9900_label($label) {
 $label = $label|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $label;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 (_sprintf(69496,70520,$vararg_buffer)|0);
 _cpu9900_emit_line();
 STACKTOP = sp;return;
}
function _cpu9900_emit_line() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $p = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0;
 var $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer26 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer36 = 0, $vararg_buffer40 = 0, $vararg_buffer6 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr29 = 0, $vararg_ptr39 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1152|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer40 = sp + 48|0;
 $vararg_buffer36 = sp + 112|0;
 $vararg_buffer33 = sp + 104|0;
 $vararg_buffer30 = sp + 96|0;
 $vararg_buffer26 = sp + 88|0;
 $vararg_buffer21 = sp + 72|0;
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $buf = sp + 128|0;
 $p = $buf;
 (_strncpy(($buf|0),(69496|0),1024)|0);
 $0 = (($buf) + 1023|0);
 HEAP8[$0>>0] = 0;
 while(1) {
  $1 = $p;
  $2 = ($1|0)!=(0|0);
  if (!($2)) {
   break;
  }
  $3 = $p;
  $4 = (_strchr($3,35)|0);
  $p = $4;
  $5 = $p;
  $6 = (0|0)!=($5|0);
  if ($6) {
   $7 = $p;
   HEAP8[$7>>0] = 95;
  }
 }
 $8 = HEAP8[$buf>>0]|0;
 $9 = $8 << 24 >> 24;
 $10 = ($9|0)!=(59);
 if ($10) {
  $11 = (($buf) + 1|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = ($13|0)!=(59);
  if ($14) {
   _parseline($buf,71208,71336,71464);
   _parseline(71592,72616,72744,72872);
   _parseline(73000,74024,74152,74280);
   _parseline(74408,75432,75560,75688);
   $15 = (_strcmp(71208,69456)|0);
   $16 = (0)==($15|0);
   if ($16) {
    $17 = HEAP8[71336>>0]|0;
    $18 = $17 << 24 >> 24;
    $19 = ($18|0)==(114);
    if ($19) {
     $20 = (_strcmp(71464,70784)|0);
     $21 = (0)==($20|0);
     if ($21) {
      HEAP32[$vararg_buffer>>2] = 71336;
      (_sprintf($buf,75816,$vararg_buffer)|0);
      $22 = HEAP32[2824>>2]|0;
      (_fflush(($22|0))|0);
      $23 = HEAP32[2824>>2]|0;
      $24 = (_ftell(($23|0))|0);
      HEAP32[75832>>2] = $24;
     } else {
      label = 12;
     }
    } else {
     label = 12;
    }
   } else {
    label = 12;
   }
   if ((label|0) == 12) {
    $25 = (_strcmp(71208,71104)|0);
    $26 = (0)==($25|0);
    if ($26) {
     $27 = (_strcmp(71336,69464)|0);
     $28 = (0)==($27|0);
     if ($28) {
      $29 = (_strcmp(71464,70784)|0);
      $30 = (0)==($29|0);
      if ($30) {
       STACKTOP = sp;return;
      }
     }
    }
    $31 = (_strcmp(71208,71104)|0);
    $32 = (0)==($31|0);
    if ($32) {
     $33 = (_strcmp(71336,69464)|0);
     $34 = (0)==($33|0);
     if ($34) {
      $35 = (_strcmp(71464,75840)|0);
      $36 = (0)==($35|0);
      if ($36) {
       (_strcpy(($buf|0),(75848|0))|0);
      } else {
       label = 20;
      }
     } else {
      label = 20;
     }
    } else {
     label = 20;
    }
    if ((label|0) == 20) {
     $37 = (_strcmp(71208,71104)|0);
     $38 = (0)==($37|0);
     if ($38) {
      $39 = (_strcmp(71336,69464)|0);
      $40 = (0)==($39|0);
      if ($40) {
       $41 = (_strcmp(71464,70808)|0);
       $42 = (0)==($41|0);
       if ($42) {
        (_strcpy(($buf|0),(75864|0))|0);
       } else {
        label = 24;
       }
      } else {
       label = 24;
      }
     } else {
      label = 24;
     }
     if ((label|0) == 24) {
      $43 = (_strcmp(71208,71104)|0);
      $44 = (0)==($43|0);
      if ($44) {
       $45 = (_strcmp(71336,69464)|0);
       $46 = (0)==($45|0);
       if ($46) {
        $47 = (_strcmp(71464,75880)|0);
        $48 = (0)==($47|0);
        if ($48) {
         (_strcpy(($buf|0),(75888|0))|0);
        } else {
         label = 28;
        }
       } else {
        label = 28;
       }
      } else {
       label = 28;
      }
      if ((label|0) == 28) {
       $49 = (_strcmp(71208,71104)|0);
       $50 = (0)==($49|0);
       if ($50) {
        $51 = (_strcmp(71336,69464)|0);
        $52 = (0)==($51|0);
        if ($52) {
         $53 = (_strcmp(71464,75904)|0);
         $54 = (0)==($53|0);
         if ($54) {
          (_strcpy(($buf|0),(75912|0))|0);
         }
        }
       }
      }
     }
    }
   }
   $55 = (_strncmp(71208,69472,3)|0);
   $56 = (0)==($55|0);
   if ($56) {
    $57 = (_strncmp(72616,69472,3)|0);
    $58 = (0)==($57|0);
    if ($58) {
     $59 = HEAP8[((71208 + 3|0))>>0]|0;
     $60 = $59 << 24 >> 24;
     $61 = HEAP8[((72616 + 3|0))>>0]|0;
     $62 = $61 << 24 >> 24;
     $63 = ($60|0)==($62|0);
     if ($63) {
      $64 = (_strcmp(71336,72744)|0);
      $65 = (0)==($64|0);
      if ($65) {
       label = 42;
      } else {
       $66 = (_strcmp(71336,72872)|0);
       $67 = (0)==($66|0);
       if ($67) {
        label = 42;
       }
      }
      do {
       if ((label|0) == 42) {
        $68 = (_strcmp(71464,72744)|0);
        $69 = (0)==($68|0);
        if (!($69)) {
         $70 = (_strcmp(71464,72872)|0);
         $71 = (0)==($70|0);
         if (!($71)) {
          break;
         }
        }
        STACKTOP = sp;return;
       }
      } while(0);
     }
    }
   }
   $72 = (_strncmp(74024,69472,3)|0);
   $73 = (0)==($72|0);
   if ($73) {
    $74 = (_strcmp(72616,69480)|0);
    $75 = (0)==($74|0);
    if ($75) {
     $76 = HEAP8[71208>>0]|0;
     $77 = $76 << 24 >> 24;
     $78 = ($77|0)==(99);
     if ($78) {
      $79 = (_strcmp(71464,74280)|0);
      $80 = (0)==($79|0);
      if ($80) {
       $81 = (_strcmp(71336,72744)|0);
       $82 = (0)==($81|0);
       if ($82) {
        $83 = HEAP8[((74024 + 3|0))>>0]|0;
        $84 = $83 << 24 >> 24;
        $85 = HEAP8[((71208 + 1|0))>>0]|0;
        $86 = $85 << 24 >> 24;
        $87 = ($84|0)==($86|0);
        if ($87) {
         $88 = HEAP32[2824>>2]|0;
         $89 = HEAP32[75832>>2]|0;
         (_fseek(($88|0),($89|0),0)|0);
         (_strcpy((71592|0),(73000|0))|0);
         (_strcpy((73000|0),(74408|0))|0);
         (_strcpy((74408|0),(75928|0))|0);
         (_strcpy((75928|0),(76952|0))|0);
         STACKTOP = sp;return;
        }
       }
      }
     }
    }
   }
   $90 = (_strcmp(71208,70936)|0);
   $91 = (0)==($90|0);
   if ($91) {
    $92 = (_strcmp(71336,70944)|0);
    $93 = (0)==($92|0);
    if ($93) {
     $94 = HEAP32[2824>>2]|0;
     (_fflush(($94|0))|0);
     $95 = HEAP32[2824>>2]|0;
     $96 = (_ftell(($95|0))|0);
     HEAP32[76960>>2] = $96;
    } else {
     label = 57;
    }
   } else {
    label = 57;
   }
   if ((label|0) == 57) {
    $97 = (_strcmp(74024,70936)|0);
    $98 = (0)==($97|0);
    if ($98) {
     $99 = (_strcmp(74152,70944)|0);
     $100 = (0)==($99|0);
     if ($100) {
      $101 = (_strcmp(72616,69472)|0);
      $102 = (0)==($101|0);
      if ($102) {
       $103 = (_strcmp(72744,70688)|0);
       $104 = (0)==($103|0);
       if ($104) {
        $105 = (_strcmp(72872,70952)|0);
        $106 = (0)==($105|0);
        if ($106) {
         $107 = (_strcmp(71208,69472)|0);
         $108 = (0)==($107|0);
         if ($108) {
          $109 = (_strcmp(71336,70960)|0);
          $110 = (0)==($109|0);
          if ($110) {
           $111 = (_strcmp(71464,70688)|0);
           $112 = (0)==($111|0);
           if ($112) {
            $113 = HEAP32[2824>>2]|0;
            (_fflush(($113|0))|0);
            $114 = HEAP32[2824>>2]|0;
            $115 = HEAP32[76960>>2]|0;
            (_fseek(($114|0),($115|0),0)|0);
            (_strcpy((71592|0),(74408|0))|0);
            (_strcpy((73000|0),(75928|0))|0);
            (_strcpy((74408|0),(76952|0))|0);
            (_strcpy((75928|0),(76952|0))|0);
            STACKTOP = sp;return;
           }
          }
         }
        }
       }
      }
     }
    }
    $116 = (_strcmp(74024,70936)|0);
    $117 = (0)==($116|0);
    if ($117) {
     $118 = (_strcmp(74152,70944)|0);
     $119 = (0)==($118|0);
     if ($119) {
      $120 = (_strcmp(72616,69472)|0);
      $121 = (0)==($120|0);
      if ($121) {
       $122 = (_strcmp(72744,69464)|0);
       $123 = (0)==($122|0);
       if ($123) {
        $124 = (_strcmp(72872,70952)|0);
        $125 = (0)==($124|0);
        if ($125) {
         $126 = (_strcmp(71208,69472)|0);
         $127 = (0)==($126|0);
         if ($127) {
          $128 = (_strcmp(71336,70960)|0);
          $129 = (0)==($128|0);
          if ($129) {
           $130 = (_strcmp(71464,69464)|0);
           $131 = (0)==($130|0);
           if ($131) {
            $132 = HEAP32[2824>>2]|0;
            (_fflush(($132|0))|0);
            $133 = HEAP32[2824>>2]|0;
            $134 = HEAP32[76960>>2]|0;
            (_fseek(($133|0),($134|0),0)|0);
            (_strcpy((71592|0),(74408|0))|0);
            (_strcpy((73000|0),(75928|0))|0);
            (_strcpy((74408|0),(76952|0))|0);
            (_strcpy((75928|0),(76952|0))|0);
            STACKTOP = sp;return;
           }
          }
         }
        }
       }
      }
     }
    }
   }
   $135 = (_strcmp(74024,70936)|0);
   $136 = (0)==($135|0);
   if ($136) {
    $137 = (_strcmp(74152,70944)|0);
    $138 = (0)==($137|0);
    if ($138) {
     $139 = (_strcmp(72616,69472)|0);
     $140 = (0)==($139|0);
     if ($140) {
      $141 = (_strcmp(72744,69464)|0);
      $142 = (0)==($141|0);
      if ($142) {
       $143 = (_strcmp(72872,70952)|0);
       $144 = (0)==($143|0);
       if ($144) {
        $145 = (_strcmp(71208,69472)|0);
        $146 = (0)==($145|0);
        if ($146) {
         $147 = (_strcmp(71336,70960)|0);
         $148 = (0)==($147|0);
         if ($148) {
          $149 = (_strcmp(71464,70688)|0);
          $150 = (0)==($149|0);
          if ($150) {
           $151 = HEAP32[2824>>2]|0;
           (_fflush(($151|0))|0);
           $152 = HEAP32[2824>>2]|0;
           $153 = HEAP32[76960>>2]|0;
           (_fseek(($152|0),($153|0),0)|0);
           (_strcpy((71592|0),(74408|0))|0);
           (_strcpy((73000|0),(75928|0))|0);
           (_strcpy((74408|0),(76952|0))|0);
           (_strcpy((75928|0),(76952|0))|0);
           (_strcpy(($buf|0),(76968|0))|0);
          }
         }
        }
       }
      }
     }
    }
   }
   $154 = HEAP8[$buf>>0]|0;
   $155 = $154 << 24 >> 24;
   $156 = ($155|0)>(32);
   if ($156) {
    (_strcpy((76984|0),(76952|0))|0);
   } else {
    $157 = (_strcmp(71208,69472)|0);
    $158 = ($157|0)==(0);
    if ($158) {
     $159 = (_strcmp(71464,69464)|0);
     $160 = ($159|0)==(0);
     if ($160) {
      $161 = (_strcmp(71336,76984)|0);
      $162 = (0)==($161|0);
      if ($162) {
       $163 = HEAP8[76984>>0]|0;
       $164 = $163 << 24 >> 24;
       $165 = ($164|0)!=(0);
       if ($165) {
        STACKTOP = sp;return;
       }
      }
      $166 = HEAP8[71336>>0]|0;
      $167 = $166 << 24 >> 24;
      $168 = ($167|0)==(64);
      if ($168) {
       $169 = (_strchr(71336,40)|0);
       $170 = (0|0)!=($169|0);
       if ($170) {
        (_strcpy((76984|0),(76952|0))|0);
       } else {
        (_strcpy((76984|0),(71336|0))|0);
       }
      } else {
       (_strcpy((76984|0),(76952|0))|0);
      }
     } else {
      label = 101;
     }
    } else {
     label = 101;
    }
    if ((label|0) == 101) {
     $171 = (_strcmp(71464,69464)|0);
     $172 = ($171|0)==(0);
     if ($172) {
      $173 = (_strcmp(71208,71144)|0);
      $174 = ($173|0)!=(0);
      if ($174) {
       $175 = (_strcmp(71208,71024)|0);
       $176 = ($175|0)!=(0);
       if ($176) {
        (_strcpy((76984|0),(76952|0))|0);
       }
      }
     } else {
      $177 = (_strcmp(71208,71104)|0);
      $178 = ($177|0)==(0);
      do {
       if ($178) {
        label = 113;
       } else {
        $179 = (_strcmp(71208,70584)|0);
        $180 = ($179|0)==(0);
        if ($180) {
         label = 113;
        } else {
         $181 = (_strcmp(71208,71120)|0);
         $182 = ($181|0)==(0);
         if ($182) {
          label = 113;
         } else {
          $183 = (_strcmp(71208,70664)|0);
          $184 = ($183|0)==(0);
          if ($184) {
           label = 113;
          } else {
           $185 = (_strcmp(71208,70656)|0);
           $186 = ($185|0)==(0);
           if ($186) {
            label = 113;
           } else {
            $187 = (_strcmp(71208,78008)|0);
            $188 = ($187|0)==(0);
            if ($188) {
             label = 113;
             break;
            }
            $189 = (_strcmp(71208,70640)|0);
            $190 = ($189|0)==(0);
            if ($190) {
             label = 113;
            }
           }
          }
         }
        }
       }
      } while(0);
      if ((label|0) == 113) {
       $191 = (_strcmp(71336,69464)|0);
       $192 = ($191|0)==(0);
       if ($192) {
        (_strcpy((76984|0),(76952|0))|0);
       }
      }
      $193 = (_strcmp(71208,70560)|0);
      $194 = (0)==($193|0);
      if ($194) {
       (_strcpy((76984|0),(76952|0))|0);
      }
     }
    }
   }
   $195 = (_loadsr0(71208,71336,71464)|0);
   $196 = ($195|0)!=(0);
   if ($196) {
    $197 = HEAP32[2824>>2]|0;
    (_fflush(($197|0))|0);
    $198 = HEAP32[2824>>2]|0;
    $199 = (_ftell(($198|0))|0);
    HEAP32[78016>>2] = $199;
   } else {
    $200 = (_loadsr0(72616,72744,72872)|0);
    $201 = ($200|0)!=(0);
    if ($201) {
     $202 = (_strncmp(71208,69472,3)|0);
     $203 = (0)==($202|0);
     if ($203) {
      $204 = (_strcmp(71336,69464)|0);
      $205 = (0)==($204|0);
      if ($205) {
       $206 = HEAP8[71464>>0]|0;
       $207 = $206 << 24 >> 24;
       $208 = ($207|0)==(114);
       if ($208) {
        $209 = HEAP8[((71464 + 1|0))>>0]|0;
        $210 = $209 << 24 >> 24;
        $211 = ($210|0)!=(48);
        if ($211) {
         $212 = HEAP32[2824>>2]|0;
         $213 = HEAP32[78016>>2]|0;
         (_fseek(($212|0),($213|0),0)|0);
         (_strcpy((71592|0),(73000|0))|0);
         (_strcpy((73000|0),(74408|0))|0);
         (_strcpy((74408|0),(75928|0))|0);
         (_strcpy((75928|0),(76952|0))|0);
         $214 = (_strncmp(72616,69472,3)|0);
         $215 = (0)==($214|0);
         if ($215) {
          HEAP32[$vararg_buffer1>>2] = 72616;
          $vararg_ptr4 = (($vararg_buffer1) + 4|0);
          HEAP32[$vararg_ptr4>>2] = 72744;
          $vararg_ptr5 = (($vararg_buffer1) + 8|0);
          HEAP32[$vararg_ptr5>>2] = 71464;
          (_sprintf($buf,70544,$vararg_buffer1)|0);
         } else {
          $216 = HEAP8[72872>>0]|0;
          $217 = $216 << 24 >> 24;
          $218 = ($217|0)==(0);
          if ($218) {
           HEAP32[$vararg_buffer6>>2] = 72616;
           $vararg_ptr9 = (($vararg_buffer6) + 4|0);
           HEAP32[$vararg_ptr9>>2] = 71464;
           (_sprintf($buf,70536,$vararg_buffer6)|0);
          } else {
           HEAP32[$vararg_buffer10>>2] = 72616;
           $vararg_ptr13 = (($vararg_buffer10) + 4|0);
           HEAP32[$vararg_ptr13>>2] = 71464;
           $vararg_ptr14 = (($vararg_buffer10) + 8|0);
           HEAP32[$vararg_ptr14>>2] = 72872;
           (_sprintf($buf,70544,$vararg_buffer10)|0);
          }
         }
        }
       }
      }
     }
    }
   }
   $219 = (_strcmp(71208,69472)|0);
   $220 = (0)==($219|0);
   if ($220) {
    $221 = HEAP8[71336>>0]|0;
    $222 = $221 << 24 >> 24;
    $223 = ($222|0)==(114);
    if ($223) {
     $224 = (_strcmp(71464,69464)|0);
     $225 = (0)==($224|0);
     if ($225) {
      $226 = HEAP32[2824>>2]|0;
      (_fflush(($226|0))|0);
      $227 = HEAP32[2824>>2]|0;
      $228 = (_ftell(($227|0))|0);
      HEAP32[78024>>2] = $228;
     } else {
      label = 140;
     }
    } else {
     label = 140;
    }
   } else {
    label = 140;
   }
   if ((label|0) == 140) {
    $229 = (_strcmp(71208,70696)|0);
    $230 = (0)==($229|0);
    do {
     if ($230) {
      $231 = (_strcmp(72616,70664)|0);
      $232 = (0)==($231|0);
      if ($232) {
       $233 = (_strcmp(74024,69472)|0);
       $234 = (0)==($233|0);
       if ($234) {
        $235 = (_strcmp(74152,71464)|0);
        $236 = (0)==($235|0);
        if ($236) {
         $237 = (_strcmp(74280,69464)|0);
         $238 = (0)==($237|0);
         if ($238) {
          $239 = (_strcmp(72744,69464)|0);
          $240 = (0)==($239|0);
          if ($240) {
           $241 = (_strcmp(72872,70648)|0);
           $242 = (0)==($241|0);
           if ($242) {
            $243 = (_strcmp(71336,69464)|0);
            $244 = (0)==($243|0);
            if (!($244)) {
             break;
            }
            $245 = HEAP32[2824>>2]|0;
            $246 = HEAP32[78024>>2]|0;
            (_fseek(($245|0),($246|0),0)|0);
            (_strcpy((71592|0),(73000|0))|0);
            (_strcpy((73000|0),(74408|0))|0);
            (_strcpy((74408|0),(75928|0))|0);
            (_strcpy((75928|0),(76952|0))|0);
            HEAP32[$vararg_buffer15>>2] = 71464;
            (_sprintf($buf,78032,$vararg_buffer15)|0);
           }
          }
         }
        }
       }
      }
     }
    } while(0);
   }
   $247 = (_strcmp(72616,69480)|0);
   $248 = (0)==($247|0);
   if ($248) {
    $249 = (_strcmp(72744,69464)|0);
    $250 = (0)==($249|0);
    if ($250) {
     $251 = (_strcmp(71208,69472)|0);
     $252 = (0)==($251|0);
     if ($252) {
      $253 = (_strcmp(71336,69464)|0);
      $254 = (0)==($253|0);
      if ($254) {
       $255 = HEAP8[71464>>0]|0;
       $256 = $255 << 24 >> 24;
       $257 = ($256|0)==(64);
       if ($257) {
        $258 = HEAP32[2824>>2]|0;
        $259 = HEAP32[78016>>2]|0;
        (_fseek(($258|0),($259|0),0)|0);
        (_strcpy((71592|0),(73000|0))|0);
        (_strcpy((73000|0),(74408|0))|0);
        (_strcpy((74408|0),(75928|0))|0);
        (_strcpy((75928|0),(76952|0))|0);
        HEAP32[$vararg_buffer18>>2] = 71464;
        (_sprintf($buf,75816,$vararg_buffer18)|0);
       }
      }
     }
    }
   }
   $260 = (_strncmp(72616,69472,3)|0);
   $261 = (0)==($260|0);
   if ($261) {
    $262 = (_strcmp(72872,69464)|0);
    $263 = (0)==($262|0);
    if ($263) {
     $264 = (_strncmp(71208,69472,3)|0);
     $265 = (0)==($264|0);
     if ($265) {
      $266 = (_strcmp(71336,69464)|0);
      $267 = (0)==($266|0);
      if ($267) {
       $268 = HEAP8[71464>>0]|0;
       $269 = $268 << 24 >> 24;
       $270 = ($269|0)==(64);
       if ($270) {
        $271 = HEAP32[2824>>2]|0;
        $272 = HEAP32[78016>>2]|0;
        (_fseek(($271|0),($272|0),0)|0);
        (_strcpy((71592|0),(73000|0))|0);
        (_strcpy((73000|0),(74408|0))|0);
        (_strcpy((74408|0),(75928|0))|0);
        (_strcpy((75928|0),(76952|0))|0);
        HEAP32[$vararg_buffer21>>2] = 71208;
        $vararg_ptr24 = (($vararg_buffer21) + 4|0);
        HEAP32[$vararg_ptr24>>2] = 72744;
        $vararg_ptr25 = (($vararg_buffer21) + 8|0);
        HEAP32[$vararg_ptr25>>2] = 71464;
        (_sprintf($buf,70544,$vararg_buffer21)|0);
       }
      }
     }
    }
   }
   $273 = (_strcmp(74024,69472)|0);
   $274 = (0)==($273|0);
   do {
    if ($274) {
     $275 = HEAP8[74152>>0]|0;
     $276 = $275 << 24 >> 24;
     $277 = ($276|0)==(64);
     if ($277) {
      $278 = (_strcmp(74280,69464)|0);
      $279 = (0)==($278|0);
      if ($279) {
       $280 = (_strncmp(72616,70712,3)|0);
       $281 = (0)==($280|0);
       if (!($281)) {
        $282 = (_strncmp(72616,78048,3)|0);
        $283 = (0)==($282|0);
        if (!($283)) {
         break;
        }
       }
       $284 = (_strcmp(72744,69464)|0);
       $285 = (0)==($284|0);
       if ($285) {
        $286 = (_strcmp(71208,69472)|0);
        $287 = (0)==($286|0);
        if ($287) {
         $288 = (_strcmp(71336,69464)|0);
         $289 = (0)==($288|0);
         if (!($289)) {
          break;
         }
         $290 = HEAP8[71464>>0]|0;
         $291 = $290 << 24 >> 24;
         $292 = ($291|0)==(64);
         if (!($292)) {
          break;
         }
         $293 = (_strcmp(74152,71464)|0);
         $294 = (0)==($293|0);
         if (!($294)) {
          break;
         }
         $295 = HEAP32[2824>>2]|0;
         $296 = HEAP32[78016>>2]|0;
         (_fseek(($295|0),($296|0),0)|0);
         (_strcpy((71592|0),(74408|0))|0);
         (_strcpy((73000|0),(75928|0))|0);
         (_strcpy((74408|0),(76952|0))|0);
         (_strcpy((75928|0),(76952|0))|0);
         HEAP32[$vararg_buffer26>>2] = 72616;
         $vararg_ptr29 = (($vararg_buffer26) + 4|0);
         HEAP32[$vararg_ptr29>>2] = 71464;
         (_sprintf($buf,70536,$vararg_buffer26)|0);
        }
       }
      }
     }
    }
   } while(0);
   $297 = (_strncmp(75432,69472,3)|0);
   $298 = (0)==($297|0);
   L226: do {
    if ($298) {
     $299 = HEAP8[75560>>0]|0;
     $300 = $299 << 24 >> 24;
     $301 = ($300|0)==(64);
     if ($301) {
      $302 = (_strcmp(75688,69464)|0);
      $303 = (0)==($302|0);
      if ($303) {
       $304 = (_strcmp(74024,69456)|0);
       $305 = (0)==($304|0);
       if ($305) {
        $306 = (_strcmp(74152,70688)|0);
        $307 = (0)==($306|0);
        if ($307) {
         $308 = (_strcmp(72616,71152)|0);
         $309 = (0)==($308|0);
         do {
          if (!($309)) {
           $310 = (_strcmp(72616,71072)|0);
           $311 = (0)==($310|0);
           if ($311) {
            break;
           }
           $312 = (_strcmp(72616,71160)|0);
           $313 = (0)==($312|0);
           if ($313) {
            break;
           }
           $314 = (_strcmp(72616,71080)|0);
           $315 = (0)==($314|0);
           if (!($315)) {
            break L226;
           }
          }
         } while(0);
         $316 = (_strcmp(72744,70688)|0);
         $317 = (0)==($316|0);
         if (!($317)) {
          break;
         }
         $318 = (_strcmp(72872,69464)|0);
         $319 = (0)==($318|0);
         if (!($319)) {
          break;
         }
         $320 = (_strncmp(71208,69472,3)|0);
         $321 = (0)==($320|0);
         if (!($321)) {
          break;
         }
         $322 = (_strcmp(71336,69464)|0);
         $323 = (0)==($322|0);
         if (!($323)) {
          break;
         }
         $324 = HEAP8[71464>>0]|0;
         $325 = $324 << 24 >> 24;
         $326 = ($325|0)==(64);
         if (!($326)) {
          break;
         }
         $327 = (_strcmp(75432,71208)|0);
         $328 = (0)==($327|0);
         if (!($328)) {
          break;
         }
         $329 = (_strcmp(75560,71464)|0);
         $330 = (0)==($329|0);
         if (!($330)) {
          break;
         }
         $331 = HEAP32[2824>>2]|0;
         $332 = HEAP32[78016>>2]|0;
         (_fseek(($331|0),($332|0),0)|0);
         (_strcpy((71592|0),(76952|0))|0);
         (_strcpy((73000|0),(75928|0))|0);
         (_strcpy((74408|0),(76952|0))|0);
         (_strcpy((75928|0),(76952|0))|0);
         HEAP32[$vararg_buffer30>>2] = 74280;
         (_sprintf(71592,78056,$vararg_buffer30)|0);
         $333 = HEAP32[2824>>2]|0;
         HEAP32[$vararg_buffer33>>2] = 71592;
         (_fprintf(($333|0),(78072|0),($vararg_buffer33|0))|0);
         HEAP32[$vararg_buffer36>>2] = 72616;
         $vararg_ptr39 = (($vararg_buffer36) + 4|0);
         HEAP32[$vararg_ptr39>>2] = 71464;
         (_sprintf($buf,78080,$vararg_buffer36)|0);
        }
       }
      }
     }
    }
   } while(0);
   (_strcpy((75928|0),(74408|0))|0);
   (_strcpy((74408|0),(73000|0))|0);
   (_strcpy((73000|0),(71592|0))|0);
   (_strcpy((71592|0),($buf|0))|0);
  }
 }
 $334 = HEAP32[2824>>2]|0;
 HEAP32[$vararg_buffer40>>2] = $buf;
 (_fprintf(($334|0),(78072|0),($vararg_buffer40|0))|0);
 STACKTOP = sp;return;
}
function _cpu9900_empty() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function _cpu9900_noop($mnemonic) {
 $mnemonic = $mnemonic|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $mnemonic;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 (_sprintf(69496,70528,$vararg_buffer)|0);
 _cpu9900_emit_line();
 STACKTOP = sp;return;
}
function _cpu9900_1op($mnemonic,$operand) {
 $mnemonic = $mnemonic|0;
 $operand = $operand|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $mnemonic;
 $1 = $operand;
 $2 = $0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 (_sprintf(69496,70536,$vararg_buffer)|0);
 _cpu9900_emit_line();
 STACKTOP = sp;return;
}
function _cpu9900_2op($mnemonic,$operand1,$operand2) {
 $mnemonic = $mnemonic|0;
 $operand1 = $operand1|0;
 $operand2 = $operand2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $mnemonic;
 $1 = $operand1;
 $2 = $operand2;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $5;
 (_sprintf(69496,70544,$vararg_buffer)|0);
 _cpu9900_emit_line();
 STACKTOP = sp;return;
}
function _cpu9900_node_label($node) {
 $node = $node|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $node;
 STACKTOP = sp;return;
}
function _cpu9900_node_generate($node,$decision) {
 $node = $node|0;
 $decision = $decision|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0;
 var $c10 = 0, $c11 = 0, $c14 = 0, $c2 = 0, $c4 = 0, $c5 = 0, $c9 = 0, $cnt = 0, $cnt12 = 0, $cnt13 = 0, $cnt3 = 0, $explore = 0, $mnemonic = 0, $p = 0, $p1 = 0, $p6 = 0, $p7 = 0, $p8 = 0, $value = 0, $vararg_buffer = 0;
 var $vararg_buffer100 = 0, $vararg_buffer103 = 0, $vararg_buffer106 = 0, $vararg_buffer109 = 0, $vararg_buffer11 = 0, $vararg_buffer112 = 0, $vararg_buffer115 = 0, $vararg_buffer118 = 0, $vararg_buffer121 = 0, $vararg_buffer124 = 0, $vararg_buffer127 = 0, $vararg_buffer130 = 0, $vararg_buffer133 = 0, $vararg_buffer136 = 0, $vararg_buffer139 = 0, $vararg_buffer14 = 0, $vararg_buffer142 = 0, $vararg_buffer145 = 0, $vararg_buffer148 = 0, $vararg_buffer151 = 0;
 var $vararg_buffer154 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer21 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer5 = 0, $vararg_buffer52 = 0, $vararg_buffer55 = 0, $vararg_buffer58 = 0, $vararg_buffer61 = 0, $vararg_buffer64 = 0, $vararg_buffer67 = 0;
 var $vararg_buffer70 = 0, $vararg_buffer73 = 0, $vararg_buffer76 = 0, $vararg_buffer79 = 0, $vararg_buffer8 = 0, $vararg_buffer82 = 0, $vararg_buffer85 = 0, $vararg_buffer88 = 0, $vararg_buffer91 = 0, $vararg_buffer94 = 0, $vararg_buffer97 = 0, $vararg_ptr1 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer154 = sp + 168|0;
 $vararg_buffer151 = sp + 408|0;
 $vararg_buffer148 = sp + 400|0;
 $vararg_buffer145 = sp + 392|0;
 $vararg_buffer142 = sp + 384|0;
 $vararg_buffer139 = sp + 376|0;
 $vararg_buffer136 = sp + 368|0;
 $vararg_buffer133 = sp + 360|0;
 $vararg_buffer130 = sp + 352|0;
 $vararg_buffer127 = sp + 344|0;
 $vararg_buffer124 = sp + 336|0;
 $vararg_buffer121 = sp + 328|0;
 $vararg_buffer118 = sp + 320|0;
 $vararg_buffer115 = sp + 312|0;
 $vararg_buffer112 = sp + 304|0;
 $vararg_buffer109 = sp + 296|0;
 $vararg_buffer106 = sp + 160|0;
 $vararg_buffer103 = sp + 152|0;
 $vararg_buffer100 = sp + 144|0;
 $vararg_buffer97 = sp + 56|0;
 $vararg_buffer94 = sp;
 $vararg_buffer91 = sp + 8|0;
 $vararg_buffer88 = sp + 16|0;
 $vararg_buffer85 = sp + 24|0;
 $vararg_buffer82 = sp + 32|0;
 $vararg_buffer79 = sp + 40|0;
 $vararg_buffer76 = sp + 48|0;
 $vararg_buffer73 = sp + 64|0;
 $vararg_buffer70 = sp + 72|0;
 $vararg_buffer67 = sp + 80|0;
 $vararg_buffer64 = sp + 88|0;
 $vararg_buffer61 = sp + 96|0;
 $vararg_buffer58 = sp + 104|0;
 $vararg_buffer55 = sp + 112|0;
 $vararg_buffer52 = sp + 120|0;
 $vararg_buffer49 = sp + 128|0;
 $vararg_buffer46 = sp + 136|0;
 $vararg_buffer43 = sp + 288|0;
 $vararg_buffer40 = sp + 176|0;
 $vararg_buffer37 = sp + 184|0;
 $vararg_buffer34 = sp + 192|0;
 $vararg_buffer31 = sp + 200|0;
 $vararg_buffer28 = sp + 208|0;
 $vararg_buffer25 = sp + 216|0;
 $vararg_buffer21 = sp + 224|0;
 $vararg_buffer17 = sp + 232|0;
 $vararg_buffer14 = sp + 240|0;
 $vararg_buffer11 = sp + 248|0;
 $vararg_buffer8 = sp + 256|0;
 $vararg_buffer5 = sp + 264|0;
 $vararg_buffer2 = sp + 272|0;
 $vararg_buffer = sp + 280|0;
 $0 = $node;
 $1 = $decision;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 do {
  switch ($3|0) {
  case 65:  {
   _cpu9900_2op(70696,70912,69464);
   STACKTOP = sp;return;
   break;
  }
  case 67:  {
   _cpu9900_2op(70696,70920,69464);
   STACKTOP = sp;return;
   break;
  }
  case 64:  {
   _cpu9900_2op(70696,70896,69464);
   STACKTOP = sp;return;
   break;
  }
  case 32: case 30: case 28: case 26: case 16: case 14: case 12: case 10: case 8: case 6: case 4: case 2: case 0:  {
   $187 = $0;
   $188 = HEAP32[$187>>2]|0;
   $189 = ($188|0)==(30);
   if ($189) {
    $190 = $0;
    $191 = (($190) + 12|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = HEAP32[$192>>2]|0;
    $194 = ($193|0)==(50);
    if ($194) {
     $195 = $0;
     $196 = (($195) + 12|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = (($197) + 4|0);
     $199 = HEAP32[$198>>2]|0;
     $200 = (_is_power_of_two($199)|0);
     $201 = ($200|0)!=(0);
     if ($201) {
      $202 = $0;
      $203 = (($202) + 8|0);
      $204 = HEAP32[$203>>2]|0;
      _cpu9900_node_generate($204,0);
      $205 = $0;
      $206 = (($205) + 12|0);
      $207 = HEAP32[$206>>2]|0;
      $208 = (($207) + 4|0);
      $209 = HEAP32[$208>>2]|0;
      $c = $209;
      $cnt = 0;
      while(1) {
       $210 = $c;
       $211 = ($210|0)>(1);
       if (!($211)) {
        break;
       }
       $212 = $cnt;
       $213 = (($212) + 1)|0;
       $cnt = $213;
       $214 = $c;
       $215 = (($214|0) / 2)&-1;
       $c = $215;
      }
      _cpu9900_2op(70584,69464,70592);
      $216 = $cnt;
      HEAP32[$vararg_buffer11>>2] = $216;
      (_sprintf(33104,70760,$vararg_buffer11)|0);
      _cpu9900_2op(70664,69464,33104);
      STACKTOP = sp;return;
     }
    }
   }
   $217 = $0;
   $218 = HEAP32[$217>>2]|0;
   $219 = ($218|0)==(32);
   if ($219) {
    $220 = $0;
    $221 = (($220) + 12|0);
    $222 = HEAP32[$221>>2]|0;
    $223 = HEAP32[$222>>2]|0;
    $224 = ($223|0)==(50);
    if ($224) {
     $225 = $0;
     $226 = (($225) + 12|0);
     $227 = HEAP32[$226>>2]|0;
     $228 = (($227) + 4|0);
     $229 = HEAP32[$228>>2]|0;
     $230 = (_is_power_of_two($229)|0);
     $231 = ($230|0)!=(0);
     if ($231) {
      $232 = $0;
      $233 = (($232) + 8|0);
      $234 = HEAP32[$233>>2]|0;
      _cpu9900_node_generate($234,0);
      $235 = $0;
      $236 = (($235) + 12|0);
      $237 = HEAP32[$236>>2]|0;
      $238 = (($237) + 4|0);
      $239 = HEAP32[$238>>2]|0;
      $c2 = $239;
      $cnt3 = 0;
      while(1) {
       $240 = $c2;
       $241 = ($240|0)>(1);
       if (!($241)) {
        break;
       }
       $242 = $cnt3;
       $243 = (($242) + 1)|0;
       $cnt3 = $243;
       $244 = $c2;
       $245 = (($244|0) / 2)&-1;
       $c2 = $245;
      }
      $246 = $cnt3;
      HEAP32[$vararg_buffer14>>2] = $246;
      (_sprintf(33104,70760,$vararg_buffer14)|0);
      _cpu9900_2op(70656,69464,33104);
      STACKTOP = sp;return;
     }
    }
   }
   $247 = $0;
   $248 = HEAP32[$247>>2]|0;
   $249 = ($248|0)==(12);
   if ($249) {
    label = 76;
   } else {
    $250 = $0;
    $251 = HEAP32[$250>>2]|0;
    $252 = ($251|0)==(14);
    if ($252) {
     label = 76;
    } else {
     $287 = $0;
     $288 = HEAP32[$287>>2]|0;
     $289 = ($288|0)!=(2);
     if ($289) {
      $290 = $0;
      $291 = HEAP32[$290>>2]|0;
      $292 = ($291|0)!=(4);
      if ($292) {
       $293 = $0;
       $294 = (($293) + 12|0);
       $295 = HEAP32[$294>>2]|0;
       $296 = HEAP32[$295>>2]|0;
       $297 = ($296|0)==(44);
       if ($297) {
        $298 = $0;
        $299 = (($298) + 8|0);
        $300 = HEAP32[$299>>2]|0;
        _cpu9900_node_generate($300,0);
        $301 = $0;
        $302 = (($301) + 12|0);
        $303 = HEAP32[$302>>2]|0;
        _node_get_label($303,4);
       } else {
        label = 87;
       }
      } else {
       label = 87;
      }
     } else {
      label = 87;
     }
     if ((label|0) == 87) {
      $304 = $0;
      $305 = (($304) + 12|0);
      $306 = HEAP32[$305>>2]|0;
      $307 = HEAP32[$306>>2]|0;
      $308 = ($307|0)==(50);
      if ($308) {
       $309 = $0;
       $310 = (($309) + 12|0);
       $311 = HEAP32[$310>>2]|0;
       $312 = (($311) + 4|0);
       $313 = HEAP32[$312>>2]|0;
       $314 = $313 & 255;
       $c5 = $314;
       $315 = $0;
       $316 = (($315) + 8|0);
       $317 = HEAP32[$316>>2]|0;
       _cpu9900_node_generate($317,0);
       $318 = $c5;
       $319 = $318<<8;
       $320 = $c5;
       HEAP32[$vararg_buffer21>>2] = $319;
       $vararg_ptr24 = (($vararg_buffer21) + 4|0);
       HEAP32[$vararg_ptr24>>2] = $320;
       (_sprintf(33104,70744,$vararg_buffer21)|0);
       _cpu9900_2op(69456,70688,33104);
       (_strcpy((33104|0),(70688|0))|0);
      } else {
       $321 = $0;
       $322 = (($321) + 12|0);
       $323 = HEAP32[$322>>2]|0;
       _cpu9900_node_generate($323,0);
       _cpu9900_1op(70936,70944);
       _cpu9900_2op(69472,69464,70952);
       $324 = $0;
       $325 = (($324) + 8|0);
       $326 = HEAP32[$325>>2]|0;
       _cpu9900_node_generate($326,0);
       _cpu9900_2op(69472,70960,70688);
       (_strcpy((33104|0),(70688|0))|0);
      }
     }
    }
   }
   if ((label|0) == 76) {
    $253 = $0;
    $254 = (($253) + 8|0);
    $255 = HEAP32[$254>>2]|0;
    $256 = HEAP32[$255>>2]|0;
    $257 = ($256|0)==(50);
    if ($257) {
     $258 = $0;
     $259 = (($258) + 8|0);
     $260 = HEAP32[$259>>2]|0;
     $261 = (($260) + 4|0);
     $262 = HEAP32[$261>>2]|0;
     $263 = $262 & 255;
     $c4 = $263;
     $264 = $0;
     $265 = (($264) + 12|0);
     $266 = HEAP32[$265>>2]|0;
     _cpu9900_node_generate($266,0);
     $267 = $c4;
     $268 = $267<<8;
     $269 = $c4;
     HEAP32[$vararg_buffer17>>2] = $268;
     $vararg_ptr20 = (($vararg_buffer17) + 4|0);
     HEAP32[$vararg_ptr20>>2] = $269;
     (_sprintf(33104,70744,$vararg_buffer17)|0);
     _cpu9900_2op(69456,70688,33104);
     (_strcpy((33104|0),(70688|0))|0);
    } else {
     $270 = $0;
     $271 = (($270) + 8|0);
     $272 = HEAP32[$271>>2]|0;
     $273 = HEAP32[$272>>2]|0;
     $274 = ($273|0)==(44);
     if ($274) {
      $275 = $0;
      $276 = (($275) + 12|0);
      $277 = HEAP32[$276>>2]|0;
      _cpu9900_node_generate($277,0);
      $278 = $0;
      $279 = (($278) + 8|0);
      $280 = HEAP32[$279>>2]|0;
      _node_get_label($280,4);
     } else {
      $281 = $0;
      $282 = (($281) + 8|0);
      $283 = HEAP32[$282>>2]|0;
      _cpu9900_node_generate($283,0);
      _cpu9900_1op(70936,70944);
      _cpu9900_2op(69472,69464,70952);
      $284 = $0;
      $285 = (($284) + 12|0);
      $286 = HEAP32[$285>>2]|0;
      _cpu9900_node_generate($286,0);
      _cpu9900_2op(69472,70960,70688);
      (_strcpy((33104|0),(70688|0))|0);
     }
    }
   }
   $327 = $0;
   $328 = HEAP32[$327>>2]|0;
   $329 = ($328|0)==(0);
   if ($329) {
    _cpu9900_2op(70968,33104,69464);
    $330 = $1;
    $331 = ($330|0)!=(0);
    if ($331) {
     HEAP32[34168>>2] = 1;
     $332 = $1;
     HEAP32[$vararg_buffer25>>2] = $332;
     (_sprintf(33104,70976,$vararg_buffer25)|0);
     $333 = HEAP32[1688>>2]|0;
     $334 = (($333) + 1)|0;
     HEAP32[1688>>2] = $334;
     HEAP32[$vararg_buffer28>>2] = $333;
     (_sprintf(((33104 + 100|0)),70984,$vararg_buffer28)|0);
     _cpu9900_1op(70992,((33104 + 100|0)));
     _cpu9900_1op(71000,33104);
     _cpu9900_label(((33104 + 100|0)));
    }
   } else {
    $335 = $0;
    $336 = HEAP32[$335>>2]|0;
    $337 = ($336|0)==(2);
    if ($337) {
     _cpu9900_2op(71008,33104,69464);
     $338 = $1;
     $339 = ($338|0)!=(0);
     if ($339) {
      HEAP32[34168>>2] = 1;
      $340 = $1;
      HEAP32[$vararg_buffer31>>2] = $340;
      (_sprintf(33104,70976,$vararg_buffer31)|0);
      $341 = HEAP32[1688>>2]|0;
      $342 = (($341) + 1)|0;
      HEAP32[1688>>2] = $342;
      HEAP32[$vararg_buffer34>>2] = $341;
      (_sprintf(((33104 + 100|0)),70984,$vararg_buffer34)|0);
      _cpu9900_1op(70992,((33104 + 100|0)));
      _cpu9900_1op(71000,33104);
      _cpu9900_label(((33104 + 100|0)));
     }
    } else {
     $343 = $0;
     $344 = HEAP32[$343>>2]|0;
     $345 = ($344|0)==(4);
     if ($345) {
      _cpu9900_1op(70608,33104);
      _cpu9900_2op(71016,33104,69464);
      $346 = $1;
      $347 = ($346|0)!=(0);
      if ($347) {
       HEAP32[34168>>2] = 1;
       $348 = $1;
       HEAP32[$vararg_buffer37>>2] = $348;
       (_sprintf(33104,70976,$vararg_buffer37)|0);
       $349 = HEAP32[1688>>2]|0;
       $350 = (($349) + 1)|0;
       HEAP32[1688>>2] = $350;
       HEAP32[$vararg_buffer40>>2] = $349;
       (_sprintf(((33104 + 100|0)),70984,$vararg_buffer40)|0);
       _cpu9900_1op(70992,((33104 + 100|0)));
       _cpu9900_1op(71000,33104);
       _cpu9900_label(((33104 + 100|0)));
      }
     } else {
      $351 = $0;
      $352 = HEAP32[$351>>2]|0;
      $353 = ($352|0)==(6);
      if ($353) {
       _cpu9900_2op(71024,33104,69464);
       $354 = $1;
       $355 = ($354|0)!=(0);
       if ($355) {
        HEAP32[34168>>2] = 1;
        $356 = $1;
        HEAP32[$vararg_buffer43>>2] = $356;
        (_sprintf(33104,70976,$vararg_buffer43)|0);
        $357 = HEAP32[1688>>2]|0;
        $358 = (($357) + 1)|0;
        HEAP32[1688>>2] = $358;
        HEAP32[$vararg_buffer46>>2] = $357;
        (_sprintf(((33104 + 100|0)),70984,$vararg_buffer46)|0);
        _cpu9900_1op(71032,((33104 + 100|0)));
        _cpu9900_1op(71000,33104);
        _cpu9900_label(((33104 + 100|0)));
       } else {
        $359 = HEAP32[1688>>2]|0;
        $360 = (($359) + 1)|0;
        HEAP32[1688>>2] = $360;
        HEAP32[$vararg_buffer49>>2] = $359;
        (_sprintf(33104,70984,$vararg_buffer49)|0);
        _cpu9900_1op(71032,33104);
        _cpu9900_1op(69480,69464);
        _cpu9900_1op(71040,71048);
        _cpu9900_label(33104);
        _cpu9900_1op(69488,69464);
        _cpu9900_empty();
       }
      } else {
       $361 = $0;
       $362 = HEAP32[$361>>2]|0;
       $363 = ($362|0)==(8);
       if ($363) {
        _cpu9900_2op(71024,33104,69464);
        $364 = $1;
        $365 = ($364|0)!=(0);
        if ($365) {
         HEAP32[34168>>2] = 1;
         $366 = $1;
         HEAP32[$vararg_buffer52>>2] = $366;
         (_sprintf(33104,70976,$vararg_buffer52)|0);
         $367 = HEAP32[1688>>2]|0;
         $368 = (($367) + 1)|0;
         HEAP32[1688>>2] = $368;
         HEAP32[$vararg_buffer55>>2] = $367;
         (_sprintf(((33104 + 100|0)),70984,$vararg_buffer55)|0);
         _cpu9900_1op(70992,((33104 + 100|0)));
         _cpu9900_1op(71000,33104);
         _cpu9900_label(((33104 + 100|0)));
        } else {
         $369 = HEAP32[1688>>2]|0;
         $370 = (($369) + 1)|0;
         HEAP32[1688>>2] = $370;
         HEAP32[$vararg_buffer58>>2] = $369;
         (_sprintf(33104,70984,$vararg_buffer58)|0);
         _cpu9900_1op(70992,33104);
         _cpu9900_1op(69480,69464);
         _cpu9900_1op(71040,71048);
         _cpu9900_label(33104);
         _cpu9900_1op(69488,69464);
         _cpu9900_empty();
        }
       } else {
        $371 = $0;
        $372 = HEAP32[$371>>2]|0;
        $373 = ($372|0)==(10);
        if ($373) {
         label = 116;
        } else {
         $374 = $0;
         $375 = HEAP32[$374>>2]|0;
         $376 = ($375|0)==(14);
         if ($376) {
          label = 116;
         } else {
          $384 = $0;
          $385 = HEAP32[$384>>2]|0;
          $386 = ($385|0)==(12);
          if ($386) {
           label = 122;
          } else {
           $387 = $0;
           $388 = HEAP32[$387>>2]|0;
           $389 = ($388|0)==(16);
           if ($389) {
            label = 122;
           } else {
            $397 = $0;
            $398 = HEAP32[$397>>2]|0;
            $399 = ($398|0)==(26);
            if ($399) {
             _cpu9900_2op(71072,33104,69464);
            } else {
             $400 = $0;
             $401 = HEAP32[$400>>2]|0;
             $402 = ($401|0)==(28);
             if ($402) {
              _cpu9900_2op(71080,33104,69464);
             }
            }
           }
          }
          if ((label|0) == 122) {
           _cpu9900_2op(71024,69464,33104);
           $390 = $1;
           $391 = ($390|0)!=(0);
           if ($391) {
            HEAP32[34168>>2] = 1;
            $392 = $1;
            HEAP32[$vararg_buffer70>>2] = $392;
            (_sprintf(33104,70976,$vararg_buffer70)|0);
            $393 = HEAP32[1688>>2]|0;
            $394 = (($393) + 1)|0;
            HEAP32[1688>>2] = $394;
            HEAP32[$vararg_buffer73>>2] = $393;
            (_sprintf(((33104 + 100|0)),70984,$vararg_buffer73)|0);
            _cpu9900_1op(71064,((33104 + 100|0)));
            _cpu9900_1op(71000,33104);
            _cpu9900_label(((33104 + 100|0)));
           } else {
            $395 = HEAP32[1688>>2]|0;
            $396 = (($395) + 1)|0;
            HEAP32[1688>>2] = $396;
            HEAP32[$vararg_buffer76>>2] = $395;
            (_sprintf(33104,70984,$vararg_buffer76)|0);
            _cpu9900_1op(71064,33104);
            _cpu9900_1op(69480,69464);
            _cpu9900_1op(71040,71048);
            _cpu9900_label(33104);
            _cpu9900_1op(69488,69464);
            _cpu9900_empty();
           }
          }
         }
        }
        if ((label|0) == 116) {
         _cpu9900_2op(71024,69464,33104);
         $377 = $1;
         $378 = ($377|0)!=(0);
         if ($378) {
          HEAP32[34168>>2] = 1;
          $379 = $1;
          HEAP32[$vararg_buffer61>>2] = $379;
          (_sprintf(33104,70976,$vararg_buffer61)|0);
          $380 = HEAP32[1688>>2]|0;
          $381 = (($380) + 1)|0;
          HEAP32[1688>>2] = $381;
          HEAP32[$vararg_buffer64>>2] = $380;
          (_sprintf(((33104 + 100|0)),70984,$vararg_buffer64)|0);
          _cpu9900_1op(71056,((33104 + 100|0)));
          _cpu9900_1op(71000,33104);
          _cpu9900_label(((33104 + 100|0)));
         } else {
          $382 = HEAP32[1688>>2]|0;
          $383 = (($382) + 1)|0;
          HEAP32[1688>>2] = $383;
          HEAP32[$vararg_buffer67>>2] = $382;
          (_sprintf(33104,70984,$vararg_buffer67)|0);
          _cpu9900_1op(71056,33104);
          _cpu9900_1op(69480,69464);
          _cpu9900_1op(71040,71048);
          _cpu9900_label(33104);
          _cpu9900_1op(69488,69464);
          _cpu9900_empty();
         }
        }
       }
      }
     }
    }
   }
   STACKTOP = sp;return;
   break;
  }
  case 45:  {
   (_strcpy((33104|0),(70728|0))|0);
   (_strcat((33104|0),(70736|0))|0);
   $46 = $0;
   $47 = (($46) + 16|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) + 12|0);
   (_strcat((33104|0),($49|0))|0);
   _cpu9900_2op(69472,33104,69464);
   STACKTOP = sp;return;
   break;
  }
  case 69:  {
   $4 = $0;
   $5 = (($4) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)!=(0|0);
   if ($7) {
    $8 = $0;
    $9 = (($8) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    _cpu9900_node_generate($12,0);
   }
   _cpu9900_1op(70560,70568);
   $13 = $0;
   $14 = (($13) + 16|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($15) + 12|0);
   _cpu9900_1op(70576,$16);
   STACKTOP = sp;return;
   break;
  }
  case 41:  {
   $36 = $0;
   $37 = (($36) + 8|0);
   $38 = HEAP32[$37>>2]|0;
   _cpu9900_node_generate($38,0);
   _cpu9900_2op(70656,69464,70648);
   STACKTOP = sp;return;
   break;
  }
  case 66:  {
   _cpu9900_2op(69472,70632,69464);
   STACKTOP = sp;return;
   break;
  }
  case 44:  {
   (_strcpy((33104|0),(70728|0))|0);
   (_strcat((33104|0),(70736|0))|0);
   $42 = $0;
   $43 = (($42) + 16|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) + 12|0);
   (_strcat((33104|0),($45|0))|0);
   _cpu9900_2op(70696,33104,69464);
   STACKTOP = sp;return;
   break;
  }
  case 68:  {
   $17 = $0;
   _node_get_label($17,0);
   _cpu9900_2op(69456,69464,33104);
   STACKTOP = sp;return;
   break;
  }
  case 42:  {
   $33 = $0;
   $34 = (($33) + 8|0);
   $35 = HEAP32[$34>>2]|0;
   _cpu9900_node_generate($35,0);
   _cpu9900_2op(70640,69464,70648);
   STACKTOP = sp;return;
   break;
  }
  case 50:  {
   $50 = $0;
   $51 = (($50) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $52<<8;
   $54 = $0;
   $55 = (($54) + 4|0);
   $56 = HEAP32[$55>>2]|0;
   HEAP32[$vararg_buffer>>2] = $53;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $56;
   (_sprintf(33104,70744,$vararg_buffer)|0);
   _cpu9900_2op(69456,69464,33104);
   STACKTOP = sp;return;
   break;
  }
  case 52:  {
   $60 = $0;
   $61 = (($60) + 8|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = HEAP32[$62>>2]|0;
   $64 = ($63|0)==(68);
   if ($64) {
    $65 = $0;
    $66 = (($65) + 8|0);
    $67 = HEAP32[$66>>2]|0;
    _node_get_label($67,4);
    _cpu9900_2op(70696,33104,69464);
    STACKTOP = sp;return;
   }
   $68 = $0;
   $69 = (($68) + 8|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = HEAP32[$70>>2]|0;
   $72 = ($71|0)==(27);
   if ($72) {
    label = 25;
   } else {
    $73 = $0;
    $74 = (($73) + 8|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = HEAP32[$75>>2]|0;
    $77 = ($76|0)==(29);
    if ($77) {
     label = 25;
    }
   }
   if ((label|0) == 25) {
    $78 = $0;
    $79 = (($78) + 8|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($80) + 8|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = HEAP32[$82>>2]|0;
    $84 = ($83|0)==(68);
    if ($84) {
     $85 = $0;
     $86 = (($85) + 8|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = (($87) + 12|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = HEAP32[$89>>2]|0;
     $91 = ($90|0)==(51);
     if ($91) {
      $92 = $0;
      $93 = (($92) + 8|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = (($94) + 8|0);
      $96 = HEAP32[$95>>2]|0;
      _node_get_label($96,4);
      $p = 33104;
      while(1) {
       $97 = $p;
       $98 = HEAP8[$97>>0]|0;
       $99 = ($98<<24>>24)!=(0);
       if (!($99)) {
        break;
       }
       $100 = $p;
       $101 = (($100) + 1|0);
       $p = $101;
      }
      $102 = $0;
      $103 = (($102) + 8|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = HEAP32[$104>>2]|0;
      $106 = ($105|0)==(27);
      if ($106) {
       $107 = $p;
       $108 = (($107) + 1|0);
       $p = $108;
       HEAP8[$107>>0] = 43;
      } else {
       $109 = $p;
       $110 = (($109) + 1|0);
       $p = $110;
       HEAP8[$109>>0] = 45;
      }
      $111 = $p;
      $112 = $0;
      $113 = (($112) + 8|0);
      $114 = HEAP32[$113>>2]|0;
      $115 = (($114) + 12|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = (($116) + 4|0);
      $118 = HEAP32[$117>>2]|0;
      HEAP32[$vararg_buffer5>>2] = $118;
      (_sprintf($111,70760,$vararg_buffer5)|0);
      _cpu9900_2op(70696,33104,69464);
      STACKTOP = sp;return;
     }
    }
   }
   $119 = $0;
   $120 = (($119) + 8|0);
   $121 = HEAP32[$120>>2]|0;
   _cpu9900_node_generate($121,0);
   _cpu9900_2op(70696,70768,69464);
   STACKTOP = sp;return;
   break;
  }
  case 40: case 39:  {
   $24 = $0;
   $25 = (($24) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   _cpu9900_node_generate($26,0);
   _cpu9900_1op(70608,69464);
   STACKTOP = sp;return;
   break;
  }
  case 57:  {
   $30 = $0;
   $31 = (($30) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   _cpu9900_node_generate($32,0);
   _cpu9900_1op(70560,70568);
   _cpu9900_1op(70576,70624);
   STACKTOP = sp;return;
   break;
  }
  case 48:  {
   _cpu9900_2op(69472,70672,70688);
   _cpu9900_2op(70696,70704,69464);
   _cpu9900_1op(70712,70672);
   STACKTOP = sp;return;
   break;
  }
  case 37:  {
   $18 = $0;
   $19 = (($18) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   _cpu9900_node_generate($20,0);
   _cpu9900_2op(70584,69464,70592);
   _cpu9900_1op(70600,69464);
   STACKTOP = sp;return;
   break;
  }
  case 43:  {
   $39 = $0;
   $40 = (($39) + 8|0);
   $41 = HEAP32[$40>>2]|0;
   _cpu9900_node_generate($41,0);
   _cpu9900_2op(70664,69464,70648);
   STACKTOP = sp;return;
   break;
  }
  case 54:  {
   $184 = $0;
   $185 = (($184) + 8|0);
   $186 = HEAP32[$185>>2]|0;
   _cpu9900_node_generate($186,0);
   _cpu9900_1op(70776,70784);
   _cpu9900_1op(70560,70792);
   _cpu9900_1op(70576,70800);
   _cpu9900_1op(70776,70808);
   STACKTOP = sp;return;
   break;
  }
  case 53:  {
   $122 = $0;
   $123 = (($122) + 8|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = HEAP32[$124>>2]|0;
   $126 = ($125|0)==(68);
   if ($126) {
    $127 = $0;
    $128 = (($127) + 8|0);
    $129 = HEAP32[$128>>2]|0;
    _node_get_label($129,4);
    _cpu9900_2op(69472,33104,69464);
    STACKTOP = sp;return;
   }
   $130 = $0;
   $131 = (($130) + 8|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = HEAP32[$132>>2]|0;
   $134 = ($133|0)==(27);
   if ($134) {
    label = 39;
   } else {
    $135 = $0;
    $136 = (($135) + 8|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = HEAP32[$137>>2]|0;
    $139 = ($138|0)==(29);
    if ($139) {
     label = 39;
    }
   }
   if ((label|0) == 39) {
    $140 = $0;
    $141 = (($140) + 8|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = (($142) + 8|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = HEAP32[$144>>2]|0;
    $146 = ($145|0)==(68);
    if ($146) {
     $147 = $0;
     $148 = (($147) + 8|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = (($149) + 12|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==(51);
     if ($153) {
      $154 = $0;
      $155 = (($154) + 8|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = (($156) + 8|0);
      $158 = HEAP32[$157>>2]|0;
      _node_get_label($158,4);
      $p1 = 33104;
      while(1) {
       $159 = $p1;
       $160 = HEAP8[$159>>0]|0;
       $161 = ($160<<24>>24)!=(0);
       if (!($161)) {
        break;
       }
       $162 = $p1;
       $163 = (($162) + 1|0);
       $p1 = $163;
      }
      $164 = $0;
      $165 = (($164) + 8|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[$166>>2]|0;
      $168 = ($167|0)==(27);
      if ($168) {
       $169 = $p1;
       $170 = (($169) + 1|0);
       $p1 = $170;
       HEAP8[$169>>0] = 43;
      } else {
       $171 = $p1;
       $172 = (($171) + 1|0);
       $p1 = $172;
       HEAP8[$171>>0] = 45;
      }
      $173 = $p1;
      $174 = $0;
      $175 = (($174) + 8|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = (($176) + 12|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = (($178) + 4|0);
      $180 = HEAP32[$179>>2]|0;
      HEAP32[$vararg_buffer8>>2] = $180;
      (_sprintf($173,70760,$vararg_buffer8)|0);
      _cpu9900_2op(69472,33104,69464);
      STACKTOP = sp;return;
     }
    }
   }
   $181 = $0;
   $182 = (($181) + 8|0);
   $183 = HEAP32[$182>>2]|0;
   _cpu9900_node_generate($183,0);
   _cpu9900_2op(69472,70768,69464);
   STACKTOP = sp;return;
   break;
  }
  case 55:  {
   _cpu9900_1op(69480,69464);
   STACKTOP = sp;return;
   break;
  }
  case 58:  {
   _cpu9900_2op(70696,70816,69464);
   STACKTOP = sp;return;
   break;
  }
  case 59:  {
   _cpu9900_2op(70696,70832,69464);
   STACKTOP = sp;return;
   break;
  }
  case 60:  {
   _cpu9900_2op(70696,70848,69464);
   STACKTOP = sp;return;
   break;
  }
  case 61:  {
   _cpu9900_2op(70696,70864,69464);
   STACKTOP = sp;return;
   break;
  }
  case 49:  {
   _cpu9900_2op(69472,70672,70688);
   _cpu9900_2op(69472,70704,69464);
   _cpu9900_1op(70720,70672);
   STACKTOP = sp;return;
   break;
  }
  case 38:  {
   $21 = $0;
   $22 = (($21) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   _cpu9900_node_generate($23,0);
   _cpu9900_1op(70600,69464);
   STACKTOP = sp;return;
   break;
  }
  case 51:  {
   $57 = $0;
   $58 = (($57) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   HEAP32[$vararg_buffer2>>2] = $59;
   (_sprintf(33104,70760,$vararg_buffer2)|0);
   _cpu9900_2op(69456,69464,33104);
   STACKTOP = sp;return;
   break;
  }
  case 62:  {
   _cpu9900_1op(70560,70792);
   _cpu9900_1op(70576,70880);
   STACKTOP = sp;return;
   break;
  }
  case 56:  {
   $27 = $0;
   $28 = (($27) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   _cpu9900_node_generate($29,0);
   _cpu9900_1op(70616,69464);
   STACKTOP = sp;return;
   break;
  }
  case 63:  {
   _cpu9900_2op(69472,70888,69464);
   STACKTOP = sp;return;
   break;
  }
  case 46:  {
   $403 = $0;
   $404 = (($403) + 12|0);
   $405 = HEAP32[$404>>2]|0;
   $406 = HEAP32[$405>>2]|0;
   $407 = ($406|0)==(68);
   if ($407) {
    $408 = $0;
    $409 = (($408) + 8|0);
    $410 = HEAP32[$409>>2]|0;
    _cpu9900_node_generate($410,0);
    $411 = $0;
    $412 = (($411) + 12|0);
    $413 = HEAP32[$412>>2]|0;
    _node_get_label($413,4);
    _cpu9900_2op(70696,69464,33104);
    STACKTOP = sp;return;
   }
   $414 = $0;
   $415 = (($414) + 12|0);
   $416 = HEAP32[$415>>2]|0;
   $417 = HEAP32[$416>>2]|0;
   $418 = ($417|0)==(27);
   if ($418) {
    label = 143;
   } else {
    $419 = $0;
    $420 = (($419) + 12|0);
    $421 = HEAP32[$420>>2]|0;
    $422 = HEAP32[$421>>2]|0;
    $423 = ($422|0)==(29);
    if ($423) {
     label = 143;
    }
   }
   if ((label|0) == 143) {
    $424 = $0;
    $425 = (($424) + 12|0);
    $426 = HEAP32[$425>>2]|0;
    $427 = (($426) + 8|0);
    $428 = HEAP32[$427>>2]|0;
    $429 = HEAP32[$428>>2]|0;
    $430 = ($429|0)==(68);
    if ($430) {
     $431 = $0;
     $432 = (($431) + 12|0);
     $433 = HEAP32[$432>>2]|0;
     $434 = (($433) + 12|0);
     $435 = HEAP32[$434>>2]|0;
     $436 = HEAP32[$435>>2]|0;
     $437 = ($436|0)==(51);
     if ($437) {
      $438 = $0;
      $439 = (($438) + 8|0);
      $440 = HEAP32[$439>>2]|0;
      _cpu9900_node_generate($440,0);
      $441 = $0;
      $442 = (($441) + 12|0);
      $443 = HEAP32[$442>>2]|0;
      $444 = (($443) + 8|0);
      $445 = HEAP32[$444>>2]|0;
      _node_get_label($445,4);
      $p6 = 33104;
      while(1) {
       $446 = $p6;
       $447 = HEAP8[$446>>0]|0;
       $448 = ($447<<24>>24)!=(0);
       if (!($448)) {
        break;
       }
       $449 = $p6;
       $450 = (($449) + 1|0);
       $p6 = $450;
      }
      $451 = $0;
      $452 = (($451) + 12|0);
      $453 = HEAP32[$452>>2]|0;
      $454 = HEAP32[$453>>2]|0;
      $455 = ($454|0)==(27);
      if ($455) {
       $456 = $p6;
       $457 = (($456) + 1|0);
       $p6 = $457;
       HEAP8[$456>>0] = 43;
      } else {
       $458 = $p6;
       $459 = (($458) + 1|0);
       $p6 = $459;
       HEAP8[$458>>0] = 45;
      }
      $460 = $p6;
      $461 = $0;
      $462 = (($461) + 12|0);
      $463 = HEAP32[$462>>2]|0;
      $464 = (($463) + 12|0);
      $465 = HEAP32[$464>>2]|0;
      $466 = (($465) + 4|0);
      $467 = HEAP32[$466>>2]|0;
      HEAP32[$vararg_buffer79>>2] = $467;
      (_sprintf($460,70760,$vararg_buffer79)|0);
      _cpu9900_2op(70696,69464,33104);
      STACKTOP = sp;return;
     }
    }
   }
   $468 = $0;
   $469 = (($468) + 8|0);
   $470 = HEAP32[$469>>2]|0;
   _cpu9900_node_generate($470,0);
   _cpu9900_1op(70936,70944);
   _cpu9900_2op(69472,69464,70952);
   $471 = $0;
   $472 = (($471) + 12|0);
   $473 = HEAP32[$472>>2]|0;
   _cpu9900_node_generate($473,0);
   _cpu9900_2op(69472,70960,70688);
   _cpu9900_2op(70696,70688,70768);
   STACKTOP = sp;return;
   break;
  }
  case 47:  {
   $474 = $0;
   $475 = (($474) + 12|0);
   $476 = HEAP32[$475>>2]|0;
   $477 = HEAP32[$476>>2]|0;
   $478 = ($477|0)==(68);
   if ($478) {
    $479 = $0;
    $480 = (($479) + 8|0);
    $481 = HEAP32[$480>>2]|0;
    _cpu9900_node_generate($481,0);
    $482 = $0;
    $483 = (($482) + 12|0);
    $484 = HEAP32[$483>>2]|0;
    _node_get_label($484,4);
    _cpu9900_2op(69472,69464,33104);
    STACKTOP = sp;return;
   }
   $485 = $0;
   $486 = (($485) + 12|0);
   $487 = HEAP32[$486>>2]|0;
   $488 = HEAP32[$487>>2]|0;
   $489 = ($488|0)==(27);
   if ($489) {
    label = 157;
   } else {
    $490 = $0;
    $491 = (($490) + 12|0);
    $492 = HEAP32[$491>>2]|0;
    $493 = HEAP32[$492>>2]|0;
    $494 = ($493|0)==(29);
    if ($494) {
     label = 157;
    }
   }
   if ((label|0) == 157) {
    $495 = $0;
    $496 = (($495) + 12|0);
    $497 = HEAP32[$496>>2]|0;
    $498 = (($497) + 8|0);
    $499 = HEAP32[$498>>2]|0;
    $500 = HEAP32[$499>>2]|0;
    $501 = ($500|0)==(68);
    if ($501) {
     $502 = $0;
     $503 = (($502) + 12|0);
     $504 = HEAP32[$503>>2]|0;
     $505 = (($504) + 12|0);
     $506 = HEAP32[$505>>2]|0;
     $507 = HEAP32[$506>>2]|0;
     $508 = ($507|0)==(51);
     if ($508) {
      $509 = $0;
      $510 = (($509) + 8|0);
      $511 = HEAP32[$510>>2]|0;
      _cpu9900_node_generate($511,0);
      $512 = $0;
      $513 = (($512) + 12|0);
      $514 = HEAP32[$513>>2]|0;
      $515 = (($514) + 8|0);
      $516 = HEAP32[$515>>2]|0;
      _node_get_label($516,4);
      $p7 = 33104;
      while(1) {
       $517 = $p7;
       $518 = HEAP8[$517>>0]|0;
       $519 = ($518<<24>>24)!=(0);
       if (!($519)) {
        break;
       }
       $520 = $p7;
       $521 = (($520) + 1|0);
       $p7 = $521;
      }
      $522 = $0;
      $523 = (($522) + 12|0);
      $524 = HEAP32[$523>>2]|0;
      $525 = HEAP32[$524>>2]|0;
      $526 = ($525|0)==(27);
      if ($526) {
       $527 = $p7;
       $528 = (($527) + 1|0);
       $p7 = $528;
       HEAP8[$527>>0] = 43;
      } else {
       $529 = $p7;
       $530 = (($529) + 1|0);
       $p7 = $530;
       HEAP8[$529>>0] = 45;
      }
      $531 = $p7;
      $532 = $0;
      $533 = (($532) + 12|0);
      $534 = HEAP32[$533>>2]|0;
      $535 = (($534) + 12|0);
      $536 = HEAP32[$535>>2]|0;
      $537 = (($536) + 4|0);
      $538 = HEAP32[$537>>2]|0;
      HEAP32[$vararg_buffer82>>2] = $538;
      (_sprintf($531,70760,$vararg_buffer82)|0);
      _cpu9900_2op(69472,69464,33104);
      STACKTOP = sp;return;
     }
    }
   }
   $539 = $0;
   $540 = (($539) + 8|0);
   $541 = HEAP32[$540>>2]|0;
   _cpu9900_node_generate($541,0);
   _cpu9900_1op(70936,70944);
   _cpu9900_2op(69472,69464,70952);
   $542 = $0;
   $543 = (($542) + 12|0);
   $544 = HEAP32[$543>>2]|0;
   _cpu9900_node_generate($544,0);
   _cpu9900_2op(69472,70960,70688);
   _cpu9900_2op(69472,70688,70768);
   STACKTOP = sp;return;
   break;
  }
  default: {
   $545 = $0;
   $546 = HEAP32[$545>>2]|0;
   $547 = ($546|0)==(27);
   if ($547) {
    label = 169;
   } else {
    $548 = $0;
    $549 = HEAP32[$548>>2]|0;
    $550 = ($549|0)==(29);
    if ($550) {
     label = 169;
    }
   }
   if ((label|0) == 169) {
    $551 = $0;
    $552 = (($551) + 8|0);
    $553 = HEAP32[$552>>2]|0;
    $554 = HEAP32[$553>>2]|0;
    $555 = ($554|0)==(68);
    do {
     if ($555) {
      $556 = $0;
      $557 = (($556) + 12|0);
      $558 = HEAP32[$557>>2]|0;
      $559 = HEAP32[$558>>2]|0;
      $560 = ($559|0)==(51);
      if (!($560)) {
       break;
      }
      $561 = $0;
      $562 = (($561) + 8|0);
      $563 = HEAP32[$562>>2]|0;
      _node_get_label($563,0);
      $564 = $0;
      $565 = HEAP32[$564>>2]|0;
      $566 = ($565|0)==(27);
      if ($566) {
       (_strcat((33104|0),(71088|0))|0);
      } else {
       (_strcat((33104|0),(71096|0))|0);
      }
      $p8 = 33104;
      while(1) {
       $567 = $p8;
       $568 = HEAP8[$567>>0]|0;
       $569 = ($568<<24>>24)!=(0);
       if (!($569)) {
        break;
       }
       $570 = $p8;
       $571 = (($570) + 1|0);
       $p8 = $571;
      }
      $572 = $p8;
      $573 = $0;
      $574 = (($573) + 12|0);
      $575 = HEAP32[$574>>2]|0;
      $576 = (($575) + 4|0);
      $577 = HEAP32[$576>>2]|0;
      HEAP32[$vararg_buffer85>>2] = $577;
      (_sprintf($572,70760,$vararg_buffer85)|0);
      _cpu9900_2op(69456,69464,33104);
      STACKTOP = sp;return;
     }
    } while(0);
   }
   $578 = $0;
   $579 = HEAP32[$578>>2]|0;
   $580 = ($579|0)==(27);
   do {
    if ($580) {
     $581 = $0;
     $582 = (($581) + 8|0);
     $583 = HEAP32[$582>>2]|0;
     $584 = HEAP32[$583>>2]|0;
     $585 = ($584|0)==(68);
     if ($585) {
      $586 = $0;
      $587 = (($586) + 12|0);
      $588 = HEAP32[$587>>2]|0;
      _cpu9900_node_generate($588,0);
      $589 = $0;
      $590 = (($589) + 8|0);
      $591 = HEAP32[$590>>2]|0;
      _node_get_label($591,0);
      _cpu9900_2op(71104,69464,33104);
      STACKTOP = sp;return;
     }
     $592 = $0;
     $593 = (($592) + 8|0);
     $594 = HEAP32[$593>>2]|0;
     $595 = HEAP32[$594>>2]|0;
     $596 = ($595|0)==(51);
     if (!($596)) {
      $597 = $0;
      $598 = (($597) + 12|0);
      $599 = HEAP32[$598>>2]|0;
      $600 = HEAP32[$599>>2]|0;
      $601 = ($600|0)==(51);
      if (!($601)) {
       break;
      }
     }
     $602 = $0;
     $603 = (($602) + 8|0);
     $604 = HEAP32[$603>>2]|0;
     $605 = HEAP32[$604>>2]|0;
     $606 = ($605|0)==(51);
     if ($606) {
      $607 = $0;
      $608 = (($607) + 8|0);
      $609 = HEAP32[$608>>2]|0;
      $explore = $609;
     } else {
      $610 = $0;
      $611 = (($610) + 12|0);
      $612 = HEAP32[$611>>2]|0;
      $explore = $612;
     }
     $613 = $0;
     $614 = (($613) + 8|0);
     $615 = HEAP32[$614>>2]|0;
     $616 = $explore;
     $617 = ($615|0)!=($616|0);
     if ($617) {
      $618 = $0;
      $619 = (($618) + 8|0);
      $620 = HEAP32[$619>>2]|0;
      _cpu9900_node_generate($620,0);
     } else {
      $621 = $0;
      $622 = (($621) + 12|0);
      $623 = HEAP32[$622>>2]|0;
      _cpu9900_node_generate($623,0);
     }
     $624 = $explore;
     $625 = (($624) + 4|0);
     $626 = HEAP32[$625>>2]|0;
     $c9 = $626;
     $627 = $c9;
     HEAP32[$vararg_buffer88>>2] = $627;
     (_sprintf(33104,70760,$vararg_buffer88)|0);
     _cpu9900_2op(71104,69464,33104);
     STACKTOP = sp;return;
    }
   } while(0);
   $628 = $0;
   $629 = HEAP32[$628>>2]|0;
   $630 = ($629|0)==(29);
   do {
    if ($630) {
     $631 = $0;
     $632 = (($631) + 12|0);
     $633 = HEAP32[$632>>2]|0;
     $634 = HEAP32[$633>>2]|0;
     $635 = ($634|0)==(51);
     if ($635) {
      $636 = $0;
      $637 = (($636) + 12|0);
      $638 = HEAP32[$637>>2]|0;
      $explore = $638;
     } else {
      $explore = 0;
     }
     $639 = $explore;
     $640 = ($639|0)!=(0|0);
     if (!($640)) {
      break;
     }
     $641 = $explore;
     $642 = (($641) + 4|0);
     $643 = HEAP32[$642>>2]|0;
     $c10 = $643;
     $644 = $0;
     $645 = (($644) + 8|0);
     $646 = HEAP32[$645>>2]|0;
     _cpu9900_node_generate($646,0);
     $647 = $c10;
     HEAP32[$vararg_buffer91>>2] = $647;
     (_sprintf(33104,71112,$vararg_buffer91)|0);
     _cpu9900_2op(71104,69464,33104);
     STACKTOP = sp;return;
    }
   } while(0);
   $648 = $0;
   $649 = HEAP32[$648>>2]|0;
   $650 = ($649|0)==(1);
   if ($650) {
    label = 203;
   } else {
    $651 = $0;
    $652 = HEAP32[$651>>2]|0;
    $653 = ($652|0)==(5);
    if ($653) {
     label = 203;
    } else {
     $654 = $0;
     $655 = HEAP32[$654>>2]|0;
     $656 = ($655|0)==(3);
     if ($656) {
      label = 203;
     }
    }
   }
   do {
    if ((label|0) == 203) {
     $657 = $0;
     $658 = (($657) + 12|0);
     $659 = HEAP32[$658>>2]|0;
     $660 = HEAP32[$659>>2]|0;
     $661 = ($660|0)==(51);
     if ($661) {
      $662 = $0;
      $663 = (($662) + 12|0);
      $664 = HEAP32[$663>>2]|0;
      $explore = $664;
     } else {
      $explore = 0;
     }
     $665 = $explore;
     $666 = ($665|0)!=(0|0);
     if (!($666)) {
      break;
     }
     $667 = $explore;
     $668 = (($667) + 4|0);
     $669 = HEAP32[$668>>2]|0;
     $value = $669;
     $670 = $0;
     $671 = HEAP32[$670>>2]|0;
     $672 = ($671|0)==(1);
     if ($672) {
      $mnemonic = 71120;
     } else {
      $673 = $0;
      $674 = HEAP32[$673>>2]|0;
      $675 = ($674|0)==(5);
      if ($675) {
       $mnemonic = 70584;
      } else {
       $mnemonic = 71008;
      }
     }
     $676 = $0;
     $677 = (($676) + 8|0);
     $678 = HEAP32[$677>>2]|0;
     $679 = $explore;
     $680 = ($678|0)!=($679|0);
     if ($680) {
      $681 = $0;
      $682 = (($681) + 8|0);
      $683 = HEAP32[$682>>2]|0;
      _cpu9900_node_generate($683,0);
     } else {
      $684 = $0;
      $685 = (($684) + 12|0);
      $686 = HEAP32[$685>>2]|0;
      _cpu9900_node_generate($686,0);
     }
     $687 = $0;
     $688 = HEAP32[$687>>2]|0;
     $689 = ($688|0)==(1);
     if ($689) {
      label = 218;
     } else {
      $690 = $0;
      $691 = HEAP32[$690>>2]|0;
      $692 = ($691|0)==(3);
      if ($692) {
       label = 218;
      } else {
       label = 220;
      }
     }
     if ((label|0) == 218) {
      $693 = $value;
      $694 = ($693|0)==(0);
      if ($694) {
      } else {
       label = 220;
      }
     }
     if ((label|0) == 220) {
      $695 = $0;
      $696 = HEAP32[$695>>2]|0;
      $697 = ($696|0)==(5);
      if ($697) {
       $698 = $value;
       $699 = ($698|0)==(65535);
       if ($699) {
       } else {
        label = 223;
       }
      } else {
       label = 223;
      }
      if ((label|0) == 223) {
       $700 = $0;
       $701 = HEAP32[$700>>2]|0;
       $702 = ($701|0)==(5);
       if ($702) {
        $703 = $value;
        $704 = ($703|0)==(0);
        if ($704) {
         _cpu9900_1op(69480,69464);
        } else {
         label = 226;
        }
       } else {
        label = 226;
       }
       if ((label|0) == 226) {
        $705 = $0;
        $706 = HEAP32[$705>>2]|0;
        $707 = ($706|0)==(1);
        if ($707) {
         $708 = $value;
         $709 = ($708|0)==(65535);
         if ($709) {
          _cpu9900_1op(69488,69464);
         } else {
          label = 229;
         }
        } else {
         label = 229;
        }
        if ((label|0) == 229) {
         $710 = $value;
         HEAP32[$vararg_buffer94>>2] = $710;
         (_sprintf(33104,70760,$vararg_buffer94)|0);
         $711 = $0;
         $712 = HEAP32[$711>>2]|0;
         $713 = ($712|0)==(3);
         if ($713) {
          _cpu9900_2op(69456,70688,33104);
          _cpu9900_2op(71008,70688,69464);
         } else {
          $714 = $mnemonic;
          _cpu9900_2op($714,69464,33104);
         }
        }
       }
      }
     }
     STACKTOP = sp;return;
    }
   } while(0);
   $715 = $0;
   $716 = HEAP32[$715>>2]|0;
   $717 = ($716|0)==(31);
   if ($717) {
    $718 = $0;
    $719 = (($718) + 8|0);
    $720 = HEAP32[$719>>2]|0;
    $721 = HEAP32[$720>>2]|0;
    $722 = ($721|0)==(51);
    if ($722) {
     $723 = $0;
     $724 = (($723) + 8|0);
     $725 = HEAP32[$724>>2]|0;
     $explore = $725;
    } else {
     $726 = $0;
     $727 = (($726) + 12|0);
     $728 = HEAP32[$727>>2]|0;
     $729 = HEAP32[$728>>2]|0;
     $730 = ($729|0)==(51);
     if ($730) {
      $731 = $0;
      $732 = (($731) + 12|0);
      $733 = HEAP32[$732>>2]|0;
      $explore = $733;
     } else {
      $explore = 0;
     }
    }
    $734 = $explore;
    $735 = ($734|0)!=(0|0);
    do {
     if ($735) {
      $736 = $explore;
      $737 = (($736) + 4|0);
      $738 = HEAP32[$737>>2]|0;
      $739 = ($738|0)==(0);
      if (!($739)) {
       $740 = $explore;
       $741 = (($740) + 4|0);
       $742 = HEAP32[$741>>2]|0;
       $743 = ($742|0)==(1);
       if (!($743)) {
        $744 = $explore;
        $745 = (($744) + 4|0);
        $746 = HEAP32[$745>>2]|0;
        $747 = (_is_power_of_two($746)|0);
        $748 = ($747|0)!=(0);
        if (!($748)) {
         break;
        }
       }
      }
      $749 = $explore;
      $750 = (($749) + 4|0);
      $751 = HEAP32[$750>>2]|0;
      $c11 = $751;
      $752 = $0;
      $753 = (($752) + 8|0);
      $754 = HEAP32[$753>>2]|0;
      $755 = $explore;
      $756 = ($754|0)!=($755|0);
      if ($756) {
       $757 = $0;
       $758 = (($757) + 8|0);
       $759 = HEAP32[$758>>2]|0;
       $0 = $759;
      } else {
       $760 = $0;
       $761 = (($760) + 12|0);
       $762 = HEAP32[$761>>2]|0;
       $0 = $762;
      }
      $763 = $c11;
      $764 = ($763|0)==(0);
      if ($764) {
       _cpu9900_1op(69480,69464);
      } else {
       $765 = $c11;
       $766 = ($765|0)==(1);
       if ($766) {
       } else {
        $767 = $0;
        _cpu9900_node_generate($767,0);
        $cnt12 = 0;
        while(1) {
         $768 = $c11;
         $769 = ($768|0)>(1);
         if (!($769)) {
          break;
         }
         $770 = $cnt12;
         $771 = (($770) + 1)|0;
         $cnt12 = $771;
         $772 = $c11;
         $773 = (($772|0) / 2)&-1;
         $c11 = $773;
        }
        $774 = $cnt12;
        HEAP32[$vararg_buffer97>>2] = $774;
        (_sprintf(33104,70760,$vararg_buffer97)|0);
        _cpu9900_2op(70664,69464,33104);
       }
      }
      STACKTOP = sp;return;
     }
    } while(0);
   }
   $775 = $0;
   $776 = HEAP32[$775>>2]|0;
   $777 = ($776|0)==(33);
   if ($777) {
    $778 = $0;
    $779 = (($778) + 12|0);
    $780 = HEAP32[$779>>2]|0;
    $781 = HEAP32[$780>>2]|0;
    $782 = ($781|0)==(51);
    if ($782) {
     $783 = $0;
     $784 = (($783) + 12|0);
     $785 = HEAP32[$784>>2]|0;
     $786 = (($785) + 4|0);
     $787 = HEAP32[$786>>2]|0;
     $788 = (_is_power_of_two($787)|0);
     $789 = ($788|0)!=(0);
     if ($789) {
      $790 = $0;
      $791 = (($790) + 8|0);
      $792 = HEAP32[$791>>2]|0;
      _cpu9900_node_generate($792,0);
      $793 = $0;
      $794 = (($793) + 12|0);
      $795 = HEAP32[$794>>2]|0;
      $796 = (($795) + 4|0);
      $797 = HEAP32[$796>>2]|0;
      $c14 = $797;
      $cnt13 = 0;
      while(1) {
       $798 = $c14;
       $799 = ($798|0)>(1);
       if (!($799)) {
        break;
       }
       $800 = $cnt13;
       $801 = (($800) + 1)|0;
       $cnt13 = $801;
       $802 = $c14;
       $803 = (($802|0) / 2)&-1;
       $c14 = $803;
      }
      $804 = $cnt13;
      HEAP32[$vararg_buffer100>>2] = $804;
      (_sprintf(33104,70760,$vararg_buffer100)|0);
      _cpu9900_2op(70656,69464,33104);
      STACKTOP = sp;return;
     }
    }
   }
   $805 = $0;
   $806 = HEAP32[$805>>2]|0;
   $807 = ($806|0)==(13);
   if ($807) {
    label = 273;
   } else {
    $808 = $0;
    $809 = HEAP32[$808>>2]|0;
    $810 = ($809|0)==(15);
    if ($810) {
     label = 273;
    } else {
     $828 = $0;
     $829 = HEAP32[$828>>2]|0;
     $830 = ($829|0)!=(5);
     if ($830) {
      $831 = $0;
      $832 = (($831) + 12|0);
      $833 = HEAP32[$832>>2]|0;
      $834 = HEAP32[$833>>2]|0;
      $835 = ($834|0)==(45);
      if ($835) {
       $836 = $0;
       $837 = (($836) + 8|0);
       $838 = HEAP32[$837>>2]|0;
       _cpu9900_node_generate($838,0);
       $839 = $0;
       $840 = (($839) + 12|0);
       $841 = HEAP32[$840>>2]|0;
       _node_get_label($841,4);
      } else {
       label = 280;
      }
     } else {
      label = 280;
     }
     if ((label|0) == 280) {
      $842 = $0;
      $843 = (($842) + 12|0);
      $844 = HEAP32[$843>>2]|0;
      _cpu9900_node_generate($844,0);
      _cpu9900_1op(70936,70944);
      _cpu9900_2op(69472,69464,70952);
      $845 = $0;
      $846 = (($845) + 8|0);
      $847 = HEAP32[$846>>2]|0;
      _cpu9900_node_generate($847,0);
      _cpu9900_2op(69472,70960,70688);
      (_strcpy((33104|0),(70688|0))|0);
     }
    }
   }
   if ((label|0) == 273) {
    $811 = $0;
    $812 = (($811) + 8|0);
    $813 = HEAP32[$812>>2]|0;
    $814 = HEAP32[$813>>2]|0;
    $815 = ($814|0)==(45);
    if ($815) {
     $816 = $0;
     $817 = (($816) + 12|0);
     $818 = HEAP32[$817>>2]|0;
     _cpu9900_node_generate($818,0);
     $819 = $0;
     $820 = (($819) + 8|0);
     $821 = HEAP32[$820>>2]|0;
     _node_get_label($821,4);
    } else {
     $822 = $0;
     $823 = (($822) + 8|0);
     $824 = HEAP32[$823>>2]|0;
     _cpu9900_node_generate($824,0);
     _cpu9900_1op(70936,70944);
     _cpu9900_2op(69472,69464,70952);
     $825 = $0;
     $826 = (($825) + 12|0);
     $827 = HEAP32[$826>>2]|0;
     _cpu9900_node_generate($827,0);
     _cpu9900_2op(69472,70960,70688);
     (_strcpy((33104|0),(70688|0))|0);
    }
   }
   $848 = $0;
   $849 = HEAP32[$848>>2]|0;
   $850 = ($849|0)==(1);
   if ($850) {
    _cpu9900_2op(71128,33104,69464);
    $851 = $1;
    $852 = ($851|0)!=(0);
    if ($852) {
     HEAP32[34168>>2] = 1;
     $853 = $1;
     HEAP32[$vararg_buffer103>>2] = $853;
     (_sprintf(33104,70976,$vararg_buffer103)|0);
     $854 = HEAP32[1688>>2]|0;
     $855 = (($854) + 1)|0;
     HEAP32[1688>>2] = $855;
     HEAP32[$vararg_buffer106>>2] = $854;
     (_sprintf(((33104 + 100|0)),70984,$vararg_buffer106)|0);
     _cpu9900_1op(70992,((33104 + 100|0)));
     _cpu9900_1op(71000,33104);
     _cpu9900_label(((33104 + 100|0)));
    }
   } else {
    $856 = $0;
    $857 = HEAP32[$856>>2]|0;
    $858 = ($857|0)==(3);
    if ($858) {
     _cpu9900_2op(71008,33104,69464);
     $859 = $1;
     $860 = ($859|0)!=(0);
     if ($860) {
      HEAP32[34168>>2] = 1;
      $861 = $1;
      HEAP32[$vararg_buffer109>>2] = $861;
      (_sprintf(33104,70976,$vararg_buffer109)|0);
      $862 = HEAP32[1688>>2]|0;
      $863 = (($862) + 1)|0;
      HEAP32[1688>>2] = $863;
      HEAP32[$vararg_buffer112>>2] = $862;
      (_sprintf(((33104 + 100|0)),70984,$vararg_buffer112)|0);
      _cpu9900_1op(70992,((33104 + 100|0)));
      _cpu9900_1op(71000,33104);
      _cpu9900_label(((33104 + 100|0)));
     }
    } else {
     $864 = $0;
     $865 = HEAP32[$864>>2]|0;
     $866 = ($865|0)==(5);
     if ($866) {
      _cpu9900_1op(70608,33104);
      _cpu9900_2op(71136,33104,69464);
      $867 = $1;
      $868 = ($867|0)!=(0);
      if ($868) {
       HEAP32[34168>>2] = 1;
       $869 = $1;
       HEAP32[$vararg_buffer115>>2] = $869;
       (_sprintf(33104,70976,$vararg_buffer115)|0);
       $870 = HEAP32[1688>>2]|0;
       $871 = (($870) + 1)|0;
       HEAP32[1688>>2] = $871;
       HEAP32[$vararg_buffer118>>2] = $870;
       (_sprintf(((33104 + 100|0)),70984,$vararg_buffer118)|0);
       _cpu9900_1op(70992,((33104 + 100|0)));
       _cpu9900_1op(71000,33104);
       _cpu9900_label(((33104 + 100|0)));
      }
     } else {
      $872 = $0;
      $873 = HEAP32[$872>>2]|0;
      $874 = ($873|0)==(7);
      if ($874) {
       _cpu9900_2op(71144,69464,33104);
       $875 = $1;
       $876 = ($875|0)!=(0);
       if ($876) {
        HEAP32[34168>>2] = 1;
        $877 = $1;
        HEAP32[$vararg_buffer121>>2] = $877;
        (_sprintf(33104,70976,$vararg_buffer121)|0);
        $878 = HEAP32[1688>>2]|0;
        $879 = (($878) + 1)|0;
        HEAP32[1688>>2] = $879;
        HEAP32[$vararg_buffer124>>2] = $878;
        (_sprintf(((33104 + 100|0)),70984,$vararg_buffer124)|0);
        _cpu9900_1op(71032,((33104 + 100|0)));
        _cpu9900_1op(71000,33104);
        _cpu9900_label(((33104 + 100|0)));
       } else {
        $880 = HEAP32[1688>>2]|0;
        $881 = (($880) + 1)|0;
        HEAP32[1688>>2] = $881;
        HEAP32[$vararg_buffer127>>2] = $880;
        (_sprintf(33104,70984,$vararg_buffer127)|0);
        _cpu9900_1op(71032,33104);
        _cpu9900_1op(69480,69464);
        _cpu9900_1op(71040,71048);
        _cpu9900_label(33104);
        _cpu9900_1op(69488,69464);
        _cpu9900_empty();
       }
      } else {
       $882 = $0;
       $883 = HEAP32[$882>>2]|0;
       $884 = ($883|0)==(9);
       if ($884) {
        _cpu9900_2op(71144,69464,33104);
        $885 = $1;
        $886 = ($885|0)!=(0);
        if ($886) {
         HEAP32[34168>>2] = 1;
         $887 = $1;
         HEAP32[$vararg_buffer130>>2] = $887;
         (_sprintf(33104,70976,$vararg_buffer130)|0);
         $888 = HEAP32[1688>>2]|0;
         $889 = (($888) + 1)|0;
         HEAP32[1688>>2] = $889;
         HEAP32[$vararg_buffer133>>2] = $888;
         (_sprintf(((33104 + 100|0)),70984,$vararg_buffer133)|0);
         _cpu9900_1op(70992,((33104 + 100|0)));
         _cpu9900_1op(71000,33104);
         _cpu9900_label(((33104 + 100|0)));
        } else {
         $890 = HEAP32[1688>>2]|0;
         $891 = (($890) + 1)|0;
         HEAP32[1688>>2] = $891;
         HEAP32[$vararg_buffer136>>2] = $890;
         (_sprintf(33104,70984,$vararg_buffer136)|0);
         _cpu9900_1op(70992,33104);
         _cpu9900_1op(69480,69464);
         _cpu9900_1op(71040,71048);
         _cpu9900_label(33104);
         _cpu9900_1op(69488,69464);
         _cpu9900_empty();
        }
       } else {
        $892 = $0;
        $893 = HEAP32[$892>>2]|0;
        $894 = ($893|0)==(11);
        do {
         if ($894) {
          label = 306;
         } else {
          $895 = $0;
          $896 = HEAP32[$895>>2]|0;
          $897 = ($896|0)==(15);
          if ($897) {
           label = 306;
           break;
          }
          $905 = $0;
          $906 = HEAP32[$905>>2]|0;
          $907 = ($906|0)==(13);
          do {
           if ($907) {
            label = 312;
           } else {
            $908 = $0;
            $909 = HEAP32[$908>>2]|0;
            $910 = ($909|0)==(17);
            if ($910) {
             label = 312;
             break;
            }
            $918 = $0;
            $919 = HEAP32[$918>>2]|0;
            $920 = ($919|0)==(27);
            if ($920) {
             _cpu9900_2op(71152,33104,69464);
            } else {
             $921 = $0;
             $922 = HEAP32[$921>>2]|0;
             $923 = ($922|0)==(29);
             if ($923) {
              _cpu9900_2op(71160,33104,69464);
             } else {
              $924 = $0;
              $925 = HEAP32[$924>>2]|0;
              $926 = ($925|0)==(31);
              if ($926) {
               _cpu9900_2op(71168,33104,69464);
               _cpu9900_2op(69472,70688,69464);
              } else {
               $927 = $0;
               $928 = HEAP32[$927>>2]|0;
               $929 = ($928|0)==(33);
               if ($929) {
                _cpu9900_2op(69472,33104,71176);
                _cpu9900_2op(69472,69464,70688);
                _cpu9900_1op(69480,69464);
                _cpu9900_2op(71184,71176,69464);
               } else {
                $930 = $0;
                $931 = HEAP32[$930>>2]|0;
                $932 = ($931|0)==(35);
                if ($932) {
                 _cpu9900_2op(69472,33104,71176);
                 _cpu9900_2op(69472,69464,70688);
                 _cpu9900_1op(69480,69464);
                 _cpu9900_2op(71184,71176,69464);
                 _cpu9900_2op(69472,70688,69464);
                } else {
                 $933 = $0;
                 $934 = HEAP32[$933>>2]|0;
                 $935 = ($934|0)==(34);
                 if ($935) {
                  _cpu9900_2op(69472,33104,71176);
                  _cpu9900_2op(69472,69464,70688);
                  _cpu9900_1op(70560,70568);
                  _cpu9900_1op(70576,71192);
                 } else {
                  $936 = $0;
                  $937 = HEAP32[$936>>2]|0;
                  $938 = ($937|0)==(36);
                  if ($938) {
                   _cpu9900_2op(69472,33104,71176);
                   _cpu9900_2op(69472,69464,70688);
                   _cpu9900_1op(70560,70568);
                   _cpu9900_1op(70576,71200);
                  }
                 }
                }
               }
              }
             }
            }
           }
          } while(0);
          if ((label|0) == 312) {
           _cpu9900_2op(71144,69464,33104);
           $911 = $1;
           $912 = ($911|0)!=(0);
           if ($912) {
            HEAP32[34168>>2] = 1;
            $913 = $1;
            HEAP32[$vararg_buffer148>>2] = $913;
            (_sprintf(33104,70976,$vararg_buffer148)|0);
            $914 = HEAP32[1688>>2]|0;
            $915 = (($914) + 1)|0;
            HEAP32[1688>>2] = $915;
            HEAP32[$vararg_buffer151>>2] = $914;
            (_sprintf(((33104 + 100|0)),70984,$vararg_buffer151)|0);
            _cpu9900_1op(71064,((33104 + 100|0)));
            _cpu9900_1op(71000,33104);
            _cpu9900_label(((33104 + 100|0)));
           } else {
            $916 = HEAP32[1688>>2]|0;
            $917 = (($916) + 1)|0;
            HEAP32[1688>>2] = $917;
            HEAP32[$vararg_buffer154>>2] = $916;
            (_sprintf(33104,70984,$vararg_buffer154)|0);
            _cpu9900_1op(71064,33104);
            _cpu9900_1op(69480,69464);
            _cpu9900_1op(71040,71048);
            _cpu9900_label(33104);
            _cpu9900_1op(69488,69464);
            _cpu9900_empty();
           }
          }
         }
        } while(0);
        if ((label|0) == 306) {
         _cpu9900_2op(71144,69464,33104);
         $898 = $1;
         $899 = ($898|0)!=(0);
         if ($899) {
          HEAP32[34168>>2] = 1;
          $900 = $1;
          HEAP32[$vararg_buffer139>>2] = $900;
          (_sprintf(33104,70976,$vararg_buffer139)|0);
          $901 = HEAP32[1688>>2]|0;
          $902 = (($901) + 1)|0;
          HEAP32[1688>>2] = $902;
          HEAP32[$vararg_buffer142>>2] = $901;
          (_sprintf(((33104 + 100|0)),70984,$vararg_buffer142)|0);
          _cpu9900_1op(71056,((33104 + 100|0)));
          _cpu9900_1op(71000,33104);
          _cpu9900_label(((33104 + 100|0)));
         } else {
          $903 = HEAP32[1688>>2]|0;
          $904 = (($903) + 1)|0;
          HEAP32[1688>>2] = $904;
          HEAP32[$vararg_buffer145>>2] = $903;
          (_sprintf(33104,70984,$vararg_buffer145)|0);
          _cpu9900_1op(71056,33104);
          _cpu9900_1op(69480,69464);
          _cpu9900_1op(71040,71048);
          _cpu9900_label(33104);
          _cpu9900_1op(69488,69464);
          _cpu9900_empty();
         }
        }
       }
      }
     }
    }
   }
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function _isalnum($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isalpha($c)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $isdigittmp = (($c) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  $3 = $isdigit;
 } else {
  $3 = 1;
 }
 $2 = $3&1;
 STACKTOP = sp;return ($2|0);
}
function _isalpha($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c | 32;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 STACKTOP = sp;return ($3|0);
}
function _islower($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -97)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _toupper($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_islower($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c & 95;
 $$0 = $1 ? $c : $2;
 STACKTOP = sp;return ($$0|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 STACKTOP = sp;return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$026 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $w$0$lcssa = 0, $w$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 if ($1) {
  $6 = (_strlen(($s|0))|0);
  $7 = (($s) + ($6)|0);
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = $s;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L5: do {
  if ($4) {
   $$02$lcssa = $s;
  } else {
   $5 = $c&255;
   $$026 = $s;
   while(1) {
    $12 = HEAP8[$$026>>0]|0;
    $13 = ($12<<24>>24)==(0);
    if ($13) {
     $$0 = $$026;
     label = 13;
     break;
    }
    $14 = ($12<<24>>24)==($5<<24>>24);
    $9 = (($$026) + 1|0);
    if ($14) {
     $$0 = $$026;
     label = 13;
     break;
    }
    $8 = $9;
    $10 = $8 & 3;
    $11 = ($10|0)==(0);
    if ($11) {
     $$02$lcssa = $9;
     break L5;
    } else {
     $$026 = $9;
    }
   }
   if ((label|0) == 13) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $15 = Math_imul($0, 16843009)|0;
 $16 = HEAP32[$$02$lcssa>>2]|0;
 $17 = (($16) + -16843009)|0;
 $18 = $16 & -2139062144;
 $19 = $18 ^ -2139062144;
 $20 = $19 & $17;
 $21 = ($20|0)==(0);
 L15: do {
  if ($21) {
   $30 = $16;$w$03 = $$02$lcssa;
   while(1) {
    $29 = $30 ^ $15;
    $31 = (($29) + -16843009)|0;
    $32 = $29 & -2139062144;
    $33 = $32 ^ -2139062144;
    $34 = $33 & $31;
    $35 = ($34|0)==(0);
    $23 = (($w$03) + 4|0);
    if (!($35)) {
     $w$0$lcssa = $w$03;
     break L15;
    }
    $22 = HEAP32[$23>>2]|0;
    $24 = (($22) + -16843009)|0;
    $25 = $22 & -2139062144;
    $26 = $25 ^ -2139062144;
    $27 = $26 & $24;
    $28 = ($27|0)==(0);
    if ($28) {
     $30 = $22;$w$03 = $23;
    } else {
     $w$0$lcssa = $23;
     break;
    }
   }
  } else {
   $w$0$lcssa = $$02$lcssa;
  }
 } while(0);
 $36 = $c&255;
 $$1 = $w$0$lcssa;
 while(1) {
  $37 = HEAP8[$$1>>0]|0;
  $38 = ($37<<24>>24)==(0);
  $39 = ($37<<24>>24)==($36<<24>>24);
  $or$cond = $38 | $39;
  $40 = (($$1) + 1|0);
  if ($or$cond) {
   $$0 = $$1;
   break;
  } else {
   $$1 = $40;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$$i = 0, $$3$i = 0, $$4$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i25 = 0, $$pre$i25$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i26$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre57$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0;
 var $$sum$i14$i = 0, $$sum$i15$i = 0, $$sum$i18$i = 0, $$sum$i21$i = 0, $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i16$i = 0, $$sum1$i22$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0;
 var $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i24$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0;
 var $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i17$i = 0, $$sum2$i19$i = 0, $$sum2$i23$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0;
 var $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0;
 var $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0;
 var $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$025$i = 0, $K2$014$i$i = 0, $K8$052$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$013$i$i = 0;
 var $T$024$i = 0, $T$051$i$i = 0, $br$0$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $notlhs$i = 0, $notrhs$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond19$i = 0, $or$cond2$i = 0;
 var $or$cond49$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$not$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$329$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$$i = 0;
 var $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$228$i = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0;
 var $v$330$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[78096>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((78096 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((78096 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[78096>>2] = $22;
     } else {
      $23 = HEAP32[((78096 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((78096 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((78096 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((78096 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[78096>>2] = $74;
      } else {
       $75 = HEAP32[((78096 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = HEAP32[((78096 + 8|0))>>2]|0;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((78096 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((78096 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[78096>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[78096>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre = ((78096 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((78096 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((78096 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((78096 + 8|0))>>2] = $81;
     HEAP32[((78096 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((78096 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((78096 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((78096 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((78096 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((78096 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((78096 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((78096 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((78096 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = HEAP32[((78096 + 16|0))>>2]|0;
         $204 = ($201>>>0)<($203>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = (($R$1$i) + 16|0);
          HEAP32[$205>>2] = $201;
          $206 = (($201) + 24|0);
          HEAP32[$206>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $207 = (($v$0$i) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[((78096 + 16|0))>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = (($R$1$i) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = (($208) + 24|0);
         HEAP32[$213>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i) + ($5))|0;
      $216 = $215 | 3;
      $217 = (($v$0$i) + 4|0);
      HEAP32[$217>>2] = $216;
      $$sum4$i = (($215) + 4)|0;
      $218 = (($v$0$i) + ($$sum4$i)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = $219 | 1;
      HEAP32[$218>>2] = $220;
     } else {
      $221 = $5 | 3;
      $222 = (($v$0$i) + 4|0);
      HEAP32[$222>>2] = $221;
      $223 = $rsize$0$i | 1;
      $$sum$i35 = $5 | 4;
      $224 = (($v$0$i) + ($$sum$i35)|0);
      HEAP32[$224>>2] = $223;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $225 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$225>>2] = $rsize$0$i;
      $226 = HEAP32[((78096 + 8|0))>>2]|0;
      $227 = ($226|0)==(0);
      if (!($227)) {
       $228 = HEAP32[((78096 + 20|0))>>2]|0;
       $229 = $226 >>> 3;
       $230 = $229 << 1;
       $231 = ((78096 + ($230<<2)|0) + 40|0);
       $232 = HEAP32[78096>>2]|0;
       $233 = 1 << $229;
       $234 = $232 & $233;
       $235 = ($234|0)==(0);
       if ($235) {
        $236 = $232 | $233;
        HEAP32[78096>>2] = $236;
        $$sum2$pre$i = (($230) + 2)|0;
        $$pre$i = ((78096 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $231;
       } else {
        $$sum3$i = (($230) + 2)|0;
        $237 = ((78096 + ($$sum3$i<<2)|0) + 40|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = HEAP32[((78096 + 16|0))>>2]|0;
        $240 = ($238>>>0)<($239>>>0);
        if ($240) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $237;$F1$0$i = $238;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $241 = (($F1$0$i) + 12|0);
       HEAP32[$241>>2] = $228;
       $242 = (($228) + 8|0);
       HEAP32[$242>>2] = $F1$0$i;
       $243 = (($228) + 12|0);
       HEAP32[$243>>2] = $231;
      }
      HEAP32[((78096 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((78096 + 20|0))>>2] = $151;
     }
     $244 = (($v$0$i) + 8|0);
     $mem$0 = $244;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $245 = ($bytes>>>0)>(4294967231);
   if ($245) {
    $nb$0 = -1;
   } else {
    $246 = (($bytes) + 11)|0;
    $247 = $246 & -8;
    $248 = HEAP32[((78096 + 4|0))>>2]|0;
    $249 = ($248|0)==(0);
    if ($249) {
     $nb$0 = $247;
    } else {
     $250 = (0 - ($247))|0;
     $251 = $246 >>> 8;
     $252 = ($251|0)==(0);
     if ($252) {
      $idx$0$i = 0;
     } else {
      $253 = ($247>>>0)>(16777215);
      if ($253) {
       $idx$0$i = 31;
      } else {
       $254 = (($251) + 1048320)|0;
       $255 = $254 >>> 16;
       $256 = $255 & 8;
       $257 = $251 << $256;
       $258 = (($257) + 520192)|0;
       $259 = $258 >>> 16;
       $260 = $259 & 4;
       $261 = $260 | $256;
       $262 = $257 << $260;
       $263 = (($262) + 245760)|0;
       $264 = $263 >>> 16;
       $265 = $264 & 2;
       $266 = $261 | $265;
       $267 = (14 - ($266))|0;
       $268 = $262 << $265;
       $269 = $268 >>> 15;
       $270 = (($267) + ($269))|0;
       $271 = $270 << 1;
       $272 = (($270) + 7)|0;
       $273 = $247 >>> $272;
       $274 = $273 & 1;
       $275 = $274 | $271;
       $idx$0$i = $275;
      }
     }
     $276 = ((78096 + ($idx$0$i<<2)|0) + 304|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = ($277|0)==(0|0);
     L126: do {
      if ($278) {
       $rsize$2$i = $250;$t$1$i = 0;$v$2$i = 0;
      } else {
       $279 = ($idx$0$i|0)==(31);
       if ($279) {
        $283 = 0;
       } else {
        $280 = $idx$0$i >>> 1;
        $281 = (25 - ($280))|0;
        $283 = $281;
       }
       $282 = $247 << $283;
       $rsize$0$i15 = $250;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $277;$v$0$i16 = 0;
       while(1) {
        $284 = (($t$0$i14) + 4|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = $285 & -8;
        $287 = (($286) - ($247))|0;
        $288 = ($287>>>0)<($rsize$0$i15>>>0);
        if ($288) {
         $289 = ($286|0)==($247|0);
         if ($289) {
          $rsize$2$i = $287;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L126;
         } else {
          $rsize$1$i = $287;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $290 = (($t$0$i14) + 20|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = $sizebits$0$i >>> 31;
        $293 = ((($t$0$i14) + ($292<<2)|0) + 16|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = ($291|0)==(0|0);
        $296 = ($291|0)==($294|0);
        $or$cond$i = $295 | $296;
        $rst$1$i = $or$cond$i ? $rst$0$i : $291;
        $297 = ($294|0)==(0|0);
        $298 = $sizebits$0$i << 1;
        if ($297) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $298;$t$0$i14 = $294;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $299 = ($t$1$i|0)==(0|0);
     $300 = ($v$2$i|0)==(0|0);
     $or$cond19$i = $299 & $300;
     if ($or$cond19$i) {
      $301 = 2 << $idx$0$i;
      $302 = (0 - ($301))|0;
      $303 = $301 | $302;
      $304 = $248 & $303;
      $305 = ($304|0)==(0);
      if ($305) {
       $nb$0 = $247;
       break;
      }
      $306 = (0 - ($304))|0;
      $307 = $304 & $306;
      $308 = (($307) + -1)|0;
      $309 = $308 >>> 12;
      $310 = $309 & 16;
      $311 = $308 >>> $310;
      $312 = $311 >>> 5;
      $313 = $312 & 8;
      $314 = $313 | $310;
      $315 = $311 >>> $313;
      $316 = $315 >>> 2;
      $317 = $316 & 4;
      $318 = $314 | $317;
      $319 = $315 >>> $317;
      $320 = $319 >>> 1;
      $321 = $320 & 2;
      $322 = $318 | $321;
      $323 = $319 >>> $321;
      $324 = $323 >>> 1;
      $325 = $324 & 1;
      $326 = $322 | $325;
      $327 = $323 >>> $325;
      $328 = (($326) + ($327))|0;
      $329 = ((78096 + ($328<<2)|0) + 304|0);
      $330 = HEAP32[$329>>2]|0;
      $t$2$ph$i = $330;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $331 = ($t$2$ph$i|0)==(0|0);
     if ($331) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$329$i = $rsize$2$i;$t$228$i = $t$2$ph$i;$v$330$i = $v$2$i;
      while(1) {
       $332 = (($t$228$i) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($247))|0;
       $336 = ($335>>>0)<($rsize$329$i>>>0);
       $$rsize$3$i = $336 ? $335 : $rsize$329$i;
       $t$2$v$3$i = $336 ? $t$228$i : $v$330$i;
       $337 = (($t$228$i) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $338;$v$330$i = $t$2$v$3$i;
        continue;
       }
       $340 = (($t$228$i) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $341;$v$330$i = $t$2$v$3$i;
       }
      }
     }
     $343 = ($v$3$lcssa$i|0)==(0|0);
     if ($343) {
      $nb$0 = $247;
     } else {
      $344 = HEAP32[((78096 + 8|0))>>2]|0;
      $345 = (($344) - ($247))|0;
      $346 = ($rsize$3$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[((78096 + 16|0))>>2]|0;
       $348 = ($v$3$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($v$3$lcssa$i) + ($247)|0);
       $350 = ($v$3$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = (($v$3$lcssa$i) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = (($v$3$lcssa$i) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($v$3$lcssa$i|0);
       do {
        if ($355) {
         $365 = (($v$3$lcssa$i) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = (($v$3$lcssa$i) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $369;$RP$0$i17 = $368;
          }
         } else {
          $R$0$i18 = $366;$RP$0$i17 = $365;
         }
         while(1) {
          $371 = (($R$0$i18) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $R$0$i18 = $372;$RP$0$i17 = $371;
           continue;
          }
          $374 = (($R$0$i18) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $R$0$i18 = $375;$RP$0$i17 = $374;
          }
         }
         $377 = ($RP$0$i17>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $356 = (($v$3$lcssa$i) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = (($357) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($v$3$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = (($354) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($v$3$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $R$1$i20 = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if (!($378)) {
         $379 = (($v$3$lcssa$i) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = ((78096 + ($380<<2)|0) + 304|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($v$3$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = HEAP32[((78096 + 4|0))>>2]|0;
           $387 = $386 & $385;
           HEAP32[((78096 + 4|0))>>2] = $387;
           break;
          }
         } else {
          $388 = HEAP32[((78096 + 16|0))>>2]|0;
          $389 = ($352>>>0)<($388>>>0);
          if ($389) {
           _abort();
           // unreachable;
          }
          $390 = (($352) + 16|0);
          $391 = HEAP32[$390>>2]|0;
          $392 = ($391|0)==($v$3$lcssa$i|0);
          if ($392) {
           HEAP32[$390>>2] = $R$1$i20;
          } else {
           $393 = (($352) + 20|0);
           HEAP32[$393>>2] = $R$1$i20;
          }
          $394 = ($R$1$i20|0)==(0|0);
          if ($394) {
           break;
          }
         }
         $395 = HEAP32[((78096 + 16|0))>>2]|0;
         $396 = ($R$1$i20>>>0)<($395>>>0);
         if ($396) {
          _abort();
          // unreachable;
         }
         $397 = (($R$1$i20) + 24|0);
         HEAP32[$397>>2] = $352;
         $398 = (($v$3$lcssa$i) + 16|0);
         $399 = HEAP32[$398>>2]|0;
         $400 = ($399|0)==(0|0);
         do {
          if (!($400)) {
           $401 = HEAP32[((78096 + 16|0))>>2]|0;
           $402 = ($399>>>0)<($401>>>0);
           if ($402) {
            _abort();
            // unreachable;
           } else {
            $403 = (($R$1$i20) + 16|0);
            HEAP32[$403>>2] = $399;
            $404 = (($399) + 24|0);
            HEAP32[$404>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $405 = (($v$3$lcssa$i) + 20|0);
         $406 = HEAP32[$405>>2]|0;
         $407 = ($406|0)==(0|0);
         if (!($407)) {
          $408 = HEAP32[((78096 + 16|0))>>2]|0;
          $409 = ($406>>>0)<($408>>>0);
          if ($409) {
           _abort();
           // unreachable;
          } else {
           $410 = (($R$1$i20) + 20|0);
           HEAP32[$410>>2] = $406;
           $411 = (($406) + 24|0);
           HEAP32[$411>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $412 = ($rsize$3$lcssa$i>>>0)<(16);
       L204: do {
        if ($412) {
         $413 = (($rsize$3$lcssa$i) + ($247))|0;
         $414 = $413 | 3;
         $415 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$415>>2] = $414;
         $$sum18$i = (($413) + 4)|0;
         $416 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $417 = HEAP32[$416>>2]|0;
         $418 = $417 | 1;
         HEAP32[$416>>2] = $418;
        } else {
         $419 = $247 | 3;
         $420 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$420>>2] = $419;
         $421 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $247 | 4;
         $422 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$422>>2] = $421;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($247))|0;
         $423 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$423>>2] = $rsize$3$lcssa$i;
         $424 = $rsize$3$lcssa$i >>> 3;
         $425 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($425) {
          $426 = $424 << 1;
          $427 = ((78096 + ($426<<2)|0) + 40|0);
          $428 = HEAP32[78096>>2]|0;
          $429 = 1 << $424;
          $430 = $428 & $429;
          $431 = ($430|0)==(0);
          do {
           if ($431) {
            $432 = $428 | $429;
            HEAP32[78096>>2] = $432;
            $$sum14$pre$i = (($426) + 2)|0;
            $$pre$i25 = ((78096 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $427;
           } else {
            $$sum17$i = (($426) + 2)|0;
            $433 = ((78096 + ($$sum17$i<<2)|0) + 40|0);
            $434 = HEAP32[$433>>2]|0;
            $435 = HEAP32[((78096 + 16|0))>>2]|0;
            $436 = ($434>>>0)<($435>>>0);
            if (!($436)) {
             $$pre$phi$i26Z2D = $433;$F5$0$i = $434;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $349;
          $437 = (($F5$0$i) + 12|0);
          HEAP32[$437>>2] = $349;
          $$sum15$i = (($247) + 8)|0;
          $438 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$438>>2] = $F5$0$i;
          $$sum16$i = (($247) + 12)|0;
          $439 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$439>>2] = $427;
          break;
         }
         $440 = $rsize$3$lcssa$i >>> 8;
         $441 = ($440|0)==(0);
         if ($441) {
          $I7$0$i = 0;
         } else {
          $442 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($442) {
           $I7$0$i = 31;
          } else {
           $443 = (($440) + 1048320)|0;
           $444 = $443 >>> 16;
           $445 = $444 & 8;
           $446 = $440 << $445;
           $447 = (($446) + 520192)|0;
           $448 = $447 >>> 16;
           $449 = $448 & 4;
           $450 = $449 | $445;
           $451 = $446 << $449;
           $452 = (($451) + 245760)|0;
           $453 = $452 >>> 16;
           $454 = $453 & 2;
           $455 = $450 | $454;
           $456 = (14 - ($455))|0;
           $457 = $451 << $454;
           $458 = $457 >>> 15;
           $459 = (($456) + ($458))|0;
           $460 = $459 << 1;
           $461 = (($459) + 7)|0;
           $462 = $rsize$3$lcssa$i >>> $461;
           $463 = $462 & 1;
           $464 = $463 | $460;
           $I7$0$i = $464;
          }
         }
         $465 = ((78096 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($247) + 28)|0;
         $466 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$466>>2] = $I7$0$i;
         $$sum3$i27 = (($247) + 16)|0;
         $467 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($247) + 20)|0;
         $468 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$468>>2] = 0;
         HEAP32[$467>>2] = 0;
         $469 = HEAP32[((78096 + 4|0))>>2]|0;
         $470 = 1 << $I7$0$i;
         $471 = $469 & $470;
         $472 = ($471|0)==(0);
         if ($472) {
          $473 = $469 | $470;
          HEAP32[((78096 + 4|0))>>2] = $473;
          HEAP32[$465>>2] = $349;
          $$sum5$i = (($247) + 24)|0;
          $474 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$474>>2] = $465;
          $$sum6$i = (($247) + 12)|0;
          $475 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$475>>2] = $349;
          $$sum7$i = (($247) + 8)|0;
          $476 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$476>>2] = $349;
          break;
         }
         $477 = HEAP32[$465>>2]|0;
         $478 = ($I7$0$i|0)==(31);
         if ($478) {
          $486 = 0;
         } else {
          $479 = $I7$0$i >>> 1;
          $480 = (25 - ($479))|0;
          $486 = $480;
         }
         $481 = (($477) + 4|0);
         $482 = HEAP32[$481>>2]|0;
         $483 = $482 & -8;
         $484 = ($483|0)==($rsize$3$lcssa$i|0);
         L224: do {
          if ($484) {
           $T$0$lcssa$i = $477;
          } else {
           $485 = $rsize$3$lcssa$i << $486;
           $K12$025$i = $485;$T$024$i = $477;
           while(1) {
            $493 = $K12$025$i >>> 31;
            $494 = ((($T$024$i) + ($493<<2)|0) + 16|0);
            $489 = HEAP32[$494>>2]|0;
            $495 = ($489|0)==(0|0);
            if ($495) {
             break;
            }
            $487 = $K12$025$i << 1;
            $488 = (($489) + 4|0);
            $490 = HEAP32[$488>>2]|0;
            $491 = $490 & -8;
            $492 = ($491|0)==($rsize$3$lcssa$i|0);
            if ($492) {
             $T$0$lcssa$i = $489;
             break L224;
            } else {
             $K12$025$i = $487;$T$024$i = $489;
            }
           }
           $496 = HEAP32[((78096 + 16|0))>>2]|0;
           $497 = ($494>>>0)<($496>>>0);
           if ($497) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$494>>2] = $349;
            $$sum11$i = (($247) + 24)|0;
            $498 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$498>>2] = $T$024$i;
            $$sum12$i = (($247) + 12)|0;
            $499 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$499>>2] = $349;
            $$sum13$i = (($247) + 8)|0;
            $500 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$500>>2] = $349;
            break L204;
           }
          }
         } while(0);
         $501 = (($T$0$lcssa$i) + 8|0);
         $502 = HEAP32[$501>>2]|0;
         $503 = HEAP32[((78096 + 16|0))>>2]|0;
         $504 = ($T$0$lcssa$i>>>0)<($503>>>0);
         if ($504) {
          _abort();
          // unreachable;
         }
         $505 = ($502>>>0)<($503>>>0);
         if ($505) {
          _abort();
          // unreachable;
         } else {
          $506 = (($502) + 12|0);
          HEAP32[$506>>2] = $349;
          HEAP32[$501>>2] = $349;
          $$sum8$i = (($247) + 8)|0;
          $507 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$507>>2] = $502;
          $$sum9$i = (($247) + 12)|0;
          $508 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$508>>2] = $T$0$lcssa$i;
          $$sum10$i = (($247) + 24)|0;
          $509 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$509>>2] = 0;
          break;
         }
        }
       } while(0);
       $510 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $510;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $247;
      }
     }
    }
   }
  }
 } while(0);
 $511 = HEAP32[((78096 + 8|0))>>2]|0;
 $512 = ($nb$0>>>0)>($511>>>0);
 if (!($512)) {
  $513 = (($511) - ($nb$0))|0;
  $514 = HEAP32[((78096 + 20|0))>>2]|0;
  $515 = ($513>>>0)>(15);
  if ($515) {
   $516 = (($514) + ($nb$0)|0);
   HEAP32[((78096 + 20|0))>>2] = $516;
   HEAP32[((78096 + 8|0))>>2] = $513;
   $517 = $513 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $518 = (($514) + ($$sum2)|0);
   HEAP32[$518>>2] = $517;
   $519 = (($514) + ($511)|0);
   HEAP32[$519>>2] = $513;
   $520 = $nb$0 | 3;
   $521 = (($514) + 4|0);
   HEAP32[$521>>2] = $520;
  } else {
   HEAP32[((78096 + 8|0))>>2] = 0;
   HEAP32[((78096 + 20|0))>>2] = 0;
   $522 = $511 | 3;
   $523 = (($514) + 4|0);
   HEAP32[$523>>2] = $522;
   $$sum1 = (($511) + 4)|0;
   $524 = (($514) + ($$sum1)|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $525 | 1;
   HEAP32[$524>>2] = $526;
  }
  $527 = (($514) + 8|0);
  $mem$0 = $527;
  STACKTOP = sp;return ($mem$0|0);
 }
 $528 = HEAP32[((78096 + 12|0))>>2]|0;
 $529 = ($nb$0>>>0)<($528>>>0);
 if ($529) {
  $530 = (($528) - ($nb$0))|0;
  HEAP32[((78096 + 12|0))>>2] = $530;
  $531 = HEAP32[((78096 + 24|0))>>2]|0;
  $532 = (($531) + ($nb$0)|0);
  HEAP32[((78096 + 24|0))>>2] = $532;
  $533 = $530 | 1;
  $$sum = (($nb$0) + 4)|0;
  $534 = (($531) + ($$sum)|0);
  HEAP32[$534>>2] = $533;
  $535 = $nb$0 | 3;
  $536 = (($531) + 4|0);
  HEAP32[$536>>2] = $535;
  $537 = (($531) + 8|0);
  $mem$0 = $537;
  STACKTOP = sp;return ($mem$0|0);
 }
 $538 = HEAP32[78568>>2]|0;
 $539 = ($538|0)==(0);
 do {
  if ($539) {
   $540 = (_sysconf(30)|0);
   $541 = (($540) + -1)|0;
   $542 = $541 & $540;
   $543 = ($542|0)==(0);
   if ($543) {
    HEAP32[((78568 + 8|0))>>2] = $540;
    HEAP32[((78568 + 4|0))>>2] = $540;
    HEAP32[((78568 + 12|0))>>2] = -1;
    HEAP32[((78568 + 16|0))>>2] = -1;
    HEAP32[((78568 + 20|0))>>2] = 0;
    HEAP32[((78096 + 444|0))>>2] = 0;
    $544 = (_time((0|0))|0);
    $545 = $544 & -16;
    $546 = $545 ^ 1431655768;
    HEAP32[78568>>2] = $546;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $547 = (($nb$0) + 48)|0;
 $548 = HEAP32[((78568 + 8|0))>>2]|0;
 $549 = (($nb$0) + 47)|0;
 $550 = (($548) + ($549))|0;
 $551 = (0 - ($548))|0;
 $552 = $550 & $551;
 $553 = ($552>>>0)>($nb$0>>>0);
 if (!($553)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $554 = HEAP32[((78096 + 440|0))>>2]|0;
 $555 = ($554|0)==(0);
 if (!($555)) {
  $556 = HEAP32[((78096 + 432|0))>>2]|0;
  $557 = (($556) + ($552))|0;
  $558 = ($557>>>0)<=($556>>>0);
  $559 = ($557>>>0)>($554>>>0);
  $or$cond1$i = $558 | $559;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $560 = HEAP32[((78096 + 444|0))>>2]|0;
 $561 = $560 & 4;
 $562 = ($561|0)==(0);
 L269: do {
  if ($562) {
   $563 = HEAP32[((78096 + 24|0))>>2]|0;
   $564 = ($563|0)==(0|0);
   L271: do {
    if ($564) {
     label = 182;
    } else {
     $sp$0$i$i = ((78096 + 448|0));
     while(1) {
      $565 = HEAP32[$sp$0$i$i>>2]|0;
      $566 = ($565>>>0)>($563>>>0);
      if (!($566)) {
       $567 = (($sp$0$i$i) + 4|0);
       $568 = HEAP32[$567>>2]|0;
       $569 = (($565) + ($568)|0);
       $570 = ($569>>>0)>($563>>>0);
       if ($570) {
        break;
       }
      }
      $571 = (($sp$0$i$i) + 8|0);
      $572 = HEAP32[$571>>2]|0;
      $573 = ($572|0)==(0|0);
      if ($573) {
       label = 182;
       break L271;
      } else {
       $sp$0$i$i = $572;
      }
     }
     $574 = ($sp$0$i$i|0)==(0|0);
     if ($574) {
      label = 182;
     } else {
      $597 = HEAP32[((78096 + 12|0))>>2]|0;
      $598 = (($550) - ($597))|0;
      $599 = $598 & $551;
      $600 = ($599>>>0)<(2147483647);
      if ($600) {
       $601 = (_sbrk(($599|0))|0);
       $602 = HEAP32[$sp$0$i$i>>2]|0;
       $603 = HEAP32[$567>>2]|0;
       $604 = (($602) + ($603)|0);
       $605 = ($601|0)==($604|0);
       $$3$i = $605 ? $599 : 0;
       $$4$i = $605 ? $601 : (-1);
       $br$0$i = $601;$ssize$1$i = $599;$tbase$0$i = $$4$i;$tsize$0$i = $$3$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 182) {
     $575 = (_sbrk(0)|0);
     $576 = ($575|0)==((-1)|0);
     if ($576) {
      $tsize$0323841$i = 0;
     } else {
      $577 = $575;
      $578 = HEAP32[((78568 + 4|0))>>2]|0;
      $579 = (($578) + -1)|0;
      $580 = $579 & $577;
      $581 = ($580|0)==(0);
      if ($581) {
       $ssize$0$i = $552;
      } else {
       $582 = (($579) + ($577))|0;
       $583 = (0 - ($578))|0;
       $584 = $582 & $583;
       $585 = (($552) - ($577))|0;
       $586 = (($585) + ($584))|0;
       $ssize$0$i = $586;
      }
      $587 = HEAP32[((78096 + 432|0))>>2]|0;
      $588 = (($587) + ($ssize$0$i))|0;
      $589 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $590 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $589 & $590;
      if ($or$cond$i29) {
       $591 = HEAP32[((78096 + 440|0))>>2]|0;
       $592 = ($591|0)==(0);
       if (!($592)) {
        $593 = ($588>>>0)<=($587>>>0);
        $594 = ($588>>>0)>($591>>>0);
        $or$cond2$i = $593 | $594;
        if ($or$cond2$i) {
         $tsize$0323841$i = 0;
         break;
        }
       }
       $595 = (_sbrk(($ssize$0$i|0))|0);
       $596 = ($595|0)==($575|0);
       $ssize$0$$i = $596 ? $ssize$0$i : 0;
       $$$i = $596 ? $575 : (-1);
       $br$0$i = $595;$ssize$1$i = $ssize$0$i;$tbase$0$i = $$$i;$tsize$0$i = $ssize$0$$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   L291: do {
    if ((label|0) == 191) {
     $606 = (0 - ($ssize$1$i))|0;
     $607 = ($tbase$0$i|0)==((-1)|0);
     if (!($607)) {
      $tbase$247$i = $tbase$0$i;$tsize$246$i = $tsize$0$i;
      label = 202;
      break L269;
     }
     $608 = ($br$0$i|0)!=((-1)|0);
     $609 = ($ssize$1$i>>>0)<(2147483647);
     $or$cond5$i = $608 & $609;
     $610 = ($ssize$1$i>>>0)<($547>>>0);
     $or$cond6$i = $or$cond5$i & $610;
     do {
      if ($or$cond6$i) {
       $611 = HEAP32[((78568 + 8|0))>>2]|0;
       $612 = (($549) - ($ssize$1$i))|0;
       $613 = (($612) + ($611))|0;
       $614 = (0 - ($611))|0;
       $615 = $613 & $614;
       $616 = ($615>>>0)<(2147483647);
       if ($616) {
        $617 = (_sbrk(($615|0))|0);
        $618 = ($617|0)==((-1)|0);
        if ($618) {
         (_sbrk(($606|0))|0);
         $tsize$0323841$i = $tsize$0$i;
         break L291;
        } else {
         $619 = (($615) + ($ssize$1$i))|0;
         $ssize$2$i = $619;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$i;
       }
      } else {
       $ssize$2$i = $ssize$1$i;
      }
     } while(0);
     $620 = ($br$0$i|0)==((-1)|0);
     if ($620) {
      $tsize$0323841$i = $tsize$0$i;
     } else {
      $tbase$247$i = $br$0$i;$tsize$246$i = $ssize$2$i;
      label = 202;
      break L269;
     }
    }
   } while(0);
   $621 = HEAP32[((78096 + 444|0))>>2]|0;
   $622 = $621 | 4;
   HEAP32[((78096 + 444|0))>>2] = $622;
   $tsize$1$i = $tsize$0323841$i;
   label = 199;
  } else {
   $tsize$1$i = 0;
   label = 199;
  }
 } while(0);
 if ((label|0) == 199) {
  $623 = ($552>>>0)<(2147483647);
  if ($623) {
   $624 = (_sbrk(($552|0))|0);
   $625 = (_sbrk(0)|0);
   $notlhs$i = ($624|0)!=((-1)|0);
   $notrhs$i = ($625|0)!=((-1)|0);
   $or$cond8$not$i = $notrhs$i & $notlhs$i;
   $626 = ($624>>>0)<($625>>>0);
   $or$cond9$i = $or$cond8$not$i & $626;
   if ($or$cond9$i) {
    $627 = $625;
    $628 = $624;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$247$i = $624;$tsize$246$i = $$tsize$1$i;
     label = 202;
    }
   }
  }
 }
 if ((label|0) == 202) {
  $632 = HEAP32[((78096 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$246$i))|0;
  HEAP32[((78096 + 432|0))>>2] = $633;
  $634 = HEAP32[((78096 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((78096 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((78096 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L311: do {
   if ($637) {
    $638 = HEAP32[((78096 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$247$i>>>0)<($638>>>0);
    $or$cond10$i = $639 | $640;
    if ($or$cond10$i) {
     HEAP32[((78096 + 16|0))>>2] = $tbase$247$i;
    }
    HEAP32[((78096 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((78096 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((78096 + 460|0))>>2] = 0;
    $641 = HEAP32[78568>>2]|0;
    HEAP32[((78096 + 36|0))>>2] = $641;
    HEAP32[((78096 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((78096 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((78096 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((78096 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$246$i) + -40)|0;
    $648 = (($tbase$247$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$247$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((78096 + 24|0))>>2] = $654;
    HEAP32[((78096 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i14$i = (($655) + 4)|0;
    $658 = (($tbase$247$i) + ($$sum$i14$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$246$i) + -36)|0;
    $659 = (($tbase$247$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((78568 + 16|0))>>2]|0;
    HEAP32[((78096 + 28|0))>>2] = $660;
   } else {
    $sp$075$i = ((78096 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$075$i>>2]|0;
     $662 = (($sp$075$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$247$i|0)==($664|0);
     if ($665) {
      label = 214;
      break;
     }
     $666 = (($sp$075$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$075$i = $667;
     }
    }
    if ((label|0) == 214) {
     $669 = (($sp$075$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$247$i>>>0);
      $or$cond49$i = $673 & $674;
      if ($or$cond49$i) {
       $675 = (($663) + ($tsize$246$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((78096 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$246$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((78096 + 24|0))>>2] = $684;
       HEAP32[((78096 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i18$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i18$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i19$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i19$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((78568 + 16|0))>>2]|0;
       HEAP32[((78096 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((78096 + 16|0))>>2]|0;
    $692 = ($tbase$247$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((78096 + 16|0))>>2] = $tbase$247$i;
    }
    $693 = (($tbase$247$i) + ($tsize$246$i)|0);
    $sp$168$i = ((78096 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$168$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 224;
      break;
     }
     $696 = (($sp$168$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$168$i = $697;
     }
    }
    if ((label|0) == 224) {
     $699 = (($sp$168$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$168$i>>2] = $tbase$247$i;
      $703 = (($sp$168$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$246$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$247$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$247$i) + ($713)|0);
      $$sum107$i = (($tsize$246$i) + 8)|0;
      $714 = (($tbase$247$i) + ($$sum107$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum108$i = (($720) + ($tsize$246$i))|0;
      $721 = (($tbase$247$i) + ($$sum108$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i21$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$247$i) + ($$sum$i21$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i22$i = (($713) + 4)|0;
      $728 = (($tbase$247$i) + ($$sum1$i22$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = HEAP32[((78096 + 24|0))>>2]|0;
      $730 = ($721|0)==($729|0);
      L338: do {
       if ($730) {
        $731 = HEAP32[((78096 + 12|0))>>2]|0;
        $732 = (($731) + ($726))|0;
        HEAP32[((78096 + 12|0))>>2] = $732;
        HEAP32[((78096 + 24|0))>>2] = $725;
        $733 = $732 | 1;
        $$sum42$i$i = (($$sum$i21$i) + 4)|0;
        $734 = (($tbase$247$i) + ($$sum42$i$i)|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[((78096 + 20|0))>>2]|0;
        $736 = ($721|0)==($735|0);
        if ($736) {
         $737 = HEAP32[((78096 + 8|0))>>2]|0;
         $738 = (($737) + ($726))|0;
         HEAP32[((78096 + 8|0))>>2] = $738;
         HEAP32[((78096 + 20|0))>>2] = $725;
         $739 = $738 | 1;
         $$sum40$i$i = (($$sum$i21$i) + 4)|0;
         $740 = (($tbase$247$i) + ($$sum40$i$i)|0);
         HEAP32[$740>>2] = $739;
         $$sum41$i$i = (($738) + ($$sum$i21$i))|0;
         $741 = (($tbase$247$i) + ($$sum41$i$i)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $$sum2$i23$i = (($tsize$246$i) + 4)|0;
        $$sum109$i = (($$sum2$i23$i) + ($720))|0;
        $742 = (($tbase$247$i) + ($$sum109$i)|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L346: do {
          if ($748) {
           $$sum3738$i$i = $720 | 8;
           $$sum119$i = (($$sum3738$i$i) + ($tsize$246$i))|0;
           $749 = (($tbase$247$i) + ($$sum119$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $$sum39$i$i = (($tsize$246$i) + 12)|0;
           $$sum120$i = (($$sum39$i$i) + ($720))|0;
           $751 = (($tbase$247$i) + ($$sum120$i)|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = ((78096 + ($753<<2)|0) + 40|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = HEAP32[((78096 + 16|0))>>2]|0;
             $757 = ($750>>>0)<($756>>>0);
             if ($757) {
              _abort();
              // unreachable;
             }
             $758 = (($750) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($721|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[78096>>2]|0;
            $765 = $764 & $763;
            HEAP32[78096>>2] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre57$i$i = (($752) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $767 = HEAP32[((78096 + 16|0))>>2]|0;
             $768 = ($752>>>0)<($767>>>0);
             if ($768) {
              _abort();
              // unreachable;
             }
             $769 = (($752) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770|0)==($721|0);
             if ($771) {
              $$pre$phi58$i$iZ2D = $769;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $772 = (($750) + 12|0);
           HEAP32[$772>>2] = $752;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $750;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum110$i = (($$sum34$i$i) + ($tsize$246$i))|0;
           $773 = (($tbase$247$i) + ($$sum110$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $$sum5$i$i = (($tsize$246$i) + 12)|0;
           $$sum111$i = (($$sum5$i$i) + ($720))|0;
           $775 = (($tbase$247$i) + ($$sum111$i)|0);
           $776 = HEAP32[$775>>2]|0;
           $777 = ($776|0)==($721|0);
           do {
            if ($777) {
             $$sum67$i$i = $720 | 16;
             $$sum117$i = (($$sum2$i23$i) + ($$sum67$i$i))|0;
             $788 = (($tbase$247$i) + ($$sum117$i)|0);
             $789 = HEAP32[$788>>2]|0;
             $790 = ($789|0)==(0|0);
             if ($790) {
              $$sum118$i = (($$sum67$i$i) + ($tsize$246$i))|0;
              $791 = (($tbase$247$i) + ($$sum118$i)|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $792;$RP$0$i$i = $791;
              }
             } else {
              $R$0$i$i = $789;$RP$0$i$i = $788;
             }
             while(1) {
              $794 = (($R$0$i$i) + 20|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if (!($796)) {
               $R$0$i$i = $795;$RP$0$i$i = $794;
               continue;
              }
              $797 = (($R$0$i$i) + 16|0);
              $798 = HEAP32[$797>>2]|0;
              $799 = ($798|0)==(0|0);
              if ($799) {
               break;
              } else {
               $R$0$i$i = $798;$RP$0$i$i = $797;
              }
             }
             $800 = HEAP32[((78096 + 16|0))>>2]|0;
             $801 = ($RP$0$i$i>>>0)<($800>>>0);
             if ($801) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum112$i = (($$sum3536$i$i) + ($tsize$246$i))|0;
             $778 = (($tbase$247$i) + ($$sum112$i)|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = HEAP32[((78096 + 16|0))>>2]|0;
             $781 = ($779>>>0)<($780>>>0);
             if ($781) {
              _abort();
              // unreachable;
             }
             $782 = (($779) + 12|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if (!($784)) {
              _abort();
              // unreachable;
             }
             $785 = (($776) + 8|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==($721|0);
             if ($787) {
              HEAP32[$782>>2] = $776;
              HEAP32[$785>>2] = $779;
              $R$1$i$i = $776;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $802 = ($774|0)==(0|0);
           if ($802) {
            break;
           }
           $$sum30$i$i = (($tsize$246$i) + 28)|0;
           $$sum113$i = (($$sum30$i$i) + ($720))|0;
           $803 = (($tbase$247$i) + ($$sum113$i)|0);
           $804 = HEAP32[$803>>2]|0;
           $805 = ((78096 + ($804<<2)|0) + 304|0);
           $806 = HEAP32[$805>>2]|0;
           $807 = ($721|0)==($806|0);
           do {
            if ($807) {
             HEAP32[$805>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $808 = 1 << $804;
             $809 = $808 ^ -1;
             $810 = HEAP32[((78096 + 4|0))>>2]|0;
             $811 = $810 & $809;
             HEAP32[((78096 + 4|0))>>2] = $811;
             break L346;
            } else {
             $812 = HEAP32[((78096 + 16|0))>>2]|0;
             $813 = ($774>>>0)<($812>>>0);
             if ($813) {
              _abort();
              // unreachable;
             }
             $814 = (($774) + 16|0);
             $815 = HEAP32[$814>>2]|0;
             $816 = ($815|0)==($721|0);
             if ($816) {
              HEAP32[$814>>2] = $R$1$i$i;
             } else {
              $817 = (($774) + 20|0);
              HEAP32[$817>>2] = $R$1$i$i;
             }
             $818 = ($R$1$i$i|0)==(0|0);
             if ($818) {
              break L346;
             }
            }
           } while(0);
           $819 = HEAP32[((78096 + 16|0))>>2]|0;
           $820 = ($R$1$i$i>>>0)<($819>>>0);
           if ($820) {
            _abort();
            // unreachable;
           }
           $821 = (($R$1$i$i) + 24|0);
           HEAP32[$821>>2] = $774;
           $$sum3132$i$i = $720 | 16;
           $$sum114$i = (($$sum3132$i$i) + ($tsize$246$i))|0;
           $822 = (($tbase$247$i) + ($$sum114$i)|0);
           $823 = HEAP32[$822>>2]|0;
           $824 = ($823|0)==(0|0);
           do {
            if (!($824)) {
             $825 = HEAP32[((78096 + 16|0))>>2]|0;
             $826 = ($823>>>0)<($825>>>0);
             if ($826) {
              _abort();
              // unreachable;
             } else {
              $827 = (($R$1$i$i) + 16|0);
              HEAP32[$827>>2] = $823;
              $828 = (($823) + 24|0);
              HEAP32[$828>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum115$i = (($$sum2$i23$i) + ($$sum3132$i$i))|0;
           $829 = (($tbase$247$i) + ($$sum115$i)|0);
           $830 = HEAP32[$829>>2]|0;
           $831 = ($830|0)==(0|0);
           if ($831) {
            break;
           }
           $832 = HEAP32[((78096 + 16|0))>>2]|0;
           $833 = ($830>>>0)<($832>>>0);
           if ($833) {
            _abort();
            // unreachable;
           } else {
            $834 = (($R$1$i$i) + 20|0);
            HEAP32[$834>>2] = $830;
            $835 = (($830) + 24|0);
            HEAP32[$835>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $746 | $720;
         $$sum116$i = (($$sum9$i$i) + ($tsize$246$i))|0;
         $836 = (($tbase$247$i) + ($$sum116$i)|0);
         $837 = (($746) + ($726))|0;
         $oldfirst$0$i$i = $836;$qsize$0$i$i = $837;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $838 = (($oldfirst$0$i$i) + 4|0);
        $839 = HEAP32[$838>>2]|0;
        $840 = $839 & -2;
        HEAP32[$838>>2] = $840;
        $841 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i21$i) + 4)|0;
        $842 = (($tbase$247$i) + ($$sum10$i$i)|0);
        HEAP32[$842>>2] = $841;
        $$sum11$i24$i = (($qsize$0$i$i) + ($$sum$i21$i))|0;
        $843 = (($tbase$247$i) + ($$sum11$i24$i)|0);
        HEAP32[$843>>2] = $qsize$0$i$i;
        $844 = $qsize$0$i$i >>> 3;
        $845 = ($qsize$0$i$i>>>0)<(256);
        if ($845) {
         $846 = $844 << 1;
         $847 = ((78096 + ($846<<2)|0) + 40|0);
         $848 = HEAP32[78096>>2]|0;
         $849 = 1 << $844;
         $850 = $848 & $849;
         $851 = ($850|0)==(0);
         do {
          if ($851) {
           $852 = $848 | $849;
           HEAP32[78096>>2] = $852;
           $$sum26$pre$i$i = (($846) + 2)|0;
           $$pre$i25$i = ((78096 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i26$iZ2D = $$pre$i25$i;$F4$0$i$i = $847;
          } else {
           $$sum29$i$i = (($846) + 2)|0;
           $853 = ((78096 + ($$sum29$i$i<<2)|0) + 40|0);
           $854 = HEAP32[$853>>2]|0;
           $855 = HEAP32[((78096 + 16|0))>>2]|0;
           $856 = ($854>>>0)<($855>>>0);
           if (!($856)) {
            $$pre$phi$i26$iZ2D = $853;$F4$0$i$i = $854;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i26$iZ2D>>2] = $725;
         $857 = (($F4$0$i$i) + 12|0);
         HEAP32[$857>>2] = $725;
         $$sum27$i$i = (($$sum$i21$i) + 8)|0;
         $858 = (($tbase$247$i) + ($$sum27$i$i)|0);
         HEAP32[$858>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i21$i) + 12)|0;
         $859 = (($tbase$247$i) + ($$sum28$i$i)|0);
         HEAP32[$859>>2] = $847;
         break;
        }
        $860 = $qsize$0$i$i >>> 8;
        $861 = ($860|0)==(0);
        do {
         if ($861) {
          $I7$0$i$i = 0;
         } else {
          $862 = ($qsize$0$i$i>>>0)>(16777215);
          if ($862) {
           $I7$0$i$i = 31;
           break;
          }
          $863 = (($860) + 1048320)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 8;
          $866 = $860 << $865;
          $867 = (($866) + 520192)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 4;
          $870 = $869 | $865;
          $871 = $866 << $869;
          $872 = (($871) + 245760)|0;
          $873 = $872 >>> 16;
          $874 = $873 & 2;
          $875 = $870 | $874;
          $876 = (14 - ($875))|0;
          $877 = $871 << $874;
          $878 = $877 >>> 15;
          $879 = (($876) + ($878))|0;
          $880 = $879 << 1;
          $881 = (($879) + 7)|0;
          $882 = $qsize$0$i$i >>> $881;
          $883 = $882 & 1;
          $884 = $883 | $880;
          $I7$0$i$i = $884;
         }
        } while(0);
        $885 = ((78096 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i21$i) + 28)|0;
        $886 = (($tbase$247$i) + ($$sum12$i$i)|0);
        HEAP32[$886>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i21$i) + 16)|0;
        $887 = (($tbase$247$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i21$i) + 20)|0;
        $888 = (($tbase$247$i) + ($$sum14$i$i)|0);
        HEAP32[$888>>2] = 0;
        HEAP32[$887>>2] = 0;
        $889 = HEAP32[((78096 + 4|0))>>2]|0;
        $890 = 1 << $I7$0$i$i;
        $891 = $889 & $890;
        $892 = ($891|0)==(0);
        if ($892) {
         $893 = $889 | $890;
         HEAP32[((78096 + 4|0))>>2] = $893;
         HEAP32[$885>>2] = $725;
         $$sum15$i$i = (($$sum$i21$i) + 24)|0;
         $894 = (($tbase$247$i) + ($$sum15$i$i)|0);
         HEAP32[$894>>2] = $885;
         $$sum16$i$i = (($$sum$i21$i) + 12)|0;
         $895 = (($tbase$247$i) + ($$sum16$i$i)|0);
         HEAP32[$895>>2] = $725;
         $$sum17$i$i = (($$sum$i21$i) + 8)|0;
         $896 = (($tbase$247$i) + ($$sum17$i$i)|0);
         HEAP32[$896>>2] = $725;
         break;
        }
        $897 = HEAP32[$885>>2]|0;
        $898 = ($I7$0$i$i|0)==(31);
        if ($898) {
         $906 = 0;
        } else {
         $899 = $I7$0$i$i >>> 1;
         $900 = (25 - ($899))|0;
         $906 = $900;
        }
        $901 = (($897) + 4|0);
        $902 = HEAP32[$901>>2]|0;
        $903 = $902 & -8;
        $904 = ($903|0)==($qsize$0$i$i|0);
        L435: do {
         if ($904) {
          $T$0$lcssa$i28$i = $897;
         } else {
          $905 = $qsize$0$i$i << $906;
          $K8$052$i$i = $905;$T$051$i$i = $897;
          while(1) {
           $913 = $K8$052$i$i >>> 31;
           $914 = ((($T$051$i$i) + ($913<<2)|0) + 16|0);
           $909 = HEAP32[$914>>2]|0;
           $915 = ($909|0)==(0|0);
           if ($915) {
            break;
           }
           $907 = $K8$052$i$i << 1;
           $908 = (($909) + 4|0);
           $910 = HEAP32[$908>>2]|0;
           $911 = $910 & -8;
           $912 = ($911|0)==($qsize$0$i$i|0);
           if ($912) {
            $T$0$lcssa$i28$i = $909;
            break L435;
           } else {
            $K8$052$i$i = $907;$T$051$i$i = $909;
           }
          }
          $916 = HEAP32[((78096 + 16|0))>>2]|0;
          $917 = ($914>>>0)<($916>>>0);
          if ($917) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$914>>2] = $725;
           $$sum23$i$i = (($$sum$i21$i) + 24)|0;
           $918 = (($tbase$247$i) + ($$sum23$i$i)|0);
           HEAP32[$918>>2] = $T$051$i$i;
           $$sum24$i$i = (($$sum$i21$i) + 12)|0;
           $919 = (($tbase$247$i) + ($$sum24$i$i)|0);
           HEAP32[$919>>2] = $725;
           $$sum25$i$i = (($$sum$i21$i) + 8)|0;
           $920 = (($tbase$247$i) + ($$sum25$i$i)|0);
           HEAP32[$920>>2] = $725;
           break L338;
          }
         }
        } while(0);
        $921 = (($T$0$lcssa$i28$i) + 8|0);
        $922 = HEAP32[$921>>2]|0;
        $923 = HEAP32[((78096 + 16|0))>>2]|0;
        $924 = ($T$0$lcssa$i28$i>>>0)<($923>>>0);
        if ($924) {
         _abort();
         // unreachable;
        }
        $925 = ($922>>>0)<($923>>>0);
        if ($925) {
         _abort();
         // unreachable;
        } else {
         $926 = (($922) + 12|0);
         HEAP32[$926>>2] = $725;
         HEAP32[$921>>2] = $725;
         $$sum20$i$i = (($$sum$i21$i) + 8)|0;
         $927 = (($tbase$247$i) + ($$sum20$i$i)|0);
         HEAP32[$927>>2] = $922;
         $$sum21$i$i = (($$sum$i21$i) + 12)|0;
         $928 = (($tbase$247$i) + ($$sum21$i$i)|0);
         HEAP32[$928>>2] = $T$0$lcssa$i28$i;
         $$sum22$i$i = (($$sum$i21$i) + 24)|0;
         $929 = (($tbase$247$i) + ($$sum22$i$i)|0);
         HEAP32[$929>>2] = 0;
         break;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $930 = (($tbase$247$i) + ($$sum1819$i$i)|0);
      $mem$0 = $930;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((78096 + 448|0));
    while(1) {
     $931 = HEAP32[$sp$0$i$i$i>>2]|0;
     $932 = ($931>>>0)>($636>>>0);
     if (!($932)) {
      $933 = (($sp$0$i$i$i) + 4|0);
      $934 = HEAP32[$933>>2]|0;
      $935 = (($931) + ($934)|0);
      $936 = ($935>>>0)>($636>>>0);
      if ($936) {
       break;
      }
     }
     $937 = (($sp$0$i$i$i) + 8|0);
     $938 = HEAP32[$937>>2]|0;
     $sp$0$i$i$i = $938;
    }
    $$sum$i15$i = (($934) + -47)|0;
    $$sum1$i16$i = (($934) + -39)|0;
    $939 = (($931) + ($$sum1$i16$i)|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    if ($942) {
     $945 = 0;
    } else {
     $943 = (0 - ($940))|0;
     $944 = $943 & 7;
     $945 = $944;
    }
    $$sum2$i17$i = (($$sum$i15$i) + ($945))|0;
    $946 = (($931) + ($$sum2$i17$i)|0);
    $947 = (($636) + 16|0);
    $948 = ($946>>>0)<($947>>>0);
    $949 = $948 ? $636 : $946;
    $950 = (($949) + 8|0);
    $951 = (($tsize$246$i) + -40)|0;
    $952 = (($tbase$247$i) + 8|0);
    $953 = $952;
    $954 = $953 & 7;
    $955 = ($954|0)==(0);
    if ($955) {
     $959 = 0;
    } else {
     $956 = (0 - ($953))|0;
     $957 = $956 & 7;
     $959 = $957;
    }
    $958 = (($tbase$247$i) + ($959)|0);
    $960 = (($951) - ($959))|0;
    HEAP32[((78096 + 24|0))>>2] = $958;
    HEAP32[((78096 + 12|0))>>2] = $960;
    $961 = $960 | 1;
    $$sum$i$i$i = (($959) + 4)|0;
    $962 = (($tbase$247$i) + ($$sum$i$i$i)|0);
    HEAP32[$962>>2] = $961;
    $$sum2$i$i$i = (($tsize$246$i) + -36)|0;
    $963 = (($tbase$247$i) + ($$sum2$i$i$i)|0);
    HEAP32[$963>>2] = 40;
    $964 = HEAP32[((78568 + 16|0))>>2]|0;
    HEAP32[((78096 + 28|0))>>2] = $964;
    $965 = (($949) + 4|0);
    HEAP32[$965>>2] = 27;
    ;HEAP32[$950+0>>2]=HEAP32[((78096 + 448|0))+0>>2]|0;HEAP32[$950+4>>2]=HEAP32[((78096 + 448|0))+4>>2]|0;HEAP32[$950+8>>2]=HEAP32[((78096 + 448|0))+8>>2]|0;HEAP32[$950+12>>2]=HEAP32[((78096 + 448|0))+12>>2]|0;
    HEAP32[((78096 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((78096 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((78096 + 460|0))>>2] = 0;
    HEAP32[((78096 + 456|0))>>2] = $950;
    $966 = (($949) + 28|0);
    HEAP32[$966>>2] = 7;
    $967 = (($949) + 32|0);
    $968 = ($967>>>0)<($935>>>0);
    if ($968) {
     $970 = $966;
     while(1) {
      $969 = (($970) + 4|0);
      HEAP32[$969>>2] = 7;
      $971 = (($970) + 8|0);
      $972 = ($971>>>0)<($935>>>0);
      if ($972) {
       $970 = $969;
      } else {
       break;
      }
     }
    }
    $973 = ($949|0)==($636|0);
    if (!($973)) {
     $974 = $949;
     $975 = $636;
     $976 = (($974) - ($975))|0;
     $977 = (($636) + ($976)|0);
     $$sum3$i$i = (($976) + 4)|0;
     $978 = (($636) + ($$sum3$i$i)|0);
     $979 = HEAP32[$978>>2]|0;
     $980 = $979 & -2;
     HEAP32[$978>>2] = $980;
     $981 = $976 | 1;
     $982 = (($636) + 4|0);
     HEAP32[$982>>2] = $981;
     HEAP32[$977>>2] = $976;
     $983 = $976 >>> 3;
     $984 = ($976>>>0)<(256);
     if ($984) {
      $985 = $983 << 1;
      $986 = ((78096 + ($985<<2)|0) + 40|0);
      $987 = HEAP32[78096>>2]|0;
      $988 = 1 << $983;
      $989 = $987 & $988;
      $990 = ($989|0)==(0);
      do {
       if ($990) {
        $991 = $987 | $988;
        HEAP32[78096>>2] = $991;
        $$sum10$pre$i$i = (($985) + 2)|0;
        $$pre$i$i = ((78096 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $986;
       } else {
        $$sum11$i$i = (($985) + 2)|0;
        $992 = ((78096 + ($$sum11$i$i<<2)|0) + 40|0);
        $993 = HEAP32[$992>>2]|0;
        $994 = HEAP32[((78096 + 16|0))>>2]|0;
        $995 = ($993>>>0)<($994>>>0);
        if (!($995)) {
         $$pre$phi$i$iZ2D = $992;$F$0$i$i = $993;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $996 = (($F$0$i$i) + 12|0);
      HEAP32[$996>>2] = $636;
      $997 = (($636) + 8|0);
      HEAP32[$997>>2] = $F$0$i$i;
      $998 = (($636) + 12|0);
      HEAP32[$998>>2] = $986;
      break;
     }
     $999 = $976 >>> 8;
     $1000 = ($999|0)==(0);
     if ($1000) {
      $I1$0$i$i = 0;
     } else {
      $1001 = ($976>>>0)>(16777215);
      if ($1001) {
       $I1$0$i$i = 31;
      } else {
       $1002 = (($999) + 1048320)|0;
       $1003 = $1002 >>> 16;
       $1004 = $1003 & 8;
       $1005 = $999 << $1004;
       $1006 = (($1005) + 520192)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 4;
       $1009 = $1008 | $1004;
       $1010 = $1005 << $1008;
       $1011 = (($1010) + 245760)|0;
       $1012 = $1011 >>> 16;
       $1013 = $1012 & 2;
       $1014 = $1009 | $1013;
       $1015 = (14 - ($1014))|0;
       $1016 = $1010 << $1013;
       $1017 = $1016 >>> 15;
       $1018 = (($1015) + ($1017))|0;
       $1019 = $1018 << 1;
       $1020 = (($1018) + 7)|0;
       $1021 = $976 >>> $1020;
       $1022 = $1021 & 1;
       $1023 = $1022 | $1019;
       $I1$0$i$i = $1023;
      }
     }
     $1024 = ((78096 + ($I1$0$i$i<<2)|0) + 304|0);
     $1025 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1025>>2] = $I1$0$c$i$i;
     $1026 = (($636) + 20|0);
     HEAP32[$1026>>2] = 0;
     $1027 = (($636) + 16|0);
     HEAP32[$1027>>2] = 0;
     $1028 = HEAP32[((78096 + 4|0))>>2]|0;
     $1029 = 1 << $I1$0$i$i;
     $1030 = $1028 & $1029;
     $1031 = ($1030|0)==(0);
     if ($1031) {
      $1032 = $1028 | $1029;
      HEAP32[((78096 + 4|0))>>2] = $1032;
      HEAP32[$1024>>2] = $636;
      $1033 = (($636) + 24|0);
      HEAP32[$1033>>2] = $1024;
      $1034 = (($636) + 12|0);
      HEAP32[$1034>>2] = $636;
      $1035 = (($636) + 8|0);
      HEAP32[$1035>>2] = $636;
      break;
     }
     $1036 = HEAP32[$1024>>2]|0;
     $1037 = ($I1$0$i$i|0)==(31);
     if ($1037) {
      $1045 = 0;
     } else {
      $1038 = $I1$0$i$i >>> 1;
      $1039 = (25 - ($1038))|0;
      $1045 = $1039;
     }
     $1040 = (($1036) + 4|0);
     $1041 = HEAP32[$1040>>2]|0;
     $1042 = $1041 & -8;
     $1043 = ($1042|0)==($976|0);
     L489: do {
      if ($1043) {
       $T$0$lcssa$i$i = $1036;
      } else {
       $1044 = $976 << $1045;
       $K2$014$i$i = $1044;$T$013$i$i = $1036;
       while(1) {
        $1052 = $K2$014$i$i >>> 31;
        $1053 = ((($T$013$i$i) + ($1052<<2)|0) + 16|0);
        $1048 = HEAP32[$1053>>2]|0;
        $1054 = ($1048|0)==(0|0);
        if ($1054) {
         break;
        }
        $1046 = $K2$014$i$i << 1;
        $1047 = (($1048) + 4|0);
        $1049 = HEAP32[$1047>>2]|0;
        $1050 = $1049 & -8;
        $1051 = ($1050|0)==($976|0);
        if ($1051) {
         $T$0$lcssa$i$i = $1048;
         break L489;
        } else {
         $K2$014$i$i = $1046;$T$013$i$i = $1048;
        }
       }
       $1055 = HEAP32[((78096 + 16|0))>>2]|0;
       $1056 = ($1053>>>0)<($1055>>>0);
       if ($1056) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1053>>2] = $636;
        $1057 = (($636) + 24|0);
        HEAP32[$1057>>2] = $T$013$i$i;
        $1058 = (($636) + 12|0);
        HEAP32[$1058>>2] = $636;
        $1059 = (($636) + 8|0);
        HEAP32[$1059>>2] = $636;
        break L311;
       }
      }
     } while(0);
     $1060 = (($T$0$lcssa$i$i) + 8|0);
     $1061 = HEAP32[$1060>>2]|0;
     $1062 = HEAP32[((78096 + 16|0))>>2]|0;
     $1063 = ($T$0$lcssa$i$i>>>0)<($1062>>>0);
     if ($1063) {
      _abort();
      // unreachable;
     }
     $1064 = ($1061>>>0)<($1062>>>0);
     if ($1064) {
      _abort();
      // unreachable;
     } else {
      $1065 = (($1061) + 12|0);
      HEAP32[$1065>>2] = $636;
      HEAP32[$1060>>2] = $636;
      $1066 = (($636) + 8|0);
      HEAP32[$1066>>2] = $1061;
      $1067 = (($636) + 12|0);
      HEAP32[$1067>>2] = $T$0$lcssa$i$i;
      $1068 = (($636) + 24|0);
      HEAP32[$1068>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $1069 = HEAP32[((78096 + 12|0))>>2]|0;
  $1070 = ($1069>>>0)>($nb$0>>>0);
  if ($1070) {
   $1071 = (($1069) - ($nb$0))|0;
   HEAP32[((78096 + 12|0))>>2] = $1071;
   $1072 = HEAP32[((78096 + 24|0))>>2]|0;
   $1073 = (($1072) + ($nb$0)|0);
   HEAP32[((78096 + 24|0))>>2] = $1073;
   $1074 = $1071 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1075 = (($1072) + ($$sum$i32)|0);
   HEAP32[$1075>>2] = $1074;
   $1076 = $nb$0 | 3;
   $1077 = (($1072) + 4|0);
   HEAP32[$1077>>2] = $1076;
   $1078 = (($1072) + 8|0);
   $mem$0 = $1078;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1079 = (___errno_location()|0);
 HEAP32[$1079>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$pre67 = 0, $$pre69 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$057 = 0;
 var $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$056 = 0, $cond = 0, $cond54 = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((78096 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((78096 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $104 = (($mem) + ($$sum3)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((78096 + 8|0))>>2] = $15;
    $108 = HEAP32[$104>>2]|0;
    $109 = $108 & -2;
    HEAP32[$104>>2] = $109;
    $110 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $111 = (($mem) + ($$sum26)|0);
    HEAP32[$111>>2] = $110;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((78096 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[78096>>2]|0;
     $36 = $35 & $34;
     HEAP32[78096>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre69 = (($24) + 8|0);
     $$pre$phi70Z2D = $$pre69;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi70Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi70Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((78096 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((78096 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((78096 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((78096 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((78096 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = HEAP32[((78096 + 16|0))>>2]|0;
      $94 = ($91>>>0)<($93>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = (($R$1) + 16|0);
       HEAP32[$95>>2] = $91;
       $96 = (($91) + 24|0);
       HEAP32[$96>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $97 = (($mem) + ($$sum34)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $100 = HEAP32[((78096 + 16|0))>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = (($R$1) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = (($98) + 24|0);
      HEAP32[$103>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $112 = ($p$0>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $113 = (($mem) + ($$sum25)|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[((78096 + 24|0))>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[((78096 + 12|0))>>2]|0;
   $122 = (($121) + ($psize$0))|0;
   HEAP32[((78096 + 12|0))>>2] = $122;
   HEAP32[((78096 + 24|0))>>2] = $p$0;
   $123 = $122 | 1;
   $124 = (($p$0) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[((78096 + 20|0))>>2]|0;
   $126 = ($p$0|0)==($125|0);
   if (!($126)) {
    STACKTOP = sp;return;
   }
   HEAP32[((78096 + 20|0))>>2] = 0;
   HEAP32[((78096 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $127 = HEAP32[((78096 + 20|0))>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[((78096 + 8|0))>>2]|0;
   $130 = (($129) + ($psize$0))|0;
   HEAP32[((78096 + 8|0))>>2] = $130;
   HEAP32[((78096 + 20|0))>>2] = $p$0;
   $131 = $130 | 1;
   $132 = (($p$0) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$0) + ($130)|0);
   HEAP32[$133>>2] = $130;
   STACKTOP = sp;return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$0))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = (($mem) + ($8)|0);
    $139 = HEAP32[$138>>2]|0;
    $$sum2324 = $8 | 4;
    $140 = (($mem) + ($$sum2324)|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = ((78096 + ($142<<2)|0) + 40|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[((78096 + 16|0))>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = (($139) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[78096>>2]|0;
     $154 = $153 & $152;
     HEAP32[78096>>2] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre67 = (($141) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $156 = HEAP32[((78096 + 16|0))>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = (($141) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi68Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = (($139) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi68Z2D>>2] = $139;
   } else {
    $$sum5 = (($8) + 16)|0;
    $162 = (($mem) + ($$sum5)|0);
    $163 = HEAP32[$162>>2]|0;
    $$sum67 = $8 | 4;
    $164 = (($mem) + ($$sum67)|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $$sum9 = (($8) + 12)|0;
      $177 = (($mem) + ($$sum9)|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ($178|0)==(0|0);
      if ($179) {
       $$sum8 = (($8) + 8)|0;
       $180 = (($mem) + ($$sum8)|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $181;$RP9$0 = $180;
       }
      } else {
       $R7$0 = $178;$RP9$0 = $177;
      }
      while(1) {
       $183 = (($R7$0) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R7$0 = $184;$RP9$0 = $183;
        continue;
       }
       $186 = (($R7$0) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $R7$0 = $187;$RP9$0 = $186;
       }
      }
      $189 = HEAP32[((78096 + 16|0))>>2]|0;
      $190 = ($RP9$0>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $167 = (($mem) + ($8)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[((78096 + 16|0))>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = (($168) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = (($165) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R7$1 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $$sum18 = (($8) + 20)|0;
     $192 = (($mem) + ($$sum18)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ((78096 + ($193<<2)|0) + 304|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[((78096 + 4|0))>>2]|0;
       $200 = $199 & $198;
       HEAP32[((78096 + 4|0))>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[((78096 + 16|0))>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = (($163) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R7$1;
      } else {
       $206 = (($163) + 20|0);
       HEAP32[$206>>2] = $R7$1;
      }
      $207 = ($R7$1|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[((78096 + 16|0))>>2]|0;
     $209 = ($R7$1>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = (($R7$1) + 24|0);
     HEAP32[$210>>2] = $163;
     $$sum19 = (($8) + 8)|0;
     $211 = (($mem) + ($$sum19)|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = HEAP32[((78096 + 16|0))>>2]|0;
       $215 = ($212>>>0)<($214>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = (($R7$1) + 16|0);
        HEAP32[$216>>2] = $212;
        $217 = (($212) + 24|0);
        HEAP32[$217>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $218 = (($mem) + ($$sum20)|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[((78096 + 16|0))>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = (($R7$1) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = (($219) + 24|0);
       HEAP32[$224>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $135 | 1;
  $226 = (($p$0) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($p$0) + ($135)|0);
  HEAP32[$227>>2] = $135;
  $228 = HEAP32[((78096 + 20|0))>>2]|0;
  $229 = ($p$0|0)==($228|0);
  if ($229) {
   HEAP32[((78096 + 8|0))>>2] = $135;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $135;
  }
 } else {
  $230 = $114 & -2;
  HEAP32[$113>>2] = $230;
  $231 = $psize$0 | 1;
  $232 = (($p$0) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($p$0) + ($psize$0)|0);
  HEAP32[$233>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $234 = $psize$1 >>> 3;
 $235 = ($psize$1>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = ((78096 + ($236<<2)|0) + 40|0);
  $238 = HEAP32[78096>>2]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[78096>>2] = $242;
   $$sum16$pre = (($236) + 2)|0;
   $$pre = ((78096 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $237;
  } else {
   $$sum17 = (($236) + 2)|0;
   $243 = ((78096 + ($$sum17<<2)|0) + 40|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[((78096 + 16|0))>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $243;$F16$0 = $244;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $247 = (($F16$0) + 12|0);
  HEAP32[$247>>2] = $p$0;
  $248 = (($p$0) + 8|0);
  HEAP32[$248>>2] = $F16$0;
  $249 = (($p$0) + 12|0);
  HEAP32[$249>>2] = $237;
  STACKTOP = sp;return;
 }
 $250 = $psize$1 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $I18$0 = 0;
 } else {
  $252 = ($psize$1>>>0)>(16777215);
  if ($252) {
   $I18$0 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $psize$1 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $I18$0 = $274;
  }
 }
 $275 = ((78096 + ($I18$0<<2)|0) + 304|0);
 $276 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$276>>2] = $I18$0$c;
 $277 = (($p$0) + 20|0);
 HEAP32[$277>>2] = 0;
 $278 = (($p$0) + 16|0);
 HEAP32[$278>>2] = 0;
 $279 = HEAP32[((78096 + 4|0))>>2]|0;
 $280 = 1 << $I18$0;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 L199: do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[((78096 + 4|0))>>2] = $283;
   HEAP32[$275>>2] = $p$0;
   $284 = (($p$0) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = (($p$0) + 12|0);
   HEAP32[$285>>2] = $p$0;
   $286 = (($p$0) + 8|0);
   HEAP32[$286>>2] = $p$0;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($I18$0|0)==(31);
   if ($288) {
    $296 = 0;
   } else {
    $289 = $I18$0 >>> 1;
    $290 = (25 - ($289))|0;
    $296 = $290;
   }
   $291 = (($287) + 4|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = $292 & -8;
   $294 = ($293|0)==($psize$1|0);
   L204: do {
    if ($294) {
     $T$0$lcssa = $287;
    } else {
     $295 = $psize$1 << $296;
     $K19$057 = $295;$T$056 = $287;
     while(1) {
      $303 = $K19$057 >>> 31;
      $304 = ((($T$056) + ($303<<2)|0) + 16|0);
      $299 = HEAP32[$304>>2]|0;
      $305 = ($299|0)==(0|0);
      if ($305) {
       break;
      }
      $297 = $K19$057 << 1;
      $298 = (($299) + 4|0);
      $300 = HEAP32[$298>>2]|0;
      $301 = $300 & -8;
      $302 = ($301|0)==($psize$1|0);
      if ($302) {
       $T$0$lcssa = $299;
       break L204;
      } else {
       $K19$057 = $297;$T$056 = $299;
      }
     }
     $306 = HEAP32[((78096 + 16|0))>>2]|0;
     $307 = ($304>>>0)<($306>>>0);
     if ($307) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$304>>2] = $p$0;
      $308 = (($p$0) + 24|0);
      HEAP32[$308>>2] = $T$056;
      $309 = (($p$0) + 12|0);
      HEAP32[$309>>2] = $p$0;
      $310 = (($p$0) + 8|0);
      HEAP32[$310>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $311 = (($T$0$lcssa) + 8|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = HEAP32[((78096 + 16|0))>>2]|0;
   $314 = ($T$0$lcssa>>>0)<($313>>>0);
   if ($314) {
    _abort();
    // unreachable;
   }
   $315 = ($312>>>0)<($313>>>0);
   if ($315) {
    _abort();
    // unreachable;
   } else {
    $316 = (($312) + 12|0);
    HEAP32[$316>>2] = $p$0;
    HEAP32[$311>>2] = $p$0;
    $317 = (($p$0) + 8|0);
    HEAP32[$317>>2] = $312;
    $318 = (($p$0) + 12|0);
    HEAP32[$318>>2] = $T$0$lcssa;
    $319 = (($p$0) + 24|0);
    HEAP32[$319>>2] = 0;
    break;
   }
  }
 } while(0);
 $320 = HEAP32[((78096 + 32|0))>>2]|0;
 $321 = (($320) + -1)|0;
 HEAP32[((78096 + 32|0))>>2] = $321;
 $322 = ($321|0)==(0);
 if ($322) {
  $sp$0$in$i = ((78096 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $323 = ($sp$0$i|0)==(0|0);
  $324 = (($sp$0$i) + 8|0);
  if ($323) {
   break;
  } else {
   $sp$0$in$i = $324;
  }
 }
 HEAP32[((78096 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return ($6|0);
 }
 $8 = (($6) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  STACKTOP = sp;return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 STACKTOP = sp;return ($6|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 do {
  if ($0) {
   $1 = (_malloc($bytes)|0);
   $mem$0 = $1;
  } else {
   $2 = ($bytes>>>0)>(4294967231);
   if ($2) {
    $3 = (___errno_location()|0);
    HEAP32[$3>>2] = 12;
    $mem$0 = 0;
    break;
   }
   $4 = ($bytes>>>0)<(11);
   if ($4) {
    $8 = 16;
   } else {
    $5 = (($bytes) + 11)|0;
    $6 = $5 & -8;
    $8 = $6;
   }
   $7 = (($oldmem) + -8|0);
   $9 = (_try_realloc_chunk($7,$8)|0);
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = (($9) + 8|0);
    $mem$0 = $11;
    break;
   }
   $12 = (_malloc($bytes)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $mem$0 = 0;
   } else {
    $14 = (($oldmem) + -4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & -8;
    $17 = $15 & 3;
    $18 = ($17|0)==(0);
    $19 = $18 ? 8 : 4;
    $20 = (($16) - ($19))|0;
    $21 = ($20>>>0)<($bytes>>>0);
    $22 = $21 ? $20 : $bytes;
    _memcpy(($12|0),($oldmem|0),($22|0))|0;
    _free($oldmem);
    $mem$0 = $12;
   }
  }
 } while(0);
 STACKTOP = sp;return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$1 = 0, $RP$0 = 0;
 var $cond = 0, $newp$0 = 0, $or$cond = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((78096 + 16|0))>>2]|0;
 $5 = ($p>>>0)<($4>>>0);
 if ($5) {
  _abort();
  // unreachable;
 }
 $6 = $1 & 3;
 $7 = ($6|0)!=(1);
 $8 = ($p>>>0)<($3>>>0);
 $or$cond = $7 & $8;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $9 = (($p) + ($$sum2728)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($6|0)==(0);
 if ($13) {
  $14 = ($nb>>>0)<(256);
  if ($14) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $15 = (($nb) + 4)|0;
  $16 = ($2>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($2) - ($nb))|0;
   $18 = HEAP32[((78568 + 8|0))>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $newp$0 = $p;
    STACKTOP = sp;return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $21 = ($2>>>0)<($nb>>>0);
 if (!($21)) {
  $22 = (($2) - ($nb))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $newp$0 = $p;
   STACKTOP = sp;return ($newp$0|0);
  }
  $24 = (($p) + ($nb)|0);
  $25 = $1 & 1;
  $26 = $25 | $nb;
  $27 = $26 | 2;
  HEAP32[$0>>2] = $27;
  $$sum23 = (($nb) + 4)|0;
  $28 = (($p) + ($$sum23)|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = HEAP32[$9>>2]|0;
  $31 = $30 | 1;
  HEAP32[$9>>2] = $31;
  _dispose_chunk($24,$22);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $32 = HEAP32[((78096 + 24|0))>>2]|0;
 $33 = ($3|0)==($32|0);
 if ($33) {
  $34 = HEAP32[((78096 + 12|0))>>2]|0;
  $35 = (($34) + ($2))|0;
  $36 = ($35>>>0)>($nb>>>0);
  if (!($36)) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $37 = (($35) - ($nb))|0;
  $38 = (($p) + ($nb)|0);
  $39 = $1 & 1;
  $40 = $39 | $nb;
  $41 = $40 | 2;
  HEAP32[$0>>2] = $41;
  $$sum22 = (($nb) + 4)|0;
  $42 = (($p) + ($$sum22)|0);
  $43 = $37 | 1;
  HEAP32[$42>>2] = $43;
  HEAP32[((78096 + 24|0))>>2] = $38;
  HEAP32[((78096 + 12|0))>>2] = $37;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $44 = HEAP32[((78096 + 20|0))>>2]|0;
 $45 = ($3|0)==($44|0);
 if ($45) {
  $46 = HEAP32[((78096 + 8|0))>>2]|0;
  $47 = (($46) + ($2))|0;
  $48 = ($47>>>0)<($nb>>>0);
  if ($48) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $49 = (($47) - ($nb))|0;
  $50 = ($49>>>0)>(15);
  if ($50) {
   $51 = (($p) + ($nb)|0);
   $52 = (($p) + ($47)|0);
   $53 = $1 & 1;
   $54 = $53 | $nb;
   $55 = $54 | 2;
   HEAP32[$0>>2] = $55;
   $$sum19 = (($nb) + 4)|0;
   $56 = (($p) + ($$sum19)|0);
   $57 = $49 | 1;
   HEAP32[$56>>2] = $57;
   HEAP32[$52>>2] = $49;
   $$sum20 = (($47) + 4)|0;
   $58 = (($p) + ($$sum20)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & -2;
   HEAP32[$58>>2] = $60;
   $storemerge = $51;$storemerge21 = $49;
  } else {
   $61 = $1 & 1;
   $62 = $61 | $47;
   $63 = $62 | 2;
   HEAP32[$0>>2] = $63;
   $$sum17 = (($47) + 4)|0;
   $64 = (($p) + ($$sum17)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $65 | 1;
   HEAP32[$64>>2] = $66;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((78096 + 8|0))>>2] = $storemerge21;
  HEAP32[((78096 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $67 = $10 & 2;
 $68 = ($67|0)==(0);
 if (!($68)) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $69 = $10 & -8;
 $70 = (($69) + ($2))|0;
 $71 = ($70>>>0)<($nb>>>0);
 if ($71) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $72 = (($70) - ($nb))|0;
 $73 = $10 >>> 3;
 $74 = ($10>>>0)<(256);
 do {
  if ($74) {
   $$sum15 = (($2) + 8)|0;
   $75 = (($p) + ($$sum15)|0);
   $76 = HEAP32[$75>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $77 = (($p) + ($$sum16)|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $73 << 1;
   $80 = ((78096 + ($79<<2)|0) + 40|0);
   $81 = ($76|0)==($80|0);
   if (!($81)) {
    $82 = ($76>>>0)<($4>>>0);
    if ($82) {
     _abort();
     // unreachable;
    }
    $83 = (($76) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($84|0)==($3|0);
    if (!($85)) {
     _abort();
     // unreachable;
    }
   }
   $86 = ($78|0)==($76|0);
   if ($86) {
    $87 = 1 << $73;
    $88 = $87 ^ -1;
    $89 = HEAP32[78096>>2]|0;
    $90 = $89 & $88;
    HEAP32[78096>>2] = $90;
    break;
   }
   $91 = ($78|0)==($80|0);
   if ($91) {
    $$pre = (($78) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $92 = ($78>>>0)<($4>>>0);
    if ($92) {
     _abort();
     // unreachable;
    }
    $93 = (($78) + 8|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==($3|0);
    if ($95) {
     $$pre$phiZ2D = $93;
    } else {
     _abort();
     // unreachable;
    }
   }
   $96 = (($76) + 12|0);
   HEAP32[$96>>2] = $78;
   HEAP32[$$pre$phiZ2D>>2] = $76;
  } else {
   $$sum = (($2) + 24)|0;
   $97 = (($p) + ($$sum)|0);
   $98 = HEAP32[$97>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $99 = (($p) + ($$sum2)|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ($100|0)==($3|0);
   do {
    if ($101) {
     $$sum4 = (($2) + 20)|0;
     $111 = (($p) + ($$sum4)|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==(0|0);
     if ($113) {
      $$sum3 = (($2) + 16)|0;
      $114 = (($p) + ($$sum3)|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = ($115|0)==(0|0);
      if ($116) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $115;$RP$0 = $114;
      }
     } else {
      $R$0 = $112;$RP$0 = $111;
     }
     while(1) {
      $117 = (($R$0) + 20|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = ($118|0)==(0|0);
      if (!($119)) {
       $R$0 = $118;$RP$0 = $117;
       continue;
      }
      $120 = (($R$0) + 16|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if ($122) {
       break;
      } else {
       $R$0 = $121;$RP$0 = $120;
      }
     }
     $123 = ($RP$0>>>0)<($4>>>0);
     if ($123) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $102 = (($p) + ($$sum14)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($103>>>0)<($4>>>0);
     if ($104) {
      _abort();
      // unreachable;
     }
     $105 = (($103) + 12|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106|0)==($3|0);
     if (!($107)) {
      _abort();
      // unreachable;
     }
     $108 = (($100) + 8|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($3|0);
     if ($110) {
      HEAP32[$105>>2] = $100;
      HEAP32[$108>>2] = $103;
      $R$1 = $100;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $124 = ($98|0)==(0|0);
   if (!($124)) {
    $$sum11 = (($2) + 28)|0;
    $125 = (($p) + ($$sum11)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((78096 + ($126<<2)|0) + 304|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($3|0)==($128|0);
    if ($129) {
     HEAP32[$127>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $130 = 1 << $126;
      $131 = $130 ^ -1;
      $132 = HEAP32[((78096 + 4|0))>>2]|0;
      $133 = $132 & $131;
      HEAP32[((78096 + 4|0))>>2] = $133;
      break;
     }
    } else {
     $134 = HEAP32[((78096 + 16|0))>>2]|0;
     $135 = ($98>>>0)<($134>>>0);
     if ($135) {
      _abort();
      // unreachable;
     }
     $136 = (($98) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($137|0)==($3|0);
     if ($138) {
      HEAP32[$136>>2] = $R$1;
     } else {
      $139 = (($98) + 20|0);
      HEAP32[$139>>2] = $R$1;
     }
     $140 = ($R$1|0)==(0|0);
     if ($140) {
      break;
     }
    }
    $141 = HEAP32[((78096 + 16|0))>>2]|0;
    $142 = ($R$1>>>0)<($141>>>0);
    if ($142) {
     _abort();
     // unreachable;
    }
    $143 = (($R$1) + 24|0);
    HEAP32[$143>>2] = $98;
    $$sum12 = (($2) + 16)|0;
    $144 = (($p) + ($$sum12)|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = ($145|0)==(0|0);
    do {
     if (!($146)) {
      $147 = HEAP32[((78096 + 16|0))>>2]|0;
      $148 = ($145>>>0)<($147>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = (($R$1) + 16|0);
       HEAP32[$149>>2] = $145;
       $150 = (($145) + 24|0);
       HEAP32[$150>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $151 = (($p) + ($$sum13)|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[((78096 + 16|0))>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = (($R$1) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = (($152) + 24|0);
      HEAP32[$157>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($72>>>0)<(16);
 if ($158) {
  $159 = HEAP32[$0>>2]|0;
  $160 = $159 & 1;
  $161 = $70 | $160;
  $162 = $161 | 2;
  HEAP32[$0>>2] = $162;
  $$sum910 = $70 | 4;
  $163 = (($p) + ($$sum910)|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 } else {
  $166 = (($p) + ($nb)|0);
  $167 = HEAP32[$0>>2]|0;
  $168 = $167 & 1;
  $169 = $168 | $nb;
  $170 = $169 | 2;
  HEAP32[$0>>2] = $170;
  $$sum5 = (($nb) + 4)|0;
  $171 = (($p) + ($$sum5)|0);
  $172 = $72 | 3;
  HEAP32[$171>>2] = $172;
  $$sum78 = $70 | 4;
  $173 = (($p) + ($$sum78)|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 | 1;
  HEAP32[$173>>2] = $175;
  _dispose_chunk($166,$72);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 return 0|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$phi63Z2D = 0, $$pre$phi65Z2D = 0, $$pre$phiZ2D = 0, $$pre62 = 0, $$pre64 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$049 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$048 = 0, $cond = 0, $cond46 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    STACKTOP = sp;return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((78096 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((78096 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $100 = (($p) + ($$sum)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 3;
    $103 = ($102|0)==(3);
    if (!($103)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((78096 + 8|0))>>2] = $10;
    $104 = HEAP32[$100>>2]|0;
    $105 = $104 & -2;
    HEAP32[$100>>2] = $105;
    $106 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $107 = (($p) + ($$sum20)|0);
    HEAP32[$107>>2] = $106;
    HEAP32[$0>>2] = $10;
    STACKTOP = sp;return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((78096 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[78096>>2]|0;
     $32 = $31 & $30;
     HEAP32[78096>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre64 = (($20) + 8|0);
     $$pre$phi65Z2D = $$pre64;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi65Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi65Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((78096 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((78096 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((78096 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((78096 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((78096 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = HEAP32[((78096 + 16|0))>>2]|0;
      $90 = ($87>>>0)<($89>>>0);
      if ($90) {
       _abort();
       // unreachable;
      } else {
       $91 = (($R$1) + 16|0);
       HEAP32[$91>>2] = $87;
       $92 = (($87) + 24|0);
       HEAP32[$92>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $93 = (($p) + ($$sum28)|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0|0);
    if ($95) {
     $$0 = $9;$$02 = $10;
    } else {
     $96 = HEAP32[((78096 + 16|0))>>2]|0;
     $97 = ($94>>>0)<($96>>>0);
     if ($97) {
      _abort();
      // unreachable;
     } else {
      $98 = (($R$1) + 20|0);
      HEAP32[$98>>2] = $94;
      $99 = (($94) + 24|0);
      HEAP32[$99>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $108 = HEAP32[((78096 + 16|0))>>2]|0;
 $109 = ($0>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $110 = (($p) + ($$sum1)|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[((78096 + 24|0))>>2]|0;
  $115 = ($0|0)==($114|0);
  if ($115) {
   $116 = HEAP32[((78096 + 12|0))>>2]|0;
   $117 = (($116) + ($$02))|0;
   HEAP32[((78096 + 12|0))>>2] = $117;
   HEAP32[((78096 + 24|0))>>2] = $$0;
   $118 = $117 | 1;
   $119 = (($$0) + 4|0);
   HEAP32[$119>>2] = $118;
   $120 = HEAP32[((78096 + 20|0))>>2]|0;
   $121 = ($$0|0)==($120|0);
   if (!($121)) {
    STACKTOP = sp;return;
   }
   HEAP32[((78096 + 20|0))>>2] = 0;
   HEAP32[((78096 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $122 = HEAP32[((78096 + 20|0))>>2]|0;
  $123 = ($0|0)==($122|0);
  if ($123) {
   $124 = HEAP32[((78096 + 8|0))>>2]|0;
   $125 = (($124) + ($$02))|0;
   HEAP32[((78096 + 8|0))>>2] = $125;
   HEAP32[((78096 + 20|0))>>2] = $$0;
   $126 = $125 | 1;
   $127 = (($$0) + 4|0);
   HEAP32[$127>>2] = $126;
   $128 = (($$0) + ($125)|0);
   HEAP32[$128>>2] = $125;
   STACKTOP = sp;return;
  }
  $129 = $111 & -8;
  $130 = (($129) + ($$02))|0;
  $131 = $111 >>> 3;
  $132 = ($111>>>0)<(256);
  do {
   if ($132) {
    $$sum18 = (($psize) + 8)|0;
    $133 = (($p) + ($$sum18)|0);
    $134 = HEAP32[$133>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $135 = (($p) + ($$sum19)|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $131 << 1;
    $138 = ((78096 + ($137<<2)|0) + 40|0);
    $139 = ($134|0)==($138|0);
    if (!($139)) {
     $140 = ($134>>>0)<($108>>>0);
     if ($140) {
      _abort();
      // unreachable;
     }
     $141 = (($134) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==($0|0);
     if (!($143)) {
      _abort();
      // unreachable;
     }
    }
    $144 = ($136|0)==($134|0);
    if ($144) {
     $145 = 1 << $131;
     $146 = $145 ^ -1;
     $147 = HEAP32[78096>>2]|0;
     $148 = $147 & $146;
     HEAP32[78096>>2] = $148;
     break;
    }
    $149 = ($136|0)==($138|0);
    if ($149) {
     $$pre62 = (($136) + 8|0);
     $$pre$phi63Z2D = $$pre62;
    } else {
     $150 = ($136>>>0)<($108>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($136) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==($0|0);
     if ($153) {
      $$pre$phi63Z2D = $151;
     } else {
      _abort();
      // unreachable;
     }
    }
    $154 = (($134) + 12|0);
    HEAP32[$154>>2] = $136;
    HEAP32[$$pre$phi63Z2D>>2] = $134;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $155 = (($p) + ($$sum2)|0);
    $156 = HEAP32[$155>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $157 = (($p) + ($$sum3)|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ($158|0)==($0|0);
    do {
     if ($159) {
      $$sum5 = (($psize) + 20)|0;
      $169 = (($p) + ($$sum5)|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $$sum4 = (($psize) + 16)|0;
       $172 = (($p) + ($$sum4)|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = ($173|0)==(0|0);
       if ($174) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $173;$RP9$0 = $172;
       }
      } else {
       $R7$0 = $170;$RP9$0 = $169;
      }
      while(1) {
       $175 = (($R7$0) + 20|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($176|0)==(0|0);
       if (!($177)) {
        $R7$0 = $176;$RP9$0 = $175;
        continue;
       }
       $178 = (($R7$0) + 16|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      }
      $181 = ($RP9$0>>>0)<($108>>>0);
      if ($181) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $160 = (($p) + ($$sum17)|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = ($161>>>0)<($108>>>0);
      if ($162) {
       _abort();
       // unreachable;
      }
      $163 = (($161) + 12|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ($164|0)==($0|0);
      if (!($165)) {
       _abort();
       // unreachable;
      }
      $166 = (($158) + 8|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($167|0)==($0|0);
      if ($168) {
       HEAP32[$163>>2] = $158;
       HEAP32[$166>>2] = $161;
       $R7$1 = $158;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $182 = ($156|0)==(0|0);
    if (!($182)) {
     $$sum14 = (($psize) + 28)|0;
     $183 = (($p) + ($$sum14)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ((78096 + ($184<<2)|0) + 304|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($0|0)==($186|0);
     if ($187) {
      HEAP32[$185>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $188 = 1 << $184;
       $189 = $188 ^ -1;
       $190 = HEAP32[((78096 + 4|0))>>2]|0;
       $191 = $190 & $189;
       HEAP32[((78096 + 4|0))>>2] = $191;
       break;
      }
     } else {
      $192 = HEAP32[((78096 + 16|0))>>2]|0;
      $193 = ($156>>>0)<($192>>>0);
      if ($193) {
       _abort();
       // unreachable;
      }
      $194 = (($156) + 16|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = ($195|0)==($0|0);
      if ($196) {
       HEAP32[$194>>2] = $R7$1;
      } else {
       $197 = (($156) + 20|0);
       HEAP32[$197>>2] = $R7$1;
      }
      $198 = ($R7$1|0)==(0|0);
      if ($198) {
       break;
      }
     }
     $199 = HEAP32[((78096 + 16|0))>>2]|0;
     $200 = ($R7$1>>>0)<($199>>>0);
     if ($200) {
      _abort();
      // unreachable;
     }
     $201 = (($R7$1) + 24|0);
     HEAP32[$201>>2] = $156;
     $$sum15 = (($psize) + 16)|0;
     $202 = (($p) + ($$sum15)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($203|0)==(0|0);
     do {
      if (!($204)) {
       $205 = HEAP32[((78096 + 16|0))>>2]|0;
       $206 = ($203>>>0)<($205>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = (($R7$1) + 16|0);
        HEAP32[$207>>2] = $203;
        $208 = (($203) + 24|0);
        HEAP32[$208>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $209 = (($p) + ($$sum16)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[((78096 + 16|0))>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = (($R7$1) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = (($210) + 24|0);
       HEAP32[$215>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $130 | 1;
  $217 = (($$0) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$0) + ($130)|0);
  HEAP32[$218>>2] = $130;
  $219 = HEAP32[((78096 + 20|0))>>2]|0;
  $220 = ($$0|0)==($219|0);
  if ($220) {
   HEAP32[((78096 + 8|0))>>2] = $130;
   STACKTOP = sp;return;
  } else {
   $$1 = $130;
  }
 } else {
  $221 = $111 & -2;
  HEAP32[$110>>2] = $221;
  $222 = $$02 | 1;
  $223 = (($$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$0) + ($$02)|0);
  HEAP32[$224>>2] = $$02;
  $$1 = $$02;
 }
 $225 = $$1 >>> 3;
 $226 = ($$1>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = ((78096 + ($227<<2)|0) + 40|0);
  $229 = HEAP32[78096>>2]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[78096>>2] = $233;
   $$sum12$pre = (($227) + 2)|0;
   $$pre = ((78096 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $228;
  } else {
   $$sum13 = (($227) + 2)|0;
   $234 = ((78096 + ($$sum13<<2)|0) + 40|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[((78096 + 16|0))>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $234;$F16$0 = $235;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $238 = (($F16$0) + 12|0);
  HEAP32[$238>>2] = $$0;
  $239 = (($$0) + 8|0);
  HEAP32[$239>>2] = $F16$0;
  $240 = (($$0) + 12|0);
  HEAP32[$240>>2] = $228;
  STACKTOP = sp;return;
 }
 $241 = $$1 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $I19$0 = 0;
 } else {
  $243 = ($$1>>>0)>(16777215);
  if ($243) {
   $I19$0 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$1 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $I19$0 = $265;
  }
 }
 $266 = ((78096 + ($I19$0<<2)|0) + 304|0);
 $267 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$267>>2] = $I19$0$c;
 $268 = (($$0) + 20|0);
 HEAP32[$268>>2] = 0;
 $269 = (($$0) + 16|0);
 HEAP32[$269>>2] = 0;
 $270 = HEAP32[((78096 + 4|0))>>2]|0;
 $271 = 1 << $I19$0;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[((78096 + 4|0))>>2] = $274;
  HEAP32[$266>>2] = $$0;
  $275 = (($$0) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = (($$0) + 12|0);
  HEAP32[$276>>2] = $$0;
  $277 = (($$0) + 8|0);
  HEAP32[$277>>2] = $$0;
  STACKTOP = sp;return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($I19$0|0)==(31);
 if ($279) {
  $287 = 0;
 } else {
  $280 = $I19$0 >>> 1;
  $281 = (25 - ($280))|0;
  $287 = $281;
 }
 $282 = (($278) + 4|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = $283 & -8;
 $285 = ($284|0)==($$1|0);
 L194: do {
  if ($285) {
   $T$0$lcssa = $278;
  } else {
   $286 = $$1 << $287;
   $K20$049 = $286;$T$048 = $278;
   while(1) {
    $294 = $K20$049 >>> 31;
    $295 = ((($T$048) + ($294<<2)|0) + 16|0);
    $290 = HEAP32[$295>>2]|0;
    $296 = ($290|0)==(0|0);
    if ($296) {
     break;
    }
    $288 = $K20$049 << 1;
    $289 = (($290) + 4|0);
    $291 = HEAP32[$289>>2]|0;
    $292 = $291 & -8;
    $293 = ($292|0)==($$1|0);
    if ($293) {
     $T$0$lcssa = $290;
     break L194;
    } else {
     $K20$049 = $288;$T$048 = $290;
    }
   }
   $297 = HEAP32[((78096 + 16|0))>>2]|0;
   $298 = ($295>>>0)<($297>>>0);
   if ($298) {
    _abort();
    // unreachable;
   }
   HEAP32[$295>>2] = $$0;
   $299 = (($$0) + 24|0);
   HEAP32[$299>>2] = $T$048;
   $300 = (($$0) + 12|0);
   HEAP32[$300>>2] = $$0;
   $301 = (($$0) + 8|0);
   HEAP32[$301>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $302 = (($T$0$lcssa) + 8|0);
 $303 = HEAP32[$302>>2]|0;
 $304 = HEAP32[((78096 + 16|0))>>2]|0;
 $305 = ($T$0$lcssa>>>0)<($304>>>0);
 if ($305) {
  _abort();
  // unreachable;
 }
 $306 = ($303>>>0)<($304>>>0);
 if ($306) {
  _abort();
  // unreachable;
 }
 $307 = (($303) + 12|0);
 HEAP32[$307>>2] = $$0;
 HEAP32[$302>>2] = $$0;
 $308 = (($$0) + 8|0);
 HEAP32[$308>>2] = $303;
 $309 = (($$0) + 12|0);
 HEAP32[$309>>2] = $T$0$lcssa;
 $310 = (($$0) + 24|0);
 HEAP32[$310>>2] = 0;
 STACKTOP = sp;return;
}
function _isdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -48)|0;
 $1 = ($0>>>0)<(10);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 if ($0) {
  $4 = 1;
 } else {
  $1 = (($c) + -9)|0;
  $2 = ($1>>>0)<(5);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _isxdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 if ($isdigit) {
  $4 = 1;
 } else {
  $0 = $c | 32;
  $1 = (($0) + -97)|0;
  $2 = ($1>>>0)<(6);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 STACKTOP = sp;return ($$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 2047)) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 } else if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  STACKTOP = sp;return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 return +0;
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 STACKTOP = sp;return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = (($wc) + -57344)|0;
 $13 = ($12>>>0)<(8192);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre6 = HEAP32[$0>>2]|0;
    $8 = $$pre6;
    break;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $8 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $8;
 $9 = $6;
 $10 = (($7) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 1]($f,$s,$l)|0);
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 1]($f,$s,$i$0)|0);
   $26 = ($25>>>0)<($i$0>>>0);
   if ($26) {
    $$0 = $i$0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $27 = (($s) + ($i$0)|0);
    $28 = (($l) - ($i$0))|0;
    $$pre = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre;$i$1 = $i$0;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 STACKTOP = sp;return ($$0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 1]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i103$i = 0, $$0$lcssa$i127$i = 0, $$0$lcssa$i142$i = 0, $$0$lcssa$i37 = 0, $$0$lcssa$i38$i = 0, $$0$lcssa$i43 = 0, $$0$lcssa$i45 = 0, $$0$lcssa$i45$i = 0, $$0$lcssa$i48$i = 0, $$0$lcssa$i52 = 0, $$0$lcssa$i55$i = 0, $$0$lcssa$i59 = 0, $$0$lcssa$i62$i = 0;
 var $$0$lcssa$i66 = 0, $$0$lcssa$i68$i = 0, $$0$lcssa$i75$i = 0, $$0$lcssa$i76 = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i96$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i101$i = 0, $$01$i125$i = 0, $$01$i140$i = 0, $$01$i35 = 0, $$01$i36$i = 0, $$01$i43$i = 0, $$01$i50 = 0, $$01$i53$i = 0, $$01$i57 = 0, $$01$i60$i = 0, $$01$i64 = 0, $$01$i66$i = 0;
 var $$01$i73$i = 0, $$01$i74 = 0, $$01$i94$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i85$i = 0, $$012$i = 0, $$013$i = 0, $$03$i40 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i79$i = 0, $$07$i = 0.0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i112$i = 0, $$114$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i110$i = 0;
 var $$12$i119$i = 0, $$12$i134$i = 0, $$12$i87$i = 0, $$13 = 0, $$14 = 0, $$15 = 0, $$17 = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$2$us159$i = 0.0, $$20$i = 0, $$20$us$i = 0, $$21$i = 0, $$210$$23$i = 0, $$210$$25$i = 0, $$210$i = 0, $$22$i = 0.0, $$23$i = 0, $$25$i = 0;
 var $$3$i = 0.0, $$31$i = 0, $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$412175$i = 0, $$5193$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us322$i = 0, $$a$3$us323$i = 0, $$a$3324$i = 0, $$a$3325$i = 0, $$fl$4 = 0, $$lcssa300$i = 0, $$lcssa92 = 0, $$mask$i = 0, $$mask$i30 = 0, $$mask1$i = 0, $$mask1$i29 = 0;
 var $$neg151$i = 0, $$neg152$i = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr146$i = 0, $$pre = 0, $$pre$i = 0, $$pre290 = 0, $$pre292 = 0, $$pre319$i = 0, $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0.0, $1037 = 0.0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1045$phi = 0, $1046 = 0, $1046$phi = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0.0;
 var $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0.0, $408 = 0.0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0.0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0.0;
 var $496 = 0.0, $497 = 0.0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0.0, $511 = 0.0, $512 = 0.0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0.0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0.0;
 var $586 = 0.0, $587 = 0.0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0.0, $726 = 0.0, $727 = 0, $728 = 0.0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0;
 var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0;
 var $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0;
 var $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0;
 var $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0;
 var $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0;
 var $a$1 = 0, $a$1$lcssa$i = 0, $a$1263$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3249$i = 0, $a$3249$us$i = 0, $a$5$lcssa$i = 0, $a$5223$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0;
 var $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0;
 var $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $brmerge$i = 0;
 var $buf = 0, $buf$i = 0, $carry$0255$i = 0, $carry3$0243$i = 0, $carry3$0243$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $d$0$i = 0, $d$0254$i = 0, $d$0256$i = 0, $d$1242$i = 0, $d$1242$us$i = 0, $d$2$lcssa$i = 0, $d$2222$i = 0, $d$3$i = 0, $d$4183$i = 0, $d$5174$i = 0, $d$6192$i = 0, $e$0238$i = 0, $e$1$i = 0;
 var $e$2218$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1200$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0100 = 0, $fl$0104 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0166 = 0;
 var $i$0168 = 0, $i$0237$i = 0, $i$03$i = 0, $i$03$i22 = 0, $i$1$lcssa$i = 0, $i$1174 = 0, $i$1230$i = 0, $i$2217$i = 0, $i$289 = 0, $i$3209$i = 0, $i$388 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i24 = 0, $isdigit11 = 0, $isdigit2$i = 0, $isdigit2$i21 = 0, $isdigit9 = 0, $isdigittmp = 0, $isdigittmp$i = 0;
 var $isdigittmp$i23 = 0, $isdigittmp1$i = 0, $isdigittmp1$i20 = 0, $isdigittmp10 = 0, $isdigittmp8 = 0, $j$0$i = 0, $j$0229$i = 0, $j$0231$i = 0, $j$1210$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1$lcssa = 0, $l$1167 = 0, $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0;
 var $mb = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i100$i = 0, $or$cond$i35$i = 0, $or$cond$i42$i = 0, $or$cond$i49 = 0, $or$cond$i52$i = 0, $or$cond$i56 = 0, $or$cond$i59$i = 0, $or$cond$i63 = 0, $or$cond$i71 = 0, $or$cond$i72$i = 0, $or$cond$i73 = 0, $or$cond$i93$i = 0, $or$cond28$i = 0, $or$cond28173$i = 0, $or$cond29$i = 0, $or$cond4$i = 0;
 var $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$4296 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1165$i = 0;
 var $round$0164$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$0$us158$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s$1$us160$i = 0, $s1$0$i = 0, $s7$0180$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0169$i = 0, $s9$0$i = 0, $s9$1188$i = 0, $s9$2$i = 0, $sext = 0;
 var $sext84 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge12 = 0, $storemerge7103 = 0, $storemerge798 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$18$i = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0169 = 0, $ws$1175 = 0, $y$03$i = 0;
 var $y$03$i$i = 0, $y$03$i109$i = 0, $y$03$i118$i = 0, $y$03$i133$i = 0, $y$03$i86$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$093 = 0, $z$1$lcssa$i = 0, $z$1262$i = 0, $z$2 = 0, $z$2$i = 0, $z$3$lcssa$i = 0, $z$3248$i = 0, $z$3248$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$$i = 0, $z$6$i = 0;
 var $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp;
 $buf$i = sp + 832|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 816|0;
 $pad$i = sp + 520|0;
 $buf = sp + 776|0;
 $wc = sp + 8|0;
 $mb = sp + 828|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = (($ebuf0$i) + 12|0);
 $7 = (($ebuf0$i) + 11|0);
 $8 = $6;
 $9 = (($8) - ($0))|0;
 $10 = (-2 - ($0))|0;
 $11 = (($8) + 2)|0;
 $12 = (($big$i) + 288|0);
 $13 = (($buf$i) + 9|0);
 $14 = $13;
 $15 = (($buf$i) + 8|0);
 $1045 = 0;$1046 = 0;$22 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$22>>0]|0;
  $23 = ($21<<24>>24)==(0);
  if ($23) {
   label = 344;
   break;
  } else {
   $1047 = $21;$25 = $22;
  }
  while(1) {
   if ((($1047<<24>>24) == 0)) {
    $$lcssa92 = $25;$z$0$lcssa = $25;
    break;
   } else if ((($1047<<24>>24) == 37)) {
    $27 = $25;$z$093 = $25;
    label = 9;
    break;
   }
   $24 = (($25) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1047 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = (($27) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$lcssa92 = $27;$z$0$lcssa = $z$093;
      break L12;
     }
     $30 = (($z$093) + 1|0);
     $31 = (($27) + 2|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $27 = $31;$z$093 = $30;
      label = 9;
     } else {
      $$lcssa92 = $31;$z$0$lcssa = $30;
      break;
     }
    }
   }
  } while(0);
  $34 = $z$0$lcssa;
  $35 = $22;
  $36 = (($34) - ($35))|0;
  if ($1) {
   (___fwritex($22,$36,$f)|0);
  }
  $37 = ($z$0$lcssa|0)==($22|0);
  if (!($37)) {
   $l10n$0$phi = $l10n$0;$1046$phi = $1046;$1045$phi = $1045;$22 = $$lcssa92;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$0$phi;$1046 = $1046$phi;$1045 = $1045$phi;
   continue;
  }
  $38 = (($$lcssa92) + 1|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 << 24 >> 24;
  $isdigittmp = (($40) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $41 = (($$lcssa92) + 2|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = ($42<<24>>24)==(36);
   if ($43) {
    $44 = (($$lcssa92) + 3|0);
    $$pre290 = HEAP8[$44>>0]|0;
    $46 = $$pre290;$argpos$0 = $isdigittmp;$l10n$1 = 1;$storemerge = $44;
   } else {
    $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
   }
  } else {
   $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
  }
  $45 = $46 << 24 >> 24;
  $47 = (($45) + -32)|0;
  $48 = ($47>>>0)<(32);
  L25: do {
   if ($48) {
    $50 = $45;$55 = $46;$fl$0104 = 0;$storemerge7103 = $storemerge;
    while(1) {
     $49 = (($50) + -32)|0;
     $51 = 1 << $49;
     $52 = $51 & 75913;
     $53 = ($52|0)==(0);
     if ($53) {
      $65 = $55;$fl$0100 = $fl$0104;$storemerge798 = $storemerge7103;
      break L25;
     }
     $54 = $55 << 24 >> 24;
     $56 = (($54) + -32)|0;
     $57 = 1 << $56;
     $58 = $57 | $fl$0104;
     $59 = (($storemerge7103) + 1|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = $60 << 24 >> 24;
     $62 = (($61) + -32)|0;
     $63 = ($62>>>0)<(32);
     if ($63) {
      $50 = $61;$55 = $60;$fl$0104 = $58;$storemerge7103 = $59;
     } else {
      $65 = $60;$fl$0100 = $58;$storemerge798 = $59;
      break;
     }
    }
   } else {
    $65 = $46;$fl$0100 = 0;$storemerge798 = $storemerge;
   }
  } while(0);
  $64 = ($65<<24>>24)==(42);
  do {
   if ($64) {
    $66 = (($storemerge798) + 1|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67 << 24 >> 24;
    $isdigittmp10 = (($68) + -48)|0;
    $isdigit11 = ($isdigittmp10>>>0)<(10);
    if ($isdigit11) {
     $69 = (($storemerge798) + 2|0);
     $70 = HEAP8[$69>>0]|0;
     $71 = ($70<<24>>24)==(36);
     if ($71) {
      $72 = (($nl_type) + ($isdigittmp10<<2)|0);
      HEAP32[$72>>2] = 10;
      $73 = HEAP8[$66>>0]|0;
      $74 = $73 << 24 >> 24;
      $75 = (($74) + -48)|0;
      $76 = (($nl_arg) + ($75<<3)|0);
      $77 = $76;
      $78 = $77;
      $79 = HEAP32[$78>>2]|0;
      $80 = (($77) + 4)|0;
      $81 = $80;
      $82 = HEAP32[$81>>2]|0;
      $83 = (($storemerge798) + 3|0);
      $l10n$2 = 1;$storemerge12 = $83;$w$0 = $79;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $84 = ($l10n$1|0)==(0);
     if (!($84)) {
      $$0 = -1;
      label = 362;
      break L1;
     }
     if (!($1)) {
      $100 = $66;$fl$1 = $fl$0100;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $85 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge12 = $66;$w$0 = $85;
    }
    $86 = ($w$0|0)<(0);
    if ($86) {
     $87 = $fl$0100 | 8192;
     $88 = (0 - ($w$0))|0;
     $100 = $storemerge12;$fl$1 = $87;$l10n$3 = $l10n$2;$w$1 = $88;
    } else {
     $100 = $storemerge12;$fl$1 = $fl$0100;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $89 = $65 << 24 >> 24;
    $isdigittmp1$i = (($89) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $92 = $89;$95 = $storemerge798;$i$03$i = 0;
     while(1) {
      $90 = ($i$03$i*10)|0;
      $91 = (($92) + -48)|0;
      $93 = (($91) + ($90))|0;
      $94 = (($95) + 1|0);
      $96 = HEAP8[$94>>0]|0;
      $97 = $96 << 24 >> 24;
      $isdigittmp$i = (($97) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $92 = $97;$95 = $94;$i$03$i = $93;
      } else {
       break;
      }
     }
     $98 = ($93|0)<(0);
     if ($98) {
      $$0 = -1;
      label = 362;
      break L1;
     } else {
      $100 = $94;$fl$1 = $fl$0100;$l10n$3 = $l10n$1;$w$1 = $93;
     }
    } else {
     $100 = $storemerge798;$fl$1 = $fl$0100;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $99 = HEAP8[$100>>0]|0;
  $101 = ($99<<24>>24)==(46);
  L46: do {
   if ($101) {
    $102 = (($100) + 1|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = ($103<<24>>24)==(42);
    if (!($104)) {
     $125 = $103 << 24 >> 24;
     $isdigittmp1$i20 = (($125) + -48)|0;
     $isdigit2$i21 = ($isdigittmp1$i20>>>0)<(10);
     if ($isdigit2$i21) {
      $128 = $125;$131 = $102;$i$03$i22 = 0;
     } else {
      $1048 = $102;$p$0 = 0;
      break;
     }
     while(1) {
      $126 = ($i$03$i22*10)|0;
      $127 = (($128) + -48)|0;
      $129 = (($127) + ($126))|0;
      $130 = (($131) + 1|0);
      $132 = HEAP8[$130>>0]|0;
      $133 = $132 << 24 >> 24;
      $isdigittmp$i23 = (($133) + -48)|0;
      $isdigit$i24 = ($isdigittmp$i23>>>0)<(10);
      if ($isdigit$i24) {
       $128 = $133;$131 = $130;$i$03$i22 = $129;
      } else {
       $1048 = $130;$p$0 = $129;
       break L46;
      }
     }
    }
    $105 = (($100) + 2|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = $106 << 24 >> 24;
    $isdigittmp8 = (($107) + -48)|0;
    $isdigit9 = ($isdigittmp8>>>0)<(10);
    if ($isdigit9) {
     $108 = (($100) + 3|0);
     $109 = HEAP8[$108>>0]|0;
     $110 = ($109<<24>>24)==(36);
     if ($110) {
      $111 = (($nl_type) + ($isdigittmp8<<2)|0);
      HEAP32[$111>>2] = 10;
      $112 = HEAP8[$105>>0]|0;
      $113 = $112 << 24 >> 24;
      $114 = (($113) + -48)|0;
      $115 = (($nl_arg) + ($114<<3)|0);
      $116 = $115;
      $117 = $116;
      $118 = HEAP32[$117>>2]|0;
      $119 = (($116) + 4)|0;
      $120 = $119;
      $121 = HEAP32[$120>>2]|0;
      $122 = (($100) + 4|0);
      $1048 = $122;$p$0 = $118;
      break;
     }
    }
    $123 = ($l10n$3|0)==(0);
    if (!($123)) {
     $$0 = -1;
     label = 362;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $124 = HEAP32[$arglist_current2>>2]|0;
     $arglist_next3 = (($arglist_current2) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $1048 = $105;$p$0 = $124;
    } else {
     $1048 = $105;$p$0 = 0;
    }
   } else {
    $1048 = $100;$p$0 = -1;
   }
  } while(0);
  $135 = $1048;$st$0 = 0;
  while(1) {
   $134 = HEAP8[$135>>0]|0;
   $136 = $134 << 24 >> 24;
   $137 = (($136) + -65)|0;
   $138 = ($137>>>0)>(57);
   if ($138) {
    $$0 = -1;
    label = 362;
    break L1;
   }
   $139 = (($135) + 1|0);
   $140 = ((78592 + (($st$0*58)|0)|0) + ($137)|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = (($142) + -1)|0;
   $144 = ($143>>>0)<(8);
   if ($144) {
    $135 = $139;$st$0 = $142;
   } else {
    break;
   }
  }
  $145 = ($141<<24>>24)==(0);
  if ($145) {
   $$0 = -1;
   label = 362;
   break;
  }
  $146 = ($141<<24>>24)==(19);
  $147 = ($argpos$0|0)>(-1);
  L65: do {
   if ($146) {
    if ($147) {
     $$0 = -1;
     label = 362;
     break L1;
    } else {
     $1049 = $1045;$1050 = $1046;
     label = 63;
    }
   } else {
    if ($147) {
     $148 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$148>>2] = $142;
     $149 = (($nl_arg) + ($argpos$0<<3)|0);
     $150 = $149;
     $151 = $150;
     $152 = HEAP32[$151>>2]|0;
     $153 = (($150) + 4)|0;
     $154 = $153;
     $155 = HEAP32[$154>>2]|0;
     $156 = $152;
     $1049 = $155;$1050 = $156;
     label = 63;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 362;
     break L1;
    }
    $157 = ($141&255)>(20);
    if ($157) {
     $199 = $134;$207 = $1046;$229 = $1045;
    } else {
     do {
      switch ($142|0) {
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $163 = HEAP32[$arglist_current11>>2]|0;
       $arglist_next12 = (($arglist_current11) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $164 = $163;
       $1051 = $164;$1052 = 0;
       label = 64;
       break L65;
       break;
      }
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $158 = HEAP32[$arglist_current5>>2]|0;
       $arglist_next6 = (($arglist_current5) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $1051 = $158;$1052 = $1045;
       label = 64;
       break L65;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $165 = $arglist_current14;
       $166 = $165;
       $167 = HEAP32[$166>>2]|0;
       $168 = (($165) + 4)|0;
       $169 = $168;
       $170 = HEAP32[$169>>2]|0;
       $arglist_next15 = (($arglist_current14) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $171 = $167;
       $1051 = $171;$1052 = $170;
       label = 64;
       break L65;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $159 = HEAP32[$arglist_current8>>2]|0;
       $arglist_next9 = (($arglist_current8) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $160 = ($159|0)<(0);
       $161 = $160 << 31 >> 31;
       $162 = $159;
       $1051 = $162;$1052 = $161;
       label = 64;
       break L65;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $172 = HEAP32[$arglist_current17>>2]|0;
       $arglist_next18 = (($arglist_current17) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $173 = $172&65535;
       $174 = $173 << 16 >> 16;
       $175 = ($174|0)<(0);
       $176 = $175 << 31 >> 31;
       $sext84 = $172 << 16;
       $177 = $sext84 >> 16;
       $178 = $177;
       $1051 = $178;$1052 = $176;
       label = 64;
       break L65;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $181 = HEAP32[$arglist_current23>>2]|0;
       $arglist_next24 = (($arglist_current23) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $182 = $181&255;
       $183 = $182 << 24 >> 24;
       $184 = ($183|0)<(0);
       $185 = $184 << 31 >> 31;
       $sext = $181 << 24;
       $186 = $sext >> 24;
       $187 = $186;
       $1051 = $187;$1052 = $185;
       label = 64;
       break L65;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $179 = HEAP32[$arglist_current20>>2]|0;
       $arglist_next21 = (($arglist_current20) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i29 = $179 & 65535;
       $180 = $$mask1$i29;
       $1051 = $180;$1052 = 0;
       label = 64;
       break L65;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $188 = HEAP32[$arglist_current26>>2]|0;
       $arglist_next27 = (($arglist_current26) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i30 = $188 & 255;
       $189 = $$mask$i30;
       $1051 = $189;$1052 = 0;
       label = 64;
       break L65;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$190 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next30 = (($arglist_current29) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $190;$191 = HEAP32[tempDoublePtr>>2]|0;
       $192 = HEAP32[tempDoublePtr+4>>2]|0;
       $193 = $191;
       $1051 = $193;$1052 = $192;
       label = 64;
       break L65;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$194 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next33 = (($arglist_current32) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $194;$195 = HEAP32[tempDoublePtr>>2]|0;
       $196 = HEAP32[tempDoublePtr+4>>2]|0;
       $197 = $195;
       $1049 = $196;$1050 = $197;
       label = 63;
       break L65;
       break;
      }
      default: {
       $1051 = $1046;$1052 = $1045;
       label = 64;
       break L65;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 63) {
   label = 0;
   if ($1) {
    $1051 = $1050;$1052 = $1049;
    label = 64;
   } else {
    $1045 = $1049;$1046 = $1050;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
    continue;
   }
  }
  if ((label|0) == 64) {
   label = 0;
   $$pre292 = HEAP8[$135>>0]|0;
   $199 = $$pre292;$207 = $1051;$229 = $1052;
  }
  $198 = $199 << 24 >> 24;
  $200 = ($st$0|0)==(0);
  if ($200) {
   $t$0 = $198;
  } else {
   $201 = $198 & 15;
   $202 = ($201|0)==(3);
   $203 = $198 & -33;
   $$ = $202 ? $203 : $198;
   $t$0 = $$;
  }
  $204 = $fl$1 & 8192;
  $205 = ($204|0)==(0);
  $206 = $fl$1 & -65537;
  $fl$1$ = $205 ? $fl$1 : $206;
  L92: do {
   switch ($t$0|0) {
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $368 = $207;
    HEAP32[tempDoublePtr>>2] = $368;HEAP32[tempDoublePtr+4>>2] = $229;$369 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $370 = ($229|0)<(0);
    if ($370) {
     $371 = -$369;
     $$07$i = $371;$pl$0$i = 1;$prefix$0$i = 79080;
    } else {
     $372 = $fl$1$ & 2048;
     $373 = ($372|0)==(0);
     if ($373) {
      $374 = $fl$1$ & 1;
      $375 = ($374|0)==(0);
      $$$i = $375 ? ((79080 + 1|0)) : ((79080 + 6|0));
      $$07$i = $369;$pl$0$i = $374;$prefix$0$i = $$$i;
     } else {
      $$07$i = $369;$pl$0$i = 1;$prefix$0$i = ((79080 + 3|0));
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$376 = HEAP32[tempDoublePtr>>2]|0;
    $377 = HEAP32[tempDoublePtr+4>>2]|0;
    $378 = $377 & 2146435072;
    $379 = ($378>>>0)<(2146435072);
    $380 = ($378|0)==(2146435072);
    $381 = (0)<(0);
    $382 = $380 & $381;
    $383 = $379 | $382;
    if (!($383)) {
     $384 = $t$0 & 32;
     $385 = ($384|0)!=(0);
     $386 = $385 ? 79104 : 79112;
     $387 = ($$07$i != $$07$i) | (0.0 != 0.0);
     if ($387) {
      $388 = $385 ? 79120 : 79128;
      $pl$1$i = 0;$s1$0$i = $388;
     } else {
      $pl$1$i = $pl$0$i;$s1$0$i = $386;
     }
     $389 = (($pl$1$i) + 3)|0;
     $390 = $fl$1$ & 8192;
     $391 = ($390|0)==(0);
     $392 = ($389|0)<($w$1|0);
     $or$cond$i35$i = $391 & $392;
     if ($or$cond$i35$i) {
      $393 = (($w$1) - ($389))|0;
      $394 = ($393>>>0)>(256);
      $395 = $394 ? 256 : $393;
      _memset(($pad$i|0),32,($395|0))|0;
      $396 = ($393>>>0)>(255);
      if ($396) {
       $$01$i36$i = $393;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $397 = (($$01$i36$i) + -256)|0;
        $398 = ($397>>>0)>(255);
        if ($398) {
         $$01$i36$i = $397;
        } else {
         $$0$lcssa$i38$i = $397;
         break;
        }
       }
      } else {
       $$0$lcssa$i38$i = $393;
      }
      (___fwritex($pad$i,$$0$lcssa$i38$i,$f)|0);
     }
     (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
     (___fwritex($s1$0$i,3,$f)|0);
     $399 = $fl$1$ & 73728;
     $400 = ($399|0)==(8192);
     $or$cond$i42$i = $400 & $392;
     if ($or$cond$i42$i) {
      $401 = (($w$1) - ($389))|0;
      $402 = ($401>>>0)>(256);
      $403 = $402 ? 256 : $401;
      _memset(($pad$i|0),32,($403|0))|0;
      $404 = ($401>>>0)>(255);
      if ($404) {
       $$01$i43$i = $401;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $405 = (($$01$i43$i) + -256)|0;
        $406 = ($405>>>0)>(255);
        if ($406) {
         $$01$i43$i = $405;
        } else {
         $$0$lcssa$i45$i = $405;
         break;
        }
       }
      } else {
       $$0$lcssa$i45$i = $401;
      }
      (___fwritex($pad$i,$$0$lcssa$i45$i,$f)|0);
     }
     $w$$i = $392 ? $w$1 : $389;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $407 = (+_frexpl($$07$i,$e2$i));
    $408 = $407 * 2.0;
    $409 = $408 != 0.0;
    if ($409) {
     $410 = HEAP32[$e2$i>>2]|0;
     $411 = (($410) + -1)|0;
     HEAP32[$e2$i>>2] = $411;
    }
    $412 = $t$0 | 32;
    $413 = ($412|0)==(97);
    if ($413) {
     $414 = $t$0 & 32;
     $415 = ($414|0)==(0);
     $416 = (($prefix$0$i) + 9|0);
     $prefix$0$$i = $415 ? $prefix$0$i : $416;
     $417 = $pl$0$i | 2;
     $418 = ($p$0>>>0)>(11);
     $419 = (12 - ($p$0))|0;
     $re$0$i = $418 ? 0 : $419;
     $420 = ($re$0$i|0)==(0);
     do {
      if ($420) {
       $$1$i = $408;
      } else {
       $re$1165$i = $re$0$i;$round$0164$i = 8.0;
       while(1) {
        $421 = (($re$1165$i) + -1)|0;
        $422 = $round$0164$i * 16.0;
        $423 = ($421|0)==(0);
        if ($423) {
         break;
        } else {
         $re$1165$i = $421;$round$0164$i = $422;
        }
       }
       $424 = HEAP8[$prefix$0$$i>>0]|0;
       $425 = ($424<<24>>24)==(45);
       if ($425) {
        $426 = -$408;
        $427 = $426 - $422;
        $428 = $422 + $427;
        $429 = -$428;
        $$1$i = $429;
        break;
       } else {
        $430 = $408 + $422;
        $431 = $430 - $422;
        $$1$i = $431;
        break;
       }
      }
     } while(0);
     $432 = HEAP32[$e2$i>>2]|0;
     $433 = ($432|0)<(0);
     $434 = (0 - ($432))|0;
     $435 = $433 ? $434 : $432;
     $436 = ($435|0)<(0);
     if ($436) {
      $437 = ($435|0)<(0);
      $438 = $437 << 31 >> 31;
      $$05$i$i = $6;$439 = $435;$440 = $438;
      while(1) {
       $441 = (___uremdi3(($439|0),($440|0),10,0)|0);
       $442 = tempRet0;
       $443 = $441 | 48;
       $444 = $443&255;
       $445 = (($$05$i$i) + -1|0);
       HEAP8[$445>>0] = $444;
       $446 = (___udivdi3(($439|0),($440|0),10,0)|0);
       $447 = tempRet0;
       $448 = ($440>>>0)>(9);
       $449 = ($440|0)==(9);
       $450 = ($439>>>0)>(4294967295);
       $451 = $449 & $450;
       $452 = $448 | $451;
       if ($452) {
        $$05$i$i = $445;$439 = $446;$440 = $447;
       } else {
        break;
       }
      }
      $$0$lcssa$i48$i = $445;$$01$lcssa$off0$i$i = $446;
     } else {
      $$0$lcssa$i48$i = $6;$$01$lcssa$off0$i$i = $435;
     }
     $453 = ($$01$lcssa$off0$i$i|0)==(0);
     if ($453) {
      $$1$lcssa$i$i = $$0$lcssa$i48$i;
     } else {
      $$12$i$i = $$0$lcssa$i48$i;$y$03$i$i = $$01$lcssa$off0$i$i;
      while(1) {
       $454 = (($y$03$i$i>>>0) % 10)&-1;
       $455 = $454 | 48;
       $456 = $455&255;
       $457 = (($$12$i$i) + -1|0);
       HEAP8[$457>>0] = $456;
       $458 = (($y$03$i$i>>>0) / 10)&-1;
       $459 = ($y$03$i$i>>>0)<(10);
       if ($459) {
        $$1$lcssa$i$i = $457;
        break;
       } else {
        $$12$i$i = $457;$y$03$i$i = $458;
       }
      }
     }
     $460 = ($$1$lcssa$i$i|0)==($6|0);
     if ($460) {
      HEAP8[$7>>0] = 48;
      $estr$0$i = $7;
     } else {
      $estr$0$i = $$1$lcssa$i$i;
     }
     $461 = HEAP32[$e2$i>>2]|0;
     $462 = $461 >> 31;
     $463 = $462 & 2;
     $464 = (($463) + 43)|0;
     $465 = $464&255;
     $466 = (($estr$0$i) + -1|0);
     HEAP8[$466>>0] = $465;
     $467 = (($t$0) + 15)|0;
     $468 = $467&255;
     $469 = (($estr$0$i) + -2|0);
     HEAP8[$469>>0] = $468;
     $470 = ($p$0|0)>(0);
     $471 = $fl$1$ & 8;
     $472 = ($471|0)==(0);
     if ($470) {
      if ($472) {
       $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
       while(1) {
        $473 = (~~(($$2$us$us$i)));
        $474 = (79136 + ($473)|0);
        $475 = HEAP8[$474>>0]|0;
        $476 = $475&255;
        $477 = $476 | $414;
        $478 = $477&255;
        $479 = (($s$0$us$us$i) + 1|0);
        HEAP8[$s$0$us$us$i>>0] = $478;
        $480 = (+($473|0));
        $481 = $$2$us$us$i - $480;
        $482 = $481 * 16.0;
        $483 = $479;
        $484 = (($483) - ($0))|0;
        $485 = ($484|0)==(1);
        if ($485) {
         $486 = (($s$0$us$us$i) + 2|0);
         HEAP8[$479>>0] = 46;
         $s$1$us$us$i = $486;
        } else {
         $s$1$us$us$i = $479;
        }
        $487 = $482 != 0.0;
        if ($487) {
         $$2$us$us$i = $482;$s$0$us$us$i = $s$1$us$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        }
       }
      } else {
       $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
       while(1) {
        $488 = (~~(($$2$us$i)));
        $489 = (79136 + ($488)|0);
        $490 = HEAP8[$489>>0]|0;
        $491 = $490&255;
        $492 = $491 | $414;
        $493 = $492&255;
        $494 = (($s$0$us$i) + 1|0);
        HEAP8[$s$0$us$i>>0] = $493;
        $495 = (+($488|0));
        $496 = $$2$us$i - $495;
        $497 = $496 * 16.0;
        $498 = $494;
        $499 = (($498) - ($0))|0;
        $500 = ($499|0)==(1);
        if ($500) {
         $501 = (($s$0$us$i) + 2|0);
         HEAP8[$494>>0] = 46;
         $s$1$us$i = $501;
        } else {
         $s$1$us$i = $494;
        }
        $502 = $497 != 0.0;
        if ($502) {
         $$2$us$i = $497;$s$0$us$i = $s$1$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        }
       }
      }
     } else {
      if ($472) {
       $$2$us159$i = $$1$i;$s$0$us158$i = $buf$i;
       while(1) {
        $503 = (~~(($$2$us159$i)));
        $504 = (79136 + ($503)|0);
        $505 = HEAP8[$504>>0]|0;
        $506 = $505&255;
        $507 = $506 | $414;
        $508 = $507&255;
        $509 = (($s$0$us158$i) + 1|0);
        HEAP8[$s$0$us158$i>>0] = $508;
        $510 = (+($503|0));
        $511 = $$2$us159$i - $510;
        $512 = $511 * 16.0;
        $513 = $509;
        $514 = (($513) - ($0))|0;
        $515 = ($514|0)==(1);
        $516 = $512 != 0.0;
        $or$cond$i71 = $515 & $516;
        if ($or$cond$i71) {
         $517 = (($s$0$us158$i) + 2|0);
         HEAP8[$509>>0] = 46;
         $s$1$us160$i = $517;
        } else {
         $s$1$us160$i = $509;
        }
        if ($516) {
         $$2$us159$i = $512;$s$0$us158$i = $s$1$us160$i;
        } else {
         $s$1$lcssa$i = $s$1$us160$i;
         break;
        }
       }
      } else {
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $518 = (~~(($$2$i)));
        $519 = (79136 + ($518)|0);
        $520 = HEAP8[$519>>0]|0;
        $521 = $520&255;
        $522 = $521 | $414;
        $523 = $522&255;
        $524 = (($s$0$i) + 1|0);
        HEAP8[$s$0$i>>0] = $523;
        $525 = (+($518|0));
        $526 = $$2$i - $525;
        $527 = $526 * 16.0;
        $528 = $524;
        $529 = (($528) - ($0))|0;
        $530 = ($529|0)==(1);
        if ($530) {
         $531 = (($s$0$i) + 2|0);
         HEAP8[$524>>0] = 46;
         $s$1$i = $531;
        } else {
         $s$1$i = $524;
        }
        $532 = $527 != 0.0;
        if ($532) {
         $$2$i = $527;$s$0$i = $s$1$i;
        } else {
         $s$1$lcssa$i = $s$1$i;
         break;
        }
       }
      }
     }
     $533 = ($p$0|0)==(0);
     $$pre319$i = $s$1$lcssa$i;
     do {
      if ($533) {
       label = 173;
      } else {
       $534 = (($10) + ($$pre319$i))|0;
       $535 = ($534|0)<($p$0|0);
       if (!($535)) {
        label = 173;
        break;
       }
       $536 = $469;
       $537 = (($11) + ($p$0))|0;
       $538 = (($537) - ($536))|0;
       $l$0$i = $538;
      }
     } while(0);
     if ((label|0) == 173) {
      label = 0;
      $539 = $469;
      $540 = (($9) - ($539))|0;
      $541 = (($540) + ($$pre319$i))|0;
      $l$0$i = $541;
     }
     $542 = (($l$0$i) + ($417))|0;
     $543 = $fl$1$ & 73728;
     $544 = ($543|0)==(0);
     $545 = ($542|0)<($w$1|0);
     $or$cond$i52$i = $544 & $545;
     if ($or$cond$i52$i) {
      $546 = (($w$1) - ($542))|0;
      $547 = ($546>>>0)>(256);
      $548 = $547 ? 256 : $546;
      _memset(($pad$i|0),32,($548|0))|0;
      $549 = ($546>>>0)>(255);
      if ($549) {
       $$01$i53$i = $546;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $550 = (($$01$i53$i) + -256)|0;
        $551 = ($550>>>0)>(255);
        if ($551) {
         $$01$i53$i = $550;
        } else {
         $$0$lcssa$i55$i = $550;
         break;
        }
       }
      } else {
       $$0$lcssa$i55$i = $546;
      }
      (___fwritex($pad$i,$$0$lcssa$i55$i,$f)|0);
     }
     (___fwritex($prefix$0$$i,$417,$f)|0);
     $552 = ($543|0)==(65536);
     $or$cond$i59$i = $552 & $545;
     if ($or$cond$i59$i) {
      $553 = (($w$1) - ($542))|0;
      $554 = ($553>>>0)>(256);
      $555 = $554 ? 256 : $553;
      _memset(($pad$i|0),48,($555|0))|0;
      $556 = ($553>>>0)>(255);
      if ($556) {
       $$01$i60$i = $553;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $557 = (($$01$i60$i) + -256)|0;
        $558 = ($557>>>0)>(255);
        if ($558) {
         $$01$i60$i = $557;
        } else {
         $$0$lcssa$i62$i = $557;
         break;
        }
       }
      } else {
       $$0$lcssa$i62$i = $553;
      }
      (___fwritex($pad$i,$$0$lcssa$i62$i,$f)|0);
     }
     $559 = (($$pre319$i) - ($0))|0;
     (___fwritex($buf$i,$559,$f)|0);
     $560 = $469;
     $561 = (($8) - ($560))|0;
     $562 = (($l$0$i) - ($561))|0;
     $563 = (($562) - ($559))|0;
     $564 = ($563|0)>(0);
     if ($564) {
      $565 = ($563>>>0)>(256);
      $566 = $565 ? 256 : $563;
      _memset(($pad$i|0),48,($566|0))|0;
      $567 = ($563>>>0)>(255);
      if ($567) {
       $$01$i66$i = $563;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $568 = (($$01$i66$i) + -256)|0;
        $569 = ($568>>>0)>(255);
        if ($569) {
         $$01$i66$i = $568;
        } else {
         $$0$lcssa$i68$i = $568;
         break;
        }
       }
      } else {
       $$0$lcssa$i68$i = $563;
      }
      (___fwritex($pad$i,$$0$lcssa$i68$i,$f)|0);
     }
     (___fwritex($469,$561,$f)|0);
     $570 = ($543|0)==(8192);
     $or$cond$i72$i = $570 & $545;
     if ($or$cond$i72$i) {
      $571 = (($w$1) - ($542))|0;
      $572 = ($571>>>0)>(256);
      $573 = $572 ? 256 : $571;
      _memset(($pad$i|0),32,($573|0))|0;
      $574 = ($571>>>0)>(255);
      if ($574) {
       $$01$i73$i = $571;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $575 = (($$01$i73$i) + -256)|0;
        $576 = ($575>>>0)>(255);
        if ($576) {
         $$01$i73$i = $575;
        } else {
         $$0$lcssa$i75$i = $575;
         break;
        }
       }
      } else {
       $$0$lcssa$i75$i = $571;
      }
      (___fwritex($pad$i,$$0$lcssa$i75$i,$f)|0);
     }
     $w$18$i = $545 ? $w$1 : $542;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$18$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $577 = ($p$0|0)<(0);
    $$p$i = $577 ? 6 : $p$0;
    if ($409) {
     $578 = $408 * 268435456.0;
     $579 = HEAP32[$e2$i>>2]|0;
     $580 = (($579) + -28)|0;
     HEAP32[$e2$i>>2] = $580;
     $$3$i = $578;$582 = $580;
    } else {
     $$pre$i = HEAP32[$e2$i>>2]|0;
     $$3$i = $408;$582 = $$pre$i;
    }
    $581 = ($582|0)<(0);
    $$31$i = $581 ? $big$i : $12;
    $$4$i = $$3$i;$z$0$i = $$31$i;
    while(1) {
     $583 = (~~(($$4$i))>>>0);
     HEAP32[$z$0$i>>2] = $583;
     $584 = (($z$0$i) + 4|0);
     $585 = (+($583>>>0));
     $586 = $$4$i - $585;
     $587 = $586 * 1.0E+9;
     $588 = $587 != 0.0;
     if ($588) {
      $$4$i = $587;$z$0$i = $584;
     } else {
      break;
     }
    }
    $$pr$i = HEAP32[$e2$i>>2]|0;
    $589 = ($$pr$i|0)>(0);
    if ($589) {
     $591 = $$pr$i;$a$1263$i = $$31$i;$z$1262$i = $584;
     while(1) {
      $590 = ($591|0)>(29);
      $592 = $590 ? 29 : $591;
      $d$0254$i = (($z$1262$i) + -4|0);
      $593 = ($d$0254$i>>>0)<($a$1263$i>>>0);
      do {
       if ($593) {
        $a$2$ph$i = $a$1263$i;
       } else {
        $carry$0255$i = 0;$d$0256$i = $d$0254$i;
        while(1) {
         $594 = HEAP32[$d$0256$i>>2]|0;
         $595 = (_bitshift64Shl(($594|0),0,($592|0))|0);
         $596 = tempRet0;
         $597 = (_i64Add(($595|0),($596|0),($carry$0255$i|0),0)|0);
         $598 = tempRet0;
         $599 = (___uremdi3(($597|0),($598|0),1000000000,0)|0);
         $600 = tempRet0;
         HEAP32[$d$0256$i>>2] = $599;
         $601 = (___udivdi3(($597|0),($598|0),1000000000,0)|0);
         $602 = tempRet0;
         $d$0$i = (($d$0256$i) + -4|0);
         $603 = ($d$0$i>>>0)<($a$1263$i>>>0);
         if ($603) {
          break;
         } else {
          $carry$0255$i = $601;$d$0256$i = $d$0$i;
         }
        }
        $604 = ($601|0)==(0);
        if ($604) {
         $a$2$ph$i = $a$1263$i;
         break;
        }
        $605 = (($a$1263$i) + -4|0);
        HEAP32[$605>>2] = $601;
        $a$2$ph$i = $605;
       }
      } while(0);
      $z$2$i = $z$1262$i;
      while(1) {
       $606 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
       if (!($606)) {
        break;
       }
       $607 = (($z$2$i) + -4|0);
       $608 = HEAP32[$607>>2]|0;
       $609 = ($608|0)==(0);
       if ($609) {
        $z$2$i = $607;
       } else {
        break;
       }
      }
      $610 = HEAP32[$e2$i>>2]|0;
      $611 = (($610) - ($592))|0;
      HEAP32[$e2$i>>2] = $611;
      $612 = ($611|0)>(0);
      if ($612) {
       $591 = $611;$a$1263$i = $a$2$ph$i;$z$1262$i = $z$2$i;
      } else {
       $$pr146$i = $611;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i;
       break;
      }
     }
    } else {
     $$pr146$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $584;
    }
    $613 = ($$pr146$i|0)<(0);
    L228: do {
     if ($613) {
      $614 = (($$p$i) + 25)|0;
      $615 = (($614|0) / 9)&-1;
      $616 = (($615) + 1)|0;
      $617 = ($412|0)==(102);
      if ($617) {
       $618 = $$31$i;
       $619 = (($$31$i) + ($616<<2)|0);
       $621 = $$pr146$i;$a$3249$us$i = $a$1$lcssa$i;$z$3248$us$i = $z$1$lcssa$i;
       while(1) {
        $620 = (0 - ($621))|0;
        $622 = ($620|0)>(9);
        $$20$us$i = $622 ? 9 : $620;
        $623 = ($a$3249$us$i>>>0)<($z$3248$us$i>>>0);
        do {
         if ($623) {
          $648 = 1 << $$20$us$i;
          $642 = (($648) + -1)|0;
          $645 = 1000000000 >>> $$20$us$i;
          $carry3$0243$us$i = 0;$d$1242$us$i = $a$3249$us$i;
          while(1) {
           $640 = HEAP32[$d$1242$us$i>>2]|0;
           $641 = $640 & $642;
           $643 = $640 >>> $$20$us$i;
           $644 = (($643) + ($carry3$0243$us$i))|0;
           HEAP32[$d$1242$us$i>>2] = $644;
           $631 = Math_imul($641, $645)|0;
           $646 = (($d$1242$us$i) + 4|0);
           $647 = ($646>>>0)<($z$3248$us$i>>>0);
           if ($647) {
            $carry3$0243$us$i = $631;$d$1242$us$i = $646;
           } else {
            break;
           }
          }
          $627 = HEAP32[$a$3249$us$i>>2]|0;
          $628 = ($627|0)==(0);
          $629 = (($a$3249$us$i) + 4|0);
          $$a$3$us$i = $628 ? $629 : $a$3249$us$i;
          $630 = ($631|0)==(0);
          if ($630) {
           $$a$3$us323$i = $$a$3$us$i;$z$4$us$i = $z$3248$us$i;
           break;
          }
          $632 = (($z$3248$us$i) + 4|0);
          HEAP32[$z$3248$us$i>>2] = $631;
          $$a$3$us323$i = $$a$3$us$i;$z$4$us$i = $632;
         } else {
          $624 = HEAP32[$a$3249$us$i>>2]|0;
          $625 = ($624|0)==(0);
          $626 = (($a$3249$us$i) + 4|0);
          $$a$3$us322$i = $625 ? $626 : $a$3249$us$i;
          $$a$3$us323$i = $$a$3$us322$i;$z$4$us$i = $z$3248$us$i;
         }
        } while(0);
        $633 = $z$4$us$i;
        $634 = (($633) - ($618))|0;
        $635 = $634 >> 2;
        $636 = ($635|0)>($616|0);
        $$z$4$us$i = $636 ? $619 : $z$4$us$i;
        $637 = HEAP32[$e2$i>>2]|0;
        $638 = (($637) + ($$20$us$i))|0;
        HEAP32[$e2$i>>2] = $638;
        $639 = ($638|0)<(0);
        if ($639) {
         $621 = $638;$a$3249$us$i = $$a$3$us323$i;$z$3248$us$i = $$z$4$us$i;
        } else {
         $a$3$lcssa$i = $$a$3$us323$i;$z$3$lcssa$i = $$z$4$us$i;
         break L228;
        }
       }
      } else {
       $650 = $$pr146$i;$a$3249$i = $a$1$lcssa$i;$z$3248$i = $z$1$lcssa$i;
      }
      while(1) {
       $649 = (0 - ($650))|0;
       $651 = ($649|0)>(9);
       $$20$i = $651 ? 9 : $649;
       $652 = ($a$3249$i>>>0)<($z$3248$i>>>0);
       do {
        if ($652) {
         $656 = 1 << $$20$i;
         $657 = (($656) + -1)|0;
         $658 = 1000000000 >>> $$20$i;
         $carry3$0243$i = 0;$d$1242$i = $a$3249$i;
         while(1) {
          $659 = HEAP32[$d$1242$i>>2]|0;
          $660 = $659 & $657;
          $661 = $659 >>> $$20$i;
          $662 = (($661) + ($carry3$0243$i))|0;
          HEAP32[$d$1242$i>>2] = $662;
          $663 = Math_imul($660, $658)|0;
          $664 = (($d$1242$i) + 4|0);
          $665 = ($664>>>0)<($z$3248$i>>>0);
          if ($665) {
           $carry3$0243$i = $663;$d$1242$i = $664;
          } else {
           break;
          }
         }
         $666 = HEAP32[$a$3249$i>>2]|0;
         $667 = ($666|0)==(0);
         $668 = (($a$3249$i) + 4|0);
         $$a$3$i = $667 ? $668 : $a$3249$i;
         $669 = ($663|0)==(0);
         if ($669) {
          $$a$3325$i = $$a$3$i;$z$4$i = $z$3248$i;
          break;
         }
         $670 = (($z$3248$i) + 4|0);
         HEAP32[$z$3248$i>>2] = $663;
         $$a$3325$i = $$a$3$i;$z$4$i = $670;
        } else {
         $653 = HEAP32[$a$3249$i>>2]|0;
         $654 = ($653|0)==(0);
         $655 = (($a$3249$i) + 4|0);
         $$a$3324$i = $654 ? $655 : $a$3249$i;
         $$a$3325$i = $$a$3324$i;$z$4$i = $z$3248$i;
        }
       } while(0);
       $671 = $z$4$i;
       $672 = $$a$3325$i;
       $673 = (($671) - ($672))|0;
       $674 = $673 >> 2;
       $675 = ($674|0)>($616|0);
       if ($675) {
        $676 = (($$a$3325$i) + ($616<<2)|0);
        $z$5$i = $676;
       } else {
        $z$5$i = $z$4$i;
       }
       $677 = HEAP32[$e2$i>>2]|0;
       $678 = (($677) + ($$20$i))|0;
       HEAP32[$e2$i>>2] = $678;
       $679 = ($678|0)<(0);
       if ($679) {
        $650 = $678;$a$3249$i = $$a$3325$i;$z$3248$i = $z$5$i;
       } else {
        $a$3$lcssa$i = $$a$3325$i;$z$3$lcssa$i = $z$5$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
     }
    } while(0);
    $680 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
    $681 = $$31$i;
    do {
     if ($680) {
      $682 = $a$3$lcssa$i;
      $683 = (($681) - ($682))|0;
      $684 = $683 >> 2;
      $685 = ($684*9)|0;
      $686 = HEAP32[$a$3$lcssa$i>>2]|0;
      $687 = ($686>>>0)<(10);
      if ($687) {
       $e$1$i = $685;
       break;
      } else {
       $e$0238$i = $685;$i$0237$i = 10;
      }
      while(1) {
       $688 = ($i$0237$i*10)|0;
       $689 = (($e$0238$i) + 1)|0;
       $690 = ($686>>>0)<($688>>>0);
       if ($690) {
        $e$1$i = $689;
        break;
       } else {
        $e$0238$i = $689;$i$0237$i = $688;
       }
      }
     } else {
      $e$1$i = 0;
     }
    } while(0);
    $691 = ($412|0)!=(102);
    $692 = $691 ? $e$1$i : 0;
    $693 = (($$p$i) - ($692))|0;
    $694 = ($412|0)==(103);
    $695 = ($$p$i|0)!=(0);
    $$21$i = $694 & $695;
    $$neg151$i = $$21$i << 31 >> 31;
    $696 = (($693) + ($$neg151$i))|0;
    $697 = $z$3$lcssa$i;
    $698 = (($697) - ($681))|0;
    $699 = $698 >> 2;
    $700 = ($699*9)|0;
    $701 = (($700) + -9)|0;
    $702 = ($696|0)<($701|0);
    if ($702) {
     $703 = (($696) + 9216)|0;
     $704 = (($703|0) / 9)&-1;
     $$sum$i = (($704) + -1023)|0;
     $705 = (($$31$i) + ($$sum$i<<2)|0);
     $706 = (($703|0) % 9)&-1;
     $j$0229$i = (($706) + 1)|0;
     $707 = ($j$0229$i|0)<(9);
     if ($707) {
      $i$1230$i = 10;$j$0231$i = $j$0229$i;
      while(1) {
       $708 = ($i$1230$i*10)|0;
       $j$0$i = (($j$0231$i) + 1)|0;
       $exitcond$i = ($j$0$i|0)==(9);
       if ($exitcond$i) {
        $i$1$lcssa$i = $708;
        break;
       } else {
        $i$1230$i = $708;$j$0231$i = $j$0$i;
       }
      }
     } else {
      $i$1$lcssa$i = 10;
     }
     $709 = HEAP32[$705>>2]|0;
     $710 = (($709>>>0) % ($i$1$lcssa$i>>>0))&-1;
     $711 = ($710|0)==(0);
     if ($711) {
      $$sum15$i = (($704) + -1022)|0;
      $712 = (($$31$i) + ($$sum15$i<<2)|0);
      $713 = ($712|0)==($z$3$lcssa$i|0);
      if ($713) {
       $a$7$i = $a$3$lcssa$i;$d$3$i = $705;$e$3$i = $e$1$i;
      } else {
       label = 233;
      }
     } else {
      label = 233;
     }
     do {
      if ((label|0) == 233) {
       label = 0;
       $714 = (($709>>>0) / ($i$1$lcssa$i>>>0))&-1;
       $715 = $714 & 1;
       $716 = ($715|0)==(0);
       $$22$i = $716 ? 9007199254740992.0 : 9007199254740994.0;
       $717 = (($i$1$lcssa$i|0) / 2)&-1;
       $718 = ($710>>>0)<($717>>>0);
       do {
        if ($718) {
         $small$0$i = 0.5;
        } else {
         $719 = ($710|0)==($717|0);
         if ($719) {
          $$sum16$i = (($704) + -1022)|0;
          $720 = (($$31$i) + ($$sum16$i<<2)|0);
          $721 = ($720|0)==($z$3$lcssa$i|0);
          if ($721) {
           $small$0$i = 1.0;
           break;
          }
         }
         $small$0$i = 1.5;
        }
       } while(0);
       $722 = ($pl$0$i|0)==(0);
       do {
        if ($722) {
         $round6$1$i = $$22$i;$small$1$i = $small$0$i;
        } else {
         $723 = HEAP8[$prefix$0$i>>0]|0;
         $724 = ($723<<24>>24)==(45);
         if (!($724)) {
          $round6$1$i = $$22$i;$small$1$i = $small$0$i;
          break;
         }
         $725 = $$22$i * -1.0;
         $726 = $small$0$i * -1.0;
         $round6$1$i = $725;$small$1$i = $726;
        }
       } while(0);
       $727 = (($709) - ($710))|0;
       HEAP32[$705>>2] = $727;
       $728 = $round6$1$i + $small$1$i;
       $729 = $728 != $round6$1$i;
       if (!($729)) {
        $a$7$i = $a$3$lcssa$i;$d$3$i = $705;$e$3$i = $e$1$i;
        break;
       }
       $730 = (($727) + ($i$1$lcssa$i))|0;
       HEAP32[$705>>2] = $730;
       $731 = ($730>>>0)>(999999999);
       if ($731) {
        $a$5223$i = $a$3$lcssa$i;$d$2222$i = $705;
        while(1) {
         $732 = (($d$2222$i) + -4|0);
         HEAP32[$d$2222$i>>2] = 0;
         $733 = ($732>>>0)<($a$5223$i>>>0);
         if ($733) {
          $734 = (($a$5223$i) + -4|0);
          HEAP32[$734>>2] = 0;
          $a$6$i = $734;
         } else {
          $a$6$i = $a$5223$i;
         }
         $735 = HEAP32[$732>>2]|0;
         $736 = (($735) + 1)|0;
         HEAP32[$732>>2] = $736;
         $737 = ($736>>>0)>(999999999);
         if ($737) {
          $a$5223$i = $a$6$i;$d$2222$i = $732;
         } else {
          $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $732;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $705;
       }
       $738 = $a$5$lcssa$i;
       $739 = (($681) - ($738))|0;
       $740 = $739 >> 2;
       $741 = ($740*9)|0;
       $742 = HEAP32[$a$5$lcssa$i>>2]|0;
       $743 = ($742>>>0)<(10);
       if ($743) {
        $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $741;
        break;
       } else {
        $e$2218$i = $741;$i$2217$i = 10;
       }
       while(1) {
        $744 = ($i$2217$i*10)|0;
        $745 = (($e$2218$i) + 1)|0;
        $746 = ($742>>>0)<($744>>>0);
        if ($746) {
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $745;
         break;
        } else {
         $e$2218$i = $745;$i$2217$i = $744;
        }
       }
      }
     } while(0);
     $747 = (($d$3$i) + 4|0);
     $748 = ($z$3$lcssa$i>>>0)>($747>>>0);
     $$z$3$i = $748 ? $747 : $z$3$lcssa$i;
     $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
    } else {
     $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
    }
    $749 = (0 - ($e$4$ph$i))|0;
    $z$6$i = $z$6$ph$i;
    while(1) {
     $750 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
     if (!($750)) {
      $$lcssa300$i = 0;
      break;
     }
     $751 = (($z$6$i) + -4|0);
     $752 = HEAP32[$751>>2]|0;
     $753 = ($752|0)==(0);
     if ($753) {
      $z$6$i = $751;
     } else {
      $$lcssa300$i = 1;
      break;
     }
    }
    do {
     if ($694) {
      $754 = ($$p$i|0)==(0);
      $755 = $754&1;
      $$$p$i = (($755) + ($$p$i))|0;
      $756 = ($$$p$i|0)>($e$4$ph$i|0);
      $757 = ($e$4$ph$i|0)>(-5);
      $or$cond4$i = $756 & $757;
      if ($or$cond4$i) {
       $758 = (($t$0) + -1)|0;
       $$neg152$i = (($$$p$i) + -1)|0;
       $759 = (($$neg152$i) - ($e$4$ph$i))|0;
       $$013$i = $758;$$210$i = $759;
      } else {
       $760 = (($t$0) + -2)|0;
       $761 = (($$$p$i) + -1)|0;
       $$013$i = $760;$$210$i = $761;
      }
      $762 = $fl$1$ & 8;
      $763 = ($762|0)==(0);
      if (!($763)) {
       $$114$i = $$013$i;$$311$i = $$210$i;
       break;
      }
      do {
       if ($$lcssa300$i) {
        $764 = (($z$6$i) + -4|0);
        $765 = HEAP32[$764>>2]|0;
        $766 = ($765|0)==(0);
        if ($766) {
         $j$2$i = 9;
         break;
        }
        $767 = (($765>>>0) % 10)&-1;
        $768 = ($767|0)==(0);
        if ($768) {
         $i$3209$i = 10;$j$1210$i = 0;
        } else {
         $j$2$i = 0;
         break;
        }
        while(1) {
         $769 = ($i$3209$i*10)|0;
         $770 = (($j$1210$i) + 1)|0;
         $771 = (($765>>>0) % ($769>>>0))&-1;
         $772 = ($771|0)==(0);
         if ($772) {
          $i$3209$i = $769;$j$1210$i = $770;
         } else {
          $j$2$i = $770;
          break;
         }
        }
       } else {
        $j$2$i = 9;
       }
      } while(0);
      $773 = $$013$i | 32;
      $774 = ($773|0)==(102);
      $775 = $z$6$i;
      $776 = (($775) - ($681))|0;
      $777 = $776 >> 2;
      $778 = ($777*9)|0;
      $779 = (($778) + -9)|0;
      if ($774) {
       $780 = (($779) - ($j$2$i))|0;
       $781 = ($780|0)<(0);
       $$23$i = $781 ? 0 : $780;
       $782 = ($$210$i|0)<($$23$i|0);
       $$210$$23$i = $782 ? $$210$i : $$23$i;
       $$114$i = $$013$i;$$311$i = $$210$$23$i;
       break;
      } else {
       $783 = (($779) + ($e$4$ph$i))|0;
       $784 = (($783) - ($j$2$i))|0;
       $785 = ($784|0)<(0);
       $$25$i = $785 ? 0 : $784;
       $786 = ($$210$i|0)<($$25$i|0);
       $$210$$25$i = $786 ? $$210$i : $$25$i;
       $$114$i = $$013$i;$$311$i = $$210$$25$i;
       break;
      }
     } else {
      $$114$i = $t$0;$$311$i = $$p$i;
     }
    } while(0);
    $787 = ($$311$i|0)!=(0);
    if ($787) {
     $791 = 1;
    } else {
     $788 = $fl$1$ & 8;
     $789 = ($788|0)!=(0);
     $791 = $789;
    }
    $790 = $791&1;
    $792 = $$114$i | 32;
    $793 = ($792|0)==(102);
    if ($793) {
     $794 = ($e$4$ph$i|0)>(0);
     $795 = $794 ? $e$4$ph$i : 0;
     $$pn$i = $795;$estr$2$i = 0;
    } else {
     $796 = ($e$4$ph$i|0)<(0);
     $797 = $796 ? $749 : $e$4$ph$i;
     $798 = ($797|0)<(0);
     if ($798) {
      $799 = ($797|0)<(0);
      $800 = $799 << 31 >> 31;
      $$05$i79$i = $6;$801 = $797;$802 = $800;
      while(1) {
       $803 = (___uremdi3(($801|0),($802|0),10,0)|0);
       $804 = tempRet0;
       $805 = $803 | 48;
       $806 = $805&255;
       $807 = (($$05$i79$i) + -1|0);
       HEAP8[$807>>0] = $806;
       $808 = (___udivdi3(($801|0),($802|0),10,0)|0);
       $809 = tempRet0;
       $810 = ($802>>>0)>(9);
       $811 = ($802|0)==(9);
       $812 = ($801>>>0)>(4294967295);
       $813 = $811 & $812;
       $814 = $810 | $813;
       if ($814) {
        $$05$i79$i = $807;$801 = $808;$802 = $809;
       } else {
        break;
       }
      }
      $$0$lcssa$i84$i = $807;$$01$lcssa$off0$i85$i = $808;
     } else {
      $$0$lcssa$i84$i = $6;$$01$lcssa$off0$i85$i = $797;
     }
     $815 = ($$01$lcssa$off0$i85$i|0)==(0);
     if ($815) {
      $estr$1$ph$i = $$0$lcssa$i84$i;
     } else {
      $$12$i87$i = $$0$lcssa$i84$i;$y$03$i86$i = $$01$lcssa$off0$i85$i;
      while(1) {
       $816 = (($y$03$i86$i>>>0) % 10)&-1;
       $817 = $816 | 48;
       $818 = $817&255;
       $819 = (($$12$i87$i) + -1|0);
       HEAP8[$819>>0] = $818;
       $820 = (($y$03$i86$i>>>0) / 10)&-1;
       $821 = ($y$03$i86$i>>>0)<(10);
       if ($821) {
        $estr$1$ph$i = $819;
        break;
       } else {
        $$12$i87$i = $819;$y$03$i86$i = $820;
       }
      }
     }
     $822 = $estr$1$ph$i;
     $823 = (($8) - ($822))|0;
     $824 = ($823|0)<(2);
     if ($824) {
      $estr$1200$i = $estr$1$ph$i;
      while(1) {
       $825 = (($estr$1200$i) + -1|0);
       HEAP8[$825>>0] = 48;
       $826 = $825;
       $827 = (($8) - ($826))|0;
       $828 = ($827|0)<(2);
       if ($828) {
        $estr$1200$i = $825;
       } else {
        $estr$1$lcssa$i = $825;
        break;
       }
      }
     } else {
      $estr$1$lcssa$i = $estr$1$ph$i;
     }
     $829 = $e$4$ph$i >> 31;
     $830 = $829 & 2;
     $831 = (($830) + 43)|0;
     $832 = $831&255;
     $833 = (($estr$1$lcssa$i) + -1|0);
     HEAP8[$833>>0] = $832;
     $834 = $$114$i&255;
     $835 = (($estr$1$lcssa$i) + -2|0);
     HEAP8[$835>>0] = $834;
     $836 = $835;
     $837 = (($8) - ($836))|0;
     $$pn$i = $837;$estr$2$i = $835;
    }
    $838 = (($pl$0$i) + 1)|0;
    $839 = (($838) + ($$311$i))|0;
    $l$1$i = (($839) + ($790))|0;
    $840 = (($l$1$i) + ($$pn$i))|0;
    $841 = $fl$1$ & 73728;
    $842 = ($841|0)==(0);
    $843 = ($840|0)<($w$1|0);
    $or$cond$i93$i = $842 & $843;
    if ($or$cond$i93$i) {
     $844 = (($w$1) - ($840))|0;
     $845 = ($844>>>0)>(256);
     $846 = $845 ? 256 : $844;
     _memset(($pad$i|0),32,($846|0))|0;
     $847 = ($844>>>0)>(255);
     if ($847) {
      $$01$i94$i = $844;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $848 = (($$01$i94$i) + -256)|0;
       $849 = ($848>>>0)>(255);
       if ($849) {
        $$01$i94$i = $848;
       } else {
        $$0$lcssa$i96$i = $848;
        break;
       }
      }
     } else {
      $$0$lcssa$i96$i = $844;
     }
     (___fwritex($pad$i,$$0$lcssa$i96$i,$f)|0);
    }
    (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
    $850 = ($841|0)==(65536);
    $or$cond$i100$i = $850 & $843;
    if ($or$cond$i100$i) {
     $851 = (($w$1) - ($840))|0;
     $852 = ($851>>>0)>(256);
     $853 = $852 ? 256 : $851;
     _memset(($pad$i|0),48,($853|0))|0;
     $854 = ($851>>>0)>(255);
     if ($854) {
      $$01$i101$i = $851;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $855 = (($$01$i101$i) + -256)|0;
       $856 = ($855>>>0)>(255);
       if ($856) {
        $$01$i101$i = $855;
       } else {
        $$0$lcssa$i103$i = $855;
        break;
       }
      }
     } else {
      $$0$lcssa$i103$i = $851;
     }
     (___fwritex($pad$i,$$0$lcssa$i103$i,$f)|0);
    }
    do {
     if ($793) {
      $857 = ($a$8$ph$i>>>0)>($$31$i>>>0);
      $r$0$a$8$i = $857 ? $$31$i : $a$8$ph$i;
      $d$4183$i = $r$0$a$8$i;
      while(1) {
       $858 = HEAP32[$d$4183$i>>2]|0;
       $859 = ($858|0)==(0);
       if ($859) {
        $$1$lcssa$i112$i = $13;
       } else {
        $$12$i110$i = $13;$y$03$i109$i = $858;
        while(1) {
         $860 = (($y$03$i109$i>>>0) % 10)&-1;
         $861 = $860 | 48;
         $862 = $861&255;
         $863 = (($$12$i110$i) + -1|0);
         HEAP8[$863>>0] = $862;
         $864 = (($y$03$i109$i>>>0) / 10)&-1;
         $865 = ($y$03$i109$i>>>0)<(10);
         if ($865) {
          $$1$lcssa$i112$i = $863;
          break;
         } else {
          $$12$i110$i = $863;$y$03$i109$i = $864;
         }
        }
       }
       $866 = ($d$4183$i|0)==($r$0$a$8$i|0);
       do {
        if ($866) {
         $870 = ($$1$lcssa$i112$i|0)==($13|0);
         if (!($870)) {
          $s7$1$i = $$1$lcssa$i112$i;
          break;
         }
         HEAP8[$15>>0] = 48;
         $s7$1$i = $15;
        } else {
         $867 = ($$1$lcssa$i112$i>>>0)>($buf$i>>>0);
         if ($867) {
          $s7$0180$i = $$1$lcssa$i112$i;
         } else {
          $s7$1$i = $$1$lcssa$i112$i;
          break;
         }
         while(1) {
          $868 = (($s7$0180$i) + -1|0);
          HEAP8[$868>>0] = 48;
          $869 = ($868>>>0)>($buf$i>>>0);
          if ($869) {
           $s7$0180$i = $868;
          } else {
           $s7$1$i = $868;
           break;
          }
         }
        }
       } while(0);
       $871 = $s7$1$i;
       $872 = (($14) - ($871))|0;
       (___fwritex($s7$1$i,$872,$f)|0);
       $873 = (($d$4183$i) + 4|0);
       $874 = ($873>>>0)>($$31$i>>>0);
       if ($874) {
        break;
       } else {
        $d$4183$i = $873;
       }
      }
      if (!($787)) {
       $875 = $fl$1$ & 8;
       $876 = ($875|0)==(0);
       if ($876) {
        break;
       }
      }
      (___fwritex(79152,1,$f)|0);
      $877 = ($873>>>0)<($z$6$i>>>0);
      $878 = ($$311$i|0)>(0);
      $or$cond28173$i = $877 & $878;
      if ($or$cond28173$i) {
       $$412175$i = $$311$i;$d$5174$i = $873;
       while(1) {
        $879 = HEAP32[$d$5174$i>>2]|0;
        $880 = ($879|0)==(0);
        if ($880) {
         $s8$0169$i = $13;
         label = 300;
        } else {
         $$12$i119$i = $13;$y$03$i118$i = $879;
         while(1) {
          $881 = (($y$03$i118$i>>>0) % 10)&-1;
          $882 = $881 | 48;
          $883 = $882&255;
          $884 = (($$12$i119$i) + -1|0);
          HEAP8[$884>>0] = $883;
          $885 = (($y$03$i118$i>>>0) / 10)&-1;
          $886 = ($y$03$i118$i>>>0)<(10);
          if ($886) {
           break;
          } else {
           $$12$i119$i = $884;$y$03$i118$i = $885;
          }
         }
         $887 = ($884>>>0)>($buf$i>>>0);
         if ($887) {
          $s8$0169$i = $884;
          label = 300;
         } else {
          $s8$0$lcssa$i = $884;
         }
        }
        if ((label|0) == 300) {
         while(1) {
          label = 0;
          $888 = (($s8$0169$i) + -1|0);
          HEAP8[$888>>0] = 48;
          $889 = ($888>>>0)>($buf$i>>>0);
          if ($889) {
           $s8$0169$i = $888;
           label = 300;
          } else {
           $s8$0$lcssa$i = $888;
           break;
          }
         }
        }
        $890 = ($$412175$i|0)>(9);
        $891 = $890 ? 9 : $$412175$i;
        (___fwritex($s8$0$lcssa$i,$891,$f)|0);
        $892 = (($d$5174$i) + 4|0);
        $893 = (($$412175$i) + -9)|0;
        $894 = ($892>>>0)<($z$6$i>>>0);
        $895 = ($893|0)>(0);
        $or$cond28$i = $894 & $895;
        if ($or$cond28$i) {
         $$412175$i = $893;$d$5174$i = $892;
        } else {
         $$412$lcssa$i = $893;
         break;
        }
       }
      } else {
       $$412$lcssa$i = $$311$i;
      }
      $896 = ($$412$lcssa$i|0)>(0);
      if (!($896)) {
       break;
      }
      $897 = ($$412$lcssa$i>>>0)>(256);
      $898 = $897 ? 256 : $$412$lcssa$i;
      _memset(($pad$i|0),48,($898|0))|0;
      $899 = ($$412$lcssa$i>>>0)>(255);
      if ($899) {
       $$01$i125$i = $$412$lcssa$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $900 = (($$01$i125$i) + -256)|0;
        $901 = ($900>>>0)>(255);
        if ($901) {
         $$01$i125$i = $900;
        } else {
         $$0$lcssa$i127$i = $900;
         break;
        }
       }
      } else {
       $$0$lcssa$i127$i = $$412$lcssa$i;
      }
      (___fwritex($pad$i,$$0$lcssa$i127$i,$f)|0);
     } else {
      $902 = (($a$8$ph$i) + 4|0);
      $z$6$$i = $$lcssa300$i ? $z$6$i : $902;
      $903 = ($$311$i|0)>(-1);
      do {
       if ($903) {
        $904 = $fl$1$ & 8;
        $$not$i = ($904|0)!=(0);
        $$5193$i = $$311$i;$d$6192$i = $a$8$ph$i;
        while(1) {
         $905 = HEAP32[$d$6192$i>>2]|0;
         $906 = ($905|0)==(0);
         if ($906) {
          label = 311;
         } else {
          $$12$i134$i = $13;$y$03$i133$i = $905;
          while(1) {
           $907 = (($y$03$i133$i>>>0) % 10)&-1;
           $908 = $907 | 48;
           $909 = $908&255;
           $910 = (($$12$i134$i) + -1|0);
           HEAP8[$910>>0] = $909;
           $911 = (($y$03$i133$i>>>0) / 10)&-1;
           $912 = ($y$03$i133$i>>>0)<(10);
           if ($912) {
            break;
           } else {
            $$12$i134$i = $910;$y$03$i133$i = $911;
           }
          }
          $913 = ($910|0)==($13|0);
          if ($913) {
           label = 311;
          } else {
           $s9$0$i = $910;
          }
         }
         if ((label|0) == 311) {
          label = 0;
          HEAP8[$15>>0] = 48;
          $s9$0$i = $15;
         }
         $914 = ($d$6192$i|0)==($a$8$ph$i|0);
         do {
          if ($914) {
           $918 = (($s9$0$i) + 1|0);
           (___fwritex($s9$0$i,1,$f)|0);
           $919 = ($$5193$i|0)>(0);
           $brmerge$i = $919 | $$not$i;
           if (!($brmerge$i)) {
            $s9$2$i = $918;
            break;
           }
           (___fwritex(79152,1,$f)|0);
           $s9$2$i = $918;
          } else {
           $915 = ($s9$0$i>>>0)>($buf$i>>>0);
           if ($915) {
            $s9$1188$i = $s9$0$i;
           } else {
            $s9$2$i = $s9$0$i;
            break;
           }
           while(1) {
            $916 = (($s9$1188$i) + -1|0);
            HEAP8[$916>>0] = 48;
            $917 = ($916>>>0)>($buf$i>>>0);
            if ($917) {
             $s9$1188$i = $916;
            } else {
             $s9$2$i = $916;
             break;
            }
           }
          }
         } while(0);
         $920 = $s9$2$i;
         $921 = (($14) - ($920))|0;
         $922 = ($921|0)<($$5193$i|0);
         $$$5$i = $922 ? $921 : $$5193$i;
         (___fwritex($s9$2$i,$$$5$i,$f)|0);
         $923 = (($$5193$i) - ($921))|0;
         $924 = (($d$6192$i) + 4|0);
         $925 = ($924>>>0)<($z$6$$i>>>0);
         $926 = ($923|0)>(-1);
         $or$cond29$i = $925 & $926;
         if ($or$cond29$i) {
          $$5193$i = $923;$d$6192$i = $924;
         } else {
          break;
         }
        }
        $927 = ($923|0)>(0);
        if (!($927)) {
         break;
        }
        $928 = ($923>>>0)>(256);
        $929 = $928 ? 256 : $923;
        _memset(($pad$i|0),48,($929|0))|0;
        $930 = ($923>>>0)>(255);
        if ($930) {
         $$01$i140$i = $923;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $931 = (($$01$i140$i) + -256)|0;
          $932 = ($931>>>0)>(255);
          if ($932) {
           $$01$i140$i = $931;
          } else {
           $$0$lcssa$i142$i = $931;
           break;
          }
         }
        } else {
         $$0$lcssa$i142$i = $923;
        }
        (___fwritex($pad$i,$$0$lcssa$i142$i,$f)|0);
       }
      } while(0);
      $933 = $estr$2$i;
      $934 = (($8) - ($933))|0;
      (___fwritex($estr$2$i,$934,$f)|0);
     }
    } while(0);
    $935 = ($841|0)==(8192);
    $or$cond$i$i = $935 & $843;
    if ($or$cond$i$i) {
     $936 = (($w$1) - ($840))|0;
     $937 = ($936>>>0)>(256);
     $938 = $937 ? 256 : $936;
     _memset(($pad$i|0),32,($938|0))|0;
     $939 = ($936>>>0)>(255);
     if ($939) {
      $$01$i$i = $936;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $940 = (($$01$i$i) + -256)|0;
       $941 = ($940>>>0)>(255);
       if ($941) {
        $$01$i$i = $940;
       } else {
        $$0$lcssa$i$i = $940;
        break;
       }
      }
     } else {
      $$0$lcssa$i$i = $936;
     }
     (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
    }
    $w$30$i = $843 ? $w$1 : $840;
    $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$30$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 67:  {
    $331 = $207;
    HEAP32[$wc>>2] = $331;
    HEAP32[$5>>2] = 0;
    $1055 = $wc;$1056 = $wc;$p$4296 = -1;
    label = 104;
    break;
   }
   case 99:  {
    $319 = $207;
    $320 = $319&255;
    HEAP8[$4>>0] = $320;
    $1053 = $229;$1054 = $207;$a$2 = $4;$fl$6 = $206;$p$5 = 1;$pl$2 = 0;$prefix$2 = 79056;$z$2 = $2;
    break;
   }
   case 105: case 100:  {
    $267 = $207;
    $268 = ($229|0)<(0);
    if ($268) {
     $269 = (_i64Subtract(0,0,($267|0),($229|0))|0);
     $270 = tempRet0;
     $271 = $269;
     $277 = $271;$279 = $270;$pl$0 = 1;$prefix$0 = 79056;
     label = 89;
     break L92;
    }
    $272 = $fl$1$ & 2048;
    $273 = ($272|0)==(0);
    if ($273) {
     $274 = $fl$1$ & 1;
     $275 = ($274|0)==(0);
     $$15 = $275 ? 79056 : ((79056 + 2|0));
     $277 = $207;$279 = $229;$pl$0 = $274;$prefix$0 = $$15;
     label = 89;
    } else {
     $277 = $207;$279 = $229;$pl$0 = 1;$prefix$0 = ((79056 + 1|0));
     label = 89;
    }
    break;
   }
   case 117:  {
    $277 = $207;$279 = $229;$pl$0 = 0;$prefix$0 = 79056;
    label = 89;
    break;
   }
   case 109:  {
    $321 = (___errno_location()|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = (_strerror(($322|0))|0);
    $a$1 = $323;
    label = 99;
    break;
   }
   case 115:  {
    $324 = ($207|0)==(0|0);
    $$17 = $324 ? 79072 : $207;
    $a$1 = $$17;
    label = 99;
    break;
   }
   case 83:  {
    $332 = ($p$0|0)==(0);
    if ($332) {
     $1057 = $207;$1058 = $207;$i$0166 = 0;
     label = 110;
    } else {
     $1055 = $207;$1056 = $207;$p$4296 = $p$0;
     label = 104;
    }
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 77;
    break;
   }
   case 111:  {
    $249 = $207;
    $250 = ($249|0)==(0);
    $251 = ($229|0)==(0);
    $252 = $250 & $251;
    if ($252) {
     $$0$lcssa$i43 = $2;
    } else {
     $$03$i40 = $2;$254 = $249;$258 = $229;
     while(1) {
      $253 = $254 & 7;
      $255 = $253 | 48;
      $256 = $255&255;
      $257 = (($$03$i40) + -1|0);
      HEAP8[$257>>0] = $256;
      $259 = (_bitshift64Lshr(($254|0),($258|0),3)|0);
      $260 = tempRet0;
      $261 = ($259|0)==(0);
      $262 = ($260|0)==(0);
      $263 = $261 & $262;
      if ($263) {
       $$0$lcssa$i43 = $257;
       break;
      } else {
       $$03$i40 = $257;$254 = $259;$258 = $260;
      }
     }
    }
    $264 = $fl$1$ & 8;
    $265 = ($264|0)==(0);
    if ($265) {
     $308 = $207;$311 = $229;$a$0 = $$0$lcssa$i43;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 79056;
     label = 94;
    } else {
     $$13 = $252 ? 79056 : ((79056 + 5|0));
     $266 = $252&1;
     $$14 = $266 ^ 1;
     $308 = $207;$311 = $229;$a$0 = $$0$lcssa$i43;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$14;$prefix$1 = $$13;
     label = 94;
    }
    break;
   }
   case 110:  {
    switch ($st$0|0) {
    case 1:  {
     HEAP32[$207>>2] = $cnt$1;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $208 = ($cnt$1|0)<(0);
     $209 = $208 << 31 >> 31;
     $210 = $207;
     $211 = $210;
     HEAP32[$211>>2] = $cnt$1;
     $212 = (($210) + 4)|0;
     $213 = $212;
     HEAP32[$213>>2] = $209;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     HEAP32[$207>>2] = $cnt$1;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $216 = ($cnt$1|0)<(0);
     $217 = $216 << 31 >> 31;
     $218 = $207;
     $219 = $218;
     HEAP32[$219>>2] = $cnt$1;
     $220 = (($218) + 4)|0;
     $221 = $220;
     HEAP32[$221>>2] = $217;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $215 = $cnt$1&255;
     HEAP8[$207>>0] = $215;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $214 = $cnt$1&65535;
     HEAP16[$207>>1] = $214;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 0:  {
     HEAP32[$207>>2] = $cnt$1;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $222 = ($p$0>>>0)>(8);
    $223 = $222 ? $p$0 : 8;
    $224 = $fl$1$ | 8;
    $fl$3 = $224;$p$1 = $223;$t$1 = 120;
    label = 77;
    break;
   }
   default: {
    $1053 = $229;$1054 = $207;$a$2 = $22;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 79056;$z$2 = $2;
   }
   }
  } while(0);
  L445: do {
   if ((label|0) == 77) {
    label = 0;
    $225 = $207;
    $226 = $t$1 & 32;
    $227 = ($225|0)==(0);
    $228 = ($229|0)==(0);
    $230 = $227 & $228;
    if ($230) {
     $308 = $207;$311 = $229;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 79056;
     label = 94;
    } else {
     $$012$i = $2;$232 = $225;$239 = $229;
     while(1) {
      $231 = $232 & 15;
      $233 = (79136 + ($231)|0);
      $234 = HEAP8[$233>>0]|0;
      $235 = $234&255;
      $236 = $235 | $226;
      $237 = $236&255;
      $238 = (($$012$i) + -1|0);
      HEAP8[$238>>0] = $237;
      $240 = (_bitshift64Lshr(($232|0),($239|0),4)|0);
      $241 = tempRet0;
      $242 = ($240|0)==(0);
      $243 = ($241|0)==(0);
      $244 = $242 & $243;
      if ($244) {
       break;
      } else {
       $$012$i = $238;$232 = $240;$239 = $241;
      }
     }
     $245 = $fl$3 & 8;
     $246 = ($245|0)==(0);
     if ($246) {
      $308 = $207;$311 = $229;$a$0 = $238;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 79056;
      label = 94;
     } else {
      $247 = $t$1 >> 4;
      $248 = (79056 + ($247)|0);
      $308 = $207;$311 = $229;$a$0 = $238;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $248;
      label = 94;
     }
    }
   }
   else if ((label|0) == 89) {
    label = 0;
    $276 = $277;
    $278 = ($279>>>0)>(0);
    $280 = ($279|0)==(0);
    $281 = ($276>>>0)>(4294967295);
    $282 = $280 & $281;
    $283 = $278 | $282;
    if ($283) {
     $$05$i = $2;$284 = $276;$285 = $279;
     while(1) {
      $286 = (___uremdi3(($284|0),($285|0),10,0)|0);
      $287 = tempRet0;
      $288 = $286 | 48;
      $289 = $288&255;
      $290 = (($$05$i) + -1|0);
      HEAP8[$290>>0] = $289;
      $291 = (___udivdi3(($284|0),($285|0),10,0)|0);
      $292 = tempRet0;
      $293 = ($285>>>0)>(9);
      $294 = ($285|0)==(9);
      $295 = ($284>>>0)>(4294967295);
      $296 = $294 & $295;
      $297 = $293 | $296;
      if ($297) {
       $$05$i = $290;$284 = $291;$285 = $292;
      } else {
       break;
      }
     }
     $$0$lcssa$i45 = $290;$$01$lcssa$off0$i = $291;
    } else {
     $$0$lcssa$i45 = $2;$$01$lcssa$off0$i = $276;
    }
    $298 = ($$01$lcssa$off0$i|0)==(0);
    if ($298) {
     $308 = $277;$311 = $279;$a$0 = $$0$lcssa$i45;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 94;
    } else {
     $$12$i = $$0$lcssa$i45;$y$03$i = $$01$lcssa$off0$i;
     while(1) {
      $299 = (($y$03$i>>>0) % 10)&-1;
      $300 = $299 | 48;
      $301 = $300&255;
      $302 = (($$12$i) + -1|0);
      HEAP8[$302>>0] = $301;
      $303 = (($y$03$i>>>0) / 10)&-1;
      $304 = ($y$03$i>>>0)<(10);
      if ($304) {
       $308 = $277;$311 = $279;$a$0 = $302;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 94;
       break;
      } else {
       $$12$i = $302;$y$03$i = $303;
      }
     }
    }
   }
   else if ((label|0) == 99) {
    label = 0;
    $325 = (_memchr($a$1,0,$p$0)|0);
    $326 = ($325|0)==(0|0);
    if ($326) {
     $327 = (($a$1) + ($p$0)|0);
     $1053 = $229;$1054 = $207;$a$2 = $a$1;$fl$6 = $206;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 79056;$z$2 = $327;
     break;
    } else {
     $328 = $325;
     $329 = $a$1;
     $330 = (($328) - ($329))|0;
     $1053 = $229;$1054 = $207;$a$2 = $a$1;$fl$6 = $206;$p$5 = $330;$pl$2 = 0;$prefix$2 = 79056;$z$2 = $325;
     break;
    }
   }
   else if ((label|0) == 104) {
    label = 0;
    $i$0168 = 0;$l$1167 = 0;$ws$0169 = $1055;
    while(1) {
     $336 = HEAP32[$ws$0169>>2]|0;
     $337 = ($336|0)==(0);
     if ($337) {
      $i$0$lcssa = $i$0168;$l$1$lcssa = $l$1167;
      break;
     }
     $338 = (_wctomb($mb,$336)|0);
     $339 = ($338|0)>(-1);
     if (!($339)) {
      $$0 = -1;
      label = 362;
      break L1;
     }
     $340 = (($p$4296) - ($i$0168))|0;
     $341 = ($338>>>0)>($340>>>0);
     $335 = (($338) + ($i$0168))|0;
     if ($341) {
      $1057 = $1055;$1058 = $1056;$i$0166 = $i$0168;
      label = 110;
      break L445;
     }
     $333 = (($ws$0169) + 4|0);
     $334 = ($335>>>0)<($p$4296>>>0);
     if ($334) {
      $i$0168 = $335;$l$1167 = $338;$ws$0169 = $333;
     } else {
      $i$0$lcssa = $335;$l$1$lcssa = $338;
      break;
     }
    }
    $342 = ($l$1$lcssa|0)<(0);
    if ($342) {
     $$0 = -1;
     label = 362;
     break L1;
    } else {
     $1057 = $1055;$1058 = $1056;$i$0166 = $i$0$lcssa;
     label = 110;
    }
   }
  } while(0);
  if ((label|0) == 94) {
   label = 0;
   $305 = ($p$2|0)>(-1);
   $306 = $fl$4 & -65537;
   $$fl$4 = $305 ? $306 : $fl$4;
   $307 = $308;
   $309 = ($307|0)==(0);
   $310 = ($311|0)==(0);
   $312 = $309 & $310;
   $313 = ($p$2|0)==(0);
   $or$cond = $312 & $313;
   if ($or$cond) {
    $1053 = $311;$1054 = $308;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $314 = $a$0;
    $315 = (($3) - ($314))|0;
    $316 = $312&1;
    $317 = (($316) + ($315))|0;
    $318 = ($p$2|0)>($317|0);
    $p$2$ = $318 ? $p$2 : $317;
    $1053 = $311;$1054 = $308;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 110) {
   label = 0;
   $343 = $fl$1$ & 73728;
   $344 = ($343|0)==(0);
   $345 = ($i$0166|0)<($w$1|0);
   $or$cond$i56 = $344 & $345;
   if ($or$cond$i56) {
    $346 = (($w$1) - ($i$0166))|0;
    $347 = ($346>>>0)>(256);
    $348 = $347 ? 256 : $346;
    _memset(($pad$i|0),32,($348|0))|0;
    $349 = ($346>>>0)>(255);
    if ($349) {
     $$01$i57 = $346;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $350 = (($$01$i57) + -256)|0;
      $351 = ($350>>>0)>(255);
      if ($351) {
       $$01$i57 = $350;
      } else {
       $$0$lcssa$i59 = $350;
       break;
      }
     }
    } else {
     $$0$lcssa$i59 = $346;
    }
    (___fwritex($pad$i,$$0$lcssa$i59,$f)|0);
   }
   $352 = ($i$0166|0)==(0);
   L479: do {
    if (!($352)) {
     $i$1174 = 0;$ws$1175 = $1057;
     while(1) {
      $353 = HEAP32[$ws$1175>>2]|0;
      $354 = ($353|0)==(0);
      if ($354) {
       break L479;
      }
      $355 = (_wctomb($mb,$353)|0);
      $356 = (($355) + ($i$1174))|0;
      $357 = ($356|0)>($i$0166|0);
      if ($357) {
       break L479;
      }
      $358 = (($ws$1175) + 4|0);
      (___fwritex($mb,$355,$f)|0);
      $359 = ($356>>>0)<($i$0166>>>0);
      if ($359) {
       $i$1174 = $356;$ws$1175 = $358;
      } else {
       break;
      }
     }
    }
   } while(0);
   $360 = ($343|0)==(8192);
   $or$cond$i63 = $360 & $345;
   if ($or$cond$i63) {
    $361 = (($w$1) - ($i$0166))|0;
    $362 = ($361>>>0)>(256);
    $363 = $362 ? 256 : $361;
    _memset(($pad$i|0),32,($363|0))|0;
    $364 = ($361>>>0)>(255);
    if ($364) {
     $$01$i64 = $361;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $365 = (($$01$i64) + -256)|0;
      $366 = ($365>>>0)>(255);
      if ($366) {
       $$01$i64 = $365;
      } else {
       $$0$lcssa$i66 = $365;
       break;
      }
     }
    } else {
     $$0$lcssa$i66 = $361;
    }
    (___fwritex($pad$i,$$0$lcssa$i66,$f)|0);
   }
   $367 = $345 ? $w$1 : $i$0166;
   $1045 = $229;$1046 = $1058;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $367;$l10n$0 = $l10n$3;
   continue;
  }
  $942 = $z$2;
  $943 = $a$2;
  $944 = (($942) - ($943))|0;
  $945 = ($p$5|0)<($944|0);
  $$p$5 = $945 ? $944 : $p$5;
  $946 = (($pl$2) + ($$p$5))|0;
  $947 = ($w$1|0)<($946|0);
  $w$2 = $947 ? $946 : $w$1;
  $948 = $fl$6 & 73728;
  $949 = ($948|0)==(0);
  $950 = ($946|0)<($w$2|0);
  $or$cond$i73 = $949 & $950;
  if ($or$cond$i73) {
   $951 = (($w$2) - ($946))|0;
   $952 = ($951>>>0)>(256);
   $953 = $952 ? 256 : $951;
   _memset(($pad$i|0),32,($953|0))|0;
   $954 = ($951>>>0)>(255);
   if ($954) {
    $$01$i74 = $951;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $955 = (($$01$i74) + -256)|0;
     $956 = ($955>>>0)>(255);
     if ($956) {
      $$01$i74 = $955;
     } else {
      $$0$lcssa$i76 = $955;
      break;
     }
    }
   } else {
    $$0$lcssa$i76 = $951;
   }
   (___fwritex($pad$i,$$0$lcssa$i76,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $957 = ($948|0)==(65536);
  $or$cond$i49 = $957 & $950;
  if ($or$cond$i49) {
   $958 = (($w$2) - ($946))|0;
   $959 = ($958>>>0)>(256);
   $960 = $959 ? 256 : $958;
   _memset(($pad$i|0),48,($960|0))|0;
   $961 = ($958>>>0)>(255);
   if ($961) {
    $$01$i50 = $958;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $962 = (($$01$i50) + -256)|0;
     $963 = ($962>>>0)>(255);
     if ($963) {
      $$01$i50 = $962;
     } else {
      $$0$lcssa$i52 = $962;
      break;
     }
    }
   } else {
    $$0$lcssa$i52 = $958;
   }
   (___fwritex($pad$i,$$0$lcssa$i52,$f)|0);
  }
  $964 = ($944|0)<($$p$5|0);
  if ($964) {
   $965 = (($$p$5) - ($944))|0;
   $966 = ($965>>>0)>(256);
   $967 = $966 ? 256 : $965;
   _memset(($pad$i|0),48,($967|0))|0;
   $968 = ($965>>>0)>(255);
   if ($968) {
    $$01$i35 = $965;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $969 = (($$01$i35) + -256)|0;
     $970 = ($969>>>0)>(255);
     if ($970) {
      $$01$i35 = $969;
     } else {
      $$0$lcssa$i37 = $969;
      break;
     }
    }
   } else {
    $$0$lcssa$i37 = $965;
   }
   (___fwritex($pad$i,$$0$lcssa$i37,$f)|0);
  }
  (___fwritex($a$2,$944,$f)|0);
  $971 = ($948|0)==(8192);
  $or$cond$i = $971 & $950;
  if (!($or$cond$i)) {
   $1045 = $1053;$1046 = $1054;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
   continue;
  }
  $972 = (($w$2) - ($946))|0;
  $973 = ($972>>>0)>(256);
  $974 = $973 ? 256 : $972;
  _memset(($pad$i|0),32,($974|0))|0;
  $975 = ($972>>>0)>(255);
  if ($975) {
   $$01$i = $972;
   while(1) {
    (___fwritex($pad$i,256,$f)|0);
    $976 = (($$01$i) + -256)|0;
    $977 = ($976>>>0)>(255);
    if ($977) {
     $$01$i = $976;
    } else {
     $$0$lcssa$i = $976;
     break;
    }
   }
  } else {
   $$0$lcssa$i = $972;
  }
  (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  $1045 = $1053;$1046 = $1054;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 344) {
  $978 = ($f|0)==(0|0);
  if (!($978)) {
   $$0 = $cnt$1;
   STACKTOP = sp;return ($$0|0);
  }
  $979 = ($l10n$0|0)==(0);
  if ($979) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$289 = 1;
  }
  while(1) {
   $980 = (($nl_type) + ($i$289<<2)|0);
   $981 = HEAP32[$980>>2]|0;
   $982 = ($981|0)==(0);
   if ($982) {
    $i$388 = $i$289;
    break;
   }
   $983 = (($nl_arg) + ($i$289<<3)|0);
   $984 = ($981>>>0)>(20);
   L531: do {
    if (!($984)) {
     do {
      switch ($981|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $985 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$983>>2] = $985;
       break L531;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1022 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1023 = $1022&255;
       $1024 = $1023 << 24 >> 24;
       $1025 = ($1024|0)<(0);
       $1026 = $1025 << 31 >> 31;
       $1027 = $983;
       $1028 = $1027;
       HEAP32[$1028>>2] = $1024;
       $1029 = (($1027) + 4)|0;
       $1030 = $1029;
       HEAP32[$1030>>2] = $1026;
       break L531;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1031 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1031 & 255;
       $1032 = $983;
       $1033 = $1032;
       HEAP32[$1033>>2] = $$mask$i;
       $1034 = (($1032) + 4)|0;
       $1035 = $1034;
       HEAP32[$1035>>2] = 0;
       break L531;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1036 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$983>>3] = $1036;
       break L531;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $986 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $987 = ($986|0)<(0);
       $988 = $987 << 31 >> 31;
       $989 = $983;
       $990 = $989;
       HEAP32[$990>>2] = $986;
       $991 = (($989) + 4)|0;
       $992 = $991;
       HEAP32[$992>>2] = $988;
       break L531;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $993 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $994 = $983;
       $995 = $994;
       HEAP32[$995>>2] = $993;
       $996 = (($994) + 4)|0;
       $997 = $996;
       HEAP32[$997>>2] = 0;
       break L531;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $998 = $arglist_current44;
       $999 = $998;
       $1000 = HEAP32[$999>>2]|0;
       $1001 = (($998) + 4)|0;
       $1002 = $1001;
       $1003 = HEAP32[$1002>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1004 = $983;
       $1005 = $1004;
       HEAP32[$1005>>2] = $1000;
       $1006 = (($1004) + 4)|0;
       $1007 = $1006;
       HEAP32[$1007>>2] = $1003;
       break L531;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1037 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$983>>3] = $1037;
       break L531;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1008 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1009 = $1008&65535;
       $1010 = $1009 << 16 >> 16;
       $1011 = ($1010|0)<(0);
       $1012 = $1011 << 31 >> 31;
       $1013 = $983;
       $1014 = $1013;
       HEAP32[$1014>>2] = $1010;
       $1015 = (($1013) + 4)|0;
       $1016 = $1015;
       HEAP32[$1016>>2] = $1012;
       break L531;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1017 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1017 & 65535;
       $1018 = $983;
       $1019 = $1018;
       HEAP32[$1019>>2] = $$mask1$i;
       $1020 = (($1018) + 4)|0;
       $1021 = $1020;
       HEAP32[$1021>>2] = 0;
       break L531;
       break;
      }
      default: {
       break L531;
      }
      }
     } while(0);
    }
   } while(0);
   $1038 = (($i$289) + 1)|0;
   $1039 = ($1038|0)<(10);
   if ($1039) {
    $i$289 = $1038;
   } else {
    $$0 = 1;
    label = 362;
    break;
   }
  }
  if ((label|0) == 362) {
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1042 = (($nl_type) + ($i$388<<2)|0);
   $1043 = HEAP32[$1042>>2]|0;
   $1044 = ($1043|0)==(0);
   $1041 = (($i$388) + 1)|0;
   if (!($1044)) {
    $$0 = -1;
    label = 362;
    break;
   }
   $1040 = ($1041|0)<(10);
   if ($1040) {
    $i$388 = $1041;
   } else {
    $$0 = 1;
    label = 362;
    break;
   }
  }
  if ((label|0) == 362) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 362) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=79160+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($l|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _atoi($s) {
 $s = $s|0;
 var $$0 = 0, $$1$ph = 0, $$12 = 0, $$neg1 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0$lcssa = 0, $n$03 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = (($$0) + 1|0);
  if ($3) {
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0>>0]|0;
 $6 = $5 << 24 >> 24;
 if ((($6|0) == 43)) {
  $neg$0 = 0;
  label = 5;
 } else if ((($6|0) == 45)) {
  $neg$0 = 1;
  label = 5;
 } else {
  $$1$ph = $$0;$8 = $5;$neg$1$ph = 0;
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$4>>0]|0;
  $$1$ph = $4;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $9 = (_isdigit($7)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $n$0$lcssa = 0;
  $20 = ($neg$1$ph|0)!=(0);
  $21 = (0 - ($n$0$lcssa))|0;
  $22 = $20 ? $n$0$lcssa : $21;
  STACKTOP = sp;return ($22|0);
 } else {
  $$12 = $$1$ph;$n$03 = 0;
 }
 while(1) {
  $11 = ($n$03*10)|0;
  $12 = (($$12) + 1|0);
  $13 = HEAP8[$$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $$neg1 = (($11) + 48)|0;
  $15 = (($$neg1) - ($14))|0;
  $16 = HEAP8[$12>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = (_isdigit($17)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   $n$0$lcssa = $15;
   break;
  } else {
   $$12 = $12;$n$03 = $15;
  }
 }
 $20 = ($neg$1$ph|0)!=(0);
 $21 = (0 - ($n$0$lcssa))|0;
 $22 = $20 ? $n$0$lcssa : $21;
 STACKTOP = sp;return ($22|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa34 = 0, $$013 = 0, $$1$lcssa = 0, $$17 = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond12 = 0, $s$0$lcssa = 0, $s$0$lcssa33 = 0, $s$014 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 $4 = ($n|0)==(0);
 $or$cond12 = $3 | $4;
 L1: do {
  if ($or$cond12) {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  } else {
   $5 = $c&255;
   $$013 = $n;$s$014 = $src;
   while(1) {
    $6 = HEAP8[$s$014>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa34 = $$013;$s$0$lcssa33 = $s$014;
     label = 6;
     break L1;
    }
    $8 = (($s$014) + 1|0);
    $9 = (($$013) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)==(0);
    $13 = ($9|0)==(0);
    $or$cond = $12 | $13;
    if ($or$cond) {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    } else {
     $$013 = $9;$s$014 = $8;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$3 = 0;$s$2 = $s$0$lcssa;
  } else {
   $$0$lcssa34 = $$0$lcssa;$s$0$lcssa33 = $s$0$lcssa;
   label = 6;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa33>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa34;$s$2 = $s$0$lcssa33;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa34>>>0)>(3);
    L11: do {
     if ($18) {
      $$17 = $$0$lcssa34;$w$08 = $s$0$lcssa33;
      while(1) {
       $19 = HEAP32[$w$08>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$17;$w$0$lcssa = $w$08;
        break L11;
       }
       $26 = (($w$08) + 4|0);
       $27 = (($$17) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$17 = $27;$w$08 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa34;$w$0$lcssa = $s$0$lcssa33;
     }
    } while(0);
    $29 = ($$1$lcssa|0)==(0);
    if ($29) {
     $$3 = 0;$s$2 = $w$0$lcssa;
    } else {
     $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     while(1) {
      $30 = HEAP8[$s$15>>0]|0;
      $31 = ($30<<24>>24)==($15<<24>>24);
      if ($31) {
       $$3 = $$24;$s$2 = $s$15;
       break L8;
      }
      $32 = (($s$15) + 1|0);
      $33 = (($$24) + -1)|0;
      $34 = ($33|0)==(0);
      if ($34) {
       $$3 = 0;$s$2 = $32;
       break;
      } else {
       $$24 = $33;$s$15 = $32;
      }
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 STACKTOP = sp;return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = (($l$04) + 1|0);
    $6 = (($r$05) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $1&255;
   $9 = $2&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 STACKTOP = sp;return ($11|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $2 | $3;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = (($$014) + 1|0);
   $5 = (($$05) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $8 | $9;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 STACKTOP = sp;return ($12|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$06 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
  STACKTOP = sp;return ($$03|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L4: do {
  if ($2) {
   $11 = 0;$r$0$lcssa = $_r;
  } else {
   $$08$in = $n;$5 = $1;$l$06 = $_l;$r$07 = $_r;
   while(1) {
    $$08 = (($$08$in) + -1)|0;
    $3 = HEAP8[$r$07>>0]|0;
    $notlhs = ($3<<24>>24)!=(0);
    $notrhs = ($$08|0)!=(0);
    $or$cond$not = $notrhs & $notlhs;
    $4 = ($5<<24>>24)==($3<<24>>24);
    $or$cond4 = $or$cond$not & $4;
    if (!($or$cond4)) {
     $11 = $5;$r$0$lcssa = $r$07;
     break L4;
    }
    $6 = (($l$06) + 1|0);
    $7 = (($r$07) + 1|0);
    $8 = HEAP8[$6>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if ($9) {
     $11 = 0;$r$0$lcssa = $7;
     break;
    } else {
     $$08$in = $$08;$5 = $8;$l$06 = $6;$r$07 = $7;
    }
   }
  }
 } while(0);
 $10 = $11&255;
 $12 = HEAP8[$r$0$lcssa>>0]|0;
 $13 = $12&255;
 $14 = (($10) - ($13))|0;
 $$03 = $14;
 STACKTOP = sp;return ($$03|0);
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _strcat(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    var pdestEnd = 0;
    pdestEnd = (pdest + (_strlen(pdest)|0))|0;
    do {
      HEAP8[((pdestEnd+i)>>0)]=HEAP8[((psrc+i)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _strncpy(pdest, psrc, num) {
    pdest = pdest|0; psrc = psrc|0; num = num|0;
    var padding = 0, curr = 0, i = 0;
    while ((i|0) < (num|0)) {
      curr = padding ? 0 : ((HEAP8[(((psrc)+(i))>>0)])|0);
      HEAP8[(((pdest)+(i))>>0)]=curr;
      padding = padding ? 1 : (((HEAP8[(((psrc)+(i))>>0)])|0) == 0);
      i = (i+1)|0;
    }
    return pdest|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

  
  function dynCall_iiii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return FUNCTION_TABLE_iiii[index&1](a1|0,a2|0,a3|0)|0;
  }

function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0; }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiii = [b0,_sn_write];

  return { _i64Subtract: _i64Subtract, _strcat: _strcat, _free: _free, _main: _main, _realloc: _realloc, _strncpy: _strncpy, _strlen: _strlen, _memset: _memset, _malloc: _malloc, _i64Add: _i64Add, _memcpy: _memcpy, _bitshift64Lshr: _bitshift64Lshr, _strcpy: _strcpy, _calloc: _calloc, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__strcat = asm["_strcat"]; asm["_strcat"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcat.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__strncpy = asm["_strncpy"]; asm["_strncpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strncpy.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__strcpy = asm["_strcpy"]; asm["_strcpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcpy.apply(null, arguments);
};

var real__calloc = asm["_calloc"]; asm["_calloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__calloc.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real_runPostSets = asm["runPostSets"]; asm["runPostSets"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_runPostSets.apply(null, arguments);
};
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _strcat = Module["_strcat"] = asm["_strcat"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _calloc = Module["_calloc"] = asm["_calloc"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting');
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = false;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



